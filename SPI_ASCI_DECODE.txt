Tulajdonságok:
- Ha a slave felébredt, akkor kb 2mA-es áram mérhető a 12-es cellán.
- Preambles:bevezető üzenet, ez ébreszti fel a szlavet, az üzent kódólva van
- A TX queue 7bájt mély.( framben jelezni kell a hoszt, ezért nem mindig használja ki a teljes 7 bájtot), de egybefüggő is lehet.
- Ha az Tx üzenet hosszabb mint 6bájt akkor beszúr D3 és C2 bájtot
- Daisy Chain Bus
- Az kiküldött üzeteket vissza haljuk.
- A HELLOALL utasítással inicalizálódik a busz, a válaszok számából lehet következtetni az eszközök számára
  ***A HELLOALL vissza adja az eszközök számát.
  ***Ha internal loopback-et használunk akkor az első HELLOALL nem adja vissza a slavek számát.
    Ha a hoszt ismeri a szlavek számát akkor célzottan be tudja állitani a loopback-et
 - Ha van slave a buszon, akkor az RX_Busy_Status bit időközönként 1-be áll, ha nincs akkor elveszett a busz
- ujra inditás után néhe meglepően sokat kell várni és ekkor a Rx_Status 0x11
---
2 Fajta parancs tipus:

- SPI parancsok (ezek parancsok a ASCI bridge-nek szólnak) iráskor az első bájt mindig a parancsbájt
pl:
  0xC0-WR_LD_Q -> irás a tx queue-ba
  0x93-RD_NXT_MSG -> a következő üzenet olvasása az rx queue-ből
  
- UART parancsok (ezek a slave eszközöknek szóló parancsok)
pl:
0x57:HELLOALL -> minden eszköz egyedi cimet kap, a válaszban benne lesz a cim
0x02:WRITEALL
0x03:READALL
0x04:Write Device - DA[4:0]|0b100
0x05:Read Device - DA[4:0]|0b101
---


Egy irás SPI buszon keresztűl az UART-ra
SPI cmd | msg length | UART cmd(reg addres) | LSB|MSB | PEC | Alive

Egy olvasás az SPI  buszon keresztűl az UART-ról
SPI cmd | msg length + 2bájt * szlévek száma (ennyit kell olvasni)|Uart cmd(0x03)| Slave.reg.addr| Data Chec seed |PEC| Alive seed|


DIN:DOUT
Ez egy minta tranzakció,
0xC0:0x00 -> WR_LD_Q SPI command byte
0x60:0x00 -> Message length = 6
0x04:0x00 -> WRITEDEVICE
0x1B:0x00 -> REG.ADDR -> DEVCFG2
0x00:0x00 -> LS byte of register data to be written
0x80:0x00 -> MS byte of register date to be written
0xA2:0x00 -> PEC byte
0x00:0x00 -> Alive counter





-------------------------------------------------
DIN:DOUT
---
0x0B:0x00 -> Read Tx Interrupt Register
0xAA:0x80 -> POR_Flag
---
0x15:0x00 -> Read Model Register
0xAA:0x84 -> Model 
---
0x017:0x00 -> Read Version Register
0xAA:0x14 -> Version
---
0x13:0x00 -> Read FEMA Register 
0xAA:0x00 -> None
---
0x08:0x00 -> Write Rx Interrupt Flag Register
0x00:0x00
---
0x08:0x00 -> Write Rx Interrupt Flag Register
0x00:0x00
---
0x04:0x00 -> Write Rx Interrupt Enable Register
0x02:0x00 -> Rx Stop INT Enable
---
0x06:0x00 -> Write Tx Interrupt Enable Register
0x00:0x00 -> None
---
0xC0:0x00 -> Write Configuration 1 Register
0x60:0x00 -> 2Mbps(default)
---
0x0E:0x00 -> Write Confiuration 2 Register
0x10:0x00 -> TX_Queue
---
0x10:0x00 -> Write Configuration 3 Register
0x05:0x00 -> Keep Alive 160us
---
0x30:0x00 -> Clear receive buffer
---
0xE0:0x00 ->
---
0x93:0x00 -> Read Next Message
---
0x01:0x00 -> Read RX_Status
0xAA:0x11 -> RX Overflow Status & RX Empty Status
---
...
---
0x01:0x00 -> Read RX_Status
0xAA:0x11 -> RX Overflow Status & RX Empty Status
---
0x30:0x00 -> Clear receive buffer
---
0xE0:0x00 -> ????
---
0xC0:0x00 -> WR_LD_Q SPI command byte
0x03:0x00 -> Message length = 6
0x57:0x00 -> HELLOALL command byte
0x00:0x00 -> Register address (0x00)
0x00:0x00 -> Initialization address of HELLOALL
---
0xB0:0x00 -> WR_NXT_LD_Q SPI command byte
---
0x01:0x00 -> Read RX_Status
0xAA:0x11 -> RX Overflow Status & RX Empty Status
---
...
---
0x01:0x00 -> Read RX_Status
0xAA:0x11 -> RX Overflow Status & RX Empty Status
---
0x93:0x00 -> Read Next Message
0xAA:0x00
0xAA:0x00
0xAA:0x00
0xAA:0x00
0xAA:0x00
0xAA:0x00
---
0x30:0x00 -> Enable Transmit Preambles mode
---
0xE0:0x00 -> Clear receive buffer
---
TRANSACTION SEQUENCE for UART Write and READ ---
---

itt konfigur�lja be az utols� eszk�z�n�n a loopot...
enn�lk�l nincs v�lasz
-ez k�veton z�rja a szlave a hurkot

0xC0:0x00 -> WR_LD_Q SPI command byte
0x60:0x00 -> Message length = 6
0x04:0x00 -> WRITEDEVICE
0x1B:0x00 -> REG.ADDR -> DEVCFG2
0x00:0x00 -> LS byte of register data to be written
0x80:0x00 -> MS byte of register date to be written
0xA2:0x00 -> PEC byte
0x00:0x00 -> Alive counter
---
0xB0:0x00 -> WR_NXT_LD_Q SPI command byte
---
0x01:0x00 -> Read RX_Status
0xAA:0x21 -> RX_Busy_Status & RX Empty Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x21 -> RX_Busy_Status & RX Empty Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x12 -> RX_Idle_Status & RX_STOP_Status
---
0x93:0x00
0xAA:0x04
0xAA:0x1B
0xAA:0x00
0xAA:0x80
0xAA:0xA2
0xAA:0x00
---
0x30:0x00 -> Enable Transmit Preambles mode
---
0xE0:0x00 -> Clear receive buffer
---
0xC0:0x00
0x07:0x00
0x05:0x00
0x1B:0x00
0x00:0x00
0x80:0x00
0x00:0x00
---
0xB0:0x00 -> WR_NXT_LD_Q SPI command byte
---
0x01:0x00 -> Read RX_Status
0xAA:0x21 -> RX_Busy_Status & RX Empty Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x21 -> RX_Busy_Status & RX Empty Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x20 -> RX_Busy_Status
---
0x01:0x00 -> Read RX_Status
0xAA:0x22 -> RX_Busy_Status & RX_STOP_Status
