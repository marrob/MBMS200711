
MBMS200711.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f20  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  08009030  08009030  00019030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009574  08009574  000209b8  2**0
                  CONTENTS
  4 .ARM          00000008  08009574  08009574  00019574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800957c  0800957c  000209b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800957c  0800957c  0001957c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009584  08009584  00019584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009b8  20000000  08009588  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200009b8  08009f40  000209b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c60  08009f40  00020c60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a06b  00000000  00000000  000209e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2f  00000000  00000000  0002aa4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002c880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002d1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018472  00000000  00000000  0002da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ab9  00000000  00000000  00045eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000858ec  00000000  00000000  0004f983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d526f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003988  00000000  00000000  000d52c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200009b8 	.word	0x200009b8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009018 	.word	0x08009018

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200009bc 	.word	0x200009bc
 800014c:	08009018 	.word	0x08009018

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9c:	f000 b96e 	b.w	8000d7c <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	9e08      	ldr	r6, [sp, #32]
 8000abe:	460d      	mov	r5, r1
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	468e      	mov	lr, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f040 8083 	bne.w	8000bd0 <__udivmoddi4+0x118>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4617      	mov	r7, r2
 8000ace:	d947      	bls.n	8000b60 <__udivmoddi4+0xa8>
 8000ad0:	fab2 f382 	clz	r3, r2
 8000ad4:	b14b      	cbz	r3, 8000aea <__udivmoddi4+0x32>
 8000ad6:	f1c3 0120 	rsb	r1, r3, #32
 8000ada:	fa05 fe03 	lsl.w	lr, r5, r3
 8000ade:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae2:	409f      	lsls	r7, r3
 8000ae4:	ea41 0e0e 	orr.w	lr, r1, lr
 8000ae8:	409c      	lsls	r4, r3
 8000aea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000aee:	fbbe fcf8 	udiv	ip, lr, r8
 8000af2:	fa1f f987 	uxth.w	r9, r7
 8000af6:	fb08 e21c 	mls	r2, r8, ip, lr
 8000afa:	fb0c f009 	mul.w	r0, ip, r9
 8000afe:	0c21      	lsrs	r1, r4, #16
 8000b00:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000b04:	4290      	cmp	r0, r2
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x66>
 8000b08:	18ba      	adds	r2, r7, r2
 8000b0a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000b0e:	f080 8118 	bcs.w	8000d42 <__udivmoddi4+0x28a>
 8000b12:	4290      	cmp	r0, r2
 8000b14:	f240 8115 	bls.w	8000d42 <__udivmoddi4+0x28a>
 8000b18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b1c:	443a      	add	r2, r7
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	fbb2 f0f8 	udiv	r0, r2, r8
 8000b24:	fb08 2210 	mls	r2, r8, r0, r2
 8000b28:	fb00 f109 	mul.w	r1, r0, r9
 8000b2c:	b2a4      	uxth	r4, r4
 8000b2e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b32:	42a1      	cmp	r1, r4
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0x92>
 8000b36:	193c      	adds	r4, r7, r4
 8000b38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3c:	f080 8103 	bcs.w	8000d46 <__udivmoddi4+0x28e>
 8000b40:	42a1      	cmp	r1, r4
 8000b42:	f240 8100 	bls.w	8000d46 <__udivmoddi4+0x28e>
 8000b46:	3802      	subs	r0, #2
 8000b48:	443c      	add	r4, r7
 8000b4a:	1a64      	subs	r4, r4, r1
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b52:	b11e      	cbz	r6, 8000b5c <__udivmoddi4+0xa4>
 8000b54:	2200      	movs	r2, #0
 8000b56:	40dc      	lsrs	r4, r3
 8000b58:	e9c6 4200 	strd	r4, r2, [r6]
 8000b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b60:	b902      	cbnz	r2, 8000b64 <__udivmoddi4+0xac>
 8000b62:	deff      	udf	#255	; 0xff
 8000b64:	fab2 f382 	clz	r3, r2
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d14f      	bne.n	8000c0c <__udivmoddi4+0x154>
 8000b6c:	1a8d      	subs	r5, r1, r2
 8000b6e:	2101      	movs	r1, #1
 8000b70:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000b74:	fa1f f882 	uxth.w	r8, r2
 8000b78:	fbb5 fcfe 	udiv	ip, r5, lr
 8000b7c:	fb0e 551c 	mls	r5, lr, ip, r5
 8000b80:	fb08 f00c 	mul.w	r0, r8, ip
 8000b84:	0c22      	lsrs	r2, r4, #16
 8000b86:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000b8a:	42a8      	cmp	r0, r5
 8000b8c:	d907      	bls.n	8000b9e <__udivmoddi4+0xe6>
 8000b8e:	197d      	adds	r5, r7, r5
 8000b90:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000b94:	d202      	bcs.n	8000b9c <__udivmoddi4+0xe4>
 8000b96:	42a8      	cmp	r0, r5
 8000b98:	f200 80e9 	bhi.w	8000d6e <__udivmoddi4+0x2b6>
 8000b9c:	4694      	mov	ip, r2
 8000b9e:	1a2d      	subs	r5, r5, r0
 8000ba0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000ba4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000ba8:	fb08 f800 	mul.w	r8, r8, r0
 8000bac:	b2a4      	uxth	r4, r4
 8000bae:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bb2:	45a0      	cmp	r8, r4
 8000bb4:	d907      	bls.n	8000bc6 <__udivmoddi4+0x10e>
 8000bb6:	193c      	adds	r4, r7, r4
 8000bb8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bbc:	d202      	bcs.n	8000bc4 <__udivmoddi4+0x10c>
 8000bbe:	45a0      	cmp	r8, r4
 8000bc0:	f200 80d9 	bhi.w	8000d76 <__udivmoddi4+0x2be>
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	eba4 0408 	sub.w	r4, r4, r8
 8000bca:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bce:	e7c0      	b.n	8000b52 <__udivmoddi4+0x9a>
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x12e>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	f000 80b1 	beq.w	8000d3c <__udivmoddi4+0x284>
 8000bda:	2100      	movs	r1, #0
 8000bdc:	e9c6 0500 	strd	r0, r5, [r6]
 8000be0:	4608      	mov	r0, r1
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	fab3 f183 	clz	r1, r3
 8000bea:	2900      	cmp	r1, #0
 8000bec:	d14b      	bne.n	8000c86 <__udivmoddi4+0x1ce>
 8000bee:	42ab      	cmp	r3, r5
 8000bf0:	d302      	bcc.n	8000bf8 <__udivmoddi4+0x140>
 8000bf2:	4282      	cmp	r2, r0
 8000bf4:	f200 80b9 	bhi.w	8000d6a <__udivmoddi4+0x2b2>
 8000bf8:	1a84      	subs	r4, r0, r2
 8000bfa:	eb65 0303 	sbc.w	r3, r5, r3
 8000bfe:	2001      	movs	r0, #1
 8000c00:	469e      	mov	lr, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d0aa      	beq.n	8000b5c <__udivmoddi4+0xa4>
 8000c06:	e9c6 4e00 	strd	r4, lr, [r6]
 8000c0a:	e7a7      	b.n	8000b5c <__udivmoddi4+0xa4>
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	f1c3 0220 	rsb	r2, r3, #32
 8000c12:	40d1      	lsrs	r1, r2
 8000c14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c18:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c1c:	fa1f f887 	uxth.w	r8, r7
 8000c20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c24:	fa24 f202 	lsr.w	r2, r4, r2
 8000c28:	409d      	lsls	r5, r3
 8000c2a:	fb00 fc08 	mul.w	ip, r0, r8
 8000c2e:	432a      	orrs	r2, r5
 8000c30:	0c15      	lsrs	r5, r2, #16
 8000c32:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000c36:	45ac      	cmp	ip, r5
 8000c38:	fa04 f403 	lsl.w	r4, r4, r3
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0x19a>
 8000c3e:	197d      	adds	r5, r7, r5
 8000c40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c44:	f080 808f 	bcs.w	8000d66 <__udivmoddi4+0x2ae>
 8000c48:	45ac      	cmp	ip, r5
 8000c4a:	f240 808c 	bls.w	8000d66 <__udivmoddi4+0x2ae>
 8000c4e:	3802      	subs	r0, #2
 8000c50:	443d      	add	r5, r7
 8000c52:	eba5 050c 	sub.w	r5, r5, ip
 8000c56:	fbb5 f1fe 	udiv	r1, r5, lr
 8000c5a:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000c5e:	fb01 f908 	mul.w	r9, r1, r8
 8000c62:	b295      	uxth	r5, r2
 8000c64:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c68:	45a9      	cmp	r9, r5
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x1c4>
 8000c6c:	197d      	adds	r5, r7, r5
 8000c6e:	f101 32ff 	add.w	r2, r1, #4294967295
 8000c72:	d274      	bcs.n	8000d5e <__udivmoddi4+0x2a6>
 8000c74:	45a9      	cmp	r9, r5
 8000c76:	d972      	bls.n	8000d5e <__udivmoddi4+0x2a6>
 8000c78:	3902      	subs	r1, #2
 8000c7a:	443d      	add	r5, r7
 8000c7c:	eba5 0509 	sub.w	r5, r5, r9
 8000c80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c84:	e778      	b.n	8000b78 <__udivmoddi4+0xc0>
 8000c86:	f1c1 0720 	rsb	r7, r1, #32
 8000c8a:	408b      	lsls	r3, r1
 8000c8c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c90:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c94:	fa25 f407 	lsr.w	r4, r5, r7
 8000c98:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c9c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000ca0:	fa1f f88c 	uxth.w	r8, ip
 8000ca4:	fb0e 4419 	mls	r4, lr, r9, r4
 8000ca8:	fa20 f307 	lsr.w	r3, r0, r7
 8000cac:	fb09 fa08 	mul.w	sl, r9, r8
 8000cb0:	408d      	lsls	r5, r1
 8000cb2:	431d      	orrs	r5, r3
 8000cb4:	0c2b      	lsrs	r3, r5, #16
 8000cb6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cba:	45a2      	cmp	sl, r4
 8000cbc:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc0:	fa00 f301 	lsl.w	r3, r0, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x222>
 8000cc6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cca:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cce:	d248      	bcs.n	8000d62 <__udivmoddi4+0x2aa>
 8000cd0:	45a2      	cmp	sl, r4
 8000cd2:	d946      	bls.n	8000d62 <__udivmoddi4+0x2aa>
 8000cd4:	f1a9 0902 	sub.w	r9, r9, #2
 8000cd8:	4464      	add	r4, ip
 8000cda:	eba4 040a 	sub.w	r4, r4, sl
 8000cde:	fbb4 f0fe 	udiv	r0, r4, lr
 8000ce2:	fb0e 4410 	mls	r4, lr, r0, r4
 8000ce6:	fb00 fa08 	mul.w	sl, r0, r8
 8000cea:	b2ad      	uxth	r5, r5
 8000cec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cf0:	45a2      	cmp	sl, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x24e>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cfc:	d22d      	bcs.n	8000d5a <__udivmoddi4+0x2a2>
 8000cfe:	45a2      	cmp	sl, r4
 8000d00:	d92b      	bls.n	8000d5a <__udivmoddi4+0x2a2>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4464      	add	r4, ip
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	454c      	cmp	r4, r9
 8000d14:	46c6      	mov	lr, r8
 8000d16:	464d      	mov	r5, r9
 8000d18:	d319      	bcc.n	8000d4e <__udivmoddi4+0x296>
 8000d1a:	d016      	beq.n	8000d4a <__udivmoddi4+0x292>
 8000d1c:	b15e      	cbz	r6, 8000d36 <__udivmoddi4+0x27e>
 8000d1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d22:	eb64 0405 	sbc.w	r4, r4, r5
 8000d26:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	40cc      	lsrs	r4, r1
 8000d32:	e9c6 7400 	strd	r7, r4, [r6]
 8000d36:	2100      	movs	r1, #0
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	4630      	mov	r0, r6
 8000d40:	e70c      	b.n	8000b5c <__udivmoddi4+0xa4>
 8000d42:	468c      	mov	ip, r1
 8000d44:	e6eb      	b.n	8000b1e <__udivmoddi4+0x66>
 8000d46:	4610      	mov	r0, r2
 8000d48:	e6ff      	b.n	8000b4a <__udivmoddi4+0x92>
 8000d4a:	4543      	cmp	r3, r8
 8000d4c:	d2e6      	bcs.n	8000d1c <__udivmoddi4+0x264>
 8000d4e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d52:	eb69 050c 	sbc.w	r5, r9, ip
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7e0      	b.n	8000d1c <__udivmoddi4+0x264>
 8000d5a:	4628      	mov	r0, r5
 8000d5c:	e7d3      	b.n	8000d06 <__udivmoddi4+0x24e>
 8000d5e:	4611      	mov	r1, r2
 8000d60:	e78c      	b.n	8000c7c <__udivmoddi4+0x1c4>
 8000d62:	4681      	mov	r9, r0
 8000d64:	e7b9      	b.n	8000cda <__udivmoddi4+0x222>
 8000d66:	4608      	mov	r0, r1
 8000d68:	e773      	b.n	8000c52 <__udivmoddi4+0x19a>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e749      	b.n	8000c02 <__udivmoddi4+0x14a>
 8000d6e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d72:	443d      	add	r5, r7
 8000d74:	e713      	b.n	8000b9e <__udivmoddi4+0xe6>
 8000d76:	3802      	subs	r0, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	e724      	b.n	8000bc6 <__udivmoddi4+0x10e>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d84:	f000 fd94 	bl	80018b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /*** LiveLed ***/
  hLiveLed.LedOffFnPtr = &LiveLedOff;
 8000d88:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <main+0x90>)
 8000d8a:	4a22      	ldr	r2, [pc, #136]	; (8000e14 <main+0x94>)
 8000d8c:	609a      	str	r2, [r3, #8]
  hLiveLed.LedOnFnPtr = &LiveLedOn;
 8000d8e:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <main+0x90>)
 8000d90:	4a21      	ldr	r2, [pc, #132]	; (8000e18 <main+0x98>)
 8000d92:	605a      	str	r2, [r3, #4]
  hLiveLed.HalfPeriodTimeMs = 500;
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <main+0x90>)
 8000d96:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d9a:	601a      	str	r2, [r3, #0]
  LiveLedInit(&hLiveLed);
 8000d9c:	481c      	ldr	r0, [pc, #112]	; (8000e10 <main+0x90>)
 8000d9e:	f000 fd40 	bl	8001822 <LiveLedInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da2:	f000 f851 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da6:	f000 f8f5 	bl	8000f94 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000daa:	f000 f893 	bl	8000ed4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000dae:	f000 f8c7 	bl	8000f40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  DelayMs(500);
 8000db2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db6:	f000 fd1f 	bl	80017f8 <DelayMs>

  UsbPullUp();
 8000dba:	f000 faed 	bl	8001398 <UsbPullUp>


  printf(VT100_CLEARSCREEN);
 8000dbe:	4817      	ldr	r0, [pc, #92]	; (8000e1c <main+0x9c>)
 8000dc0:	f002 f996 	bl	80030f0 <printf>
  printf(VT100_CURSORHOME);
 8000dc4:	4816      	ldr	r0, [pc, #88]	; (8000e20 <main+0xa0>)
 8000dc6:	f002 f993 	bl	80030f0 <printf>
  printf(VT100_ATTR_RESET);
 8000dca:	4816      	ldr	r0, [pc, #88]	; (8000e24 <main+0xa4>)
 8000dcc:	f002 f990 	bl	80030f0 <printf>

#ifdef DEBUG
  printf(VT100_ATTR_RED);
 8000dd0:	4815      	ldr	r0, [pc, #84]	; (8000e28 <main+0xa8>)
 8000dd2:	f002 f98d 	bl	80030f0 <printf>
    DeviceUsrLog("This is a DEBUG version.");
 8000dd6:	4815      	ldr	r0, [pc, #84]	; (8000e2c <main+0xac>)
 8000dd8:	f002 f98a 	bl	80030f0 <printf>
 8000ddc:	4814      	ldr	r0, [pc, #80]	; (8000e30 <main+0xb0>)
 8000dde:	f002 f9df 	bl	80031a0 <puts>
  printf(VT100_ATTR_RESET);
 8000de2:	4810      	ldr	r0, [pc, #64]	; (8000e24 <main+0xa4>)
 8000de4:	f002 f984 	bl	80030f0 <printf>
#endif

  DeviceUsrLog("Manufacturer:%s, Name:%s, Version:%04X",DEVICE_MNF, DEVICE_NAME, DEVICE_FW);
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <main+0xb4>)
 8000dea:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <main+0xb8>)
 8000dec:	4913      	ldr	r1, [pc, #76]	; (8000e3c <main+0xbc>)
 8000dee:	4814      	ldr	r0, [pc, #80]	; (8000e40 <main+0xc0>)
 8000df0:	f002 f97e 	bl	80030f0 <printf>
 8000df4:	480e      	ldr	r0, [pc, #56]	; (8000e30 <main+0xb0>)
 8000df6:	f002 f9d3 	bl	80031a0 <puts>


UartRxTimestamp = HAL_GetTick();
 8000dfa:	f000 fdb1 	bl	8001960 <HAL_GetTick>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <main+0xc4>)
 8000e02:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    LiveLedTask(&hLiveLed);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <main+0x90>)
 8000e06:	f000 fd23 	bl	8001850 <LiveLedTask>
   // CDC_Task_FS();
    //TestVcpTask();
    AsciTask();
 8000e0a:	f000 f951 	bl	80010b0 <AsciTask>
    LiveLedTask(&hLiveLed);
 8000e0e:	e7f9      	b.n	8000e04 <main+0x84>
 8000e10:	20000a0c 	.word	0x20000a0c
 8000e14:	08001381 	.word	0x08001381
 8000e18:	08001369 	.word	0x08001369
 8000e1c:	08009030 	.word	0x08009030
 8000e20:	08009038 	.word	0x08009038
 8000e24:	0800903c 	.word	0x0800903c
 8000e28:	08009044 	.word	0x08009044
 8000e2c:	0800904c 	.word	0x0800904c
 8000e30:	08009068 	.word	0x08009068
 8000e34:	00200720 	.word	0x00200720
 8000e38:	0800906c 	.word	0x0800906c
 8000e3c:	08009078 	.word	0x08009078
 8000e40:	08009088 	.word	0x08009088
 8000e44:	20000b40 	.word	0x20000b40

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b090      	sub	sp, #64	; 0x40
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0318 	add.w	r3, r7, #24
 8000e52:	2228      	movs	r2, #40	; 0x28
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 f942 	bl	80030e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e86:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8c:	f107 0318 	add.w	r3, r7, #24
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 ffef 	bl	8001e74 <HAL_RCC_OscConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e9c:	f000 fa82 	bl	80013a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2102      	movs	r1, #2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 fa5a 	bl	8002374 <HAL_RCC_ClockConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ec6:	f000 fa6d 	bl	80013a4 <Error_Handler>
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3740      	adds	r7, #64	; 0x40
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_SPI2_Init+0x64>)
 8000eda:	4a18      	ldr	r2, [pc, #96]	; (8000f3c <MX_SPI2_Init+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_SPI2_Init+0x64>)
 8000ee0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ee4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_SPI2_Init+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_SPI2_Init+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_SPI2_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_SPI2_Init+0x64>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_SPI2_Init+0x64>)
 8000f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_SPI2_Init+0x64>)
 8000f08:	2210      	movs	r2, #16
 8000f0a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <MX_SPI2_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_SPI2_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <MX_SPI2_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_SPI2_Init+0x64>)
 8000f20:	220a      	movs	r2, #10
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_SPI2_Init+0x64>)
 8000f26:	f001 fbbf 	bl	80026a8 <HAL_SPI_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f30:	f000 fa38 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000a20 	.word	0x20000a20
 8000f3c:	40003800 	.word	0x40003800

08000f40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <MX_USART1_UART_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f78:	f001 ff9e 	bl	8002eb8 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f82:	f000 fa0f 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000b44 	.word	0x20000b44
 8000f90:	40013800 	.word	0x40013800

08000f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa8:	4b38      	ldr	r3, [pc, #224]	; (800108c <MX_GPIO_Init+0xf8>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a37      	ldr	r2, [pc, #220]	; (800108c <MX_GPIO_Init+0xf8>)
 8000fae:	f043 0320 	orr.w	r3, r3, #32
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b35      	ldr	r3, [pc, #212]	; (800108c <MX_GPIO_Init+0xf8>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0320 	and.w	r3, r3, #32
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b32      	ldr	r3, [pc, #200]	; (800108c <MX_GPIO_Init+0xf8>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a31      	ldr	r2, [pc, #196]	; (800108c <MX_GPIO_Init+0xf8>)
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <MX_GPIO_Init+0xf8>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	; (800108c <MX_GPIO_Init+0xf8>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a2b      	ldr	r2, [pc, #172]	; (800108c <MX_GPIO_Init+0xf8>)
 8000fde:	f043 0308 	orr.w	r3, r3, #8
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b29      	ldr	r3, [pc, #164]	; (800108c <MX_GPIO_Init+0xf8>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LIVE_LED_Pin|LED_R_Pin|LED_L_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f649 0140 	movw	r1, #38976	; 0x9840
 8000ff6:	4826      	ldr	r0, [pc, #152]	; (8001090 <MX_GPIO_Init+0xfc>)
 8000ff8:	f000 ff24 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EEP_ON_GPIO_Port, EEP_ON_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2104      	movs	r1, #4
 8001000:	4824      	ldr	r0, [pc, #144]	; (8001094 <MX_GPIO_Init+0x100>)
 8001002:	f000 ff1f 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100c:	4821      	ldr	r0, [pc, #132]	; (8001094 <MX_GPIO_Init+0x100>)
 800100e:	f000 ff19 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LIVE_LED_Pin LED_R_Pin LED_L_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LIVE_LED_Pin|LED_R_Pin|LED_L_Pin|LED_G_Pin;
 8001012:	f649 0340 	movw	r3, #38976	; 0x9840
 8001016:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2302      	movs	r3, #2
 8001022:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4819      	ldr	r0, [pc, #100]	; (8001090 <MX_GPIO_Init+0xfc>)
 800102c:	f000 fd86 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : EEP_ON_Pin */
  GPIO_InitStruct.Pin = EEP_ON_Pin;
 8001030:	2304      	movs	r3, #4
 8001032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2302      	movs	r3, #2
 800103e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EEP_ON_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4619      	mov	r1, r3
 8001046:	4813      	ldr	r0, [pc, #76]	; (8001094 <MX_GPIO_Init+0x100>)
 8001048:	f000 fd78 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_CS_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin;
 800104c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001056:	2301      	movs	r3, #1
 8001058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAX_CS_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4619      	mov	r1, r3
 8001064:	480b      	ldr	r0, [pc, #44]	; (8001094 <MX_GPIO_Init+0x100>)
 8001066:	f000 fd69 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_INT_Pin */
  GPIO_InitStruct.Pin = MAX_INT_Pin;
 800106a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MAX_INT_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4619      	mov	r1, r3
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_GPIO_Init+0xfc>)
 8001080:	f000 fd5c 	bl	8001b3c <HAL_GPIO_Init>

}
 8001084:	bf00      	nop
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40021000 	.word	0x40021000
 8001090:	40010800 	.word	0x40010800
 8001094:	40010c00 	.word	0x40010c00

08001098 <_write>:
//  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 100);
//  return len;
//}

int _write(int file, char *ptr, int len)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  return len;
 80010a4:	687b      	ldr	r3, [r7, #4]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <AsciTask>:
    DeviceErrLog("RX_STATUS_ERROR");
  }

}
void AsciTask(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b092      	sub	sp, #72	; 0x48
 80010b4:	af00      	add	r7, sp, #0
  uint8_t rxStatus;
  uint8_t ptrBefore;
  uint8_t ptrAfter;


  AsciReadRegU8(RX_STATUS_READ_REG, &rxStatus);
 80010b6:	1cfb      	adds	r3, r7, #3
 80010b8:	4619      	mov	r1, r3
 80010ba:	2001      	movs	r0, #1
 80010bc:	f000 f8b4 	bl	8001228 <AsciReadRegU8>

  if(rxStatus & RX_STATUS_STOP )
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d041      	beq.n	800114e <AsciTask+0x9e>
  {

    AsciReadRegU8(RX_READ_PTR_REG, &ptrBefore);
 80010ca:	1cbb      	adds	r3, r7, #2
 80010cc:	4619      	mov	r1, r3
 80010ce:	2097      	movs	r0, #151	; 0x97
 80010d0:	f000 f8aa 	bl	8001228 <AsciReadRegU8>
    AsciReadReg(RX_NXT_MSG_REG, msgBuffer, sizeof(msgBuffer));
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	223e      	movs	r2, #62	; 0x3e
 80010d8:	4619      	mov	r1, r3
 80010da:	2093      	movs	r0, #147	; 0x93
 80010dc:	f000 f8b6 	bl	800124c <AsciReadReg>
    AsciReadRegU8(RX_READ_PTR_REG, &ptrAfter);
 80010e0:	1c7b      	adds	r3, r7, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	2097      	movs	r0, #151	; 0x97
 80010e6:	f000 f89f 	bl	8001228 <AsciReadRegU8>

    uint32_t reltiveTime = HAL_GetTick() - UartRxTimestamp;
 80010ea:	f000 fc39 	bl	8001960 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	4b2c      	ldr	r3, [pc, #176]	; (80011a4 <AsciTask+0xf4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	647b      	str	r3, [r7, #68]	; 0x44
    UartRxTimestamp = HAL_GetTick();
 80010f8:	f000 fc32 	bl	8001960 <HAL_GetTick>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a29      	ldr	r2, [pc, #164]	; (80011a4 <AsciTask+0xf4>)
 8001100:	6013      	str	r3, [r2, #0]
    //sprintf(String2,"ptrBefore:%02d, ptrAfter:%02d, value: %s ",ptrBefore,  ptrAfter, StringPlusDataToHexaString(msgBuffer, String, ptrAfter - ptrBefore));
    sprintf(String2,"R+%06ldms:  %s", reltiveTime, StringPlusDataToHexaString(msgBuffer, String, ptrAfter - ptrBefore));
 8001102:	787b      	ldrb	r3, [r7, #1]
 8001104:	461a      	mov	r2, r3
 8001106:	78bb      	ldrb	r3, [r7, #2]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	461a      	mov	r2, r3
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	4926      	ldr	r1, [pc, #152]	; (80011a8 <AsciTask+0xf8>)
 8001110:	4618      	mov	r0, r3
 8001112:	f000 fb35 	bl	8001780 <StringPlusDataToHexaString>
 8001116:	4603      	mov	r3, r0
 8001118:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800111a:	4924      	ldr	r1, [pc, #144]	; (80011ac <AsciTask+0xfc>)
 800111c:	4824      	ldr	r0, [pc, #144]	; (80011b0 <AsciTask+0x100>)
 800111e:	f002 f847 	bl	80031b0 <sprintf>
    DeviceDbgLog(String2);
 8001122:	4824      	ldr	r0, [pc, #144]	; (80011b4 <AsciTask+0x104>)
 8001124:	f001 ffe4 	bl	80030f0 <printf>
 8001128:	4823      	ldr	r0, [pc, #140]	; (80011b8 <AsciTask+0x108>)
 800112a:	f001 ffe1 	bl	80030f0 <printf>
 800112e:	4820      	ldr	r0, [pc, #128]	; (80011b0 <AsciTask+0x100>)
 8001130:	f001 ffde 	bl	80030f0 <printf>
 8001134:	4821      	ldr	r0, [pc, #132]	; (80011bc <AsciTask+0x10c>)
 8001136:	f001 ffdb 	bl	80030f0 <printf>
 800113a:	4821      	ldr	r0, [pc, #132]	; (80011c0 <AsciTask+0x110>)
 800113c:	f002 f830 	bl	80031a0 <puts>

    /*Clear Buffer*/
    AsciWrite((uint8_t[]){0xE0}, 1);
 8001140:	23e0      	movs	r3, #224	; 0xe0
 8001142:	703b      	strb	r3, [r7, #0]
 8001144:	463b      	mov	r3, r7
 8001146:	2101      	movs	r1, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f843 	bl	80011d4 <AsciWrite>
  }

  if(rxStatus & RX_STATUS_OVER)
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00e      	beq.n	8001176 <AsciTask+0xc6>
  {
    DeviceErrLog("RX_STATUS_OVER");
 8001158:	481a      	ldr	r0, [pc, #104]	; (80011c4 <AsciTask+0x114>)
 800115a:	f001 ffc9 	bl	80030f0 <printf>
 800115e:	481a      	ldr	r0, [pc, #104]	; (80011c8 <AsciTask+0x118>)
 8001160:	f001 ffc6 	bl	80030f0 <printf>
 8001164:	4819      	ldr	r0, [pc, #100]	; (80011cc <AsciTask+0x11c>)
 8001166:	f001 ffc3 	bl	80030f0 <printf>
 800116a:	4814      	ldr	r0, [pc, #80]	; (80011bc <AsciTask+0x10c>)
 800116c:	f001 ffc0 	bl	80030f0 <printf>
 8001170:	4813      	ldr	r0, [pc, #76]	; (80011c0 <AsciTask+0x110>)
 8001172:	f002 f815 	bl	80031a0 <puts>
  }
  if(rxStatus & RX_STATUS_ERROR)
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	b25b      	sxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	da0e      	bge.n	800119c <AsciTask+0xec>
  {
    DeviceErrLog("RX_STATUS_ERROR");
 800117e:	4811      	ldr	r0, [pc, #68]	; (80011c4 <AsciTask+0x114>)
 8001180:	f001 ffb6 	bl	80030f0 <printf>
 8001184:	4810      	ldr	r0, [pc, #64]	; (80011c8 <AsciTask+0x118>)
 8001186:	f001 ffb3 	bl	80030f0 <printf>
 800118a:	4811      	ldr	r0, [pc, #68]	; (80011d0 <AsciTask+0x120>)
 800118c:	f001 ffb0 	bl	80030f0 <printf>
 8001190:	480a      	ldr	r0, [pc, #40]	; (80011bc <AsciTask+0x10c>)
 8001192:	f001 ffad 	bl	80030f0 <printf>
 8001196:	480a      	ldr	r0, [pc, #40]	; (80011c0 <AsciTask+0x110>)
 8001198:	f002 f802 	bl	80031a0 <puts>
  }

}
 800119c:	bf00      	nop
 800119e:	3748      	adds	r7, #72	; 0x48
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000b40 	.word	0x20000b40
 80011a8:	20000b84 	.word	0x20000b84
 80011ac:	0800916c 	.word	0x0800916c
 80011b0:	20000a78 	.word	0x20000a78
 80011b4:	080090b0 	.word	0x080090b0
 80011b8:	080090b8 	.word	0x080090b8
 80011bc:	0800903c 	.word	0x0800903c
 80011c0:	08009068 	.word	0x08009068
 80011c4:	08009044 	.word	0x08009044
 80011c8:	0800913c 	.word	0x0800913c
 80011cc:	0800914c 	.word	0x0800914c
 80011d0:	0800915c 	.word	0x0800915c

080011d4 <AsciWrite>:
    return 0;
}


uint8_t AsciWrite(uint8_t *writeBuffer, uint8_t size)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
  uint8_t status = MAX_ASCI_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ea:	480d      	ldr	r0, [pc, #52]	; (8001220 <AsciWrite+0x4c>)
 80011ec:	f000 fe2a 	bl	8001e44 <HAL_GPIO_WritePin>

  if(HAL_SPI_Transmit(&hspi2, writeBuffer, size, 100)!= HAL_OK)
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	2364      	movs	r3, #100	; 0x64
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	480a      	ldr	r0, [pc, #40]	; (8001224 <AsciWrite+0x50>)
 80011fa:	f001 fad9 	bl	80027b0 <HAL_SPI_Transmit>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <AsciWrite+0x34>
  {
    status = MAX_ASCI_IO_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
  }

  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120e:	4804      	ldr	r0, [pc, #16]	; (8001220 <AsciWrite+0x4c>)
 8001210:	f000 fe18 	bl	8001e44 <HAL_GPIO_WritePin>

  return status;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40010c00 	.word	0x40010c00
 8001224:	20000a20 	.word	0x20000a20

08001228 <AsciReadRegU8>:


uint8_t AsciReadRegU8(uint8_t regAddr,  uint8_t *byte)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  return AsciReadReg(regAddr,  byte, 1 );
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2201      	movs	r2, #1
 8001238:	6839      	ldr	r1, [r7, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f806 	bl	800124c <AsciReadReg>
 8001240:	4603      	mov	r3, r0

}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <AsciReadReg>:

uint8_t AsciReadReg(uint8_t regAddr,  uint8_t *rxBuffer, uint8_t size)
{
 800124c:	b5b0      	push	{r4, r5, r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af02      	add	r7, sp, #8
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	4613      	mov	r3, r2
 800125a:	71bb      	strb	r3, [r7, #6]
 800125c:	466b      	mov	r3, sp
 800125e:	461d      	mov	r5, r3
  uint8_t status = MAX_ASCI_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	76fb      	strb	r3, [r7, #27]
  uint8_t txBuffer[size + 1];
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	1c5c      	adds	r4, r3, #1
 8001268:	1e63      	subs	r3, r4, #1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	4623      	mov	r3, r4
 800126e:	4618      	mov	r0, r3
 8001270:	f04f 0100 	mov.w	r1, #0
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	00cb      	lsls	r3, r1, #3
 800127e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001282:	00c2      	lsls	r2, r0, #3
 8001284:	4623      	mov	r3, r4
 8001286:	4618      	mov	r0, r3
 8001288:	f04f 0100 	mov.w	r1, #0
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	00cb      	lsls	r3, r1, #3
 8001296:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800129a:	00c2      	lsls	r2, r0, #3
 800129c:	4623      	mov	r3, r4
 800129e:	3307      	adds	r3, #7
 80012a0:	08db      	lsrs	r3, r3, #3
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	ebad 0d03 	sub.w	sp, sp, r3
 80012a8:	ab02      	add	r3, sp, #8
 80012aa:	3300      	adds	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  uint8_t rxTemp[size + 1];
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	1c5c      	adds	r4, r3, #1
 80012b2:	1e63      	subs	r3, r4, #1
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4623      	mov	r3, r4
 80012b8:	4618      	mov	r0, r3
 80012ba:	f04f 0100 	mov.w	r1, #0
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	00cb      	lsls	r3, r1, #3
 80012c8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80012cc:	00c2      	lsls	r2, r0, #3
 80012ce:	4623      	mov	r3, r4
 80012d0:	4618      	mov	r0, r3
 80012d2:	f04f 0100 	mov.w	r1, #0
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	00cb      	lsls	r3, r1, #3
 80012e0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80012e4:	00c2      	lsls	r2, r0, #3
 80012e6:	4623      	mov	r3, r4
 80012e8:	3307      	adds	r3, #7
 80012ea:	08db      	lsrs	r3, r3, #3
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	ebad 0d03 	sub.w	sp, sp, r3
 80012f2:	ab02      	add	r3, sp, #8
 80012f4:	3300      	adds	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fe:	4818      	ldr	r0, [pc, #96]	; (8001360 <AsciReadReg+0x114>)
 8001300:	f000 fda0 	bl	8001e44 <HAL_GPIO_WritePin>

  memset(txBuffer,0xAA, size + 1);
 8001304:	6978      	ldr	r0, [r7, #20]
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	3301      	adds	r3, #1
 800130a:	461a      	mov	r2, r3
 800130c:	21aa      	movs	r1, #170	; 0xaa
 800130e:	f001 fee7 	bl	80030e0 <memset>
  txBuffer[0] = regAddr;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	79fa      	ldrb	r2, [r7, #7]
 8001316:	701a      	strb	r2, [r3, #0]
  if(HAL_SPI_TransmitReceive(&hspi2, txBuffer, rxTemp, size + 1 , 100)!= HAL_OK)
 8001318:	6979      	ldr	r1, [r7, #20]
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	b29b      	uxth	r3, r3
 8001320:	3301      	adds	r3, #1
 8001322:	b29b      	uxth	r3, r3
 8001324:	2064      	movs	r0, #100	; 0x64
 8001326:	9000      	str	r0, [sp, #0]
 8001328:	480e      	ldr	r0, [pc, #56]	; (8001364 <AsciReadReg+0x118>)
 800132a:	f001 fb7d 	bl	8002a28 <HAL_SPI_TransmitReceive>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <AsciReadReg+0xec>
  {
    status = MAX_ASCI_IO_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	76fb      	strb	r3, [r7, #27]
  }

  memcpy(rxBuffer, rxTemp + 1, size);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3301      	adds	r3, #1
 800133c:	79ba      	ldrb	r2, [r7, #6]
 800133e:	4619      	mov	r1, r3
 8001340:	6838      	ldr	r0, [r7, #0]
 8001342:	f001 febf 	bl	80030c4 <memcpy>

  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <AsciReadReg+0x114>)
 800134e:	f000 fd79 	bl	8001e44 <HAL_GPIO_WritePin>

  return status;
 8001352:	7efb      	ldrb	r3, [r7, #27]
 8001354:	46ad      	mov	sp, r5
}
 8001356:	4618      	mov	r0, r3
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bdb0      	pop	{r4, r5, r7, pc}
 800135e:	bf00      	nop
 8001360:	40010c00 	.word	0x40010c00
 8001364:	20000a20 	.word	0x20000a20

08001368 <LiveLedOn>:



/* LEDs ---------------------------------------------------------------------*/
void LiveLedOn(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LIVE_LED_GPIO_Port, LIVE_LED_Pin, GPIO_PIN_SET);
 800136c:	2201      	movs	r2, #1
 800136e:	2140      	movs	r1, #64	; 0x40
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <LiveLedOn+0x14>)
 8001372:	f000 fd67 	bl	8001e44 <HAL_GPIO_WritePin>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40010800 	.word	0x40010800

08001380 <LiveLedOff>:

void LiveLedOff(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LIVE_LED_GPIO_Port, LIVE_LED_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	2140      	movs	r1, #64	; 0x40
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <LiveLedOff+0x14>)
 800138a:	f000 fd5b 	bl	8001e44 <HAL_GPIO_WritePin>
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40010800 	.word	0x40010800

08001398 <UsbPullUp>:
/* USB ---------------------------------------------------------------------*/
void UsbPullUp(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
 // HAL_GPIO_WritePin(USB_PULL_GPIO_Port, USB_PULL_Pin, GPIO_PIN_SET);
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_MspInit+0x5c>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	4a14      	ldr	r2, [pc, #80]	; (800140c <HAL_MspInit+0x5c>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6193      	str	r3, [r2, #24]
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_MspInit+0x5c>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_MspInit+0x5c>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a0e      	ldr	r2, [pc, #56]	; (800140c <HAL_MspInit+0x5c>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_MspInit+0x5c>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_MspInit+0x60>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <HAL_MspInit+0x60>)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000

08001414 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <HAL_SPI_MspInit+0x8c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d131      	bne.n	8001498 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_SPI_MspInit+0x90>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	4a1a      	ldr	r2, [pc, #104]	; (80014a4 <HAL_SPI_MspInit+0x90>)
 800143a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143e:	61d3      	str	r3, [r2, #28]
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_SPI_MspInit+0x90>)
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_SPI_MspInit+0x90>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <HAL_SPI_MspInit+0x90>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_SPI_MspInit+0x90>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001464:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001468:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	4619      	mov	r1, r3
 8001478:	480b      	ldr	r0, [pc, #44]	; (80014a8 <HAL_SPI_MspInit+0x94>)
 800147a:	f000 fb5f 	bl	8001b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800147e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001488:	2301      	movs	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	4619      	mov	r1, r3
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <HAL_SPI_MspInit+0x94>)
 8001494:	f000 fb52 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001498:	bf00      	nop
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40003800 	.word	0x40003800
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010c00 	.word	0x40010c00

080014ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <HAL_UART_MspInit+0x8c>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d131      	bne.n	8001530 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <HAL_UART_MspInit+0x90>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a1a      	ldr	r2, [pc, #104]	; (800153c <HAL_UART_MspInit+0x90>)
 80014d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_UART_MspInit+0x90>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_UART_MspInit+0x90>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <HAL_UART_MspInit+0x90>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_UART_MspInit+0x90>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001500:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	4619      	mov	r1, r3
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <HAL_UART_MspInit+0x94>)
 8001512:	f000 fb13 	bl	8001b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	4619      	mov	r1, r3
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <HAL_UART_MspInit+0x94>)
 800152c:	f000 fb06 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001530:	bf00      	nop
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40013800 	.word	0x40013800
 800153c:	40021000 	.word	0x40021000
 8001540:	40010800 	.word	0x40010800

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <HardFault_Handler+0x4>

08001556 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <MemManage_Handler+0x4>

0800155c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <BusFault_Handler+0x4>

08001562 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <UsageFault_Handler+0x4>

08001568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001590:	f000 f9d4 	bl	800193c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
	return 1;
 800159c:	2301      	movs	r3, #1
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <_kill>:

int _kill(int pid, int sig)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015b0:	f001 fd5e 	bl	8003070 <__errno>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2216      	movs	r2, #22
 80015b8:	601a      	str	r2, [r3, #0]
	return -1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_exit>:

void _exit (int status)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015ce:	f04f 31ff 	mov.w	r1, #4294967295
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffe7 	bl	80015a6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015d8:	e7fe      	b.n	80015d8 <_exit+0x12>

080015da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e00a      	b.n	8001602 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015ec:	f3af 8000 	nop.w
 80015f0:	4601      	mov	r1, r0
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	60ba      	str	r2, [r7, #8]
 80015f8:	b2ca      	uxtb	r2, r1
 80015fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	3301      	adds	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	429a      	cmp	r2, r3
 8001608:	dbf0      	blt.n	80015ec <_read+0x12>
	}

return len;
 800160a:	687b      	ldr	r3, [r7, #4]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	return -1;
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163a:	605a      	str	r2, [r3, #4]
	return 0;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <_isatty>:

int _isatty(int file)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	return 1;
 8001650:	2301      	movs	r3, #1
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
	return 0;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <_sbrk+0x50>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <_sbrk+0x16>
		heap_end = &end;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <_sbrk+0x50>)
 8001686:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <_sbrk+0x54>)
 8001688:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <_sbrk+0x50>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <_sbrk+0x50>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	466a      	mov	r2, sp
 800169a:	4293      	cmp	r3, r2
 800169c:	d907      	bls.n	80016ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800169e:	f001 fce7 	bl	8003070 <__errno>
 80016a2:	4603      	mov	r3, r0
 80016a4:	220c      	movs	r2, #12
 80016a6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ac:	e006      	b.n	80016bc <_sbrk+0x48>
	}

	heap_end += incr;
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <_sbrk+0x50>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a03      	ldr	r2, [pc, #12]	; (80016c4 <_sbrk+0x50>)
 80016b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200009d4 	.word	0x200009d4
 80016c8:	20000c60 	.word	0x20000c60

080016cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <SystemInit+0x5c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a14      	ldr	r2, [pc, #80]	; (8001728 <SystemInit+0x5c>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <SystemInit+0x5c>)
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4911      	ldr	r1, [pc, #68]	; (8001728 <SystemInit+0x5c>)
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <SystemInit+0x60>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <SystemInit+0x5c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <SystemInit+0x5c>)
 80016ee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80016f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <SystemInit+0x5c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <SystemInit+0x5c>)
 80016fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001702:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <SystemInit+0x5c>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4a07      	ldr	r2, [pc, #28]	; (8001728 <SystemInit+0x5c>)
 800170a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800170e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <SystemInit+0x5c>)
 8001712:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001716:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SystemInit+0x64>)
 800171a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800171e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	40021000 	.word	0x40021000
 800172c:	f8ff0000 	.word	0xf8ff0000
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001734:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001736:	e003      	b.n	8001740 <LoopCopyDataInit>

08001738 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800173a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800173c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800173e:	3104      	adds	r1, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001740:	480a      	ldr	r0, [pc, #40]	; (800176c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001744:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001746:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001748:	d3f6      	bcc.n	8001738 <CopyDataInit>
  ldr r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800174c:	e002      	b.n	8001754 <LoopFillZerobss>

0800174e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001750:	f842 3b04 	str.w	r3, [r2], #4

08001754 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001756:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001758:	d3f9      	bcc.n	800174e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800175a:	f7ff ffb7 	bl	80016cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175e:	f001 fc8d 	bl	800307c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001762:	f7ff fb0d 	bl	8000d80 <main>
  bx lr
 8001766:	4770      	bx	lr
  ldr r3, =_sidata
 8001768:	08009588 	.word	0x08009588
  ldr r0, =_sdata
 800176c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001770:	200009b8 	.word	0x200009b8
  ldr r2, =_sbss
 8001774:	200009b8 	.word	0x200009b8
  ldr r3, = _ebss
 8001778:	20000c60 	.word	0x20000c60

0800177c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC1_2_IRQHandler>
	...

08001780 <StringPlusDataToHexaString>:
  *
  * 02 10 60 00 00 00 00 00 06 50 60 00 32 01 F4 00 .
  *
  */
char *StringPlusDataToHexaString(void* data, char *buffer, size_t size)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
    uint8_t *ptr = data;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	613b      	str	r3, [r7, #16]
    uint8_t i = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	75fb      	strb	r3, [r7, #23]
    if(size)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d023      	beq.n	80017e2 <StringPlusDataToHexaString+0x62>
    {
        for(; i<size; i++)
 800179a:	e011      	b.n	80017c0 <StringPlusDataToHexaString+0x40>
            sprintf((buffer +(i*3)),"%02X ", *(ptr+i));
 800179c:	7dfa      	ldrb	r2, [r7, #23]
 800179e:	4613      	mov	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	1898      	adds	r0, r3, r2
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4413      	add	r3, r2
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	490f      	ldr	r1, [pc, #60]	; (80017f4 <StringPlusDataToHexaString+0x74>)
 80017b6:	f001 fcfb 	bl	80031b0 <sprintf>
        for(; i<size; i++)
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
 80017bc:	3301      	adds	r3, #1
 80017be:	75fb      	strb	r3, [r7, #23]
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d8e9      	bhi.n	800179c <StringPlusDataToHexaString+0x1c>
        if(i > 1)
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d90c      	bls.n	80017e8 <StringPlusDataToHexaString+0x68>
            buffer[(i*3)-1]=0;
 80017ce:	7dfa      	ldrb	r2, [r7, #23]
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	3b01      	subs	r3, #1
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	4413      	add	r3, r2
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
 80017e0:	e002      	b.n	80017e8 <StringPlusDataToHexaString+0x68>
    }
    else
    {
        buffer[0]=0;
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
    }
    return buffer;
 80017e8:	68bb      	ldr	r3, [r7, #8]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	08009184 	.word	0x08009184

080017f8 <DelayMs>:
/* Delay ---------------------------------------------------------------------*/
/**
  * @brief  DelayMs
  */
void DelayMs(volatile int32_t n)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  unsigned long timetick;
  timetick = HAL_GetTick();
 8001800:	f000 f8ae 	bl	8001960 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]
  while ((HAL_GetTick() - timetick) < n);
 8001806:	bf00      	nop
 8001808:	f000 f8aa 	bl	8001960 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	4293      	cmp	r3, r2
 8001816:	d3f7      	bcc.n	8001808 <DelayMs+0x10>
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <LiveLedInit>:
/* Includes ------------------------------------------------------------------*/
#include "LiveLed.h"

/* Private define ------------------------------------------------------------*/
uint8_t LiveLedInit(LiveLED_HnadleTypeDef *hnd)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  if(!hnd) 
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <LiveLedInit+0x12>
      return LIVELED_FAIL;
 8001830:	2301      	movs	r3, #1
 8001832:	e009      	b.n	8001848 <LiveLedInit+0x26>
  hnd->State = 1;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	741a      	strb	r2, [r3, #16]
  hnd->Timestamp = HAL_GetTick();
 800183a:	f000 f891 	bl	8001960 <HAL_GetTick>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60da      	str	r2, [r3, #12]
  return LIVELED_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <LiveLedTask>:

uint8_t LiveLedTask(LiveLED_HnadleTypeDef *hnd)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if(!hnd) 
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <LiveLedTask+0x12>
    return LIVELED_FAIL;
 800185e:	2301      	movs	r3, #1
 8001860:	e021      	b.n	80018a6 <LiveLedTask+0x56>

  if(HAL_GetTick() - hnd->Timestamp > hnd->HalfPeriodTimeMs)
 8001862:	f000 f87d 	bl	8001960 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6812      	ldr	r2, [r2, #0]
 8001872:	4293      	cmp	r3, r2
 8001874:	d916      	bls.n	80018a4 <LiveLedTask+0x54>
  {
    hnd->Timestamp = HAL_GetTick();
 8001876:	f000 f873 	bl	8001960 <HAL_GetTick>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	60da      	str	r2, [r3, #12]
    if(hnd->State)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7c1b      	ldrb	r3, [r3, #16]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d006      	beq.n	8001898 <LiveLedTask+0x48>
    {
      hnd->State = 0;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	741a      	strb	r2, [r3, #16]
      hnd->LedOnFnPtr();
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4798      	blx	r3
 8001896:	e005      	b.n	80018a4 <LiveLedTask+0x54>
    }
    else
    {
      hnd->State = 1;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	741a      	strb	r2, [r3, #16]
      hnd->LedOffFnPtr();
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4798      	blx	r3
    }
  }
  return LIVELED_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_Init+0x28>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_Init+0x28>)
 80018ba:	f043 0310 	orr.w	r3, r3, #16
 80018be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f000 f907 	bl	8001ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 f808 	bl	80018dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018cc:	f7ff fd70 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40022000 	.word	0x40022000

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x54>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0x58>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f911 	bl	8001b22 <HAL_SYSTICK_Config>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e00e      	b.n	8001928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b0f      	cmp	r3, #15
 800190e:	d80a      	bhi.n	8001926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001910:	2200      	movs	r2, #0
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f000 f8e7 	bl	8001aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800191c:	4a06      	ldr	r2, [pc, #24]	; (8001938 <HAL_InitTick+0x5c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000000 	.word	0x20000000
 8001934:	20000008 	.word	0x20000008
 8001938:	20000004 	.word	0x20000004

0800193c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_IncTick+0x1c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_IncTick+0x20>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a03      	ldr	r2, [pc, #12]	; (800195c <HAL_IncTick+0x20>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	20000008 	.word	0x20000008
 800195c:	20000c4c 	.word	0x20000c4c

08001960 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <HAL_GetTick+0x10>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	20000c4c 	.word	0x20000c4c

08001974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800199c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <__NVIC_GetPriorityGrouping+0x18>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	f003 0307 	and.w	r3, r3, #7
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0a      	blt.n	8001a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	490c      	ldr	r1, [pc, #48]	; (8001a24 <__NVIC_SetPriority+0x4c>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	0112      	lsls	r2, r2, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a00:	e00a      	b.n	8001a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4908      	ldr	r1, [pc, #32]	; (8001a28 <__NVIC_SetPriority+0x50>)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	3b04      	subs	r3, #4
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	440b      	add	r3, r1
 8001a16:	761a      	strb	r2, [r3, #24]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf28      	it	cs
 8001a4a:	2304      	movcs	r3, #4
 8001a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d902      	bls.n	8001a5c <NVIC_EncodePriority+0x30>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3b03      	subs	r3, #3
 8001a5a:	e000      	b.n	8001a5e <NVIC_EncodePriority+0x32>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	4313      	orrs	r3, r2
         );
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa0:	d301      	bcc.n	8001aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00f      	b.n	8001ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <SysTick_Config+0x40>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aae:	210f      	movs	r1, #15
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f7ff ff90 	bl	80019d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <SysTick_Config+0x40>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <SysTick_Config+0x40>)
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	e000e010 	.word	0xe000e010

08001ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff49 	bl	8001974 <__NVIC_SetPriorityGrouping>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001afc:	f7ff ff5e 	bl	80019bc <__NVIC_GetPriorityGrouping>
 8001b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	6978      	ldr	r0, [r7, #20]
 8001b08:	f7ff ff90 	bl	8001a2c <NVIC_EncodePriority>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff5f 	bl	80019d8 <__NVIC_SetPriority>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ffb0 	bl	8001a90 <SysTick_Config>
 8001b30:	4603      	mov	r3, r0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b08b      	sub	sp, #44	; 0x2c
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4e:	e169      	b.n	8001e24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b50:	2201      	movs	r2, #1
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f040 8158 	bne.w	8001e1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4a9a      	ldr	r2, [pc, #616]	; (8001ddc <HAL_GPIO_Init+0x2a0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d05e      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
 8001b78:	4a98      	ldr	r2, [pc, #608]	; (8001ddc <HAL_GPIO_Init+0x2a0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d875      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001b7e:	4a98      	ldr	r2, [pc, #608]	; (8001de0 <HAL_GPIO_Init+0x2a4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d058      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
 8001b84:	4a96      	ldr	r2, [pc, #600]	; (8001de0 <HAL_GPIO_Init+0x2a4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d86f      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001b8a:	4a96      	ldr	r2, [pc, #600]	; (8001de4 <HAL_GPIO_Init+0x2a8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d052      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
 8001b90:	4a94      	ldr	r2, [pc, #592]	; (8001de4 <HAL_GPIO_Init+0x2a8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d869      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001b96:	4a94      	ldr	r2, [pc, #592]	; (8001de8 <HAL_GPIO_Init+0x2ac>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d04c      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
 8001b9c:	4a92      	ldr	r2, [pc, #584]	; (8001de8 <HAL_GPIO_Init+0x2ac>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d863      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001ba2:	4a92      	ldr	r2, [pc, #584]	; (8001dec <HAL_GPIO_Init+0x2b0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d046      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
 8001ba8:	4a90      	ldr	r2, [pc, #576]	; (8001dec <HAL_GPIO_Init+0x2b0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d85d      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001bae:	2b12      	cmp	r3, #18
 8001bb0:	d82a      	bhi.n	8001c08 <HAL_GPIO_Init+0xcc>
 8001bb2:	2b12      	cmp	r3, #18
 8001bb4:	d859      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001bb6:	a201      	add	r2, pc, #4	; (adr r2, 8001bbc <HAL_GPIO_Init+0x80>)
 8001bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbc:	08001c37 	.word	0x08001c37
 8001bc0:	08001c11 	.word	0x08001c11
 8001bc4:	08001c23 	.word	0x08001c23
 8001bc8:	08001c65 	.word	0x08001c65
 8001bcc:	08001c6b 	.word	0x08001c6b
 8001bd0:	08001c6b 	.word	0x08001c6b
 8001bd4:	08001c6b 	.word	0x08001c6b
 8001bd8:	08001c6b 	.word	0x08001c6b
 8001bdc:	08001c6b 	.word	0x08001c6b
 8001be0:	08001c6b 	.word	0x08001c6b
 8001be4:	08001c6b 	.word	0x08001c6b
 8001be8:	08001c6b 	.word	0x08001c6b
 8001bec:	08001c6b 	.word	0x08001c6b
 8001bf0:	08001c6b 	.word	0x08001c6b
 8001bf4:	08001c6b 	.word	0x08001c6b
 8001bf8:	08001c6b 	.word	0x08001c6b
 8001bfc:	08001c6b 	.word	0x08001c6b
 8001c00:	08001c19 	.word	0x08001c19
 8001c04:	08001c2d 	.word	0x08001c2d
 8001c08:	4a79      	ldr	r2, [pc, #484]	; (8001df0 <HAL_GPIO_Init+0x2b4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c0e:	e02c      	b.n	8001c6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	623b      	str	r3, [r7, #32]
          break;
 8001c16:	e029      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	623b      	str	r3, [r7, #32]
          break;
 8001c20:	e024      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	3308      	adds	r3, #8
 8001c28:	623b      	str	r3, [r7, #32]
          break;
 8001c2a:	e01f      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	330c      	adds	r3, #12
 8001c32:	623b      	str	r3, [r7, #32]
          break;
 8001c34:	e01a      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d102      	bne.n	8001c44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c3e:	2304      	movs	r3, #4
 8001c40:	623b      	str	r3, [r7, #32]
          break;
 8001c42:	e013      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d105      	bne.n	8001c58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c4c:	2308      	movs	r3, #8
 8001c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	611a      	str	r2, [r3, #16]
          break;
 8001c56:	e009      	b.n	8001c6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c58:	2308      	movs	r3, #8
 8001c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69fa      	ldr	r2, [r7, #28]
 8001c60:	615a      	str	r2, [r3, #20]
          break;
 8001c62:	e003      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
          break;
 8001c68:	e000      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          break;
 8001c6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2bff      	cmp	r3, #255	; 0xff
 8001c70:	d801      	bhi.n	8001c76 <HAL_GPIO_Init+0x13a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	e001      	b.n	8001c7a <HAL_GPIO_Init+0x13e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2bff      	cmp	r3, #255	; 0xff
 8001c80:	d802      	bhi.n	8001c88 <HAL_GPIO_Init+0x14c>
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	e002      	b.n	8001c8e <HAL_GPIO_Init+0x152>
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	3b08      	subs	r3, #8
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	210f      	movs	r1, #15
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	6a39      	ldr	r1, [r7, #32]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 80b1 	beq.w	8001e1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cbc:	4b4d      	ldr	r3, [pc, #308]	; (8001df4 <HAL_GPIO_Init+0x2b8>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a4c      	ldr	r2, [pc, #304]	; (8001df4 <HAL_GPIO_Init+0x2b8>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b4a      	ldr	r3, [pc, #296]	; (8001df4 <HAL_GPIO_Init+0x2b8>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cd4:	4a48      	ldr	r2, [pc, #288]	; (8001df8 <HAL_GPIO_Init+0x2bc>)
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	220f      	movs	r2, #15
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a40      	ldr	r2, [pc, #256]	; (8001dfc <HAL_GPIO_Init+0x2c0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d013      	beq.n	8001d28 <HAL_GPIO_Init+0x1ec>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a3f      	ldr	r2, [pc, #252]	; (8001e00 <HAL_GPIO_Init+0x2c4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d00d      	beq.n	8001d24 <HAL_GPIO_Init+0x1e8>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a3e      	ldr	r2, [pc, #248]	; (8001e04 <HAL_GPIO_Init+0x2c8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d007      	beq.n	8001d20 <HAL_GPIO_Init+0x1e4>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a3d      	ldr	r2, [pc, #244]	; (8001e08 <HAL_GPIO_Init+0x2cc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d101      	bne.n	8001d1c <HAL_GPIO_Init+0x1e0>
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e006      	b.n	8001d2a <HAL_GPIO_Init+0x1ee>
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	e004      	b.n	8001d2a <HAL_GPIO_Init+0x1ee>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e002      	b.n	8001d2a <HAL_GPIO_Init+0x1ee>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_GPIO_Init+0x1ee>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2c:	f002 0203 	and.w	r2, r2, #3
 8001d30:	0092      	lsls	r2, r2, #2
 8001d32:	4093      	lsls	r3, r2
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d3a:	492f      	ldr	r1, [pc, #188]	; (8001df8 <HAL_GPIO_Init+0x2bc>)
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	3302      	adds	r3, #2
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d54:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	492c      	ldr	r1, [pc, #176]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d62:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	4928      	ldr	r1, [pc, #160]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d006      	beq.n	8001d8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d7c:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	4922      	ldr	r1, [pc, #136]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	491e      	ldr	r1, [pc, #120]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d006      	beq.n	8001db2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	4918      	ldr	r1, [pc, #96]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	608b      	str	r3, [r1, #8]
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4914      	ldr	r1, [pc, #80]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d021      	beq.n	8001e10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	490e      	ldr	r1, [pc, #56]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60cb      	str	r3, [r1, #12]
 8001dd8:	e021      	b.n	8001e1e <HAL_GPIO_Init+0x2e2>
 8001dda:	bf00      	nop
 8001ddc:	10320000 	.word	0x10320000
 8001de0:	10310000 	.word	0x10310000
 8001de4:	10220000 	.word	0x10220000
 8001de8:	10210000 	.word	0x10210000
 8001dec:	10120000 	.word	0x10120000
 8001df0:	10110000 	.word	0x10110000
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	40010800 	.word	0x40010800
 8001e00:	40010c00 	.word	0x40010c00
 8001e04:	40011000 	.word	0x40011000
 8001e08:	40011400 	.word	0x40011400
 8001e0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_GPIO_Init+0x304>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	4909      	ldr	r1, [pc, #36]	; (8001e40 <HAL_GPIO_Init+0x304>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	3301      	adds	r3, #1
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f47f ae8e 	bne.w	8001b50 <HAL_GPIO_Init+0x14>
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	372c      	adds	r7, #44	; 0x2c
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	40010400 	.word	0x40010400

08001e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
 8001e50:	4613      	mov	r3, r2
 8001e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e54:	787b      	ldrb	r3, [r7, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e60:	e003      	b.n	8001e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	041a      	lsls	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	611a      	str	r2, [r3, #16]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e26c      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8087 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e94:	4b92      	ldr	r3, [pc, #584]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d00c      	beq.n	8001eba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ea0:	4b8f      	ldr	r3, [pc, #572]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d112      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x5e>
 8001eac:	4b8c      	ldr	r3, [pc, #560]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb8:	d10b      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eba:	4b89      	ldr	r3, [pc, #548]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d06c      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x12c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d168      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e246      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x76>
 8001edc:	4b80      	ldr	r3, [pc, #512]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a7f      	ldr	r2, [pc, #508]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e02e      	b.n	8001f48 <HAL_RCC_OscConfig+0xd4>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x98>
 8001ef2:	4b7b      	ldr	r3, [pc, #492]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a7a      	ldr	r2, [pc, #488]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b78      	ldr	r3, [pc, #480]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a77      	ldr	r2, [pc, #476]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e01d      	b.n	8001f48 <HAL_RCC_OscConfig+0xd4>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0xbc>
 8001f16:	4b72      	ldr	r3, [pc, #456]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a71      	ldr	r2, [pc, #452]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b6f      	ldr	r3, [pc, #444]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a6e      	ldr	r2, [pc, #440]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0xd4>
 8001f30:	4b6b      	ldr	r3, [pc, #428]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a6a      	ldr	r2, [pc, #424]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b68      	ldr	r3, [pc, #416]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a67      	ldr	r2, [pc, #412]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff fd06 	bl	8001960 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff fd02 	bl	8001960 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e1fa      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b5d      	ldr	r3, [pc, #372]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0xe4>
 8001f76:	e014      	b.n	8001fa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff fcf2 	bl	8001960 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7ff fcee 	bl	8001960 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1e6      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f92:	4b53      	ldr	r3, [pc, #332]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x10c>
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d063      	beq.n	8002076 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fae:	4b4c      	ldr	r3, [pc, #304]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fba:	4b49      	ldr	r3, [pc, #292]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d11c      	bne.n	8002000 <HAL_RCC_OscConfig+0x18c>
 8001fc6:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d116      	bne.n	8002000 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_RCC_OscConfig+0x176>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e1ba      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fea:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4939      	ldr	r1, [pc, #228]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffe:	e03a      	b.n	8002076 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002008:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7ff fca7 	bl	8001960 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002016:	f7ff fca3 	bl	8001960 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e19b      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4927      	ldr	r1, [pc, #156]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]
 8002048:	e015      	b.n	8002076 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204a:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fc86 	bl	8001960 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002058:	f7ff fc82 	bl	8001960 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e17a      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d03a      	beq.n	80020f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d019      	beq.n	80020be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002090:	f7ff fc66 	bl	8001960 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002098:	f7ff fc62 	bl	8001960 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e15a      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020b6:	2001      	movs	r0, #1
 80020b8:	f000 fad8 	bl	800266c <RCC_Delay>
 80020bc:	e01c      	b.n	80020f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c4:	f7ff fc4c 	bl	8001960 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ca:	e00f      	b.n	80020ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020cc:	f7ff fc48 	bl	8001960 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d908      	bls.n	80020ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e140      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	42420000 	.word	0x42420000
 80020e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	4b9e      	ldr	r3, [pc, #632]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1e9      	bne.n	80020cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80a6 	beq.w	8002252 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210a:	4b97      	ldr	r3, [pc, #604]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10d      	bne.n	8002132 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	4b94      	ldr	r3, [pc, #592]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	4a93      	ldr	r2, [pc, #588]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	61d3      	str	r3, [r2, #28]
 8002122:	4b91      	ldr	r3, [pc, #580]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212e:	2301      	movs	r3, #1
 8002130:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	4b8e      	ldr	r3, [pc, #568]	; (800236c <HAL_RCC_OscConfig+0x4f8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d118      	bne.n	8002170 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213e:	4b8b      	ldr	r3, [pc, #556]	; (800236c <HAL_RCC_OscConfig+0x4f8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a8a      	ldr	r2, [pc, #552]	; (800236c <HAL_RCC_OscConfig+0x4f8>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214a:	f7ff fc09 	bl	8001960 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002152:	f7ff fc05 	bl	8001960 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b64      	cmp	r3, #100	; 0x64
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0fd      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	4b81      	ldr	r3, [pc, #516]	; (800236c <HAL_RCC_OscConfig+0x4f8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x312>
 8002178:	4b7b      	ldr	r3, [pc, #492]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4a7a      	ldr	r2, [pc, #488]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6213      	str	r3, [r2, #32]
 8002184:	e02d      	b.n	80021e2 <HAL_RCC_OscConfig+0x36e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x334>
 800218e:	4b76      	ldr	r3, [pc, #472]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a75      	ldr	r2, [pc, #468]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6213      	str	r3, [r2, #32]
 800219a:	4b73      	ldr	r3, [pc, #460]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a72      	ldr	r2, [pc, #456]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	f023 0304 	bic.w	r3, r3, #4
 80021a4:	6213      	str	r3, [r2, #32]
 80021a6:	e01c      	b.n	80021e2 <HAL_RCC_OscConfig+0x36e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d10c      	bne.n	80021ca <HAL_RCC_OscConfig+0x356>
 80021b0:	4b6d      	ldr	r3, [pc, #436]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4a6c      	ldr	r2, [pc, #432]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021b6:	f043 0304 	orr.w	r3, r3, #4
 80021ba:	6213      	str	r3, [r2, #32]
 80021bc:	4b6a      	ldr	r3, [pc, #424]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4a69      	ldr	r2, [pc, #420]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6213      	str	r3, [r2, #32]
 80021c8:	e00b      	b.n	80021e2 <HAL_RCC_OscConfig+0x36e>
 80021ca:	4b67      	ldr	r3, [pc, #412]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4a66      	ldr	r2, [pc, #408]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	6213      	str	r3, [r2, #32]
 80021d6:	4b64      	ldr	r3, [pc, #400]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a63      	ldr	r2, [pc, #396]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	f023 0304 	bic.w	r3, r3, #4
 80021e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d015      	beq.n	8002216 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ea:	f7ff fbb9 	bl	8001960 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f0:	e00a      	b.n	8002208 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7ff fbb5 	bl	8001960 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0ab      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002208:	4b57      	ldr	r3, [pc, #348]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0ee      	beq.n	80021f2 <HAL_RCC_OscConfig+0x37e>
 8002214:	e014      	b.n	8002240 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7ff fba3 	bl	8001960 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221c:	e00a      	b.n	8002234 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7ff fb9f 	bl	8001960 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	; 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e095      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002234:	4b4c      	ldr	r3, [pc, #304]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1ee      	bne.n	800221e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d105      	bne.n	8002252 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002246:	4b48      	ldr	r3, [pc, #288]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4a47      	ldr	r2, [pc, #284]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002250:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8081 	beq.w	800235e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800225c:	4b42      	ldr	r3, [pc, #264]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b08      	cmp	r3, #8
 8002266:	d061      	beq.n	800232c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d146      	bne.n	80022fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002270:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <HAL_RCC_OscConfig+0x4fc>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7ff fb73 	bl	8001960 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227e:	f7ff fb6f 	bl	8001960 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e067      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002290:	4b35      	ldr	r3, [pc, #212]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f0      	bne.n	800227e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a4:	d108      	bne.n	80022b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022a6:	4b30      	ldr	r3, [pc, #192]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	492d      	ldr	r1, [pc, #180]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a19      	ldr	r1, [r3, #32]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	430b      	orrs	r3, r1
 80022ca:	4927      	ldr	r1, [pc, #156]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_RCC_OscConfig+0x4fc>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7ff fb43 	bl	8001960 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7ff fb3f 	bl	8001960 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e037      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x46a>
 80022fc:	e02f      	b.n	800235e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fe:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <HAL_RCC_OscConfig+0x4fc>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff fb2c 	bl	8001960 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230c:	f7ff fb28 	bl	8001960 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e020      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x498>
 800232a:	e018      	b.n	800235e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e013      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	429a      	cmp	r2, r3
 800234a:	d106      	bne.n	800235a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d001      	beq.n	800235e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	40007000 	.word	0x40007000
 8002370:	42420060 	.word	0x42420060

08002374 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0d0      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b6a      	ldr	r3, [pc, #424]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d910      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b67      	ldr	r3, [pc, #412]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 0207 	bic.w	r2, r3, #7
 800239e:	4965      	ldr	r1, [pc, #404]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b63      	ldr	r3, [pc, #396]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0b8      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d0:	4b59      	ldr	r3, [pc, #356]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a58      	ldr	r2, [pc, #352]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e8:	4b53      	ldr	r3, [pc, #332]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a52      	ldr	r2, [pc, #328]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	4b50      	ldr	r3, [pc, #320]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	494d      	ldr	r1, [pc, #308]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d040      	beq.n	8002494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	4b47      	ldr	r3, [pc, #284]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d115      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e07f      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	4b41      	ldr	r3, [pc, #260]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e073      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e06b      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002452:	4b39      	ldr	r3, [pc, #228]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f023 0203 	bic.w	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4936      	ldr	r1, [pc, #216]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002464:	f7ff fa7c 	bl	8001960 <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	e00a      	b.n	8002482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7ff fa78 	bl	8001960 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e053      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 020c 	and.w	r2, r3, #12
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	429a      	cmp	r2, r3
 8002492:	d1eb      	bne.n	800246c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d210      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 0207 	bic.w	r2, r3, #7
 80024aa:	4922      	ldr	r1, [pc, #136]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e032      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4916      	ldr	r1, [pc, #88]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	490e      	ldr	r1, [pc, #56]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002502:	f000 f821 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8002506:	4602      	mov	r2, r0
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	490a      	ldr	r1, [pc, #40]	; (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	5ccb      	ldrb	r3, [r1, r3]
 8002516:	fa22 f303 	lsr.w	r3, r2, r3
 800251a:	4a09      	ldr	r2, [pc, #36]	; (8002540 <HAL_RCC_ClockConfig+0x1cc>)
 800251c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_ClockConfig+0x1d0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f9da 	bl	80018dc <HAL_InitTick>

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40022000 	.word	0x40022000
 8002538:	40021000 	.word	0x40021000
 800253c:	0800919c 	.word	0x0800919c
 8002540:	20000000 	.word	0x20000000
 8002544:	20000004 	.word	0x20000004

08002548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b490      	push	{r4, r7}
 800254a:	b08a      	sub	sp, #40	; 0x28
 800254c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800254e:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002550:	1d3c      	adds	r4, r7, #4
 8002552:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002558:	f240 2301 	movw	r3, #513	; 0x201
 800255c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002572:	4b22      	ldr	r3, [pc, #136]	; (80025fc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b04      	cmp	r3, #4
 8002580:	d002      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x40>
 8002582:	2b08      	cmp	r3, #8
 8002584:	d003      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0x46>
 8002586:	e02d      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002588:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258a:	623b      	str	r3, [r7, #32]
      break;
 800258c:	e02d      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	0c9b      	lsrs	r3, r3, #18
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800259a:	4413      	add	r3, r2
 800259c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	0c5b      	lsrs	r3, r3, #17
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025ba:	4413      	add	r3, r2
 80025bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c6:	fb02 f203 	mul.w	r2, r2, r3
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
 80025d2:	e004      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	623b      	str	r3, [r7, #32]
      break;
 80025e2:	e002      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e6:	623b      	str	r3, [r7, #32]
      break;
 80025e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ea:	6a3b      	ldr	r3, [r7, #32]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3728      	adds	r7, #40	; 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc90      	pop	{r4, r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	0800918c 	.word	0x0800918c
 80025fc:	40021000 	.word	0x40021000
 8002600:	007a1200 	.word	0x007a1200
 8002604:	003d0900 	.word	0x003d0900

08002608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800260c:	4b02      	ldr	r3, [pc, #8]	; (8002618 <HAL_RCC_GetHCLKFreq+0x10>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	20000000 	.word	0x20000000

0800261c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002620:	f7ff fff2 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8002624:	4602      	mov	r2, r0
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	4903      	ldr	r1, [pc, #12]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002632:	5ccb      	ldrb	r3, [r1, r3]
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	080091ac 	.word	0x080091ac

08002644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002648:	f7ff ffde 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	0adb      	lsrs	r3, r3, #11
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4903      	ldr	r1, [pc, #12]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	080091ac 	.word	0x080091ac

0800266c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <RCC_Delay+0x34>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <RCC_Delay+0x38>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	0a5b      	lsrs	r3, r3, #9
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002688:	bf00      	nop
  }
  while (Delay --);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1e5a      	subs	r2, r3, #1
 800268e:	60fa      	str	r2, [r7, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f9      	bne.n	8002688 <RCC_Delay+0x1c>
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	20000000 	.word	0x20000000
 80026a4:	10624dd3 	.word	0x10624dd3

080026a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e076      	b.n	80027a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d108      	bne.n	80026d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ca:	d009      	beq.n	80026e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
 80026d2:	e005      	b.n	80026e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe fe8a 	bl	8001414 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002716:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	ea42 0103 	orr.w	r1, r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	0c1a      	lsrs	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f002 0204 	and.w	r2, r2, #4
 8002786:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69da      	ldr	r2, [r3, #28]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002796:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	4613      	mov	r3, r2
 80027be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_SPI_Transmit+0x22>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e126      	b.n	8002a20 <HAL_SPI_Transmit+0x270>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027da:	f7ff f8c1 	bl	8001960 <HAL_GetTick>
 80027de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d002      	beq.n	80027f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027f0:	2302      	movs	r3, #2
 80027f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027f4:	e10b      	b.n	8002a0e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_SPI_Transmit+0x52>
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d102      	bne.n	8002808 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002806:	e102      	b.n	8002a0e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2203      	movs	r2, #3
 800280c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	88fa      	ldrh	r2, [r7, #6]
 8002820:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	88fa      	ldrh	r2, [r7, #6]
 8002826:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800284e:	d10f      	bne.n	8002870 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800285e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800286e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287a:	2b40      	cmp	r3, #64	; 0x40
 800287c:	d007      	beq.n	800288e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002896:	d14b      	bne.n	8002930 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_SPI_Transmit+0xf6>
 80028a0:	8afb      	ldrh	r3, [r7, #22]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d13e      	bne.n	8002924 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	1c9a      	adds	r2, r3, #2
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028ca:	e02b      	b.n	8002924 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d112      	bne.n	8002900 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	881a      	ldrh	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	1c9a      	adds	r2, r3, #2
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80028fe:	e011      	b.n	8002924 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002900:	f7ff f82e 	bl	8001960 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d803      	bhi.n	8002918 <HAL_SPI_Transmit+0x168>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002916:	d102      	bne.n	800291e <HAL_SPI_Transmit+0x16e>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002922:	e074      	b.n	8002a0e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ce      	bne.n	80028cc <HAL_SPI_Transmit+0x11c>
 800292e:	e04c      	b.n	80029ca <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <HAL_SPI_Transmit+0x18e>
 8002938:	8afb      	ldrh	r3, [r7, #22]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d140      	bne.n	80029c0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	330c      	adds	r3, #12
 8002948:	7812      	ldrb	r2, [r2, #0]
 800294a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002964:	e02c      	b.n	80029c0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b02      	cmp	r3, #2
 8002972:	d113      	bne.n	800299c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	330c      	adds	r3, #12
 800297e:	7812      	ldrb	r2, [r2, #0]
 8002980:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	86da      	strh	r2, [r3, #54]	; 0x36
 800299a:	e011      	b.n	80029c0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800299c:	f7fe ffe0 	bl	8001960 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d803      	bhi.n	80029b4 <HAL_SPI_Transmit+0x204>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b2:	d102      	bne.n	80029ba <HAL_SPI_Transmit+0x20a>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d102      	bne.n	80029c0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029be:	e026      	b.n	8002a0e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1cd      	bne.n	8002966 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	6839      	ldr	r1, [r7, #0]
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fa54 	bl	8002e7c <SPI_EndRxTxTransaction>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10a      	bne.n	80029fe <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029e8:	2300      	movs	r3, #0
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	77fb      	strb	r3, [r7, #31]
 8002a0a:	e000      	b.n	8002a0e <HAL_SPI_Transmit+0x25e>
  }

error:
 8002a0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08c      	sub	sp, #48	; 0x30
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a36:	2301      	movs	r3, #1
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_SPI_TransmitReceive+0x26>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e18a      	b.n	8002d64 <HAL_SPI_TransmitReceive+0x33c>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a56:	f7fe ff83 	bl	8001960 <HAL_GetTick>
 8002a5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a6c:	887b      	ldrh	r3, [r7, #2]
 8002a6e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d00f      	beq.n	8002a98 <HAL_SPI_TransmitReceive+0x70>
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a7e:	d107      	bne.n	8002a90 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d103      	bne.n	8002a90 <HAL_SPI_TransmitReceive+0x68>
 8002a88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d003      	beq.n	8002a98 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
 8002a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a96:	e15b      	b.n	8002d50 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <HAL_SPI_TransmitReceive+0x82>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_SPI_TransmitReceive+0x82>
 8002aa4:	887b      	ldrh	r3, [r7, #2]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d103      	bne.n	8002ab2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ab0:	e14e      	b.n	8002d50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d003      	beq.n	8002ac6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2205      	movs	r2, #5
 8002ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	887a      	ldrh	r2, [r7, #2]
 8002ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	887a      	ldrh	r2, [r7, #2]
 8002adc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	887a      	ldrh	r2, [r7, #2]
 8002aee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b06:	2b40      	cmp	r3, #64	; 0x40
 8002b08:	d007      	beq.n	8002b1a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b22:	d178      	bne.n	8002c16 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <HAL_SPI_TransmitReceive+0x10a>
 8002b2c:	8b7b      	ldrh	r3, [r7, #26]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d166      	bne.n	8002c00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	881a      	ldrh	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	1c9a      	adds	r2, r3, #2
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b56:	e053      	b.n	8002c00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d11b      	bne.n	8002b9e <HAL_SPI_TransmitReceive+0x176>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d016      	beq.n	8002b9e <HAL_SPI_TransmitReceive+0x176>
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d113      	bne.n	8002b9e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	881a      	ldrh	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	1c9a      	adds	r2, r3, #2
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d119      	bne.n	8002be0 <HAL_SPI_TransmitReceive+0x1b8>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d014      	beq.n	8002be0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc0:	b292      	uxth	r2, r2
 8002bc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	1c9a      	adds	r2, r3, #2
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002be0:	f7fe febe 	bl	8001960 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d807      	bhi.n	8002c00 <HAL_SPI_TransmitReceive+0x1d8>
 8002bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf6:	d003      	beq.n	8002c00 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002bfe:	e0a7      	b.n	8002d50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1a6      	bne.n	8002b58 <HAL_SPI_TransmitReceive+0x130>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1a1      	bne.n	8002b58 <HAL_SPI_TransmitReceive+0x130>
 8002c14:	e07c      	b.n	8002d10 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HAL_SPI_TransmitReceive+0x1fc>
 8002c1e:	8b7b      	ldrh	r3, [r7, #26]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d16b      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	7812      	ldrb	r2, [r2, #0]
 8002c30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c4a:	e057      	b.n	8002cfc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d11c      	bne.n	8002c94 <HAL_SPI_TransmitReceive+0x26c>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d017      	beq.n	8002c94 <HAL_SPI_TransmitReceive+0x26c>
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d114      	bne.n	8002c94 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	7812      	ldrb	r2, [r2, #0]
 8002c76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d119      	bne.n	8002cd6 <HAL_SPI_TransmitReceive+0x2ae>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d014      	beq.n	8002cd6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cd6:	f7fe fe43 	bl	8001960 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d803      	bhi.n	8002cee <HAL_SPI_TransmitReceive+0x2c6>
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d102      	bne.n	8002cf4 <HAL_SPI_TransmitReceive+0x2cc>
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d103      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cfa:	e029      	b.n	8002d50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1a2      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x224>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d19d      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f8b1 	bl	8002e7c <SPI_EndRxTxTransaction>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d006      	beq.n	8002d2e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d2c:	e010      	b.n	8002d50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10b      	bne.n	8002d4e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	e000      	b.n	8002d50 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3730      	adds	r7, #48	; 0x30
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d7c:	f7fe fdf0 	bl	8001960 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	4413      	add	r3, r2
 8002d8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d8c:	f7fe fde8 	bl	8001960 <HAL_GetTick>
 8002d90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d92:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	015b      	lsls	r3, r3, #5
 8002d98:	0d1b      	lsrs	r3, r3, #20
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	fb02 f303 	mul.w	r3, r2, r3
 8002da0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002da2:	e054      	b.n	8002e4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002daa:	d050      	beq.n	8002e4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002dac:	f7fe fdd8 	bl	8001960 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d902      	bls.n	8002dc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d13d      	bne.n	8002e3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dda:	d111      	bne.n	8002e00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de4:	d004      	beq.n	8002df0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dee:	d107      	bne.n	8002e00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e08:	d10f      	bne.n	8002e2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e017      	b.n	8002e6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4013      	ands	r3, r2
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	bf0c      	ite	eq
 8002e5e:	2301      	moveq	r3, #1
 8002e60:	2300      	movne	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d19b      	bne.n	8002da4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3720      	adds	r7, #32
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000000 	.word	0x20000000

08002e7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ff6a 	bl	8002d6c <SPI_WaitFlagStateUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea2:	f043 0220 	orr.w	r2, r3, #32
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e000      	b.n	8002eb0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e03f      	b.n	8002f4a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fe fae4 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2224      	movs	r2, #36	; 0x24
 8002ee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002efa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f829 	bl	8002f54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f8e:	f023 030c 	bic.w	r3, r3, #12
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a2c      	ldr	r2, [pc, #176]	; (8003068 <UART_SetConfig+0x114>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d103      	bne.n	8002fc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fbc:	f7ff fb42 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	e002      	b.n	8002fca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fc4:	f7ff fb2a 	bl	800261c <HAL_RCC_GetPCLK1Freq>
 8002fc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009a      	lsls	r2, r3, #2
 8002fd4:	441a      	add	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe0:	4a22      	ldr	r2, [pc, #136]	; (800306c <UART_SetConfig+0x118>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	0119      	lsls	r1, r3, #4
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009a      	lsls	r2, r3, #2
 8002ff4:	441a      	add	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003000:	4b1a      	ldr	r3, [pc, #104]	; (800306c <UART_SetConfig+0x118>)
 8003002:	fba3 0302 	umull	r0, r3, r3, r2
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	2064      	movs	r0, #100	; 0x64
 800300a:	fb00 f303 	mul.w	r3, r0, r3
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	3332      	adds	r3, #50	; 0x32
 8003014:	4a15      	ldr	r2, [pc, #84]	; (800306c <UART_SetConfig+0x118>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003020:	4419      	add	r1, r3
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	009a      	lsls	r2, r3, #2
 800302c:	441a      	add	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	fbb2 f2f3 	udiv	r2, r2, r3
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <UART_SetConfig+0x118>)
 800303a:	fba3 0302 	umull	r0, r3, r3, r2
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	2064      	movs	r0, #100	; 0x64
 8003042:	fb00 f303 	mul.w	r3, r0, r3
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	3332      	adds	r3, #50	; 0x32
 800304c:	4a07      	ldr	r2, [pc, #28]	; (800306c <UART_SetConfig+0x118>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	f003 020f 	and.w	r2, r3, #15
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	440a      	add	r2, r1
 800305e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40013800 	.word	0x40013800
 800306c:	51eb851f 	.word	0x51eb851f

08003070 <__errno>:
 8003070:	4b01      	ldr	r3, [pc, #4]	; (8003078 <__errno+0x8>)
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	2000000c 	.word	0x2000000c

0800307c <__libc_init_array>:
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	2600      	movs	r6, #0
 8003080:	4d0c      	ldr	r5, [pc, #48]	; (80030b4 <__libc_init_array+0x38>)
 8003082:	4c0d      	ldr	r4, [pc, #52]	; (80030b8 <__libc_init_array+0x3c>)
 8003084:	1b64      	subs	r4, r4, r5
 8003086:	10a4      	asrs	r4, r4, #2
 8003088:	42a6      	cmp	r6, r4
 800308a:	d109      	bne.n	80030a0 <__libc_init_array+0x24>
 800308c:	f005 ffc4 	bl	8009018 <_init>
 8003090:	2600      	movs	r6, #0
 8003092:	4d0a      	ldr	r5, [pc, #40]	; (80030bc <__libc_init_array+0x40>)
 8003094:	4c0a      	ldr	r4, [pc, #40]	; (80030c0 <__libc_init_array+0x44>)
 8003096:	1b64      	subs	r4, r4, r5
 8003098:	10a4      	asrs	r4, r4, #2
 800309a:	42a6      	cmp	r6, r4
 800309c:	d105      	bne.n	80030aa <__libc_init_array+0x2e>
 800309e:	bd70      	pop	{r4, r5, r6, pc}
 80030a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a4:	4798      	blx	r3
 80030a6:	3601      	adds	r6, #1
 80030a8:	e7ee      	b.n	8003088 <__libc_init_array+0xc>
 80030aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ae:	4798      	blx	r3
 80030b0:	3601      	adds	r6, #1
 80030b2:	e7f2      	b.n	800309a <__libc_init_array+0x1e>
 80030b4:	0800957c 	.word	0x0800957c
 80030b8:	0800957c 	.word	0x0800957c
 80030bc:	0800957c 	.word	0x0800957c
 80030c0:	08009584 	.word	0x08009584

080030c4 <memcpy>:
 80030c4:	440a      	add	r2, r1
 80030c6:	4291      	cmp	r1, r2
 80030c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80030cc:	d100      	bne.n	80030d0 <memcpy+0xc>
 80030ce:	4770      	bx	lr
 80030d0:	b510      	push	{r4, lr}
 80030d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030d6:	4291      	cmp	r1, r2
 80030d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030dc:	d1f9      	bne.n	80030d2 <memcpy+0xe>
 80030de:	bd10      	pop	{r4, pc}

080030e0 <memset>:
 80030e0:	4603      	mov	r3, r0
 80030e2:	4402      	add	r2, r0
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d100      	bne.n	80030ea <memset+0xa>
 80030e8:	4770      	bx	lr
 80030ea:	f803 1b01 	strb.w	r1, [r3], #1
 80030ee:	e7f9      	b.n	80030e4 <memset+0x4>

080030f0 <printf>:
 80030f0:	b40f      	push	{r0, r1, r2, r3}
 80030f2:	b507      	push	{r0, r1, r2, lr}
 80030f4:	4906      	ldr	r1, [pc, #24]	; (8003110 <printf+0x20>)
 80030f6:	ab04      	add	r3, sp, #16
 80030f8:	6808      	ldr	r0, [r1, #0]
 80030fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80030fe:	6881      	ldr	r1, [r0, #8]
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	f001 fa4b 	bl	800459c <_vfprintf_r>
 8003106:	b003      	add	sp, #12
 8003108:	f85d eb04 	ldr.w	lr, [sp], #4
 800310c:	b004      	add	sp, #16
 800310e:	4770      	bx	lr
 8003110:	2000000c 	.word	0x2000000c

08003114 <_puts_r>:
 8003114:	b530      	push	{r4, r5, lr}
 8003116:	4605      	mov	r5, r0
 8003118:	b089      	sub	sp, #36	; 0x24
 800311a:	4608      	mov	r0, r1
 800311c:	460c      	mov	r4, r1
 800311e:	f7fd f817 	bl	8000150 <strlen>
 8003122:	4b1e      	ldr	r3, [pc, #120]	; (800319c <_puts_r+0x88>)
 8003124:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8003128:	9306      	str	r3, [sp, #24]
 800312a:	2301      	movs	r3, #1
 800312c:	4418      	add	r0, r3
 800312e:	9307      	str	r3, [sp, #28]
 8003130:	ab04      	add	r3, sp, #16
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	2302      	movs	r3, #2
 8003136:	9302      	str	r3, [sp, #8]
 8003138:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800313a:	68ac      	ldr	r4, [r5, #8]
 800313c:	9003      	str	r0, [sp, #12]
 800313e:	b913      	cbnz	r3, 8003146 <_puts_r+0x32>
 8003140:	4628      	mov	r0, r5
 8003142:	f003 fc39 	bl	80069b8 <__sinit>
 8003146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003148:	07db      	lsls	r3, r3, #31
 800314a:	d405      	bmi.n	8003158 <_puts_r+0x44>
 800314c:	89a3      	ldrh	r3, [r4, #12]
 800314e:	0598      	lsls	r0, r3, #22
 8003150:	d402      	bmi.n	8003158 <_puts_r+0x44>
 8003152:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003154:	f003 fef0 	bl	8006f38 <__retarget_lock_acquire_recursive>
 8003158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800315c:	0499      	lsls	r1, r3, #18
 800315e:	d406      	bmi.n	800316e <_puts_r+0x5a>
 8003160:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003164:	81a3      	strh	r3, [r4, #12]
 8003166:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003168:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800316c:	6663      	str	r3, [r4, #100]	; 0x64
 800316e:	4628      	mov	r0, r5
 8003170:	aa01      	add	r2, sp, #4
 8003172:	4621      	mov	r1, r4
 8003174:	f003 fd70 	bl	8006c58 <__sfvwrite_r>
 8003178:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800317a:	2800      	cmp	r0, #0
 800317c:	bf14      	ite	ne
 800317e:	f04f 35ff 	movne.w	r5, #4294967295
 8003182:	250a      	moveq	r5, #10
 8003184:	07da      	lsls	r2, r3, #31
 8003186:	d405      	bmi.n	8003194 <_puts_r+0x80>
 8003188:	89a3      	ldrh	r3, [r4, #12]
 800318a:	059b      	lsls	r3, r3, #22
 800318c:	d402      	bmi.n	8003194 <_puts_r+0x80>
 800318e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003190:	f003 fed3 	bl	8006f3a <__retarget_lock_release_recursive>
 8003194:	4628      	mov	r0, r5
 8003196:	b009      	add	sp, #36	; 0x24
 8003198:	bd30      	pop	{r4, r5, pc}
 800319a:	bf00      	nop
 800319c:	08009566 	.word	0x08009566

080031a0 <puts>:
 80031a0:	4b02      	ldr	r3, [pc, #8]	; (80031ac <puts+0xc>)
 80031a2:	4601      	mov	r1, r0
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	f7ff bfb5 	b.w	8003114 <_puts_r>
 80031aa:	bf00      	nop
 80031ac:	2000000c 	.word	0x2000000c

080031b0 <sprintf>:
 80031b0:	b40e      	push	{r1, r2, r3}
 80031b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031b6:	b500      	push	{lr}
 80031b8:	b09c      	sub	sp, #112	; 0x70
 80031ba:	ab1d      	add	r3, sp, #116	; 0x74
 80031bc:	9002      	str	r0, [sp, #8]
 80031be:	9006      	str	r0, [sp, #24]
 80031c0:	9107      	str	r1, [sp, #28]
 80031c2:	9104      	str	r1, [sp, #16]
 80031c4:	4808      	ldr	r0, [pc, #32]	; (80031e8 <sprintf+0x38>)
 80031c6:	4909      	ldr	r1, [pc, #36]	; (80031ec <sprintf+0x3c>)
 80031c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80031cc:	9105      	str	r1, [sp, #20]
 80031ce:	6800      	ldr	r0, [r0, #0]
 80031d0:	a902      	add	r1, sp, #8
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	f000 f80c 	bl	80031f0 <_svfprintf_r>
 80031d8:	2200      	movs	r2, #0
 80031da:	9b02      	ldr	r3, [sp, #8]
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	b01c      	add	sp, #112	; 0x70
 80031e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80031e4:	b003      	add	sp, #12
 80031e6:	4770      	bx	lr
 80031e8:	2000000c 	.word	0x2000000c
 80031ec:	ffff0208 	.word	0xffff0208

080031f0 <_svfprintf_r>:
 80031f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f4:	b0d3      	sub	sp, #332	; 0x14c
 80031f6:	468b      	mov	fp, r1
 80031f8:	9207      	str	r2, [sp, #28]
 80031fa:	461e      	mov	r6, r3
 80031fc:	4681      	mov	r9, r0
 80031fe:	f003 fe95 	bl	8006f2c <_localeconv_r>
 8003202:	6803      	ldr	r3, [r0, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	9318      	str	r3, [sp, #96]	; 0x60
 8003208:	f7fc ffa2 	bl	8000150 <strlen>
 800320c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8003210:	9012      	str	r0, [sp, #72]	; 0x48
 8003212:	061a      	lsls	r2, r3, #24
 8003214:	d518      	bpl.n	8003248 <_svfprintf_r+0x58>
 8003216:	f8db 3010 	ldr.w	r3, [fp, #16]
 800321a:	b9ab      	cbnz	r3, 8003248 <_svfprintf_r+0x58>
 800321c:	2140      	movs	r1, #64	; 0x40
 800321e:	4648      	mov	r0, r9
 8003220:	f003 fef8 	bl	8007014 <_malloc_r>
 8003224:	f8cb 0000 	str.w	r0, [fp]
 8003228:	f8cb 0010 	str.w	r0, [fp, #16]
 800322c:	b948      	cbnz	r0, 8003242 <_svfprintf_r+0x52>
 800322e:	230c      	movs	r3, #12
 8003230:	f8c9 3000 	str.w	r3, [r9]
 8003234:	f04f 33ff 	mov.w	r3, #4294967295
 8003238:	9313      	str	r3, [sp, #76]	; 0x4c
 800323a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800323c:	b053      	add	sp, #332	; 0x14c
 800323e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003242:	2340      	movs	r3, #64	; 0x40
 8003244:	f8cb 3014 	str.w	r3, [fp, #20]
 8003248:	2500      	movs	r5, #0
 800324a:	2200      	movs	r2, #0
 800324c:	2300      	movs	r3, #0
 800324e:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 8003252:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003256:	e9cd 551a 	strd	r5, r5, [sp, #104]	; 0x68
 800325a:	ac29      	add	r4, sp, #164	; 0xa4
 800325c:	9426      	str	r4, [sp, #152]	; 0x98
 800325e:	9508      	str	r5, [sp, #32]
 8003260:	950e      	str	r5, [sp, #56]	; 0x38
 8003262:	9516      	str	r5, [sp, #88]	; 0x58
 8003264:	9519      	str	r5, [sp, #100]	; 0x64
 8003266:	9513      	str	r5, [sp, #76]	; 0x4c
 8003268:	9b07      	ldr	r3, [sp, #28]
 800326a:	461d      	mov	r5, r3
 800326c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003270:	b10a      	cbz	r2, 8003276 <_svfprintf_r+0x86>
 8003272:	2a25      	cmp	r2, #37	; 0x25
 8003274:	d1f9      	bne.n	800326a <_svfprintf_r+0x7a>
 8003276:	9b07      	ldr	r3, [sp, #28]
 8003278:	1aef      	subs	r7, r5, r3
 800327a:	d00d      	beq.n	8003298 <_svfprintf_r+0xa8>
 800327c:	e9c4 3700 	strd	r3, r7, [r4]
 8003280:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003282:	443b      	add	r3, r7
 8003284:	9328      	str	r3, [sp, #160]	; 0xa0
 8003286:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003288:	3301      	adds	r3, #1
 800328a:	2b07      	cmp	r3, #7
 800328c:	9327      	str	r3, [sp, #156]	; 0x9c
 800328e:	dc78      	bgt.n	8003382 <_svfprintf_r+0x192>
 8003290:	3408      	adds	r4, #8
 8003292:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003294:	443b      	add	r3, r7
 8003296:	9313      	str	r3, [sp, #76]	; 0x4c
 8003298:	782b      	ldrb	r3, [r5, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	f001 8142 	beq.w	8004524 <_svfprintf_r+0x1334>
 80032a0:	2300      	movs	r3, #0
 80032a2:	f04f 38ff 	mov.w	r8, #4294967295
 80032a6:	469a      	mov	sl, r3
 80032a8:	270a      	movs	r7, #10
 80032aa:	212b      	movs	r1, #43	; 0x2b
 80032ac:	3501      	adds	r5, #1
 80032ae:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80032b2:	9314      	str	r3, [sp, #80]	; 0x50
 80032b4:	462a      	mov	r2, r5
 80032b6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80032ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80032bc:	920f      	str	r2, [sp, #60]	; 0x3c
 80032be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032c0:	3b20      	subs	r3, #32
 80032c2:	2b5a      	cmp	r3, #90	; 0x5a
 80032c4:	f200 85a0 	bhi.w	8003e08 <_svfprintf_r+0xc18>
 80032c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80032cc:	059e007e 	.word	0x059e007e
 80032d0:	0086059e 	.word	0x0086059e
 80032d4:	059e059e 	.word	0x059e059e
 80032d8:	0065059e 	.word	0x0065059e
 80032dc:	059e059e 	.word	0x059e059e
 80032e0:	00930089 	.word	0x00930089
 80032e4:	0090059e 	.word	0x0090059e
 80032e8:	059e0096 	.word	0x059e0096
 80032ec:	00b300b0 	.word	0x00b300b0
 80032f0:	00b300b3 	.word	0x00b300b3
 80032f4:	00b300b3 	.word	0x00b300b3
 80032f8:	00b300b3 	.word	0x00b300b3
 80032fc:	00b300b3 	.word	0x00b300b3
 8003300:	059e059e 	.word	0x059e059e
 8003304:	059e059e 	.word	0x059e059e
 8003308:	059e059e 	.word	0x059e059e
 800330c:	011d059e 	.word	0x011d059e
 8003310:	00e0059e 	.word	0x00e0059e
 8003314:	011d00f3 	.word	0x011d00f3
 8003318:	011d011d 	.word	0x011d011d
 800331c:	059e059e 	.word	0x059e059e
 8003320:	059e059e 	.word	0x059e059e
 8003324:	059e00c3 	.word	0x059e00c3
 8003328:	0471059e 	.word	0x0471059e
 800332c:	059e059e 	.word	0x059e059e
 8003330:	04b8059e 	.word	0x04b8059e
 8003334:	04da059e 	.word	0x04da059e
 8003338:	059e059e 	.word	0x059e059e
 800333c:	059e04f9 	.word	0x059e04f9
 8003340:	059e059e 	.word	0x059e059e
 8003344:	059e059e 	.word	0x059e059e
 8003348:	059e059e 	.word	0x059e059e
 800334c:	011d059e 	.word	0x011d059e
 8003350:	00e0059e 	.word	0x00e0059e
 8003354:	011d00f5 	.word	0x011d00f5
 8003358:	011d011d 	.word	0x011d011d
 800335c:	00f500c6 	.word	0x00f500c6
 8003360:	059e00da 	.word	0x059e00da
 8003364:	059e00d3 	.word	0x059e00d3
 8003368:	0473044e 	.word	0x0473044e
 800336c:	00da04a7 	.word	0x00da04a7
 8003370:	04b8059e 	.word	0x04b8059e
 8003374:	04dc007c 	.word	0x04dc007c
 8003378:	059e059e 	.word	0x059e059e
 800337c:	059e0516 	.word	0x059e0516
 8003380:	007c      	.short	0x007c
 8003382:	4659      	mov	r1, fp
 8003384:	4648      	mov	r0, r9
 8003386:	aa26      	add	r2, sp, #152	; 0x98
 8003388:	f004 fe32 	bl	8007ff0 <__ssprint_r>
 800338c:	2800      	cmp	r0, #0
 800338e:	f040 8128 	bne.w	80035e2 <_svfprintf_r+0x3f2>
 8003392:	ac29      	add	r4, sp, #164	; 0xa4
 8003394:	e77d      	b.n	8003292 <_svfprintf_r+0xa2>
 8003396:	4648      	mov	r0, r9
 8003398:	f003 fdc8 	bl	8006f2c <_localeconv_r>
 800339c:	6843      	ldr	r3, [r0, #4]
 800339e:	4618      	mov	r0, r3
 80033a0:	9319      	str	r3, [sp, #100]	; 0x64
 80033a2:	f7fc fed5 	bl	8000150 <strlen>
 80033a6:	9016      	str	r0, [sp, #88]	; 0x58
 80033a8:	4648      	mov	r0, r9
 80033aa:	f003 fdbf 	bl	8006f2c <_localeconv_r>
 80033ae:	6883      	ldr	r3, [r0, #8]
 80033b0:	212b      	movs	r1, #43	; 0x2b
 80033b2:	930e      	str	r3, [sp, #56]	; 0x38
 80033b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80033b6:	b12b      	cbz	r3, 80033c4 <_svfprintf_r+0x1d4>
 80033b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033ba:	b11b      	cbz	r3, 80033c4 <_svfprintf_r+0x1d4>
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	b10b      	cbz	r3, 80033c4 <_svfprintf_r+0x1d4>
 80033c0:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80033c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80033c6:	e775      	b.n	80032b4 <_svfprintf_r+0xc4>
 80033c8:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f9      	bne.n	80033c4 <_svfprintf_r+0x1d4>
 80033d0:	2320      	movs	r3, #32
 80033d2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80033d6:	e7f5      	b.n	80033c4 <_svfprintf_r+0x1d4>
 80033d8:	f04a 0a01 	orr.w	sl, sl, #1
 80033dc:	e7f2      	b.n	80033c4 <_svfprintf_r+0x1d4>
 80033de:	f856 3b04 	ldr.w	r3, [r6], #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	9314      	str	r3, [sp, #80]	; 0x50
 80033e6:	daed      	bge.n	80033c4 <_svfprintf_r+0x1d4>
 80033e8:	425b      	negs	r3, r3
 80033ea:	9314      	str	r3, [sp, #80]	; 0x50
 80033ec:	f04a 0a04 	orr.w	sl, sl, #4
 80033f0:	e7e8      	b.n	80033c4 <_svfprintf_r+0x1d4>
 80033f2:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 80033f6:	e7e5      	b.n	80033c4 <_svfprintf_r+0x1d4>
 80033f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80033fa:	f812 3b01 	ldrb.w	r3, [r2], #1
 80033fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003400:	930b      	str	r3, [sp, #44]	; 0x2c
 8003402:	d110      	bne.n	8003426 <_svfprintf_r+0x236>
 8003404:	f856 0b04 	ldr.w	r0, [r6], #4
 8003408:	920f      	str	r2, [sp, #60]	; 0x3c
 800340a:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 800340e:	e7d9      	b.n	80033c4 <_svfprintf_r+0x1d4>
 8003410:	fb07 3808 	mla	r8, r7, r8, r3
 8003414:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003418:	930b      	str	r3, [sp, #44]	; 0x2c
 800341a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800341c:	3b30      	subs	r3, #48	; 0x30
 800341e:	2b09      	cmp	r3, #9
 8003420:	d9f6      	bls.n	8003410 <_svfprintf_r+0x220>
 8003422:	920f      	str	r2, [sp, #60]	; 0x3c
 8003424:	e74b      	b.n	80032be <_svfprintf_r+0xce>
 8003426:	f04f 0800 	mov.w	r8, #0
 800342a:	e7f6      	b.n	800341a <_svfprintf_r+0x22a>
 800342c:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8003430:	e7c8      	b.n	80033c4 <_svfprintf_r+0x1d4>
 8003432:	2300      	movs	r3, #0
 8003434:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003436:	9314      	str	r3, [sp, #80]	; 0x50
 8003438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800343a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800343c:	3b30      	subs	r3, #48	; 0x30
 800343e:	fb07 3300 	mla	r3, r7, r0, r3
 8003442:	9314      	str	r3, [sp, #80]	; 0x50
 8003444:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003448:	930b      	str	r3, [sp, #44]	; 0x2c
 800344a:	3b30      	subs	r3, #48	; 0x30
 800344c:	2b09      	cmp	r3, #9
 800344e:	d9f3      	bls.n	8003438 <_svfprintf_r+0x248>
 8003450:	e7e7      	b.n	8003422 <_svfprintf_r+0x232>
 8003452:	f04a 0a08 	orr.w	sl, sl, #8
 8003456:	e7b5      	b.n	80033c4 <_svfprintf_r+0x1d4>
 8003458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b68      	cmp	r3, #104	; 0x68
 800345e:	bf01      	itttt	eq
 8003460:	9b0f      	ldreq	r3, [sp, #60]	; 0x3c
 8003462:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8003466:	3301      	addeq	r3, #1
 8003468:	930f      	streq	r3, [sp, #60]	; 0x3c
 800346a:	bf18      	it	ne
 800346c:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8003470:	e7a8      	b.n	80033c4 <_svfprintf_r+0x1d4>
 8003472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b6c      	cmp	r3, #108	; 0x6c
 8003478:	d105      	bne.n	8003486 <_svfprintf_r+0x296>
 800347a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800347c:	3301      	adds	r3, #1
 800347e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003480:	f04a 0a20 	orr.w	sl, sl, #32
 8003484:	e79e      	b.n	80033c4 <_svfprintf_r+0x1d4>
 8003486:	f04a 0a10 	orr.w	sl, sl, #16
 800348a:	e79b      	b.n	80033c4 <_svfprintf_r+0x1d4>
 800348c:	4632      	mov	r2, r6
 800348e:	2000      	movs	r0, #0
 8003490:	f852 3b04 	ldr.w	r3, [r2], #4
 8003494:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8003498:	920a      	str	r2, [sp, #40]	; 0x28
 800349a:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800349e:	ab39      	add	r3, sp, #228	; 0xe4
 80034a0:	4607      	mov	r7, r0
 80034a2:	f04f 0801 	mov.w	r8, #1
 80034a6:	4606      	mov	r6, r0
 80034a8:	4605      	mov	r5, r0
 80034aa:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 80034ae:	9307      	str	r3, [sp, #28]
 80034b0:	e1a9      	b.n	8003806 <_svfprintf_r+0x616>
 80034b2:	f04a 0a10 	orr.w	sl, sl, #16
 80034b6:	f01a 0f20 	tst.w	sl, #32
 80034ba:	d011      	beq.n	80034e0 <_svfprintf_r+0x2f0>
 80034bc:	3607      	adds	r6, #7
 80034be:	f026 0307 	bic.w	r3, r6, #7
 80034c2:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80034c6:	930a      	str	r3, [sp, #40]	; 0x28
 80034c8:	2e00      	cmp	r6, #0
 80034ca:	f177 0300 	sbcs.w	r3, r7, #0
 80034ce:	da05      	bge.n	80034dc <_svfprintf_r+0x2ec>
 80034d0:	232d      	movs	r3, #45	; 0x2d
 80034d2:	4276      	negs	r6, r6
 80034d4:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80034d8:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80034dc:	2301      	movs	r3, #1
 80034de:	e377      	b.n	8003bd0 <_svfprintf_r+0x9e0>
 80034e0:	1d33      	adds	r3, r6, #4
 80034e2:	f01a 0f10 	tst.w	sl, #16
 80034e6:	930a      	str	r3, [sp, #40]	; 0x28
 80034e8:	d002      	beq.n	80034f0 <_svfprintf_r+0x300>
 80034ea:	6836      	ldr	r6, [r6, #0]
 80034ec:	17f7      	asrs	r7, r6, #31
 80034ee:	e7eb      	b.n	80034c8 <_svfprintf_r+0x2d8>
 80034f0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80034f4:	6836      	ldr	r6, [r6, #0]
 80034f6:	d001      	beq.n	80034fc <_svfprintf_r+0x30c>
 80034f8:	b236      	sxth	r6, r6
 80034fa:	e7f7      	b.n	80034ec <_svfprintf_r+0x2fc>
 80034fc:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8003500:	bf18      	it	ne
 8003502:	b276      	sxtbne	r6, r6
 8003504:	e7f2      	b.n	80034ec <_svfprintf_r+0x2fc>
 8003506:	3607      	adds	r6, #7
 8003508:	f026 0307 	bic.w	r3, r6, #7
 800350c:	4619      	mov	r1, r3
 800350e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8003512:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003516:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 800351a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800351e:	910a      	str	r1, [sp, #40]	; 0x28
 8003520:	f04f 32ff 	mov.w	r2, #4294967295
 8003524:	4630      	mov	r0, r6
 8003526:	4629      	mov	r1, r5
 8003528:	4b32      	ldr	r3, [pc, #200]	; (80035f4 <_svfprintf_r+0x404>)
 800352a:	f7fd fa6f 	bl	8000a0c <__aeabi_dcmpun>
 800352e:	bb08      	cbnz	r0, 8003574 <_svfprintf_r+0x384>
 8003530:	f04f 32ff 	mov.w	r2, #4294967295
 8003534:	4630      	mov	r0, r6
 8003536:	4629      	mov	r1, r5
 8003538:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <_svfprintf_r+0x404>)
 800353a:	f7fd fa49 	bl	80009d0 <__aeabi_dcmple>
 800353e:	b9c8      	cbnz	r0, 8003574 <_svfprintf_r+0x384>
 8003540:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003544:	2200      	movs	r2, #0
 8003546:	2300      	movs	r3, #0
 8003548:	f7fd fa38 	bl	80009bc <__aeabi_dcmplt>
 800354c:	b110      	cbz	r0, 8003554 <_svfprintf_r+0x364>
 800354e:	232d      	movs	r3, #45	; 0x2d
 8003550:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8003554:	4a28      	ldr	r2, [pc, #160]	; (80035f8 <_svfprintf_r+0x408>)
 8003556:	4829      	ldr	r0, [pc, #164]	; (80035fc <_svfprintf_r+0x40c>)
 8003558:	4613      	mov	r3, r2
 800355a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800355c:	2700      	movs	r7, #0
 800355e:	2947      	cmp	r1, #71	; 0x47
 8003560:	bfc8      	it	gt
 8003562:	4603      	movgt	r3, r0
 8003564:	f04f 0803 	mov.w	r8, #3
 8003568:	9307      	str	r3, [sp, #28]
 800356a:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800356e:	463e      	mov	r6, r7
 8003570:	f000 bc24 	b.w	8003dbc <_svfprintf_r+0xbcc>
 8003574:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	f7fd fa46 	bl	8000a0c <__aeabi_dcmpun>
 8003580:	4607      	mov	r7, r0
 8003582:	b148      	cbz	r0, 8003598 <_svfprintf_r+0x3a8>
 8003584:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003586:	4a1e      	ldr	r2, [pc, #120]	; (8003600 <_svfprintf_r+0x410>)
 8003588:	2b00      	cmp	r3, #0
 800358a:	bfb8      	it	lt
 800358c:	232d      	movlt	r3, #45	; 0x2d
 800358e:	481d      	ldr	r0, [pc, #116]	; (8003604 <_svfprintf_r+0x414>)
 8003590:	bfb8      	it	lt
 8003592:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8003596:	e7df      	b.n	8003558 <_svfprintf_r+0x368>
 8003598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800359a:	f023 0320 	bic.w	r3, r3, #32
 800359e:	2b41      	cmp	r3, #65	; 0x41
 80035a0:	930c      	str	r3, [sp, #48]	; 0x30
 80035a2:	d131      	bne.n	8003608 <_svfprintf_r+0x418>
 80035a4:	2330      	movs	r3, #48	; 0x30
 80035a6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80035aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035ac:	f04a 0a02 	orr.w	sl, sl, #2
 80035b0:	2b61      	cmp	r3, #97	; 0x61
 80035b2:	bf0c      	ite	eq
 80035b4:	2378      	moveq	r3, #120	; 0x78
 80035b6:	2358      	movne	r3, #88	; 0x58
 80035b8:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 80035bc:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80035c0:	f340 81fa 	ble.w	80039b8 <_svfprintf_r+0x7c8>
 80035c4:	4648      	mov	r0, r9
 80035c6:	f108 0101 	add.w	r1, r8, #1
 80035ca:	f003 fd23 	bl	8007014 <_malloc_r>
 80035ce:	9007      	str	r0, [sp, #28]
 80035d0:	2800      	cmp	r0, #0
 80035d2:	f040 81f4 	bne.w	80039be <_svfprintf_r+0x7ce>
 80035d6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80035da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035de:	f8ab 300c 	strh.w	r3, [fp, #12]
 80035e2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80035e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80035ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80035ec:	bf18      	it	ne
 80035ee:	f04f 33ff 	movne.w	r3, #4294967295
 80035f2:	e621      	b.n	8003238 <_svfprintf_r+0x48>
 80035f4:	7fefffff 	.word	0x7fefffff
 80035f8:	080092bc 	.word	0x080092bc
 80035fc:	080092c0 	.word	0x080092c0
 8003600:	080092c4 	.word	0x080092c4
 8003604:	080092c8 	.word	0x080092c8
 8003608:	f1b8 3fff 	cmp.w	r8, #4294967295
 800360c:	f000 81d9 	beq.w	80039c2 <_svfprintf_r+0x7d2>
 8003610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003612:	2b47      	cmp	r3, #71	; 0x47
 8003614:	d105      	bne.n	8003622 <_svfprintf_r+0x432>
 8003616:	f1b8 0f00 	cmp.w	r8, #0
 800361a:	d102      	bne.n	8003622 <_svfprintf_r+0x432>
 800361c:	4647      	mov	r7, r8
 800361e:	f04f 0801 	mov.w	r8, #1
 8003622:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8003626:	9315      	str	r3, [sp, #84]	; 0x54
 8003628:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800362a:	1e1d      	subs	r5, r3, #0
 800362c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800362e:	9308      	str	r3, [sp, #32]
 8003630:	bfb7      	itett	lt
 8003632:	462b      	movlt	r3, r5
 8003634:	2300      	movge	r3, #0
 8003636:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 800363a:	232d      	movlt	r3, #45	; 0x2d
 800363c:	931c      	str	r3, [sp, #112]	; 0x70
 800363e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003640:	2b41      	cmp	r3, #65	; 0x41
 8003642:	f040 81d7 	bne.w	80039f4 <_svfprintf_r+0x804>
 8003646:	aa20      	add	r2, sp, #128	; 0x80
 8003648:	4629      	mov	r1, r5
 800364a:	9808      	ldr	r0, [sp, #32]
 800364c:	f004 fc36 	bl	8007ebc <frexp>
 8003650:	2200      	movs	r2, #0
 8003652:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003656:	f7fc ff3f 	bl	80004d8 <__aeabi_dmul>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003662:	2200      	movs	r2, #0
 8003664:	2300      	movs	r3, #0
 8003666:	f7fd f99f 	bl	80009a8 <__aeabi_dcmpeq>
 800366a:	b108      	cbz	r0, 8003670 <_svfprintf_r+0x480>
 800366c:	2301      	movs	r3, #1
 800366e:	9320      	str	r3, [sp, #128]	; 0x80
 8003670:	4eb4      	ldr	r6, [pc, #720]	; (8003944 <_svfprintf_r+0x754>)
 8003672:	4bb5      	ldr	r3, [pc, #724]	; (8003948 <_svfprintf_r+0x758>)
 8003674:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003676:	9d07      	ldr	r5, [sp, #28]
 8003678:	2a61      	cmp	r2, #97	; 0x61
 800367a:	bf18      	it	ne
 800367c:	461e      	movne	r6, r3
 800367e:	9617      	str	r6, [sp, #92]	; 0x5c
 8003680:	f108 36ff 	add.w	r6, r8, #4294967295
 8003684:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003688:	2200      	movs	r2, #0
 800368a:	4bb0      	ldr	r3, [pc, #704]	; (800394c <_svfprintf_r+0x75c>)
 800368c:	f7fc ff24 	bl	80004d8 <__aeabi_dmul>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003698:	f7fd f9ce 	bl	8000a38 <__aeabi_d2iz>
 800369c:	901d      	str	r0, [sp, #116]	; 0x74
 800369e:	f7fc feb1 	bl	8000404 <__aeabi_i2d>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80036aa:	f7fc fd5d 	bl	8000168 <__aeabi_dsub>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80036b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80036b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80036ba:	960d      	str	r6, [sp, #52]	; 0x34
 80036bc:	5c9b      	ldrb	r3, [r3, r2]
 80036be:	f805 3b01 	strb.w	r3, [r5], #1
 80036c2:	1c73      	adds	r3, r6, #1
 80036c4:	d006      	beq.n	80036d4 <_svfprintf_r+0x4e4>
 80036c6:	2200      	movs	r2, #0
 80036c8:	2300      	movs	r3, #0
 80036ca:	3e01      	subs	r6, #1
 80036cc:	f7fd f96c 	bl	80009a8 <__aeabi_dcmpeq>
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d0d7      	beq.n	8003684 <_svfprintf_r+0x494>
 80036d4:	2200      	movs	r2, #0
 80036d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80036da:	4b9d      	ldr	r3, [pc, #628]	; (8003950 <_svfprintf_r+0x760>)
 80036dc:	f7fd f98c 	bl	80009f8 <__aeabi_dcmpgt>
 80036e0:	b960      	cbnz	r0, 80036fc <_svfprintf_r+0x50c>
 80036e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80036e6:	2200      	movs	r2, #0
 80036e8:	4b99      	ldr	r3, [pc, #612]	; (8003950 <_svfprintf_r+0x760>)
 80036ea:	f7fd f95d 	bl	80009a8 <__aeabi_dcmpeq>
 80036ee:	2800      	cmp	r0, #0
 80036f0:	f000 817b 	beq.w	80039ea <_svfprintf_r+0x7fa>
 80036f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80036f6:	07d8      	lsls	r0, r3, #31
 80036f8:	f140 8177 	bpl.w	80039ea <_svfprintf_r+0x7fa>
 80036fc:	2030      	movs	r0, #48	; 0x30
 80036fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003700:	9524      	str	r5, [sp, #144]	; 0x90
 8003702:	7bd9      	ldrb	r1, [r3, #15]
 8003704:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003706:	1e53      	subs	r3, r2, #1
 8003708:	9324      	str	r3, [sp, #144]	; 0x90
 800370a:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800370e:	428b      	cmp	r3, r1
 8003710:	f000 815a 	beq.w	80039c8 <_svfprintf_r+0x7d8>
 8003714:	2b39      	cmp	r3, #57	; 0x39
 8003716:	bf0b      	itete	eq
 8003718:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800371a:	3301      	addne	r3, #1
 800371c:	7a9b      	ldrbeq	r3, [r3, #10]
 800371e:	b2db      	uxtbne	r3, r3
 8003720:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003724:	9b07      	ldr	r3, [sp, #28]
 8003726:	1aeb      	subs	r3, r5, r3
 8003728:	9308      	str	r3, [sp, #32]
 800372a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800372c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800372e:	2b47      	cmp	r3, #71	; 0x47
 8003730:	f040 81ad 	bne.w	8003a8e <_svfprintf_r+0x89e>
 8003734:	1ce9      	adds	r1, r5, #3
 8003736:	db02      	blt.n	800373e <_svfprintf_r+0x54e>
 8003738:	45a8      	cmp	r8, r5
 800373a:	f280 81cf 	bge.w	8003adc <_svfprintf_r+0x8ec>
 800373e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003740:	3b02      	subs	r3, #2
 8003742:	930b      	str	r3, [sp, #44]	; 0x2c
 8003744:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003746:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800374a:	f021 0120 	bic.w	r1, r1, #32
 800374e:	2941      	cmp	r1, #65	; 0x41
 8003750:	bf08      	it	eq
 8003752:	320f      	addeq	r2, #15
 8003754:	f105 33ff 	add.w	r3, r5, #4294967295
 8003758:	bf06      	itte	eq
 800375a:	b2d2      	uxtbeq	r2, r2
 800375c:	2101      	moveq	r1, #1
 800375e:	2100      	movne	r1, #0
 8003760:	2b00      	cmp	r3, #0
 8003762:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8003766:	bfb4      	ite	lt
 8003768:	222d      	movlt	r2, #45	; 0x2d
 800376a:	222b      	movge	r2, #43	; 0x2b
 800376c:	9320      	str	r3, [sp, #128]	; 0x80
 800376e:	bfb8      	it	lt
 8003770:	f1c5 0301 	rsblt	r3, r5, #1
 8003774:	2b09      	cmp	r3, #9
 8003776:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 800377a:	f340 819e 	ble.w	8003aba <_svfprintf_r+0x8ca>
 800377e:	260a      	movs	r6, #10
 8003780:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8003784:	fb93 f5f6 	sdiv	r5, r3, r6
 8003788:	4611      	mov	r1, r2
 800378a:	fb06 3015 	mls	r0, r6, r5, r3
 800378e:	3030      	adds	r0, #48	; 0x30
 8003790:	f801 0c01 	strb.w	r0, [r1, #-1]
 8003794:	4618      	mov	r0, r3
 8003796:	2863      	cmp	r0, #99	; 0x63
 8003798:	462b      	mov	r3, r5
 800379a:	f102 32ff 	add.w	r2, r2, #4294967295
 800379e:	dcf1      	bgt.n	8003784 <_svfprintf_r+0x594>
 80037a0:	3330      	adds	r3, #48	; 0x30
 80037a2:	1e88      	subs	r0, r1, #2
 80037a4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80037a8:	4603      	mov	r3, r0
 80037aa:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 80037ae:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 80037b2:	42ab      	cmp	r3, r5
 80037b4:	f0c0 817c 	bcc.w	8003ab0 <_svfprintf_r+0x8c0>
 80037b8:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 80037bc:	1a52      	subs	r2, r2, r1
 80037be:	42a8      	cmp	r0, r5
 80037c0:	bf88      	it	hi
 80037c2:	2200      	movhi	r2, #0
 80037c4:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 80037c8:	441a      	add	r2, r3
 80037ca:	ab22      	add	r3, sp, #136	; 0x88
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	9a08      	ldr	r2, [sp, #32]
 80037d0:	931a      	str	r3, [sp, #104]	; 0x68
 80037d2:	2a01      	cmp	r2, #1
 80037d4:	eb03 0802 	add.w	r8, r3, r2
 80037d8:	dc02      	bgt.n	80037e0 <_svfprintf_r+0x5f0>
 80037da:	f01a 0f01 	tst.w	sl, #1
 80037de:	d001      	beq.n	80037e4 <_svfprintf_r+0x5f4>
 80037e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037e2:	4498      	add	r8, r3
 80037e4:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 80037e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ec:	9315      	str	r3, [sp, #84]	; 0x54
 80037ee:	2300      	movs	r3, #0
 80037f0:	461d      	mov	r5, r3
 80037f2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 80037f6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80037f8:	b113      	cbz	r3, 8003800 <_svfprintf_r+0x610>
 80037fa:	232d      	movs	r3, #45	; 0x2d
 80037fc:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8003800:	2600      	movs	r6, #0
 8003802:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8003806:	4546      	cmp	r6, r8
 8003808:	4633      	mov	r3, r6
 800380a:	bfb8      	it	lt
 800380c:	4643      	movlt	r3, r8
 800380e:	9315      	str	r3, [sp, #84]	; 0x54
 8003810:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8003814:	b113      	cbz	r3, 800381c <_svfprintf_r+0x62c>
 8003816:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003818:	3301      	adds	r3, #1
 800381a:	9315      	str	r3, [sp, #84]	; 0x54
 800381c:	f01a 0302 	ands.w	r3, sl, #2
 8003820:	931c      	str	r3, [sp, #112]	; 0x70
 8003822:	bf1e      	ittt	ne
 8003824:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 8003826:	3302      	addne	r3, #2
 8003828:	9315      	strne	r3, [sp, #84]	; 0x54
 800382a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800382e:	931d      	str	r3, [sp, #116]	; 0x74
 8003830:	d121      	bne.n	8003876 <_svfprintf_r+0x686>
 8003832:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	9317      	str	r3, [sp, #92]	; 0x5c
 800383c:	dd1b      	ble.n	8003876 <_svfprintf_r+0x686>
 800383e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8003842:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003844:	3301      	adds	r3, #1
 8003846:	2810      	cmp	r0, #16
 8003848:	4842      	ldr	r0, [pc, #264]	; (8003954 <_svfprintf_r+0x764>)
 800384a:	f104 0108 	add.w	r1, r4, #8
 800384e:	6020      	str	r0, [r4, #0]
 8003850:	f300 82e6 	bgt.w	8003e20 <_svfprintf_r+0xc30>
 8003854:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003856:	2b07      	cmp	r3, #7
 8003858:	4402      	add	r2, r0
 800385a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800385e:	6060      	str	r0, [r4, #4]
 8003860:	f340 82f3 	ble.w	8003e4a <_svfprintf_r+0xc5a>
 8003864:	4659      	mov	r1, fp
 8003866:	4648      	mov	r0, r9
 8003868:	aa26      	add	r2, sp, #152	; 0x98
 800386a:	f004 fbc1 	bl	8007ff0 <__ssprint_r>
 800386e:	2800      	cmp	r0, #0
 8003870:	f040 8636 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8003874:	ac29      	add	r4, sp, #164	; 0xa4
 8003876:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800387a:	b173      	cbz	r3, 800389a <_svfprintf_r+0x6aa>
 800387c:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8003880:	6023      	str	r3, [r4, #0]
 8003882:	2301      	movs	r3, #1
 8003884:	6063      	str	r3, [r4, #4]
 8003886:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003888:	3301      	adds	r3, #1
 800388a:	9328      	str	r3, [sp, #160]	; 0xa0
 800388c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800388e:	3301      	adds	r3, #1
 8003890:	2b07      	cmp	r3, #7
 8003892:	9327      	str	r3, [sp, #156]	; 0x9c
 8003894:	f300 82db 	bgt.w	8003e4e <_svfprintf_r+0xc5e>
 8003898:	3408      	adds	r4, #8
 800389a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800389c:	b16b      	cbz	r3, 80038ba <_svfprintf_r+0x6ca>
 800389e:	ab1f      	add	r3, sp, #124	; 0x7c
 80038a0:	6023      	str	r3, [r4, #0]
 80038a2:	2302      	movs	r3, #2
 80038a4:	6063      	str	r3, [r4, #4]
 80038a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80038a8:	3302      	adds	r3, #2
 80038aa:	9328      	str	r3, [sp, #160]	; 0xa0
 80038ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80038ae:	3301      	adds	r3, #1
 80038b0:	2b07      	cmp	r3, #7
 80038b2:	9327      	str	r3, [sp, #156]	; 0x9c
 80038b4:	f300 82d5 	bgt.w	8003e62 <_svfprintf_r+0xc72>
 80038b8:	3408      	adds	r4, #8
 80038ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80038bc:	2b80      	cmp	r3, #128	; 0x80
 80038be:	d121      	bne.n	8003904 <_svfprintf_r+0x714>
 80038c0:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80038ca:	dd1b      	ble.n	8003904 <_svfprintf_r+0x714>
 80038cc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80038d0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80038d2:	3301      	adds	r3, #1
 80038d4:	2810      	cmp	r0, #16
 80038d6:	4820      	ldr	r0, [pc, #128]	; (8003958 <_svfprintf_r+0x768>)
 80038d8:	f104 0108 	add.w	r1, r4, #8
 80038dc:	6020      	str	r0, [r4, #0]
 80038de:	f300 82ca 	bgt.w	8003e76 <_svfprintf_r+0xc86>
 80038e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80038e4:	2b07      	cmp	r3, #7
 80038e6:	4402      	add	r2, r0
 80038e8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80038ec:	6060      	str	r0, [r4, #4]
 80038ee:	f340 82d7 	ble.w	8003ea0 <_svfprintf_r+0xcb0>
 80038f2:	4659      	mov	r1, fp
 80038f4:	4648      	mov	r0, r9
 80038f6:	aa26      	add	r2, sp, #152	; 0x98
 80038f8:	f004 fb7a 	bl	8007ff0 <__ssprint_r>
 80038fc:	2800      	cmp	r0, #0
 80038fe:	f040 85ef 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8003902:	ac29      	add	r4, sp, #164	; 0xa4
 8003904:	eba6 0608 	sub.w	r6, r6, r8
 8003908:	2e00      	cmp	r6, #0
 800390a:	dd27      	ble.n	800395c <_svfprintf_r+0x76c>
 800390c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8003910:	4811      	ldr	r0, [pc, #68]	; (8003958 <_svfprintf_r+0x768>)
 8003912:	2e10      	cmp	r6, #16
 8003914:	f103 0301 	add.w	r3, r3, #1
 8003918:	f104 0108 	add.w	r1, r4, #8
 800391c:	6020      	str	r0, [r4, #0]
 800391e:	f300 82c1 	bgt.w	8003ea4 <_svfprintf_r+0xcb4>
 8003922:	6066      	str	r6, [r4, #4]
 8003924:	2b07      	cmp	r3, #7
 8003926:	4416      	add	r6, r2
 8003928:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 800392c:	f340 82cd 	ble.w	8003eca <_svfprintf_r+0xcda>
 8003930:	4659      	mov	r1, fp
 8003932:	4648      	mov	r0, r9
 8003934:	aa26      	add	r2, sp, #152	; 0x98
 8003936:	f004 fb5b 	bl	8007ff0 <__ssprint_r>
 800393a:	2800      	cmp	r0, #0
 800393c:	f040 85d0 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8003940:	ac29      	add	r4, sp, #164	; 0xa4
 8003942:	e00b      	b.n	800395c <_svfprintf_r+0x76c>
 8003944:	080092cc 	.word	0x080092cc
 8003948:	080092dd 	.word	0x080092dd
 800394c:	40300000 	.word	0x40300000
 8003950:	3fe00000 	.word	0x3fe00000
 8003954:	080092f0 	.word	0x080092f0
 8003958:	08009300 	.word	0x08009300
 800395c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003960:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8003962:	f040 82b9 	bne.w	8003ed8 <_svfprintf_r+0xce8>
 8003966:	9b07      	ldr	r3, [sp, #28]
 8003968:	4446      	add	r6, r8
 800396a:	e9c4 3800 	strd	r3, r8, [r4]
 800396e:	9628      	str	r6, [sp, #160]	; 0xa0
 8003970:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003972:	3301      	adds	r3, #1
 8003974:	2b07      	cmp	r3, #7
 8003976:	9327      	str	r3, [sp, #156]	; 0x9c
 8003978:	f300 82f4 	bgt.w	8003f64 <_svfprintf_r+0xd74>
 800397c:	3408      	adds	r4, #8
 800397e:	f01a 0f04 	tst.w	sl, #4
 8003982:	f040 858e 	bne.w	80044a2 <_svfprintf_r+0x12b2>
 8003986:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800398a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800398c:	428a      	cmp	r2, r1
 800398e:	bfac      	ite	ge
 8003990:	189b      	addge	r3, r3, r2
 8003992:	185b      	addlt	r3, r3, r1
 8003994:	9313      	str	r3, [sp, #76]	; 0x4c
 8003996:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003998:	b13b      	cbz	r3, 80039aa <_svfprintf_r+0x7ba>
 800399a:	4659      	mov	r1, fp
 800399c:	4648      	mov	r0, r9
 800399e:	aa26      	add	r2, sp, #152	; 0x98
 80039a0:	f004 fb26 	bl	8007ff0 <__ssprint_r>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	f040 859b 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 80039aa:	2300      	movs	r3, #0
 80039ac:	9327      	str	r3, [sp, #156]	; 0x9c
 80039ae:	2f00      	cmp	r7, #0
 80039b0:	f040 85b2 	bne.w	8004518 <_svfprintf_r+0x1328>
 80039b4:	ac29      	add	r4, sp, #164	; 0xa4
 80039b6:	e0e3      	b.n	8003b80 <_svfprintf_r+0x990>
 80039b8:	ab39      	add	r3, sp, #228	; 0xe4
 80039ba:	9307      	str	r3, [sp, #28]
 80039bc:	e631      	b.n	8003622 <_svfprintf_r+0x432>
 80039be:	9f07      	ldr	r7, [sp, #28]
 80039c0:	e62f      	b.n	8003622 <_svfprintf_r+0x432>
 80039c2:	f04f 0806 	mov.w	r8, #6
 80039c6:	e62c      	b.n	8003622 <_svfprintf_r+0x432>
 80039c8:	f802 0c01 	strb.w	r0, [r2, #-1]
 80039cc:	e69a      	b.n	8003704 <_svfprintf_r+0x514>
 80039ce:	f803 0b01 	strb.w	r0, [r3], #1
 80039d2:	1aca      	subs	r2, r1, r3
 80039d4:	2a00      	cmp	r2, #0
 80039d6:	dafa      	bge.n	80039ce <_svfprintf_r+0x7de>
 80039d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80039da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039dc:	3201      	adds	r2, #1
 80039de:	f103 0301 	add.w	r3, r3, #1
 80039e2:	bfb8      	it	lt
 80039e4:	2300      	movlt	r3, #0
 80039e6:	441d      	add	r5, r3
 80039e8:	e69c      	b.n	8003724 <_svfprintf_r+0x534>
 80039ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80039ec:	462b      	mov	r3, r5
 80039ee:	2030      	movs	r0, #48	; 0x30
 80039f0:	18a9      	adds	r1, r5, r2
 80039f2:	e7ee      	b.n	80039d2 <_svfprintf_r+0x7e2>
 80039f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039f6:	2b46      	cmp	r3, #70	; 0x46
 80039f8:	d005      	beq.n	8003a06 <_svfprintf_r+0x816>
 80039fa:	2b45      	cmp	r3, #69	; 0x45
 80039fc:	d11b      	bne.n	8003a36 <_svfprintf_r+0x846>
 80039fe:	f108 0601 	add.w	r6, r8, #1
 8003a02:	2302      	movs	r3, #2
 8003a04:	e001      	b.n	8003a0a <_svfprintf_r+0x81a>
 8003a06:	4646      	mov	r6, r8
 8003a08:	2303      	movs	r3, #3
 8003a0a:	aa24      	add	r2, sp, #144	; 0x90
 8003a0c:	9204      	str	r2, [sp, #16]
 8003a0e:	aa21      	add	r2, sp, #132	; 0x84
 8003a10:	9203      	str	r2, [sp, #12]
 8003a12:	aa20      	add	r2, sp, #128	; 0x80
 8003a14:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	4648      	mov	r0, r9
 8003a1c:	462b      	mov	r3, r5
 8003a1e:	9a08      	ldr	r2, [sp, #32]
 8003a20:	f002 f912 	bl	8005c48 <_dtoa_r>
 8003a24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a26:	9007      	str	r0, [sp, #28]
 8003a28:	2b47      	cmp	r3, #71	; 0x47
 8003a2a:	d106      	bne.n	8003a3a <_svfprintf_r+0x84a>
 8003a2c:	f01a 0f01 	tst.w	sl, #1
 8003a30:	d103      	bne.n	8003a3a <_svfprintf_r+0x84a>
 8003a32:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8003a34:	e676      	b.n	8003724 <_svfprintf_r+0x534>
 8003a36:	4646      	mov	r6, r8
 8003a38:	e7e3      	b.n	8003a02 <_svfprintf_r+0x812>
 8003a3a:	9b07      	ldr	r3, [sp, #28]
 8003a3c:	4433      	add	r3, r6
 8003a3e:	930d      	str	r3, [sp, #52]	; 0x34
 8003a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a42:	2b46      	cmp	r3, #70	; 0x46
 8003a44:	d111      	bne.n	8003a6a <_svfprintf_r+0x87a>
 8003a46:	9b07      	ldr	r3, [sp, #28]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b30      	cmp	r3, #48	; 0x30
 8003a4c:	d109      	bne.n	8003a62 <_svfprintf_r+0x872>
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2300      	movs	r3, #0
 8003a52:	4629      	mov	r1, r5
 8003a54:	9808      	ldr	r0, [sp, #32]
 8003a56:	f7fc ffa7 	bl	80009a8 <__aeabi_dcmpeq>
 8003a5a:	b910      	cbnz	r0, 8003a62 <_svfprintf_r+0x872>
 8003a5c:	f1c6 0601 	rsb	r6, r6, #1
 8003a60:	9620      	str	r6, [sp, #128]	; 0x80
 8003a62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003a64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003a66:	441a      	add	r2, r3
 8003a68:	920d      	str	r2, [sp, #52]	; 0x34
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	4629      	mov	r1, r5
 8003a70:	9808      	ldr	r0, [sp, #32]
 8003a72:	f7fc ff99 	bl	80009a8 <__aeabi_dcmpeq>
 8003a76:	b108      	cbz	r0, 8003a7c <_svfprintf_r+0x88c>
 8003a78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a7a:	9324      	str	r3, [sp, #144]	; 0x90
 8003a7c:	2230      	movs	r2, #48	; 0x30
 8003a7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003a80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003a82:	4299      	cmp	r1, r3
 8003a84:	d9d5      	bls.n	8003a32 <_svfprintf_r+0x842>
 8003a86:	1c59      	adds	r1, r3, #1
 8003a88:	9124      	str	r1, [sp, #144]	; 0x90
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	e7f7      	b.n	8003a7e <_svfprintf_r+0x88e>
 8003a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a90:	2b46      	cmp	r3, #70	; 0x46
 8003a92:	f47f ae57 	bne.w	8003744 <_svfprintf_r+0x554>
 8003a96:	f00a 0301 	and.w	r3, sl, #1
 8003a9a:	2d00      	cmp	r5, #0
 8003a9c:	ea43 0308 	orr.w	r3, r3, r8
 8003aa0:	dd18      	ble.n	8003ad4 <_svfprintf_r+0x8e4>
 8003aa2:	b383      	cbz	r3, 8003b06 <_svfprintf_r+0x916>
 8003aa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003aa6:	18eb      	adds	r3, r5, r3
 8003aa8:	4498      	add	r8, r3
 8003aaa:	2366      	movs	r3, #102	; 0x66
 8003aac:	930b      	str	r3, [sp, #44]	; 0x2c
 8003aae:	e030      	b.n	8003b12 <_svfprintf_r+0x922>
 8003ab0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003ab4:	f802 6b01 	strb.w	r6, [r2], #1
 8003ab8:	e67b      	b.n	80037b2 <_svfprintf_r+0x5c2>
 8003aba:	b941      	cbnz	r1, 8003ace <_svfprintf_r+0x8de>
 8003abc:	2230      	movs	r2, #48	; 0x30
 8003abe:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8003ac2:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8003ac6:	3330      	adds	r3, #48	; 0x30
 8003ac8:	f802 3b01 	strb.w	r3, [r2], #1
 8003acc:	e67d      	b.n	80037ca <_svfprintf_r+0x5da>
 8003ace:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8003ad2:	e7f8      	b.n	8003ac6 <_svfprintf_r+0x8d6>
 8003ad4:	b1cb      	cbz	r3, 8003b0a <_svfprintf_r+0x91a>
 8003ad6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ad8:	3301      	adds	r3, #1
 8003ada:	e7e5      	b.n	8003aa8 <_svfprintf_r+0x8b8>
 8003adc:	9b08      	ldr	r3, [sp, #32]
 8003ade:	429d      	cmp	r5, r3
 8003ae0:	db07      	blt.n	8003af2 <_svfprintf_r+0x902>
 8003ae2:	f01a 0f01 	tst.w	sl, #1
 8003ae6:	d029      	beq.n	8003b3c <_svfprintf_r+0x94c>
 8003ae8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003aea:	eb05 0803 	add.w	r8, r5, r3
 8003aee:	2367      	movs	r3, #103	; 0x67
 8003af0:	e7dc      	b.n	8003aac <_svfprintf_r+0x8bc>
 8003af2:	9b08      	ldr	r3, [sp, #32]
 8003af4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003af6:	2d00      	cmp	r5, #0
 8003af8:	eb03 0802 	add.w	r8, r3, r2
 8003afc:	dcf7      	bgt.n	8003aee <_svfprintf_r+0x8fe>
 8003afe:	f1c5 0301 	rsb	r3, r5, #1
 8003b02:	4498      	add	r8, r3
 8003b04:	e7f3      	b.n	8003aee <_svfprintf_r+0x8fe>
 8003b06:	46a8      	mov	r8, r5
 8003b08:	e7cf      	b.n	8003aaa <_svfprintf_r+0x8ba>
 8003b0a:	2366      	movs	r3, #102	; 0x66
 8003b0c:	f04f 0801 	mov.w	r8, #1
 8003b10:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b12:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8003b16:	930d      	str	r3, [sp, #52]	; 0x34
 8003b18:	d023      	beq.n	8003b62 <_svfprintf_r+0x972>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2d00      	cmp	r5, #0
 8003b1e:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8003b22:	f77f ae68 	ble.w	80037f6 <_svfprintf_r+0x606>
 8003b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2bff      	cmp	r3, #255	; 0xff
 8003b2c:	d108      	bne.n	8003b40 <_svfprintf_r+0x950>
 8003b2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003b32:	4413      	add	r3, r2
 8003b34:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003b36:	fb02 8803 	mla	r8, r2, r3, r8
 8003b3a:	e65c      	b.n	80037f6 <_svfprintf_r+0x606>
 8003b3c:	46a8      	mov	r8, r5
 8003b3e:	e7d6      	b.n	8003aee <_svfprintf_r+0x8fe>
 8003b40:	42ab      	cmp	r3, r5
 8003b42:	daf4      	bge.n	8003b2e <_svfprintf_r+0x93e>
 8003b44:	1aed      	subs	r5, r5, r3
 8003b46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b48:	785b      	ldrb	r3, [r3, #1]
 8003b4a:	b133      	cbz	r3, 8003b5a <_svfprintf_r+0x96a>
 8003b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b4e:	3301      	adds	r3, #1
 8003b50:	930d      	str	r3, [sp, #52]	; 0x34
 8003b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b54:	3301      	adds	r3, #1
 8003b56:	930e      	str	r3, [sp, #56]	; 0x38
 8003b58:	e7e5      	b.n	8003b26 <_svfprintf_r+0x936>
 8003b5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	930c      	str	r3, [sp, #48]	; 0x30
 8003b60:	e7e1      	b.n	8003b26 <_svfprintf_r+0x936>
 8003b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b64:	930c      	str	r3, [sp, #48]	; 0x30
 8003b66:	e646      	b.n	80037f6 <_svfprintf_r+0x606>
 8003b68:	4632      	mov	r2, r6
 8003b6a:	f852 3b04 	ldr.w	r3, [r2], #4
 8003b6e:	f01a 0f20 	tst.w	sl, #32
 8003b72:	920a      	str	r2, [sp, #40]	; 0x28
 8003b74:	d009      	beq.n	8003b8a <_svfprintf_r+0x99a>
 8003b76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003b78:	4610      	mov	r0, r2
 8003b7a:	17d1      	asrs	r1, r2, #31
 8003b7c:	e9c3 0100 	strd	r0, r1, [r3]
 8003b80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b82:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003b84:	9307      	str	r3, [sp, #28]
 8003b86:	f7ff bb6f 	b.w	8003268 <_svfprintf_r+0x78>
 8003b8a:	f01a 0f10 	tst.w	sl, #16
 8003b8e:	d002      	beq.n	8003b96 <_svfprintf_r+0x9a6>
 8003b90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e7f4      	b.n	8003b80 <_svfprintf_r+0x990>
 8003b96:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8003b9a:	d002      	beq.n	8003ba2 <_svfprintf_r+0x9b2>
 8003b9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003b9e:	801a      	strh	r2, [r3, #0]
 8003ba0:	e7ee      	b.n	8003b80 <_svfprintf_r+0x990>
 8003ba2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8003ba6:	d0f3      	beq.n	8003b90 <_svfprintf_r+0x9a0>
 8003ba8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	e7e8      	b.n	8003b80 <_svfprintf_r+0x990>
 8003bae:	f04a 0a10 	orr.w	sl, sl, #16
 8003bb2:	f01a 0f20 	tst.w	sl, #32
 8003bb6:	d01e      	beq.n	8003bf6 <_svfprintf_r+0xa06>
 8003bb8:	3607      	adds	r6, #7
 8003bba:	f026 0307 	bic.w	r3, r6, #7
 8003bbe:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8003bc2:	930a      	str	r3, [sp, #40]	; 0x28
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8003bd0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003bd4:	f000 84b1 	beq.w	800453a <_svfprintf_r+0x134a>
 8003bd8:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8003bdc:	920c      	str	r2, [sp, #48]	; 0x30
 8003bde:	ea56 0207 	orrs.w	r2, r6, r7
 8003be2:	f040 84b0 	bne.w	8004546 <_svfprintf_r+0x1356>
 8003be6:	f1b8 0f00 	cmp.w	r8, #0
 8003bea:	f000 8103 	beq.w	8003df4 <_svfprintf_r+0xc04>
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	f040 84ac 	bne.w	800454c <_svfprintf_r+0x135c>
 8003bf4:	e098      	b.n	8003d28 <_svfprintf_r+0xb38>
 8003bf6:	1d33      	adds	r3, r6, #4
 8003bf8:	f01a 0f10 	tst.w	sl, #16
 8003bfc:	930a      	str	r3, [sp, #40]	; 0x28
 8003bfe:	d001      	beq.n	8003c04 <_svfprintf_r+0xa14>
 8003c00:	6836      	ldr	r6, [r6, #0]
 8003c02:	e003      	b.n	8003c0c <_svfprintf_r+0xa1c>
 8003c04:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8003c08:	d002      	beq.n	8003c10 <_svfprintf_r+0xa20>
 8003c0a:	8836      	ldrh	r6, [r6, #0]
 8003c0c:	2700      	movs	r7, #0
 8003c0e:	e7d9      	b.n	8003bc4 <_svfprintf_r+0x9d4>
 8003c10:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8003c14:	d0f4      	beq.n	8003c00 <_svfprintf_r+0xa10>
 8003c16:	7836      	ldrb	r6, [r6, #0]
 8003c18:	e7f8      	b.n	8003c0c <_svfprintf_r+0xa1c>
 8003c1a:	4633      	mov	r3, r6
 8003c1c:	f853 6b04 	ldr.w	r6, [r3], #4
 8003c20:	2278      	movs	r2, #120	; 0x78
 8003c22:	930a      	str	r3, [sp, #40]	; 0x28
 8003c24:	f647 0330 	movw	r3, #30768	; 0x7830
 8003c28:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8003c2c:	4ba8      	ldr	r3, [pc, #672]	; (8003ed0 <_svfprintf_r+0xce0>)
 8003c2e:	2700      	movs	r7, #0
 8003c30:	931b      	str	r3, [sp, #108]	; 0x6c
 8003c32:	f04a 0a02 	orr.w	sl, sl, #2
 8003c36:	2302      	movs	r3, #2
 8003c38:	920b      	str	r2, [sp, #44]	; 0x2c
 8003c3a:	e7c6      	b.n	8003bca <_svfprintf_r+0x9da>
 8003c3c:	4632      	mov	r2, r6
 8003c3e:	2500      	movs	r5, #0
 8003c40:	f852 3b04 	ldr.w	r3, [r2], #4
 8003c44:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003c48:	9307      	str	r3, [sp, #28]
 8003c4a:	920a      	str	r2, [sp, #40]	; 0x28
 8003c4c:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 8003c50:	d010      	beq.n	8003c74 <_svfprintf_r+0xa84>
 8003c52:	4642      	mov	r2, r8
 8003c54:	4629      	mov	r1, r5
 8003c56:	9807      	ldr	r0, [sp, #28]
 8003c58:	f003 fc1e 	bl	8007498 <memchr>
 8003c5c:	4607      	mov	r7, r0
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	f43f ac85 	beq.w	800356e <_svfprintf_r+0x37e>
 8003c64:	9b07      	ldr	r3, [sp, #28]
 8003c66:	462f      	mov	r7, r5
 8003c68:	462e      	mov	r6, r5
 8003c6a:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
 8003c6e:	eba0 0803 	sub.w	r8, r0, r3
 8003c72:	e5c8      	b.n	8003806 <_svfprintf_r+0x616>
 8003c74:	9807      	ldr	r0, [sp, #28]
 8003c76:	f7fc fa6b 	bl	8000150 <strlen>
 8003c7a:	462f      	mov	r7, r5
 8003c7c:	4680      	mov	r8, r0
 8003c7e:	e476      	b.n	800356e <_svfprintf_r+0x37e>
 8003c80:	f04a 0a10 	orr.w	sl, sl, #16
 8003c84:	f01a 0f20 	tst.w	sl, #32
 8003c88:	d007      	beq.n	8003c9a <_svfprintf_r+0xaaa>
 8003c8a:	3607      	adds	r6, #7
 8003c8c:	f026 0307 	bic.w	r3, r6, #7
 8003c90:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8003c94:	930a      	str	r3, [sp, #40]	; 0x28
 8003c96:	2301      	movs	r3, #1
 8003c98:	e797      	b.n	8003bca <_svfprintf_r+0x9da>
 8003c9a:	1d33      	adds	r3, r6, #4
 8003c9c:	f01a 0f10 	tst.w	sl, #16
 8003ca0:	930a      	str	r3, [sp, #40]	; 0x28
 8003ca2:	d001      	beq.n	8003ca8 <_svfprintf_r+0xab8>
 8003ca4:	6836      	ldr	r6, [r6, #0]
 8003ca6:	e003      	b.n	8003cb0 <_svfprintf_r+0xac0>
 8003ca8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8003cac:	d002      	beq.n	8003cb4 <_svfprintf_r+0xac4>
 8003cae:	8836      	ldrh	r6, [r6, #0]
 8003cb0:	2700      	movs	r7, #0
 8003cb2:	e7f0      	b.n	8003c96 <_svfprintf_r+0xaa6>
 8003cb4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8003cb8:	d0f4      	beq.n	8003ca4 <_svfprintf_r+0xab4>
 8003cba:	7836      	ldrb	r6, [r6, #0]
 8003cbc:	e7f8      	b.n	8003cb0 <_svfprintf_r+0xac0>
 8003cbe:	4b85      	ldr	r3, [pc, #532]	; (8003ed4 <_svfprintf_r+0xce4>)
 8003cc0:	f01a 0f20 	tst.w	sl, #32
 8003cc4:	931b      	str	r3, [sp, #108]	; 0x6c
 8003cc6:	d019      	beq.n	8003cfc <_svfprintf_r+0xb0c>
 8003cc8:	3607      	adds	r6, #7
 8003cca:	f026 0307 	bic.w	r3, r6, #7
 8003cce:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8003cd2:	930a      	str	r3, [sp, #40]	; 0x28
 8003cd4:	f01a 0f01 	tst.w	sl, #1
 8003cd8:	d00a      	beq.n	8003cf0 <_svfprintf_r+0xb00>
 8003cda:	ea56 0307 	orrs.w	r3, r6, r7
 8003cde:	d007      	beq.n	8003cf0 <_svfprintf_r+0xb00>
 8003ce0:	2330      	movs	r3, #48	; 0x30
 8003ce2:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8003ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ce8:	f04a 0a02 	orr.w	sl, sl, #2
 8003cec:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8003cf6:	e768      	b.n	8003bca <_svfprintf_r+0x9da>
 8003cf8:	4b75      	ldr	r3, [pc, #468]	; (8003ed0 <_svfprintf_r+0xce0>)
 8003cfa:	e7e1      	b.n	8003cc0 <_svfprintf_r+0xad0>
 8003cfc:	1d33      	adds	r3, r6, #4
 8003cfe:	f01a 0f10 	tst.w	sl, #16
 8003d02:	930a      	str	r3, [sp, #40]	; 0x28
 8003d04:	d001      	beq.n	8003d0a <_svfprintf_r+0xb1a>
 8003d06:	6836      	ldr	r6, [r6, #0]
 8003d08:	e003      	b.n	8003d12 <_svfprintf_r+0xb22>
 8003d0a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8003d0e:	d002      	beq.n	8003d16 <_svfprintf_r+0xb26>
 8003d10:	8836      	ldrh	r6, [r6, #0]
 8003d12:	2700      	movs	r7, #0
 8003d14:	e7de      	b.n	8003cd4 <_svfprintf_r+0xae4>
 8003d16:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8003d1a:	d0f4      	beq.n	8003d06 <_svfprintf_r+0xb16>
 8003d1c:	7836      	ldrb	r6, [r6, #0]
 8003d1e:	e7f8      	b.n	8003d12 <_svfprintf_r+0xb22>
 8003d20:	2f00      	cmp	r7, #0
 8003d22:	bf08      	it	eq
 8003d24:	2e0a      	cmpeq	r6, #10
 8003d26:	d206      	bcs.n	8003d36 <_svfprintf_r+0xb46>
 8003d28:	3630      	adds	r6, #48	; 0x30
 8003d2a:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 8003d2e:	f20d 1347 	addw	r3, sp, #327	; 0x147
 8003d32:	f000 bc2d 	b.w	8004590 <_svfprintf_r+0x13a0>
 8003d36:	2300      	movs	r3, #0
 8003d38:	9308      	str	r3, [sp, #32]
 8003d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d3c:	ad52      	add	r5, sp, #328	; 0x148
 8003d3e:	f403 6a80 	and.w	sl, r3, #1024	; 0x400
 8003d42:	1e6b      	subs	r3, r5, #1
 8003d44:	9307      	str	r3, [sp, #28]
 8003d46:	220a      	movs	r2, #10
 8003d48:	2300      	movs	r3, #0
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	4639      	mov	r1, r7
 8003d4e:	f7fc fe9b 	bl	8000a88 <__aeabi_uldivmod>
 8003d52:	9b08      	ldr	r3, [sp, #32]
 8003d54:	3230      	adds	r2, #48	; 0x30
 8003d56:	3301      	adds	r3, #1
 8003d58:	f805 2c01 	strb.w	r2, [r5, #-1]
 8003d5c:	9308      	str	r3, [sp, #32]
 8003d5e:	f1ba 0f00 	cmp.w	sl, #0
 8003d62:	d019      	beq.n	8003d98 <_svfprintf_r+0xba8>
 8003d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d66:	9a08      	ldr	r2, [sp, #32]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d114      	bne.n	8003d98 <_svfprintf_r+0xba8>
 8003d6e:	2aff      	cmp	r2, #255	; 0xff
 8003d70:	d012      	beq.n	8003d98 <_svfprintf_r+0xba8>
 8003d72:	2f00      	cmp	r7, #0
 8003d74:	bf08      	it	eq
 8003d76:	2e0a      	cmpeq	r6, #10
 8003d78:	d30e      	bcc.n	8003d98 <_svfprintf_r+0xba8>
 8003d7a:	9b07      	ldr	r3, [sp, #28]
 8003d7c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003d7e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	9307      	str	r3, [sp, #28]
 8003d86:	f004 f920 	bl	8007fca <strncpy>
 8003d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d8c:	785d      	ldrb	r5, [r3, #1]
 8003d8e:	b1ed      	cbz	r5, 8003dcc <_svfprintf_r+0xbdc>
 8003d90:	3301      	adds	r3, #1
 8003d92:	930e      	str	r3, [sp, #56]	; 0x38
 8003d94:	2300      	movs	r3, #0
 8003d96:	9308      	str	r3, [sp, #32]
 8003d98:	220a      	movs	r2, #10
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	4639      	mov	r1, r7
 8003da0:	f7fc fe72 	bl	8000a88 <__aeabi_uldivmod>
 8003da4:	2f00      	cmp	r7, #0
 8003da6:	bf08      	it	eq
 8003da8:	2e0a      	cmpeq	r6, #10
 8003daa:	d20b      	bcs.n	8003dc4 <_svfprintf_r+0xbd4>
 8003dac:	2700      	movs	r7, #0
 8003dae:	9b07      	ldr	r3, [sp, #28]
 8003db0:	aa52      	add	r2, sp, #328	; 0x148
 8003db2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003db6:	4646      	mov	r6, r8
 8003db8:	eba2 0803 	sub.w	r8, r2, r3
 8003dbc:	463d      	mov	r5, r7
 8003dbe:	e9cd 770c 	strd	r7, r7, [sp, #48]	; 0x30
 8003dc2:	e520      	b.n	8003806 <_svfprintf_r+0x616>
 8003dc4:	4606      	mov	r6, r0
 8003dc6:	460f      	mov	r7, r1
 8003dc8:	9d07      	ldr	r5, [sp, #28]
 8003dca:	e7ba      	b.n	8003d42 <_svfprintf_r+0xb52>
 8003dcc:	9508      	str	r5, [sp, #32]
 8003dce:	e7e3      	b.n	8003d98 <_svfprintf_r+0xba8>
 8003dd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003dd2:	f006 030f 	and.w	r3, r6, #15
 8003dd6:	5cd3      	ldrb	r3, [r2, r3]
 8003dd8:	9a07      	ldr	r2, [sp, #28]
 8003dda:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8003dde:	0933      	lsrs	r3, r6, #4
 8003de0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8003de4:	9207      	str	r2, [sp, #28]
 8003de6:	093a      	lsrs	r2, r7, #4
 8003de8:	461e      	mov	r6, r3
 8003dea:	4617      	mov	r7, r2
 8003dec:	ea56 0307 	orrs.w	r3, r6, r7
 8003df0:	d1ee      	bne.n	8003dd0 <_svfprintf_r+0xbe0>
 8003df2:	e7db      	b.n	8003dac <_svfprintf_r+0xbbc>
 8003df4:	b933      	cbnz	r3, 8003e04 <_svfprintf_r+0xc14>
 8003df6:	f01a 0f01 	tst.w	sl, #1
 8003dfa:	d003      	beq.n	8003e04 <_svfprintf_r+0xc14>
 8003dfc:	2330      	movs	r3, #48	; 0x30
 8003dfe:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 8003e02:	e794      	b.n	8003d2e <_svfprintf_r+0xb3e>
 8003e04:	ab52      	add	r3, sp, #328	; 0x148
 8003e06:	e3c3      	b.n	8004590 <_svfprintf_r+0x13a0>
 8003e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 838a 	beq.w	8004524 <_svfprintf_r+0x1334>
 8003e10:	2000      	movs	r0, #0
 8003e12:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8003e16:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8003e1a:	960a      	str	r6, [sp, #40]	; 0x28
 8003e1c:	f7ff bb3f 	b.w	800349e <_svfprintf_r+0x2ae>
 8003e20:	2010      	movs	r0, #16
 8003e22:	2b07      	cmp	r3, #7
 8003e24:	4402      	add	r2, r0
 8003e26:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8003e2a:	6060      	str	r0, [r4, #4]
 8003e2c:	dd08      	ble.n	8003e40 <_svfprintf_r+0xc50>
 8003e2e:	4659      	mov	r1, fp
 8003e30:	4648      	mov	r0, r9
 8003e32:	aa26      	add	r2, sp, #152	; 0x98
 8003e34:	f004 f8dc 	bl	8007ff0 <__ssprint_r>
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	f040 8351 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8003e3e:	a929      	add	r1, sp, #164	; 0xa4
 8003e40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003e42:	460c      	mov	r4, r1
 8003e44:	3b10      	subs	r3, #16
 8003e46:	9317      	str	r3, [sp, #92]	; 0x5c
 8003e48:	e4f9      	b.n	800383e <_svfprintf_r+0x64e>
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	e513      	b.n	8003876 <_svfprintf_r+0x686>
 8003e4e:	4659      	mov	r1, fp
 8003e50:	4648      	mov	r0, r9
 8003e52:	aa26      	add	r2, sp, #152	; 0x98
 8003e54:	f004 f8cc 	bl	8007ff0 <__ssprint_r>
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	f040 8341 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8003e5e:	ac29      	add	r4, sp, #164	; 0xa4
 8003e60:	e51b      	b.n	800389a <_svfprintf_r+0x6aa>
 8003e62:	4659      	mov	r1, fp
 8003e64:	4648      	mov	r0, r9
 8003e66:	aa26      	add	r2, sp, #152	; 0x98
 8003e68:	f004 f8c2 	bl	8007ff0 <__ssprint_r>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	f040 8337 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8003e72:	ac29      	add	r4, sp, #164	; 0xa4
 8003e74:	e521      	b.n	80038ba <_svfprintf_r+0x6ca>
 8003e76:	2010      	movs	r0, #16
 8003e78:	2b07      	cmp	r3, #7
 8003e7a:	4402      	add	r2, r0
 8003e7c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8003e80:	6060      	str	r0, [r4, #4]
 8003e82:	dd08      	ble.n	8003e96 <_svfprintf_r+0xca6>
 8003e84:	4659      	mov	r1, fp
 8003e86:	4648      	mov	r0, r9
 8003e88:	aa26      	add	r2, sp, #152	; 0x98
 8003e8a:	f004 f8b1 	bl	8007ff0 <__ssprint_r>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	f040 8326 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8003e94:	a929      	add	r1, sp, #164	; 0xa4
 8003e96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003e98:	460c      	mov	r4, r1
 8003e9a:	3b10      	subs	r3, #16
 8003e9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8003e9e:	e515      	b.n	80038cc <_svfprintf_r+0x6dc>
 8003ea0:	460c      	mov	r4, r1
 8003ea2:	e52f      	b.n	8003904 <_svfprintf_r+0x714>
 8003ea4:	2010      	movs	r0, #16
 8003ea6:	2b07      	cmp	r3, #7
 8003ea8:	4402      	add	r2, r0
 8003eaa:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8003eae:	6060      	str	r0, [r4, #4]
 8003eb0:	dd08      	ble.n	8003ec4 <_svfprintf_r+0xcd4>
 8003eb2:	4659      	mov	r1, fp
 8003eb4:	4648      	mov	r0, r9
 8003eb6:	aa26      	add	r2, sp, #152	; 0x98
 8003eb8:	f004 f89a 	bl	8007ff0 <__ssprint_r>
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	f040 830f 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8003ec2:	a929      	add	r1, sp, #164	; 0xa4
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	3e10      	subs	r6, #16
 8003ec8:	e520      	b.n	800390c <_svfprintf_r+0x71c>
 8003eca:	460c      	mov	r4, r1
 8003ecc:	e546      	b.n	800395c <_svfprintf_r+0x76c>
 8003ece:	bf00      	nop
 8003ed0:	080092cc 	.word	0x080092cc
 8003ed4:	080092dd 	.word	0x080092dd
 8003ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003eda:	2b65      	cmp	r3, #101	; 0x65
 8003edc:	f340 824a 	ble.w	8004374 <_svfprintf_r+0x1184>
 8003ee0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f7fc fd5e 	bl	80009a8 <__aeabi_dcmpeq>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d06a      	beq.n	8003fc6 <_svfprintf_r+0xdd6>
 8003ef0:	4b6f      	ldr	r3, [pc, #444]	; (80040b0 <_svfprintf_r+0xec0>)
 8003ef2:	6023      	str	r3, [r4, #0]
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	441e      	add	r6, r3
 8003ef8:	6063      	str	r3, [r4, #4]
 8003efa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003efc:	9628      	str	r6, [sp, #160]	; 0xa0
 8003efe:	3301      	adds	r3, #1
 8003f00:	2b07      	cmp	r3, #7
 8003f02:	9327      	str	r3, [sp, #156]	; 0x9c
 8003f04:	dc38      	bgt.n	8003f78 <_svfprintf_r+0xd88>
 8003f06:	3408      	adds	r4, #8
 8003f08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f0a:	9a08      	ldr	r2, [sp, #32]
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	db03      	blt.n	8003f18 <_svfprintf_r+0xd28>
 8003f10:	f01a 0f01 	tst.w	sl, #1
 8003f14:	f43f ad33 	beq.w	800397e <_svfprintf_r+0x78e>
 8003f18:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003f1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f20:	6063      	str	r3, [r4, #4]
 8003f22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003f24:	4413      	add	r3, r2
 8003f26:	9328      	str	r3, [sp, #160]	; 0xa0
 8003f28:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	2b07      	cmp	r3, #7
 8003f2e:	9327      	str	r3, [sp, #156]	; 0x9c
 8003f30:	dc2c      	bgt.n	8003f8c <_svfprintf_r+0xd9c>
 8003f32:	3408      	adds	r4, #8
 8003f34:	9b08      	ldr	r3, [sp, #32]
 8003f36:	1e5d      	subs	r5, r3, #1
 8003f38:	2d00      	cmp	r5, #0
 8003f3a:	f77f ad20 	ble.w	800397e <_svfprintf_r+0x78e>
 8003f3e:	f04f 0810 	mov.w	r8, #16
 8003f42:	4e5c      	ldr	r6, [pc, #368]	; (80040b4 <_svfprintf_r+0xec4>)
 8003f44:	2d10      	cmp	r5, #16
 8003f46:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8003f4a:	f104 0108 	add.w	r1, r4, #8
 8003f4e:	f103 0301 	add.w	r3, r3, #1
 8003f52:	6026      	str	r6, [r4, #0]
 8003f54:	dc24      	bgt.n	8003fa0 <_svfprintf_r+0xdb0>
 8003f56:	6065      	str	r5, [r4, #4]
 8003f58:	2b07      	cmp	r3, #7
 8003f5a:	4415      	add	r5, r2
 8003f5c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8003f60:	f340 829c 	ble.w	800449c <_svfprintf_r+0x12ac>
 8003f64:	4659      	mov	r1, fp
 8003f66:	4648      	mov	r0, r9
 8003f68:	aa26      	add	r2, sp, #152	; 0x98
 8003f6a:	f004 f841 	bl	8007ff0 <__ssprint_r>
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	f040 82b6 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8003f74:	ac29      	add	r4, sp, #164	; 0xa4
 8003f76:	e502      	b.n	800397e <_svfprintf_r+0x78e>
 8003f78:	4659      	mov	r1, fp
 8003f7a:	4648      	mov	r0, r9
 8003f7c:	aa26      	add	r2, sp, #152	; 0x98
 8003f7e:	f004 f837 	bl	8007ff0 <__ssprint_r>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	f040 82ac 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8003f88:	ac29      	add	r4, sp, #164	; 0xa4
 8003f8a:	e7bd      	b.n	8003f08 <_svfprintf_r+0xd18>
 8003f8c:	4659      	mov	r1, fp
 8003f8e:	4648      	mov	r0, r9
 8003f90:	aa26      	add	r2, sp, #152	; 0x98
 8003f92:	f004 f82d 	bl	8007ff0 <__ssprint_r>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	f040 82a2 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8003f9c:	ac29      	add	r4, sp, #164	; 0xa4
 8003f9e:	e7c9      	b.n	8003f34 <_svfprintf_r+0xd44>
 8003fa0:	3210      	adds	r2, #16
 8003fa2:	2b07      	cmp	r3, #7
 8003fa4:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8003fa8:	f8c4 8004 	str.w	r8, [r4, #4]
 8003fac:	dd08      	ble.n	8003fc0 <_svfprintf_r+0xdd0>
 8003fae:	4659      	mov	r1, fp
 8003fb0:	4648      	mov	r0, r9
 8003fb2:	aa26      	add	r2, sp, #152	; 0x98
 8003fb4:	f004 f81c 	bl	8007ff0 <__ssprint_r>
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	f040 8291 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8003fbe:	a929      	add	r1, sp, #164	; 0xa4
 8003fc0:	460c      	mov	r4, r1
 8003fc2:	3d10      	subs	r5, #16
 8003fc4:	e7be      	b.n	8003f44 <_svfprintf_r+0xd54>
 8003fc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	dc75      	bgt.n	80040b8 <_svfprintf_r+0xec8>
 8003fcc:	4b38      	ldr	r3, [pc, #224]	; (80040b0 <_svfprintf_r+0xec0>)
 8003fce:	6023      	str	r3, [r4, #0]
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	441e      	add	r6, r3
 8003fd4:	6063      	str	r3, [r4, #4]
 8003fd6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003fd8:	9628      	str	r6, [sp, #160]	; 0xa0
 8003fda:	3301      	adds	r3, #1
 8003fdc:	2b07      	cmp	r3, #7
 8003fde:	9327      	str	r3, [sp, #156]	; 0x9c
 8003fe0:	dc3e      	bgt.n	8004060 <_svfprintf_r+0xe70>
 8003fe2:	3408      	adds	r4, #8
 8003fe4:	9908      	ldr	r1, [sp, #32]
 8003fe6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003fe8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003fea:	430a      	orrs	r2, r1
 8003fec:	f00a 0101 	and.w	r1, sl, #1
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	f43f acc4 	beq.w	800397e <_svfprintf_r+0x78e>
 8003ff6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003ff8:	6022      	str	r2, [r4, #0]
 8003ffa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003ffc:	4413      	add	r3, r2
 8003ffe:	9328      	str	r3, [sp, #160]	; 0xa0
 8004000:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004002:	6062      	str	r2, [r4, #4]
 8004004:	3301      	adds	r3, #1
 8004006:	2b07      	cmp	r3, #7
 8004008:	9327      	str	r3, [sp, #156]	; 0x9c
 800400a:	dc33      	bgt.n	8004074 <_svfprintf_r+0xe84>
 800400c:	3408      	adds	r4, #8
 800400e:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004010:	2d00      	cmp	r5, #0
 8004012:	da1c      	bge.n	800404e <_svfprintf_r+0xe5e>
 8004014:	4623      	mov	r3, r4
 8004016:	f04f 0810 	mov.w	r8, #16
 800401a:	4e26      	ldr	r6, [pc, #152]	; (80040b4 <_svfprintf_r+0xec4>)
 800401c:	426d      	negs	r5, r5
 800401e:	2d10      	cmp	r5, #16
 8004020:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8004024:	f104 0408 	add.w	r4, r4, #8
 8004028:	f102 0201 	add.w	r2, r2, #1
 800402c:	601e      	str	r6, [r3, #0]
 800402e:	dc2b      	bgt.n	8004088 <_svfprintf_r+0xe98>
 8004030:	605d      	str	r5, [r3, #4]
 8004032:	2a07      	cmp	r2, #7
 8004034:	440d      	add	r5, r1
 8004036:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 800403a:	dd08      	ble.n	800404e <_svfprintf_r+0xe5e>
 800403c:	4659      	mov	r1, fp
 800403e:	4648      	mov	r0, r9
 8004040:	aa26      	add	r2, sp, #152	; 0x98
 8004042:	f003 ffd5 	bl	8007ff0 <__ssprint_r>
 8004046:	2800      	cmp	r0, #0
 8004048:	f040 824a 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 800404c:	ac29      	add	r4, sp, #164	; 0xa4
 800404e:	9b07      	ldr	r3, [sp, #28]
 8004050:	9a08      	ldr	r2, [sp, #32]
 8004052:	6023      	str	r3, [r4, #0]
 8004054:	9b08      	ldr	r3, [sp, #32]
 8004056:	6063      	str	r3, [r4, #4]
 8004058:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800405a:	4413      	add	r3, r2
 800405c:	9328      	str	r3, [sp, #160]	; 0xa0
 800405e:	e487      	b.n	8003970 <_svfprintf_r+0x780>
 8004060:	4659      	mov	r1, fp
 8004062:	4648      	mov	r0, r9
 8004064:	aa26      	add	r2, sp, #152	; 0x98
 8004066:	f003 ffc3 	bl	8007ff0 <__ssprint_r>
 800406a:	2800      	cmp	r0, #0
 800406c:	f040 8238 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8004070:	ac29      	add	r4, sp, #164	; 0xa4
 8004072:	e7b7      	b.n	8003fe4 <_svfprintf_r+0xdf4>
 8004074:	4659      	mov	r1, fp
 8004076:	4648      	mov	r0, r9
 8004078:	aa26      	add	r2, sp, #152	; 0x98
 800407a:	f003 ffb9 	bl	8007ff0 <__ssprint_r>
 800407e:	2800      	cmp	r0, #0
 8004080:	f040 822e 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8004084:	ac29      	add	r4, sp, #164	; 0xa4
 8004086:	e7c2      	b.n	800400e <_svfprintf_r+0xe1e>
 8004088:	3110      	adds	r1, #16
 800408a:	2a07      	cmp	r2, #7
 800408c:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8004090:	f8c3 8004 	str.w	r8, [r3, #4]
 8004094:	dd08      	ble.n	80040a8 <_svfprintf_r+0xeb8>
 8004096:	4659      	mov	r1, fp
 8004098:	4648      	mov	r0, r9
 800409a:	aa26      	add	r2, sp, #152	; 0x98
 800409c:	f003 ffa8 	bl	8007ff0 <__ssprint_r>
 80040a0:	2800      	cmp	r0, #0
 80040a2:	f040 821d 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 80040a6:	ac29      	add	r4, sp, #164	; 0xa4
 80040a8:	4623      	mov	r3, r4
 80040aa:	3d10      	subs	r5, #16
 80040ac:	e7b7      	b.n	800401e <_svfprintf_r+0xe2e>
 80040ae:	bf00      	nop
 80040b0:	080092ee 	.word	0x080092ee
 80040b4:	08009300 	.word	0x08009300
 80040b8:	9b08      	ldr	r3, [sp, #32]
 80040ba:	42ab      	cmp	r3, r5
 80040bc:	bfa8      	it	ge
 80040be:	462b      	movge	r3, r5
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	4698      	mov	r8, r3
 80040c4:	dd0b      	ble.n	80040de <_svfprintf_r+0xeee>
 80040c6:	9b07      	ldr	r3, [sp, #28]
 80040c8:	4446      	add	r6, r8
 80040ca:	e9c4 3800 	strd	r3, r8, [r4]
 80040ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80040d0:	9628      	str	r6, [sp, #160]	; 0xa0
 80040d2:	3301      	adds	r3, #1
 80040d4:	2b07      	cmp	r3, #7
 80040d6:	9327      	str	r3, [sp, #156]	; 0x9c
 80040d8:	f300 808f 	bgt.w	80041fa <_svfprintf_r+0x100a>
 80040dc:	3408      	adds	r4, #8
 80040de:	f1b8 0f00 	cmp.w	r8, #0
 80040e2:	bfb4      	ite	lt
 80040e4:	462e      	movlt	r6, r5
 80040e6:	eba5 0608 	subge.w	r6, r5, r8
 80040ea:	2e00      	cmp	r6, #0
 80040ec:	dd1c      	ble.n	8004128 <_svfprintf_r+0xf38>
 80040ee:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8004370 <_svfprintf_r+0x1180>
 80040f2:	2e10      	cmp	r6, #16
 80040f4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80040f8:	f104 0108 	add.w	r1, r4, #8
 80040fc:	f103 0301 	add.w	r3, r3, #1
 8004100:	f8c4 8000 	str.w	r8, [r4]
 8004104:	f300 8083 	bgt.w	800420e <_svfprintf_r+0x101e>
 8004108:	6066      	str	r6, [r4, #4]
 800410a:	2b07      	cmp	r3, #7
 800410c:	4416      	add	r6, r2
 800410e:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 8004112:	f340 808f 	ble.w	8004234 <_svfprintf_r+0x1044>
 8004116:	4659      	mov	r1, fp
 8004118:	4648      	mov	r0, r9
 800411a:	aa26      	add	r2, sp, #152	; 0x98
 800411c:	f003 ff68 	bl	8007ff0 <__ssprint_r>
 8004120:	2800      	cmp	r0, #0
 8004122:	f040 81dd 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8004126:	ac29      	add	r4, sp, #164	; 0xa4
 8004128:	9b07      	ldr	r3, [sp, #28]
 800412a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 800412e:	441d      	add	r5, r3
 8004130:	d00c      	beq.n	800414c <_svfprintf_r+0xf5c>
 8004132:	4e8f      	ldr	r6, [pc, #572]	; (8004370 <_svfprintf_r+0x1180>)
 8004134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004136:	2b00      	cmp	r3, #0
 8004138:	d17e      	bne.n	8004238 <_svfprintf_r+0x1048>
 800413a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800413c:	2b00      	cmp	r3, #0
 800413e:	d17e      	bne.n	800423e <_svfprintf_r+0x104e>
 8004140:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004144:	4413      	add	r3, r2
 8004146:	429d      	cmp	r5, r3
 8004148:	bf28      	it	cs
 800414a:	461d      	movcs	r5, r3
 800414c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800414e:	9a08      	ldr	r2, [sp, #32]
 8004150:	4293      	cmp	r3, r2
 8004152:	db02      	blt.n	800415a <_svfprintf_r+0xf6a>
 8004154:	f01a 0f01 	tst.w	sl, #1
 8004158:	d00e      	beq.n	8004178 <_svfprintf_r+0xf88>
 800415a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800415c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800415e:	6023      	str	r3, [r4, #0]
 8004160:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004162:	6063      	str	r3, [r4, #4]
 8004164:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004166:	4413      	add	r3, r2
 8004168:	9328      	str	r3, [sp, #160]	; 0xa0
 800416a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800416c:	3301      	adds	r3, #1
 800416e:	2b07      	cmp	r3, #7
 8004170:	9327      	str	r3, [sp, #156]	; 0x9c
 8004172:	f300 80e8 	bgt.w	8004346 <_svfprintf_r+0x1156>
 8004176:	3408      	adds	r4, #8
 8004178:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800417a:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 800417e:	440b      	add	r3, r1
 8004180:	1b8e      	subs	r6, r1, r6
 8004182:	1b5a      	subs	r2, r3, r5
 8004184:	4296      	cmp	r6, r2
 8004186:	bfa8      	it	ge
 8004188:	4616      	movge	r6, r2
 800418a:	2e00      	cmp	r6, #0
 800418c:	dd0b      	ble.n	80041a6 <_svfprintf_r+0xfb6>
 800418e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004190:	e9c4 5600 	strd	r5, r6, [r4]
 8004194:	4433      	add	r3, r6
 8004196:	9328      	str	r3, [sp, #160]	; 0xa0
 8004198:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800419a:	3301      	adds	r3, #1
 800419c:	2b07      	cmp	r3, #7
 800419e:	9327      	str	r3, [sp, #156]	; 0x9c
 80041a0:	f300 80db 	bgt.w	800435a <_svfprintf_r+0x116a>
 80041a4:	3408      	adds	r4, #8
 80041a6:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80041a8:	9b08      	ldr	r3, [sp, #32]
 80041aa:	2e00      	cmp	r6, #0
 80041ac:	eba3 0505 	sub.w	r5, r3, r5
 80041b0:	bfa8      	it	ge
 80041b2:	1bad      	subge	r5, r5, r6
 80041b4:	2d00      	cmp	r5, #0
 80041b6:	f77f abe2 	ble.w	800397e <_svfprintf_r+0x78e>
 80041ba:	f04f 0810 	mov.w	r8, #16
 80041be:	4e6c      	ldr	r6, [pc, #432]	; (8004370 <_svfprintf_r+0x1180>)
 80041c0:	2d10      	cmp	r5, #16
 80041c2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80041c6:	f104 0108 	add.w	r1, r4, #8
 80041ca:	f103 0301 	add.w	r3, r3, #1
 80041ce:	6026      	str	r6, [r4, #0]
 80041d0:	f77f aec1 	ble.w	8003f56 <_svfprintf_r+0xd66>
 80041d4:	3210      	adds	r2, #16
 80041d6:	2b07      	cmp	r3, #7
 80041d8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80041dc:	f8c4 8004 	str.w	r8, [r4, #4]
 80041e0:	dd08      	ble.n	80041f4 <_svfprintf_r+0x1004>
 80041e2:	4659      	mov	r1, fp
 80041e4:	4648      	mov	r0, r9
 80041e6:	aa26      	add	r2, sp, #152	; 0x98
 80041e8:	f003 ff02 	bl	8007ff0 <__ssprint_r>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	f040 8177 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 80041f2:	a929      	add	r1, sp, #164	; 0xa4
 80041f4:	460c      	mov	r4, r1
 80041f6:	3d10      	subs	r5, #16
 80041f8:	e7e2      	b.n	80041c0 <_svfprintf_r+0xfd0>
 80041fa:	4659      	mov	r1, fp
 80041fc:	4648      	mov	r0, r9
 80041fe:	aa26      	add	r2, sp, #152	; 0x98
 8004200:	f003 fef6 	bl	8007ff0 <__ssprint_r>
 8004204:	2800      	cmp	r0, #0
 8004206:	f040 816b 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 800420a:	ac29      	add	r4, sp, #164	; 0xa4
 800420c:	e767      	b.n	80040de <_svfprintf_r+0xeee>
 800420e:	2010      	movs	r0, #16
 8004210:	2b07      	cmp	r3, #7
 8004212:	4402      	add	r2, r0
 8004214:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8004218:	6060      	str	r0, [r4, #4]
 800421a:	dd08      	ble.n	800422e <_svfprintf_r+0x103e>
 800421c:	4659      	mov	r1, fp
 800421e:	4648      	mov	r0, r9
 8004220:	aa26      	add	r2, sp, #152	; 0x98
 8004222:	f003 fee5 	bl	8007ff0 <__ssprint_r>
 8004226:	2800      	cmp	r0, #0
 8004228:	f040 815a 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 800422c:	a929      	add	r1, sp, #164	; 0xa4
 800422e:	460c      	mov	r4, r1
 8004230:	3e10      	subs	r6, #16
 8004232:	e75e      	b.n	80040f2 <_svfprintf_r+0xf02>
 8004234:	460c      	mov	r4, r1
 8004236:	e777      	b.n	8004128 <_svfprintf_r+0xf38>
 8004238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800423a:	2b00      	cmp	r3, #0
 800423c:	d052      	beq.n	80042e4 <_svfprintf_r+0x10f4>
 800423e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004240:	3b01      	subs	r3, #1
 8004242:	930c      	str	r3, [sp, #48]	; 0x30
 8004244:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004246:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800424c:	6063      	str	r3, [r4, #4]
 800424e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004250:	4413      	add	r3, r2
 8004252:	9328      	str	r3, [sp, #160]	; 0xa0
 8004254:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004256:	3301      	adds	r3, #1
 8004258:	2b07      	cmp	r3, #7
 800425a:	9327      	str	r3, [sp, #156]	; 0x9c
 800425c:	dc49      	bgt.n	80042f2 <_svfprintf_r+0x1102>
 800425e:	3408      	adds	r4, #8
 8004260:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004264:	eb03 0802 	add.w	r8, r3, r2
 8004268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800426a:	eba8 0805 	sub.w	r8, r8, r5
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	4598      	cmp	r8, r3
 8004272:	bfa8      	it	ge
 8004274:	4698      	movge	r8, r3
 8004276:	f1b8 0f00 	cmp.w	r8, #0
 800427a:	dd0a      	ble.n	8004292 <_svfprintf_r+0x10a2>
 800427c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800427e:	e9c4 5800 	strd	r5, r8, [r4]
 8004282:	4443      	add	r3, r8
 8004284:	9328      	str	r3, [sp, #160]	; 0xa0
 8004286:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004288:	3301      	adds	r3, #1
 800428a:	2b07      	cmp	r3, #7
 800428c:	9327      	str	r3, [sp, #156]	; 0x9c
 800428e:	dc3a      	bgt.n	8004306 <_svfprintf_r+0x1116>
 8004290:	3408      	adds	r4, #8
 8004292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004294:	f1b8 0f00 	cmp.w	r8, #0
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	bfb4      	ite	lt
 800429c:	4698      	movlt	r8, r3
 800429e:	eba3 0808 	subge.w	r8, r3, r8
 80042a2:	f1b8 0f00 	cmp.w	r8, #0
 80042a6:	dd19      	ble.n	80042dc <_svfprintf_r+0x10ec>
 80042a8:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 80042ac:	f1b8 0f10 	cmp.w	r8, #16
 80042b0:	f102 0201 	add.w	r2, r2, #1
 80042b4:	f104 0108 	add.w	r1, r4, #8
 80042b8:	6026      	str	r6, [r4, #0]
 80042ba:	dc2e      	bgt.n	800431a <_svfprintf_r+0x112a>
 80042bc:	4443      	add	r3, r8
 80042be:	2a07      	cmp	r2, #7
 80042c0:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80042c4:	f8c4 8004 	str.w	r8, [r4, #4]
 80042c8:	dd3b      	ble.n	8004342 <_svfprintf_r+0x1152>
 80042ca:	4659      	mov	r1, fp
 80042cc:	4648      	mov	r0, r9
 80042ce:	aa26      	add	r2, sp, #152	; 0x98
 80042d0:	f003 fe8e 	bl	8007ff0 <__ssprint_r>
 80042d4:	2800      	cmp	r0, #0
 80042d6:	f040 8103 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 80042da:	ac29      	add	r4, sp, #164	; 0xa4
 80042dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	441d      	add	r5, r3
 80042e2:	e727      	b.n	8004134 <_svfprintf_r+0xf44>
 80042e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042e6:	3b01      	subs	r3, #1
 80042e8:	930e      	str	r3, [sp, #56]	; 0x38
 80042ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042ec:	3b01      	subs	r3, #1
 80042ee:	930d      	str	r3, [sp, #52]	; 0x34
 80042f0:	e7a8      	b.n	8004244 <_svfprintf_r+0x1054>
 80042f2:	4659      	mov	r1, fp
 80042f4:	4648      	mov	r0, r9
 80042f6:	aa26      	add	r2, sp, #152	; 0x98
 80042f8:	f003 fe7a 	bl	8007ff0 <__ssprint_r>
 80042fc:	2800      	cmp	r0, #0
 80042fe:	f040 80ef 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8004302:	ac29      	add	r4, sp, #164	; 0xa4
 8004304:	e7ac      	b.n	8004260 <_svfprintf_r+0x1070>
 8004306:	4659      	mov	r1, fp
 8004308:	4648      	mov	r0, r9
 800430a:	aa26      	add	r2, sp, #152	; 0x98
 800430c:	f003 fe70 	bl	8007ff0 <__ssprint_r>
 8004310:	2800      	cmp	r0, #0
 8004312:	f040 80e5 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8004316:	ac29      	add	r4, sp, #164	; 0xa4
 8004318:	e7bb      	b.n	8004292 <_svfprintf_r+0x10a2>
 800431a:	2010      	movs	r0, #16
 800431c:	2a07      	cmp	r2, #7
 800431e:	4403      	add	r3, r0
 8004320:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8004324:	6060      	str	r0, [r4, #4]
 8004326:	dd08      	ble.n	800433a <_svfprintf_r+0x114a>
 8004328:	4659      	mov	r1, fp
 800432a:	4648      	mov	r0, r9
 800432c:	aa26      	add	r2, sp, #152	; 0x98
 800432e:	f003 fe5f 	bl	8007ff0 <__ssprint_r>
 8004332:	2800      	cmp	r0, #0
 8004334:	f040 80d4 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8004338:	a929      	add	r1, sp, #164	; 0xa4
 800433a:	460c      	mov	r4, r1
 800433c:	f1a8 0810 	sub.w	r8, r8, #16
 8004340:	e7b2      	b.n	80042a8 <_svfprintf_r+0x10b8>
 8004342:	460c      	mov	r4, r1
 8004344:	e7ca      	b.n	80042dc <_svfprintf_r+0x10ec>
 8004346:	4659      	mov	r1, fp
 8004348:	4648      	mov	r0, r9
 800434a:	aa26      	add	r2, sp, #152	; 0x98
 800434c:	f003 fe50 	bl	8007ff0 <__ssprint_r>
 8004350:	2800      	cmp	r0, #0
 8004352:	f040 80c5 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 8004356:	ac29      	add	r4, sp, #164	; 0xa4
 8004358:	e70e      	b.n	8004178 <_svfprintf_r+0xf88>
 800435a:	4659      	mov	r1, fp
 800435c:	4648      	mov	r0, r9
 800435e:	aa26      	add	r2, sp, #152	; 0x98
 8004360:	f003 fe46 	bl	8007ff0 <__ssprint_r>
 8004364:	2800      	cmp	r0, #0
 8004366:	f040 80bb 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 800436a:	ac29      	add	r4, sp, #164	; 0xa4
 800436c:	e71b      	b.n	80041a6 <_svfprintf_r+0xfb6>
 800436e:	bf00      	nop
 8004370:	08009300 	.word	0x08009300
 8004374:	9a08      	ldr	r2, [sp, #32]
 8004376:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004378:	2a01      	cmp	r2, #1
 800437a:	9a07      	ldr	r2, [sp, #28]
 800437c:	f106 0601 	add.w	r6, r6, #1
 8004380:	6022      	str	r2, [r4, #0]
 8004382:	f04f 0201 	mov.w	r2, #1
 8004386:	f103 0301 	add.w	r3, r3, #1
 800438a:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 800438e:	f104 0508 	add.w	r5, r4, #8
 8004392:	6062      	str	r2, [r4, #4]
 8004394:	dc02      	bgt.n	800439c <_svfprintf_r+0x11ac>
 8004396:	f01a 0f01 	tst.w	sl, #1
 800439a:	d07a      	beq.n	8004492 <_svfprintf_r+0x12a2>
 800439c:	2b07      	cmp	r3, #7
 800439e:	dd08      	ble.n	80043b2 <_svfprintf_r+0x11c2>
 80043a0:	4659      	mov	r1, fp
 80043a2:	4648      	mov	r0, r9
 80043a4:	aa26      	add	r2, sp, #152	; 0x98
 80043a6:	f003 fe23 	bl	8007ff0 <__ssprint_r>
 80043aa:	2800      	cmp	r0, #0
 80043ac:	f040 8098 	bne.w	80044e0 <_svfprintf_r+0x12f0>
 80043b0:	ad29      	add	r5, sp, #164	; 0xa4
 80043b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80043b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80043b6:	602b      	str	r3, [r5, #0]
 80043b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80043ba:	606b      	str	r3, [r5, #4]
 80043bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80043be:	4413      	add	r3, r2
 80043c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80043c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80043c4:	3301      	adds	r3, #1
 80043c6:	2b07      	cmp	r3, #7
 80043c8:	9327      	str	r3, [sp, #156]	; 0x9c
 80043ca:	dc32      	bgt.n	8004432 <_svfprintf_r+0x1242>
 80043cc:	3508      	adds	r5, #8
 80043ce:	9b08      	ldr	r3, [sp, #32]
 80043d0:	2200      	movs	r2, #0
 80043d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043d6:	1e5c      	subs	r4, r3, #1
 80043d8:	2300      	movs	r3, #0
 80043da:	f7fc fae5 	bl	80009a8 <__aeabi_dcmpeq>
 80043de:	2800      	cmp	r0, #0
 80043e0:	d130      	bne.n	8004444 <_svfprintf_r+0x1254>
 80043e2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80043e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80043e6:	9807      	ldr	r0, [sp, #28]
 80043e8:	9a08      	ldr	r2, [sp, #32]
 80043ea:	3101      	adds	r1, #1
 80043ec:	3b01      	subs	r3, #1
 80043ee:	3001      	adds	r0, #1
 80043f0:	4413      	add	r3, r2
 80043f2:	2907      	cmp	r1, #7
 80043f4:	e9c5 0400 	strd	r0, r4, [r5]
 80043f8:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 80043fc:	dd4c      	ble.n	8004498 <_svfprintf_r+0x12a8>
 80043fe:	4659      	mov	r1, fp
 8004400:	4648      	mov	r0, r9
 8004402:	aa26      	add	r2, sp, #152	; 0x98
 8004404:	f003 fdf4 	bl	8007ff0 <__ssprint_r>
 8004408:	2800      	cmp	r0, #0
 800440a:	d169      	bne.n	80044e0 <_svfprintf_r+0x12f0>
 800440c:	ad29      	add	r5, sp, #164	; 0xa4
 800440e:	ab22      	add	r3, sp, #136	; 0x88
 8004410:	602b      	str	r3, [r5, #0]
 8004412:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004414:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004416:	606b      	str	r3, [r5, #4]
 8004418:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800441a:	4413      	add	r3, r2
 800441c:	9328      	str	r3, [sp, #160]	; 0xa0
 800441e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004420:	3301      	adds	r3, #1
 8004422:	2b07      	cmp	r3, #7
 8004424:	9327      	str	r3, [sp, #156]	; 0x9c
 8004426:	f73f ad9d 	bgt.w	8003f64 <_svfprintf_r+0xd74>
 800442a:	f105 0408 	add.w	r4, r5, #8
 800442e:	f7ff baa6 	b.w	800397e <_svfprintf_r+0x78e>
 8004432:	4659      	mov	r1, fp
 8004434:	4648      	mov	r0, r9
 8004436:	aa26      	add	r2, sp, #152	; 0x98
 8004438:	f003 fdda 	bl	8007ff0 <__ssprint_r>
 800443c:	2800      	cmp	r0, #0
 800443e:	d14f      	bne.n	80044e0 <_svfprintf_r+0x12f0>
 8004440:	ad29      	add	r5, sp, #164	; 0xa4
 8004442:	e7c4      	b.n	80043ce <_svfprintf_r+0x11de>
 8004444:	2c00      	cmp	r4, #0
 8004446:	dde2      	ble.n	800440e <_svfprintf_r+0x121e>
 8004448:	f04f 0810 	mov.w	r8, #16
 800444c:	4e51      	ldr	r6, [pc, #324]	; (8004594 <_svfprintf_r+0x13a4>)
 800444e:	2c10      	cmp	r4, #16
 8004450:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8004454:	f105 0108 	add.w	r1, r5, #8
 8004458:	f103 0301 	add.w	r3, r3, #1
 800445c:	602e      	str	r6, [r5, #0]
 800445e:	dc07      	bgt.n	8004470 <_svfprintf_r+0x1280>
 8004460:	606c      	str	r4, [r5, #4]
 8004462:	2b07      	cmp	r3, #7
 8004464:	4414      	add	r4, r2
 8004466:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 800446a:	dcc8      	bgt.n	80043fe <_svfprintf_r+0x120e>
 800446c:	460d      	mov	r5, r1
 800446e:	e7ce      	b.n	800440e <_svfprintf_r+0x121e>
 8004470:	3210      	adds	r2, #16
 8004472:	2b07      	cmp	r3, #7
 8004474:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8004478:	f8c5 8004 	str.w	r8, [r5, #4]
 800447c:	dd06      	ble.n	800448c <_svfprintf_r+0x129c>
 800447e:	4659      	mov	r1, fp
 8004480:	4648      	mov	r0, r9
 8004482:	aa26      	add	r2, sp, #152	; 0x98
 8004484:	f003 fdb4 	bl	8007ff0 <__ssprint_r>
 8004488:	bb50      	cbnz	r0, 80044e0 <_svfprintf_r+0x12f0>
 800448a:	a929      	add	r1, sp, #164	; 0xa4
 800448c:	460d      	mov	r5, r1
 800448e:	3c10      	subs	r4, #16
 8004490:	e7dd      	b.n	800444e <_svfprintf_r+0x125e>
 8004492:	2b07      	cmp	r3, #7
 8004494:	ddbb      	ble.n	800440e <_svfprintf_r+0x121e>
 8004496:	e7b2      	b.n	80043fe <_svfprintf_r+0x120e>
 8004498:	3508      	adds	r5, #8
 800449a:	e7b8      	b.n	800440e <_svfprintf_r+0x121e>
 800449c:	460c      	mov	r4, r1
 800449e:	f7ff ba6e 	b.w	800397e <_svfprintf_r+0x78e>
 80044a2:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 80044a6:	1a9d      	subs	r5, r3, r2
 80044a8:	2d00      	cmp	r5, #0
 80044aa:	f77f aa6c 	ble.w	8003986 <_svfprintf_r+0x796>
 80044ae:	f04f 0810 	mov.w	r8, #16
 80044b2:	4e39      	ldr	r6, [pc, #228]	; (8004598 <_svfprintf_r+0x13a8>)
 80044b4:	2d10      	cmp	r5, #16
 80044b6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80044ba:	6026      	str	r6, [r4, #0]
 80044bc:	f103 0301 	add.w	r3, r3, #1
 80044c0:	dc17      	bgt.n	80044f2 <_svfprintf_r+0x1302>
 80044c2:	6065      	str	r5, [r4, #4]
 80044c4:	2b07      	cmp	r3, #7
 80044c6:	4415      	add	r5, r2
 80044c8:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80044cc:	f77f aa5b 	ble.w	8003986 <_svfprintf_r+0x796>
 80044d0:	4659      	mov	r1, fp
 80044d2:	4648      	mov	r0, r9
 80044d4:	aa26      	add	r2, sp, #152	; 0x98
 80044d6:	f003 fd8b 	bl	8007ff0 <__ssprint_r>
 80044da:	2800      	cmp	r0, #0
 80044dc:	f43f aa53 	beq.w	8003986 <_svfprintf_r+0x796>
 80044e0:	2f00      	cmp	r7, #0
 80044e2:	f43f a87e 	beq.w	80035e2 <_svfprintf_r+0x3f2>
 80044e6:	4639      	mov	r1, r7
 80044e8:	4648      	mov	r0, r9
 80044ea:	f002 faf5 	bl	8006ad8 <_free_r>
 80044ee:	f7ff b878 	b.w	80035e2 <_svfprintf_r+0x3f2>
 80044f2:	3210      	adds	r2, #16
 80044f4:	2b07      	cmp	r3, #7
 80044f6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80044fa:	f8c4 8004 	str.w	r8, [r4, #4]
 80044fe:	dc02      	bgt.n	8004506 <_svfprintf_r+0x1316>
 8004500:	3408      	adds	r4, #8
 8004502:	3d10      	subs	r5, #16
 8004504:	e7d6      	b.n	80044b4 <_svfprintf_r+0x12c4>
 8004506:	4659      	mov	r1, fp
 8004508:	4648      	mov	r0, r9
 800450a:	aa26      	add	r2, sp, #152	; 0x98
 800450c:	f003 fd70 	bl	8007ff0 <__ssprint_r>
 8004510:	2800      	cmp	r0, #0
 8004512:	d1e5      	bne.n	80044e0 <_svfprintf_r+0x12f0>
 8004514:	ac29      	add	r4, sp, #164	; 0xa4
 8004516:	e7f4      	b.n	8004502 <_svfprintf_r+0x1312>
 8004518:	4639      	mov	r1, r7
 800451a:	4648      	mov	r0, r9
 800451c:	f002 fadc 	bl	8006ad8 <_free_r>
 8004520:	f7ff ba48 	b.w	80039b4 <_svfprintf_r+0x7c4>
 8004524:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004526:	2b00      	cmp	r3, #0
 8004528:	f43f a85b 	beq.w	80035e2 <_svfprintf_r+0x3f2>
 800452c:	4659      	mov	r1, fp
 800452e:	4648      	mov	r0, r9
 8004530:	aa26      	add	r2, sp, #152	; 0x98
 8004532:	f003 fd5d 	bl	8007ff0 <__ssprint_r>
 8004536:	f7ff b854 	b.w	80035e2 <_svfprintf_r+0x3f2>
 800453a:	ea56 0207 	orrs.w	r2, r6, r7
 800453e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004542:	f43f ab54 	beq.w	8003bee <_svfprintf_r+0x9fe>
 8004546:	2b01      	cmp	r3, #1
 8004548:	f43f abea 	beq.w	8003d20 <_svfprintf_r+0xb30>
 800454c:	2b02      	cmp	r3, #2
 800454e:	ab52      	add	r3, sp, #328	; 0x148
 8004550:	9307      	str	r3, [sp, #28]
 8004552:	f43f ac3d 	beq.w	8003dd0 <_svfprintf_r+0xbe0>
 8004556:	9907      	ldr	r1, [sp, #28]
 8004558:	f006 0307 	and.w	r3, r6, #7
 800455c:	460a      	mov	r2, r1
 800455e:	3330      	adds	r3, #48	; 0x30
 8004560:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8004564:	9207      	str	r2, [sp, #28]
 8004566:	08f2      	lsrs	r2, r6, #3
 8004568:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800456c:	08f8      	lsrs	r0, r7, #3
 800456e:	4616      	mov	r6, r2
 8004570:	4607      	mov	r7, r0
 8004572:	ea56 0207 	orrs.w	r2, r6, r7
 8004576:	d1ee      	bne.n	8004556 <_svfprintf_r+0x1366>
 8004578:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800457a:	07d2      	lsls	r2, r2, #31
 800457c:	f57f ac16 	bpl.w	8003dac <_svfprintf_r+0xbbc>
 8004580:	2b30      	cmp	r3, #48	; 0x30
 8004582:	f43f ac13 	beq.w	8003dac <_svfprintf_r+0xbbc>
 8004586:	2330      	movs	r3, #48	; 0x30
 8004588:	9a07      	ldr	r2, [sp, #28]
 800458a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800458e:	1e8b      	subs	r3, r1, #2
 8004590:	9307      	str	r3, [sp, #28]
 8004592:	e40b      	b.n	8003dac <_svfprintf_r+0xbbc>
 8004594:	08009300 	.word	0x08009300
 8004598:	080092f0 	.word	0x080092f0

0800459c <_vfprintf_r>:
 800459c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a0:	b0d3      	sub	sp, #332	; 0x14c
 80045a2:	468a      	mov	sl, r1
 80045a4:	4691      	mov	r9, r2
 80045a6:	461c      	mov	r4, r3
 80045a8:	461e      	mov	r6, r3
 80045aa:	4683      	mov	fp, r0
 80045ac:	f002 fcbe 	bl	8006f2c <_localeconv_r>
 80045b0:	6803      	ldr	r3, [r0, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	9318      	str	r3, [sp, #96]	; 0x60
 80045b6:	f7fb fdcb 	bl	8000150 <strlen>
 80045ba:	9012      	str	r0, [sp, #72]	; 0x48
 80045bc:	f1bb 0f00 	cmp.w	fp, #0
 80045c0:	d005      	beq.n	80045ce <_vfprintf_r+0x32>
 80045c2:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 80045c6:	b913      	cbnz	r3, 80045ce <_vfprintf_r+0x32>
 80045c8:	4658      	mov	r0, fp
 80045ca:	f002 f9f5 	bl	80069b8 <__sinit>
 80045ce:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 80045d2:	07da      	lsls	r2, r3, #31
 80045d4:	d407      	bmi.n	80045e6 <_vfprintf_r+0x4a>
 80045d6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80045da:	059b      	lsls	r3, r3, #22
 80045dc:	d403      	bmi.n	80045e6 <_vfprintf_r+0x4a>
 80045de:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 80045e2:	f002 fca9 	bl	8006f38 <__retarget_lock_acquire_recursive>
 80045e6:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 80045ea:	049f      	lsls	r7, r3, #18
 80045ec:	d409      	bmi.n	8004602 <_vfprintf_r+0x66>
 80045ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045f2:	f8aa 300c 	strh.w	r3, [sl, #12]
 80045f6:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 80045fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045fe:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 8004602:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004606:	071d      	lsls	r5, r3, #28
 8004608:	d502      	bpl.n	8004610 <_vfprintf_r+0x74>
 800460a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800460e:	b9c3      	cbnz	r3, 8004642 <_vfprintf_r+0xa6>
 8004610:	4651      	mov	r1, sl
 8004612:	4658      	mov	r0, fp
 8004614:	f001 fa22 	bl	8005a5c <__swsetup_r>
 8004618:	b198      	cbz	r0, 8004642 <_vfprintf_r+0xa6>
 800461a:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 800461e:	07dc      	lsls	r4, r3, #31
 8004620:	d506      	bpl.n	8004630 <_vfprintf_r+0x94>
 8004622:	f04f 33ff 	mov.w	r3, #4294967295
 8004626:	9313      	str	r3, [sp, #76]	; 0x4c
 8004628:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800462a:	b053      	add	sp, #332	; 0x14c
 800462c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004630:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004634:	0598      	lsls	r0, r3, #22
 8004636:	d4f4      	bmi.n	8004622 <_vfprintf_r+0x86>
 8004638:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 800463c:	f002 fc7d 	bl	8006f3a <__retarget_lock_release_recursive>
 8004640:	e7ef      	b.n	8004622 <_vfprintf_r+0x86>
 8004642:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004646:	f003 021a 	and.w	r2, r3, #26
 800464a:	2a0a      	cmp	r2, #10
 800464c:	d115      	bne.n	800467a <_vfprintf_r+0xde>
 800464e:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 8004652:	2a00      	cmp	r2, #0
 8004654:	db11      	blt.n	800467a <_vfprintf_r+0xde>
 8004656:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
 800465a:	07d1      	lsls	r1, r2, #31
 800465c:	d405      	bmi.n	800466a <_vfprintf_r+0xce>
 800465e:	059a      	lsls	r2, r3, #22
 8004660:	d403      	bmi.n	800466a <_vfprintf_r+0xce>
 8004662:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 8004666:	f002 fc68 	bl	8006f3a <__retarget_lock_release_recursive>
 800466a:	4623      	mov	r3, r4
 800466c:	464a      	mov	r2, r9
 800466e:	4651      	mov	r1, sl
 8004670:	4658      	mov	r0, fp
 8004672:	f001 f9b3 	bl	80059dc <__sbprintf>
 8004676:	9013      	str	r0, [sp, #76]	; 0x4c
 8004678:	e7d6      	b.n	8004628 <_vfprintf_r+0x8c>
 800467a:	2500      	movs	r5, #0
 800467c:	2200      	movs	r2, #0
 800467e:	2300      	movs	r3, #0
 8004680:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 8004684:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004688:	e9cd 551a 	strd	r5, r5, [sp, #104]	; 0x68
 800468c:	ac29      	add	r4, sp, #164	; 0xa4
 800468e:	9426      	str	r4, [sp, #152]	; 0x98
 8004690:	9508      	str	r5, [sp, #32]
 8004692:	950e      	str	r5, [sp, #56]	; 0x38
 8004694:	9516      	str	r5, [sp, #88]	; 0x58
 8004696:	9519      	str	r5, [sp, #100]	; 0x64
 8004698:	9513      	str	r5, [sp, #76]	; 0x4c
 800469a:	464b      	mov	r3, r9
 800469c:	461d      	mov	r5, r3
 800469e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046a2:	b10a      	cbz	r2, 80046a8 <_vfprintf_r+0x10c>
 80046a4:	2a25      	cmp	r2, #37	; 0x25
 80046a6:	d1f9      	bne.n	800469c <_vfprintf_r+0x100>
 80046a8:	ebb5 0709 	subs.w	r7, r5, r9
 80046ac:	d00d      	beq.n	80046ca <_vfprintf_r+0x12e>
 80046ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80046b0:	e9c4 9700 	strd	r9, r7, [r4]
 80046b4:	443b      	add	r3, r7
 80046b6:	9328      	str	r3, [sp, #160]	; 0xa0
 80046b8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80046ba:	3301      	adds	r3, #1
 80046bc:	2b07      	cmp	r3, #7
 80046be:	9327      	str	r3, [sp, #156]	; 0x9c
 80046c0:	dc7a      	bgt.n	80047b8 <_vfprintf_r+0x21c>
 80046c2:	3408      	adds	r4, #8
 80046c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80046c6:	443b      	add	r3, r7
 80046c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80046ca:	782b      	ldrb	r3, [r5, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f001 813d 	beq.w	800594c <_vfprintf_r+0x13b0>
 80046d2:	2300      	movs	r3, #0
 80046d4:	f04f 32ff 	mov.w	r2, #4294967295
 80046d8:	4698      	mov	r8, r3
 80046da:	270a      	movs	r7, #10
 80046dc:	212b      	movs	r1, #43	; 0x2b
 80046de:	3501      	adds	r5, #1
 80046e0:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80046e4:	9207      	str	r2, [sp, #28]
 80046e6:	9314      	str	r3, [sp, #80]	; 0x50
 80046e8:	462a      	mov	r2, r5
 80046ea:	f812 3b01 	ldrb.w	r3, [r2], #1
 80046ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80046f0:	4613      	mov	r3, r2
 80046f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80046f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046f6:	3b20      	subs	r3, #32
 80046f8:	2b5a      	cmp	r3, #90	; 0x5a
 80046fa:	f200 85a6 	bhi.w	800524a <_vfprintf_r+0xcae>
 80046fe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004702:	007e      	.short	0x007e
 8004704:	05a405a4 	.word	0x05a405a4
 8004708:	05a40086 	.word	0x05a40086
 800470c:	05a405a4 	.word	0x05a405a4
 8004710:	05a40065 	.word	0x05a40065
 8004714:	008905a4 	.word	0x008905a4
 8004718:	05a40093 	.word	0x05a40093
 800471c:	00960090 	.word	0x00960090
 8004720:	00b205a4 	.word	0x00b205a4
 8004724:	00b500b5 	.word	0x00b500b5
 8004728:	00b500b5 	.word	0x00b500b5
 800472c:	00b500b5 	.word	0x00b500b5
 8004730:	00b500b5 	.word	0x00b500b5
 8004734:	05a400b5 	.word	0x05a400b5
 8004738:	05a405a4 	.word	0x05a405a4
 800473c:	05a405a4 	.word	0x05a405a4
 8004740:	05a405a4 	.word	0x05a405a4
 8004744:	05a4011f 	.word	0x05a4011f
 8004748:	00f500e2 	.word	0x00f500e2
 800474c:	011f011f 	.word	0x011f011f
 8004750:	05a4011f 	.word	0x05a4011f
 8004754:	05a405a4 	.word	0x05a405a4
 8004758:	00c505a4 	.word	0x00c505a4
 800475c:	05a405a4 	.word	0x05a405a4
 8004760:	05a40484 	.word	0x05a40484
 8004764:	05a405a4 	.word	0x05a405a4
 8004768:	05a404cb 	.word	0x05a404cb
 800476c:	05a404ec 	.word	0x05a404ec
 8004770:	050b05a4 	.word	0x050b05a4
 8004774:	05a405a4 	.word	0x05a405a4
 8004778:	05a405a4 	.word	0x05a405a4
 800477c:	05a405a4 	.word	0x05a405a4
 8004780:	05a405a4 	.word	0x05a405a4
 8004784:	05a4011f 	.word	0x05a4011f
 8004788:	00f700e2 	.word	0x00f700e2
 800478c:	011f011f 	.word	0x011f011f
 8004790:	00c8011f 	.word	0x00c8011f
 8004794:	00dc00f7 	.word	0x00dc00f7
 8004798:	00d505a4 	.word	0x00d505a4
 800479c:	046105a4 	.word	0x046105a4
 80047a0:	04ba0486 	.word	0x04ba0486
 80047a4:	05a400dc 	.word	0x05a400dc
 80047a8:	007c04cb 	.word	0x007c04cb
 80047ac:	05a404ee 	.word	0x05a404ee
 80047b0:	052805a4 	.word	0x052805a4
 80047b4:	007c05a4 	.word	0x007c05a4
 80047b8:	4651      	mov	r1, sl
 80047ba:	4658      	mov	r0, fp
 80047bc:	aa26      	add	r2, sp, #152	; 0x98
 80047be:	f003 fc9f 	bl	8008100 <__sprint_r>
 80047c2:	2800      	cmp	r0, #0
 80047c4:	f040 8127 	bne.w	8004a16 <_vfprintf_r+0x47a>
 80047c8:	ac29      	add	r4, sp, #164	; 0xa4
 80047ca:	e77b      	b.n	80046c4 <_vfprintf_r+0x128>
 80047cc:	4658      	mov	r0, fp
 80047ce:	f002 fbad 	bl	8006f2c <_localeconv_r>
 80047d2:	6843      	ldr	r3, [r0, #4]
 80047d4:	4618      	mov	r0, r3
 80047d6:	9319      	str	r3, [sp, #100]	; 0x64
 80047d8:	f7fb fcba 	bl	8000150 <strlen>
 80047dc:	9016      	str	r0, [sp, #88]	; 0x58
 80047de:	4658      	mov	r0, fp
 80047e0:	f002 fba4 	bl	8006f2c <_localeconv_r>
 80047e4:	6883      	ldr	r3, [r0, #8]
 80047e6:	212b      	movs	r1, #43	; 0x2b
 80047e8:	930e      	str	r3, [sp, #56]	; 0x38
 80047ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80047ec:	b12b      	cbz	r3, 80047fa <_vfprintf_r+0x25e>
 80047ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047f0:	b11b      	cbz	r3, 80047fa <_vfprintf_r+0x25e>
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	b10b      	cbz	r3, 80047fa <_vfprintf_r+0x25e>
 80047f6:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 80047fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80047fc:	e774      	b.n	80046e8 <_vfprintf_r+0x14c>
 80047fe:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f9      	bne.n	80047fa <_vfprintf_r+0x25e>
 8004806:	2320      	movs	r3, #32
 8004808:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800480c:	e7f5      	b.n	80047fa <_vfprintf_r+0x25e>
 800480e:	f048 0801 	orr.w	r8, r8, #1
 8004812:	e7f2      	b.n	80047fa <_vfprintf_r+0x25e>
 8004814:	f856 3b04 	ldr.w	r3, [r6], #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	9314      	str	r3, [sp, #80]	; 0x50
 800481c:	daed      	bge.n	80047fa <_vfprintf_r+0x25e>
 800481e:	425b      	negs	r3, r3
 8004820:	9314      	str	r3, [sp, #80]	; 0x50
 8004822:	f048 0804 	orr.w	r8, r8, #4
 8004826:	e7e8      	b.n	80047fa <_vfprintf_r+0x25e>
 8004828:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 800482c:	e7e5      	b.n	80047fa <_vfprintf_r+0x25e>
 800482e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004830:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004834:	2a2a      	cmp	r2, #42	; 0x2a
 8004836:	920b      	str	r2, [sp, #44]	; 0x2c
 8004838:	d112      	bne.n	8004860 <_vfprintf_r+0x2c4>
 800483a:	f856 0b04 	ldr.w	r0, [r6], #4
 800483e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004840:	ea40 72e0 	orr.w	r2, r0, r0, asr #31
 8004844:	9207      	str	r2, [sp, #28]
 8004846:	e7d8      	b.n	80047fa <_vfprintf_r+0x25e>
 8004848:	9807      	ldr	r0, [sp, #28]
 800484a:	fb07 2200 	mla	r2, r7, r0, r2
 800484e:	9207      	str	r2, [sp, #28]
 8004850:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004854:	920b      	str	r2, [sp, #44]	; 0x2c
 8004856:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004858:	3a30      	subs	r2, #48	; 0x30
 800485a:	2a09      	cmp	r2, #9
 800485c:	d9f4      	bls.n	8004848 <_vfprintf_r+0x2ac>
 800485e:	e748      	b.n	80046f2 <_vfprintf_r+0x156>
 8004860:	2200      	movs	r2, #0
 8004862:	9207      	str	r2, [sp, #28]
 8004864:	e7f7      	b.n	8004856 <_vfprintf_r+0x2ba>
 8004866:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 800486a:	e7c6      	b.n	80047fa <_vfprintf_r+0x25e>
 800486c:	2200      	movs	r2, #0
 800486e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004870:	9214      	str	r2, [sp, #80]	; 0x50
 8004872:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004874:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004876:	3a30      	subs	r2, #48	; 0x30
 8004878:	fb07 2200 	mla	r2, r7, r0, r2
 800487c:	9214      	str	r2, [sp, #80]	; 0x50
 800487e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004882:	920b      	str	r2, [sp, #44]	; 0x2c
 8004884:	3a30      	subs	r2, #48	; 0x30
 8004886:	2a09      	cmp	r2, #9
 8004888:	d9f3      	bls.n	8004872 <_vfprintf_r+0x2d6>
 800488a:	e732      	b.n	80046f2 <_vfprintf_r+0x156>
 800488c:	f048 0808 	orr.w	r8, r8, #8
 8004890:	e7b3      	b.n	80047fa <_vfprintf_r+0x25e>
 8004892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b68      	cmp	r3, #104	; 0x68
 8004898:	bf01      	itttt	eq
 800489a:	9b0f      	ldreq	r3, [sp, #60]	; 0x3c
 800489c:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 80048a0:	3301      	addeq	r3, #1
 80048a2:	930f      	streq	r3, [sp, #60]	; 0x3c
 80048a4:	bf18      	it	ne
 80048a6:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 80048aa:	e7a6      	b.n	80047fa <_vfprintf_r+0x25e>
 80048ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b6c      	cmp	r3, #108	; 0x6c
 80048b2:	d105      	bne.n	80048c0 <_vfprintf_r+0x324>
 80048b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048b6:	3301      	adds	r3, #1
 80048b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80048ba:	f048 0820 	orr.w	r8, r8, #32
 80048be:	e79c      	b.n	80047fa <_vfprintf_r+0x25e>
 80048c0:	f048 0810 	orr.w	r8, r8, #16
 80048c4:	e799      	b.n	80047fa <_vfprintf_r+0x25e>
 80048c6:	4632      	mov	r2, r6
 80048c8:	2000      	movs	r0, #0
 80048ca:	f852 3b04 	ldr.w	r3, [r2], #4
 80048ce:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 80048d2:	920a      	str	r2, [sp, #40]	; 0x28
 80048d4:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 80048d8:	2301      	movs	r3, #1
 80048da:	4607      	mov	r7, r0
 80048dc:	4606      	mov	r6, r0
 80048de:	4605      	mov	r5, r0
 80048e0:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 80048e4:	9307      	str	r3, [sp, #28]
 80048e6:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 80048ea:	e1b4      	b.n	8004c56 <_vfprintf_r+0x6ba>
 80048ec:	f048 0810 	orr.w	r8, r8, #16
 80048f0:	f018 0f20 	tst.w	r8, #32
 80048f4:	d011      	beq.n	800491a <_vfprintf_r+0x37e>
 80048f6:	3607      	adds	r6, #7
 80048f8:	f026 0307 	bic.w	r3, r6, #7
 80048fc:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8004900:	930a      	str	r3, [sp, #40]	; 0x28
 8004902:	2e00      	cmp	r6, #0
 8004904:	f177 0300 	sbcs.w	r3, r7, #0
 8004908:	da05      	bge.n	8004916 <_vfprintf_r+0x37a>
 800490a:	232d      	movs	r3, #45	; 0x2d
 800490c:	4276      	negs	r6, r6
 800490e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004912:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8004916:	2301      	movs	r3, #1
 8004918:	e388      	b.n	800502c <_vfprintf_r+0xa90>
 800491a:	1d33      	adds	r3, r6, #4
 800491c:	f018 0f10 	tst.w	r8, #16
 8004920:	930a      	str	r3, [sp, #40]	; 0x28
 8004922:	d002      	beq.n	800492a <_vfprintf_r+0x38e>
 8004924:	6836      	ldr	r6, [r6, #0]
 8004926:	17f7      	asrs	r7, r6, #31
 8004928:	e7eb      	b.n	8004902 <_vfprintf_r+0x366>
 800492a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800492e:	6836      	ldr	r6, [r6, #0]
 8004930:	d001      	beq.n	8004936 <_vfprintf_r+0x39a>
 8004932:	b236      	sxth	r6, r6
 8004934:	e7f7      	b.n	8004926 <_vfprintf_r+0x38a>
 8004936:	f418 7f00 	tst.w	r8, #512	; 0x200
 800493a:	bf18      	it	ne
 800493c:	b276      	sxtbne	r6, r6
 800493e:	e7f2      	b.n	8004926 <_vfprintf_r+0x38a>
 8004940:	3607      	adds	r6, #7
 8004942:	f026 0307 	bic.w	r3, r6, #7
 8004946:	4619      	mov	r1, r3
 8004948:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800494c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004950:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 8004954:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004958:	910a      	str	r1, [sp, #40]	; 0x28
 800495a:	f04f 32ff 	mov.w	r2, #4294967295
 800495e:	4630      	mov	r0, r6
 8004960:	4629      	mov	r1, r5
 8004962:	4b3c      	ldr	r3, [pc, #240]	; (8004a54 <_vfprintf_r+0x4b8>)
 8004964:	f7fc f852 	bl	8000a0c <__aeabi_dcmpun>
 8004968:	bb00      	cbnz	r0, 80049ac <_vfprintf_r+0x410>
 800496a:	f04f 32ff 	mov.w	r2, #4294967295
 800496e:	4630      	mov	r0, r6
 8004970:	4629      	mov	r1, r5
 8004972:	4b38      	ldr	r3, [pc, #224]	; (8004a54 <_vfprintf_r+0x4b8>)
 8004974:	f7fc f82c 	bl	80009d0 <__aeabi_dcmple>
 8004978:	b9c0      	cbnz	r0, 80049ac <_vfprintf_r+0x410>
 800497a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800497e:	2200      	movs	r2, #0
 8004980:	2300      	movs	r3, #0
 8004982:	f7fc f81b 	bl	80009bc <__aeabi_dcmplt>
 8004986:	b110      	cbz	r0, 800498e <_vfprintf_r+0x3f2>
 8004988:	232d      	movs	r3, #45	; 0x2d
 800498a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800498e:	4a32      	ldr	r2, [pc, #200]	; (8004a58 <_vfprintf_r+0x4bc>)
 8004990:	4832      	ldr	r0, [pc, #200]	; (8004a5c <_vfprintf_r+0x4c0>)
 8004992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004994:	2700      	movs	r7, #0
 8004996:	2b47      	cmp	r3, #71	; 0x47
 8004998:	bfd4      	ite	le
 800499a:	4691      	movle	r9, r2
 800499c:	4681      	movgt	r9, r0
 800499e:	2303      	movs	r3, #3
 80049a0:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 80049a4:	9307      	str	r3, [sp, #28]
 80049a6:	463e      	mov	r6, r7
 80049a8:	f001 b80e 	b.w	80059c8 <_vfprintf_r+0x142c>
 80049ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80049b0:	4610      	mov	r0, r2
 80049b2:	4619      	mov	r1, r3
 80049b4:	f7fc f82a 	bl	8000a0c <__aeabi_dcmpun>
 80049b8:	4607      	mov	r7, r0
 80049ba:	b148      	cbz	r0, 80049d0 <_vfprintf_r+0x434>
 80049bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049be:	4a28      	ldr	r2, [pc, #160]	; (8004a60 <_vfprintf_r+0x4c4>)
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bfb8      	it	lt
 80049c4:	232d      	movlt	r3, #45	; 0x2d
 80049c6:	4827      	ldr	r0, [pc, #156]	; (8004a64 <_vfprintf_r+0x4c8>)
 80049c8:	bfb8      	it	lt
 80049ca:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 80049ce:	e7e0      	b.n	8004992 <_vfprintf_r+0x3f6>
 80049d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049d2:	f023 0320 	bic.w	r3, r3, #32
 80049d6:	2b41      	cmp	r3, #65	; 0x41
 80049d8:	930c      	str	r3, [sp, #48]	; 0x30
 80049da:	d12e      	bne.n	8004a3a <_vfprintf_r+0x49e>
 80049dc:	2330      	movs	r3, #48	; 0x30
 80049de:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80049e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049e4:	f048 0802 	orr.w	r8, r8, #2
 80049e8:	2b61      	cmp	r3, #97	; 0x61
 80049ea:	bf0c      	ite	eq
 80049ec:	2378      	moveq	r3, #120	; 0x78
 80049ee:	2358      	movne	r3, #88	; 0x58
 80049f0:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80049f4:	9b07      	ldr	r3, [sp, #28]
 80049f6:	2b63      	cmp	r3, #99	; 0x63
 80049f8:	dd36      	ble.n	8004a68 <_vfprintf_r+0x4cc>
 80049fa:	4658      	mov	r0, fp
 80049fc:	1c59      	adds	r1, r3, #1
 80049fe:	f002 fb09 	bl	8007014 <_malloc_r>
 8004a02:	4681      	mov	r9, r0
 8004a04:	2800      	cmp	r0, #0
 8004a06:	f040 8201 	bne.w	8004e0c <_vfprintf_r+0x870>
 8004a0a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a12:	f8aa 300c 	strh.w	r3, [sl, #12]
 8004a16:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 8004a1a:	07d9      	lsls	r1, r3, #31
 8004a1c:	d407      	bmi.n	8004a2e <_vfprintf_r+0x492>
 8004a1e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004a22:	059a      	lsls	r2, r3, #22
 8004a24:	d403      	bmi.n	8004a2e <_vfprintf_r+0x492>
 8004a26:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 8004a2a:	f002 fa86 	bl	8006f3a <__retarget_lock_release_recursive>
 8004a2e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004a32:	065b      	lsls	r3, r3, #25
 8004a34:	f57f adf8 	bpl.w	8004628 <_vfprintf_r+0x8c>
 8004a38:	e5f3      	b.n	8004622 <_vfprintf_r+0x86>
 8004a3a:	9b07      	ldr	r3, [sp, #28]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	f000 81e7 	beq.w	8004e10 <_vfprintf_r+0x874>
 8004a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a44:	2b47      	cmp	r3, #71	; 0x47
 8004a46:	d111      	bne.n	8004a6c <_vfprintf_r+0x4d0>
 8004a48:	9b07      	ldr	r3, [sp, #28]
 8004a4a:	b97b      	cbnz	r3, 8004a6c <_vfprintf_r+0x4d0>
 8004a4c:	461f      	mov	r7, r3
 8004a4e:	2301      	movs	r3, #1
 8004a50:	9307      	str	r3, [sp, #28]
 8004a52:	e00b      	b.n	8004a6c <_vfprintf_r+0x4d0>
 8004a54:	7fefffff 	.word	0x7fefffff
 8004a58:	080092bc 	.word	0x080092bc
 8004a5c:	080092c0 	.word	0x080092c0
 8004a60:	080092c4 	.word	0x080092c4
 8004a64:	080092c8 	.word	0x080092c8
 8004a68:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 8004a6c:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 8004a70:	9315      	str	r3, [sp, #84]	; 0x54
 8004a72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a74:	1e1d      	subs	r5, r3, #0
 8004a76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a78:	9308      	str	r3, [sp, #32]
 8004a7a:	bfb7      	itett	lt
 8004a7c:	462b      	movlt	r3, r5
 8004a7e:	2300      	movge	r3, #0
 8004a80:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 8004a84:	232d      	movlt	r3, #45	; 0x2d
 8004a86:	931c      	str	r3, [sp, #112]	; 0x70
 8004a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a8a:	2b41      	cmp	r3, #65	; 0x41
 8004a8c:	f040 81d8 	bne.w	8004e40 <_vfprintf_r+0x8a4>
 8004a90:	aa20      	add	r2, sp, #128	; 0x80
 8004a92:	4629      	mov	r1, r5
 8004a94:	9808      	ldr	r0, [sp, #32]
 8004a96:	f003 fa11 	bl	8007ebc <frexp>
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004aa0:	f7fb fd1a 	bl	80004d8 <__aeabi_dmul>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f7fb ff7a 	bl	80009a8 <__aeabi_dcmpeq>
 8004ab4:	b108      	cbz	r0, 8004aba <_vfprintf_r+0x51e>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	9320      	str	r3, [sp, #128]	; 0x80
 8004aba:	4bb2      	ldr	r3, [pc, #712]	; (8004d84 <_vfprintf_r+0x7e8>)
 8004abc:	4eb2      	ldr	r6, [pc, #712]	; (8004d88 <_vfprintf_r+0x7ec>)
 8004abe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ac0:	464d      	mov	r5, r9
 8004ac2:	2a61      	cmp	r2, #97	; 0x61
 8004ac4:	bf18      	it	ne
 8004ac6:	461e      	movne	r6, r3
 8004ac8:	9b07      	ldr	r3, [sp, #28]
 8004aca:	9617      	str	r6, [sp, #92]	; 0x5c
 8004acc:	1e5e      	subs	r6, r3, #1
 8004ace:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	4bad      	ldr	r3, [pc, #692]	; (8004d8c <_vfprintf_r+0x7f0>)
 8004ad6:	f7fb fcff 	bl	80004d8 <__aeabi_dmul>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004ae2:	f7fb ffa9 	bl	8000a38 <__aeabi_d2iz>
 8004ae6:	901d      	str	r0, [sp, #116]	; 0x74
 8004ae8:	f7fb fc8c 	bl	8000404 <__aeabi_i2d>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004af4:	f7fb fb38 	bl	8000168 <__aeabi_dsub>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004b00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b02:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004b04:	960d      	str	r6, [sp, #52]	; 0x34
 8004b06:	5c9b      	ldrb	r3, [r3, r2]
 8004b08:	f805 3b01 	strb.w	r3, [r5], #1
 8004b0c:	1c73      	adds	r3, r6, #1
 8004b0e:	d006      	beq.n	8004b1e <_vfprintf_r+0x582>
 8004b10:	2200      	movs	r2, #0
 8004b12:	2300      	movs	r3, #0
 8004b14:	3e01      	subs	r6, #1
 8004b16:	f7fb ff47 	bl	80009a8 <__aeabi_dcmpeq>
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	d0d7      	beq.n	8004ace <_vfprintf_r+0x532>
 8004b1e:	2200      	movs	r2, #0
 8004b20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004b24:	4b9a      	ldr	r3, [pc, #616]	; (8004d90 <_vfprintf_r+0x7f4>)
 8004b26:	f7fb ff67 	bl	80009f8 <__aeabi_dcmpgt>
 8004b2a:	b960      	cbnz	r0, 8004b46 <_vfprintf_r+0x5aa>
 8004b2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004b30:	2200      	movs	r2, #0
 8004b32:	4b97      	ldr	r3, [pc, #604]	; (8004d90 <_vfprintf_r+0x7f4>)
 8004b34:	f7fb ff38 	bl	80009a8 <__aeabi_dcmpeq>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	f000 817c 	beq.w	8004e36 <_vfprintf_r+0x89a>
 8004b3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004b40:	07da      	lsls	r2, r3, #31
 8004b42:	f140 8178 	bpl.w	8004e36 <_vfprintf_r+0x89a>
 8004b46:	2030      	movs	r0, #48	; 0x30
 8004b48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b4a:	9524      	str	r5, [sp, #144]	; 0x90
 8004b4c:	7bd9      	ldrb	r1, [r3, #15]
 8004b4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b50:	1e53      	subs	r3, r2, #1
 8004b52:	9324      	str	r3, [sp, #144]	; 0x90
 8004b54:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8004b58:	428b      	cmp	r3, r1
 8004b5a:	f000 815b 	beq.w	8004e14 <_vfprintf_r+0x878>
 8004b5e:	2b39      	cmp	r3, #57	; 0x39
 8004b60:	bf0b      	itete	eq
 8004b62:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8004b64:	3301      	addne	r3, #1
 8004b66:	7a9b      	ldrbeq	r3, [r3, #10]
 8004b68:	b2db      	uxtbne	r3, r3
 8004b6a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004b6e:	eba5 0309 	sub.w	r3, r5, r9
 8004b72:	9308      	str	r3, [sp, #32]
 8004b74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b76:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004b78:	2b47      	cmp	r3, #71	; 0x47
 8004b7a:	f040 81ae 	bne.w	8004eda <_vfprintf_r+0x93e>
 8004b7e:	1ceb      	adds	r3, r5, #3
 8004b80:	db03      	blt.n	8004b8a <_vfprintf_r+0x5ee>
 8004b82:	9b07      	ldr	r3, [sp, #28]
 8004b84:	429d      	cmp	r5, r3
 8004b86:	f340 81d3 	ble.w	8004f30 <_vfprintf_r+0x994>
 8004b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b8c:	3b02      	subs	r3, #2
 8004b8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b92:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8004b96:	f021 0120 	bic.w	r1, r1, #32
 8004b9a:	2941      	cmp	r1, #65	; 0x41
 8004b9c:	bf08      	it	eq
 8004b9e:	320f      	addeq	r2, #15
 8004ba0:	f105 33ff 	add.w	r3, r5, #4294967295
 8004ba4:	bf06      	itte	eq
 8004ba6:	b2d2      	uxtbeq	r2, r2
 8004ba8:	2101      	moveq	r1, #1
 8004baa:	2100      	movne	r1, #0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8004bb2:	bfb4      	ite	lt
 8004bb4:	222d      	movlt	r2, #45	; 0x2d
 8004bb6:	222b      	movge	r2, #43	; 0x2b
 8004bb8:	9320      	str	r3, [sp, #128]	; 0x80
 8004bba:	bfb8      	it	lt
 8004bbc:	f1c5 0301 	rsblt	r3, r5, #1
 8004bc0:	2b09      	cmp	r3, #9
 8004bc2:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8004bc6:	f340 81a1 	ble.w	8004f0c <_vfprintf_r+0x970>
 8004bca:	260a      	movs	r6, #10
 8004bcc:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8004bd0:	fb93 f5f6 	sdiv	r5, r3, r6
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	fb06 3015 	mls	r0, r6, r5, r3
 8004bda:	3030      	adds	r0, #48	; 0x30
 8004bdc:	f801 0c01 	strb.w	r0, [r1, #-1]
 8004be0:	4618      	mov	r0, r3
 8004be2:	2863      	cmp	r0, #99	; 0x63
 8004be4:	462b      	mov	r3, r5
 8004be6:	f102 32ff 	add.w	r2, r2, #4294967295
 8004bea:	dcf1      	bgt.n	8004bd0 <_vfprintf_r+0x634>
 8004bec:	3330      	adds	r3, #48	; 0x30
 8004bee:	1e88      	subs	r0, r1, #2
 8004bf0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8004bfa:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 8004bfe:	42ab      	cmp	r3, r5
 8004c00:	f0c0 817f 	bcc.w	8004f02 <_vfprintf_r+0x966>
 8004c04:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 8004c08:	1a52      	subs	r2, r2, r1
 8004c0a:	42a8      	cmp	r0, r5
 8004c0c:	bf88      	it	hi
 8004c0e:	2200      	movhi	r2, #0
 8004c10:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8004c14:	441a      	add	r2, r3
 8004c16:	ab22      	add	r3, sp, #136	; 0x88
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	9a08      	ldr	r2, [sp, #32]
 8004c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8004c1e:	2a01      	cmp	r2, #1
 8004c20:	4413      	add	r3, r2
 8004c22:	9307      	str	r3, [sp, #28]
 8004c24:	dc02      	bgt.n	8004c2c <_vfprintf_r+0x690>
 8004c26:	f018 0f01 	tst.w	r8, #1
 8004c2a:	d003      	beq.n	8004c34 <_vfprintf_r+0x698>
 8004c2c:	9b07      	ldr	r3, [sp, #28]
 8004c2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004c30:	4413      	add	r3, r2
 8004c32:	9307      	str	r3, [sp, #28]
 8004c34:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8004c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3c:	9315      	str	r3, [sp, #84]	; 0x54
 8004c3e:	2300      	movs	r3, #0
 8004c40:	461d      	mov	r5, r3
 8004c42:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8004c46:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004c48:	b113      	cbz	r3, 8004c50 <_vfprintf_r+0x6b4>
 8004c4a:	232d      	movs	r3, #45	; 0x2d
 8004c4c:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8004c50:	2600      	movs	r6, #0
 8004c52:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8004c56:	9b07      	ldr	r3, [sp, #28]
 8004c58:	42b3      	cmp	r3, r6
 8004c5a:	bfb8      	it	lt
 8004c5c:	4633      	movlt	r3, r6
 8004c5e:	9315      	str	r3, [sp, #84]	; 0x54
 8004c60:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8004c64:	b113      	cbz	r3, 8004c6c <_vfprintf_r+0x6d0>
 8004c66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c68:	3301      	adds	r3, #1
 8004c6a:	9315      	str	r3, [sp, #84]	; 0x54
 8004c6c:	f018 0302 	ands.w	r3, r8, #2
 8004c70:	931c      	str	r3, [sp, #112]	; 0x70
 8004c72:	bf1e      	ittt	ne
 8004c74:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 8004c76:	3302      	addne	r3, #2
 8004c78:	9315      	strne	r3, [sp, #84]	; 0x54
 8004c7a:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8004c7e:	931d      	str	r3, [sp, #116]	; 0x74
 8004c80:	d121      	bne.n	8004cc6 <_vfprintf_r+0x72a>
 8004c82:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	9317      	str	r3, [sp, #92]	; 0x5c
 8004c8c:	dd1b      	ble.n	8004cc6 <_vfprintf_r+0x72a>
 8004c8e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8004c92:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004c94:	3301      	adds	r3, #1
 8004c96:	2810      	cmp	r0, #16
 8004c98:	483e      	ldr	r0, [pc, #248]	; (8004d94 <_vfprintf_r+0x7f8>)
 8004c9a:	f104 0108 	add.w	r1, r4, #8
 8004c9e:	6020      	str	r0, [r4, #0]
 8004ca0:	f300 82df 	bgt.w	8005262 <_vfprintf_r+0xcc6>
 8004ca4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004ca6:	2b07      	cmp	r3, #7
 8004ca8:	4402      	add	r2, r0
 8004caa:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8004cae:	6060      	str	r0, [r4, #4]
 8004cb0:	f340 82ec 	ble.w	800528c <_vfprintf_r+0xcf0>
 8004cb4:	4651      	mov	r1, sl
 8004cb6:	4658      	mov	r0, fp
 8004cb8:	aa26      	add	r2, sp, #152	; 0x98
 8004cba:	f003 fa21 	bl	8008100 <__sprint_r>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	f040 8622 	bne.w	8005908 <_vfprintf_r+0x136c>
 8004cc4:	ac29      	add	r4, sp, #164	; 0xa4
 8004cc6:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8004cca:	b173      	cbz	r3, 8004cea <_vfprintf_r+0x74e>
 8004ccc:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	6063      	str	r3, [r4, #4]
 8004cd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004cd8:	3301      	adds	r3, #1
 8004cda:	9328      	str	r3, [sp, #160]	; 0xa0
 8004cdc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004cde:	3301      	adds	r3, #1
 8004ce0:	2b07      	cmp	r3, #7
 8004ce2:	9327      	str	r3, [sp, #156]	; 0x9c
 8004ce4:	f300 82d4 	bgt.w	8005290 <_vfprintf_r+0xcf4>
 8004ce8:	3408      	adds	r4, #8
 8004cea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004cec:	b16b      	cbz	r3, 8004d0a <_vfprintf_r+0x76e>
 8004cee:	ab1f      	add	r3, sp, #124	; 0x7c
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	6063      	str	r3, [r4, #4]
 8004cf6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004cf8:	3302      	adds	r3, #2
 8004cfa:	9328      	str	r3, [sp, #160]	; 0xa0
 8004cfc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004cfe:	3301      	adds	r3, #1
 8004d00:	2b07      	cmp	r3, #7
 8004d02:	9327      	str	r3, [sp, #156]	; 0x9c
 8004d04:	f300 82ce 	bgt.w	80052a4 <_vfprintf_r+0xd08>
 8004d08:	3408      	adds	r4, #8
 8004d0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d0c:	2b80      	cmp	r3, #128	; 0x80
 8004d0e:	d121      	bne.n	8004d54 <_vfprintf_r+0x7b8>
 8004d10:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	9317      	str	r3, [sp, #92]	; 0x5c
 8004d1a:	dd1b      	ble.n	8004d54 <_vfprintf_r+0x7b8>
 8004d1c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8004d20:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004d22:	3301      	adds	r3, #1
 8004d24:	2810      	cmp	r0, #16
 8004d26:	481c      	ldr	r0, [pc, #112]	; (8004d98 <_vfprintf_r+0x7fc>)
 8004d28:	f104 0108 	add.w	r1, r4, #8
 8004d2c:	6020      	str	r0, [r4, #0]
 8004d2e:	f300 82c3 	bgt.w	80052b8 <_vfprintf_r+0xd1c>
 8004d32:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004d34:	2b07      	cmp	r3, #7
 8004d36:	4402      	add	r2, r0
 8004d38:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8004d3c:	6060      	str	r0, [r4, #4]
 8004d3e:	f340 82d0 	ble.w	80052e2 <_vfprintf_r+0xd46>
 8004d42:	4651      	mov	r1, sl
 8004d44:	4658      	mov	r0, fp
 8004d46:	aa26      	add	r2, sp, #152	; 0x98
 8004d48:	f003 f9da 	bl	8008100 <__sprint_r>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	f040 85db 	bne.w	8005908 <_vfprintf_r+0x136c>
 8004d52:	ac29      	add	r4, sp, #164	; 0xa4
 8004d54:	9b07      	ldr	r3, [sp, #28]
 8004d56:	1af6      	subs	r6, r6, r3
 8004d58:	2e00      	cmp	r6, #0
 8004d5a:	dd28      	ble.n	8004dae <_vfprintf_r+0x812>
 8004d5c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8004d60:	480d      	ldr	r0, [pc, #52]	; (8004d98 <_vfprintf_r+0x7fc>)
 8004d62:	2e10      	cmp	r6, #16
 8004d64:	f103 0301 	add.w	r3, r3, #1
 8004d68:	f104 0108 	add.w	r1, r4, #8
 8004d6c:	6020      	str	r0, [r4, #0]
 8004d6e:	f300 82ba 	bgt.w	80052e6 <_vfprintf_r+0xd4a>
 8004d72:	6066      	str	r6, [r4, #4]
 8004d74:	2b07      	cmp	r3, #7
 8004d76:	4416      	add	r6, r2
 8004d78:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 8004d7c:	f340 82c6 	ble.w	800530c <_vfprintf_r+0xd70>
 8004d80:	e00c      	b.n	8004d9c <_vfprintf_r+0x800>
 8004d82:	bf00      	nop
 8004d84:	080092dd 	.word	0x080092dd
 8004d88:	080092cc 	.word	0x080092cc
 8004d8c:	40300000 	.word	0x40300000
 8004d90:	3fe00000 	.word	0x3fe00000
 8004d94:	08009310 	.word	0x08009310
 8004d98:	08009320 	.word	0x08009320
 8004d9c:	4651      	mov	r1, sl
 8004d9e:	4658      	mov	r0, fp
 8004da0:	aa26      	add	r2, sp, #152	; 0x98
 8004da2:	f003 f9ad 	bl	8008100 <__sprint_r>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	f040 85ae 	bne.w	8005908 <_vfprintf_r+0x136c>
 8004dac:	ac29      	add	r4, sp, #164	; 0xa4
 8004dae:	f418 7f80 	tst.w	r8, #256	; 0x100
 8004db2:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8004db4:	f040 82b0 	bne.w	8005318 <_vfprintf_r+0xd7c>
 8004db8:	9b07      	ldr	r3, [sp, #28]
 8004dba:	f8c4 9000 	str.w	r9, [r4]
 8004dbe:	441e      	add	r6, r3
 8004dc0:	6063      	str	r3, [r4, #4]
 8004dc2:	9628      	str	r6, [sp, #160]	; 0xa0
 8004dc4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	2b07      	cmp	r3, #7
 8004dca:	9327      	str	r3, [sp, #156]	; 0x9c
 8004dcc:	f300 82ea 	bgt.w	80053a4 <_vfprintf_r+0xe08>
 8004dd0:	3408      	adds	r4, #8
 8004dd2:	f018 0f04 	tst.w	r8, #4
 8004dd6:	f040 8578 	bne.w	80058ca <_vfprintf_r+0x132e>
 8004dda:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8004dde:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004de0:	428a      	cmp	r2, r1
 8004de2:	bfac      	ite	ge
 8004de4:	189b      	addge	r3, r3, r2
 8004de6:	185b      	addlt	r3, r3, r1
 8004de8:	9313      	str	r3, [sp, #76]	; 0x4c
 8004dea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004dec:	b13b      	cbz	r3, 8004dfe <_vfprintf_r+0x862>
 8004dee:	4651      	mov	r1, sl
 8004df0:	4658      	mov	r0, fp
 8004df2:	aa26      	add	r2, sp, #152	; 0x98
 8004df4:	f003 f984 	bl	8008100 <__sprint_r>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	f040 8585 	bne.w	8005908 <_vfprintf_r+0x136c>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	9327      	str	r3, [sp, #156]	; 0x9c
 8004e02:	2f00      	cmp	r7, #0
 8004e04:	f040 859c 	bne.w	8005940 <_vfprintf_r+0x13a4>
 8004e08:	ac29      	add	r4, sp, #164	; 0xa4
 8004e0a:	e0e7      	b.n	8004fdc <_vfprintf_r+0xa40>
 8004e0c:	4607      	mov	r7, r0
 8004e0e:	e62d      	b.n	8004a6c <_vfprintf_r+0x4d0>
 8004e10:	2306      	movs	r3, #6
 8004e12:	e61d      	b.n	8004a50 <_vfprintf_r+0x4b4>
 8004e14:	f802 0c01 	strb.w	r0, [r2, #-1]
 8004e18:	e699      	b.n	8004b4e <_vfprintf_r+0x5b2>
 8004e1a:	f803 0b01 	strb.w	r0, [r3], #1
 8004e1e:	1aca      	subs	r2, r1, r3
 8004e20:	2a00      	cmp	r2, #0
 8004e22:	dafa      	bge.n	8004e1a <_vfprintf_r+0x87e>
 8004e24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e28:	3201      	adds	r2, #1
 8004e2a:	f103 0301 	add.w	r3, r3, #1
 8004e2e:	bfb8      	it	lt
 8004e30:	2300      	movlt	r3, #0
 8004e32:	441d      	add	r5, r3
 8004e34:	e69b      	b.n	8004b6e <_vfprintf_r+0x5d2>
 8004e36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e38:	462b      	mov	r3, r5
 8004e3a:	2030      	movs	r0, #48	; 0x30
 8004e3c:	18a9      	adds	r1, r5, r2
 8004e3e:	e7ee      	b.n	8004e1e <_vfprintf_r+0x882>
 8004e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e42:	2b46      	cmp	r3, #70	; 0x46
 8004e44:	d005      	beq.n	8004e52 <_vfprintf_r+0x8b6>
 8004e46:	2b45      	cmp	r3, #69	; 0x45
 8004e48:	d11b      	bne.n	8004e82 <_vfprintf_r+0x8e6>
 8004e4a:	9b07      	ldr	r3, [sp, #28]
 8004e4c:	1c5e      	adds	r6, r3, #1
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e001      	b.n	8004e56 <_vfprintf_r+0x8ba>
 8004e52:	2303      	movs	r3, #3
 8004e54:	9e07      	ldr	r6, [sp, #28]
 8004e56:	aa24      	add	r2, sp, #144	; 0x90
 8004e58:	9204      	str	r2, [sp, #16]
 8004e5a:	aa21      	add	r2, sp, #132	; 0x84
 8004e5c:	9203      	str	r2, [sp, #12]
 8004e5e:	aa20      	add	r2, sp, #128	; 0x80
 8004e60:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	4658      	mov	r0, fp
 8004e68:	462b      	mov	r3, r5
 8004e6a:	9a08      	ldr	r2, [sp, #32]
 8004e6c:	f000 feec 	bl	8005c48 <_dtoa_r>
 8004e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e72:	4681      	mov	r9, r0
 8004e74:	2b47      	cmp	r3, #71	; 0x47
 8004e76:	d106      	bne.n	8004e86 <_vfprintf_r+0x8ea>
 8004e78:	f018 0f01 	tst.w	r8, #1
 8004e7c:	d103      	bne.n	8004e86 <_vfprintf_r+0x8ea>
 8004e7e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8004e80:	e675      	b.n	8004b6e <_vfprintf_r+0x5d2>
 8004e82:	9e07      	ldr	r6, [sp, #28]
 8004e84:	e7e3      	b.n	8004e4e <_vfprintf_r+0x8b2>
 8004e86:	eb09 0306 	add.w	r3, r9, r6
 8004e8a:	930d      	str	r3, [sp, #52]	; 0x34
 8004e8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e8e:	2b46      	cmp	r3, #70	; 0x46
 8004e90:	d111      	bne.n	8004eb6 <_vfprintf_r+0x91a>
 8004e92:	f899 3000 	ldrb.w	r3, [r9]
 8004e96:	2b30      	cmp	r3, #48	; 0x30
 8004e98:	d109      	bne.n	8004eae <_vfprintf_r+0x912>
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	9808      	ldr	r0, [sp, #32]
 8004ea2:	f7fb fd81 	bl	80009a8 <__aeabi_dcmpeq>
 8004ea6:	b910      	cbnz	r0, 8004eae <_vfprintf_r+0x912>
 8004ea8:	f1c6 0601 	rsb	r6, r6, #1
 8004eac:	9620      	str	r6, [sp, #128]	; 0x80
 8004eae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004eb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004eb2:	441a      	add	r2, r3
 8004eb4:	920d      	str	r2, [sp, #52]	; 0x34
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2300      	movs	r3, #0
 8004eba:	4629      	mov	r1, r5
 8004ebc:	9808      	ldr	r0, [sp, #32]
 8004ebe:	f7fb fd73 	bl	80009a8 <__aeabi_dcmpeq>
 8004ec2:	b108      	cbz	r0, 8004ec8 <_vfprintf_r+0x92c>
 8004ec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ec6:	9324      	str	r3, [sp, #144]	; 0x90
 8004ec8:	2230      	movs	r2, #48	; 0x30
 8004eca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004ecc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ece:	4299      	cmp	r1, r3
 8004ed0:	d9d5      	bls.n	8004e7e <_vfprintf_r+0x8e2>
 8004ed2:	1c59      	adds	r1, r3, #1
 8004ed4:	9124      	str	r1, [sp, #144]	; 0x90
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	e7f7      	b.n	8004eca <_vfprintf_r+0x92e>
 8004eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004edc:	2b46      	cmp	r3, #70	; 0x46
 8004ede:	f47f ae57 	bne.w	8004b90 <_vfprintf_r+0x5f4>
 8004ee2:	9a07      	ldr	r2, [sp, #28]
 8004ee4:	f008 0301 	and.w	r3, r8, #1
 8004ee8:	2d00      	cmp	r5, #0
 8004eea:	ea43 0302 	orr.w	r3, r3, r2
 8004eee:	dd1a      	ble.n	8004f26 <_vfprintf_r+0x98a>
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d034      	beq.n	8004f5e <_vfprintf_r+0x9c2>
 8004ef4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ef6:	18eb      	adds	r3, r5, r3
 8004ef8:	441a      	add	r2, r3
 8004efa:	9207      	str	r2, [sp, #28]
 8004efc:	2366      	movs	r3, #102	; 0x66
 8004efe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f00:	e033      	b.n	8004f6a <_vfprintf_r+0x9ce>
 8004f02:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004f06:	f802 6b01 	strb.w	r6, [r2], #1
 8004f0a:	e678      	b.n	8004bfe <_vfprintf_r+0x662>
 8004f0c:	b941      	cbnz	r1, 8004f20 <_vfprintf_r+0x984>
 8004f0e:	2230      	movs	r2, #48	; 0x30
 8004f10:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8004f14:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8004f18:	3330      	adds	r3, #48	; 0x30
 8004f1a:	f802 3b01 	strb.w	r3, [r2], #1
 8004f1e:	e67a      	b.n	8004c16 <_vfprintf_r+0x67a>
 8004f20:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8004f24:	e7f8      	b.n	8004f18 <_vfprintf_r+0x97c>
 8004f26:	b1e3      	cbz	r3, 8004f62 <_vfprintf_r+0x9c6>
 8004f28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f2a:	9a07      	ldr	r2, [sp, #28]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	e7e3      	b.n	8004ef8 <_vfprintf_r+0x95c>
 8004f30:	9b08      	ldr	r3, [sp, #32]
 8004f32:	429d      	cmp	r5, r3
 8004f34:	db07      	blt.n	8004f46 <_vfprintf_r+0x9aa>
 8004f36:	f018 0f01 	tst.w	r8, #1
 8004f3a:	d02d      	beq.n	8004f98 <_vfprintf_r+0x9fc>
 8004f3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f3e:	18eb      	adds	r3, r5, r3
 8004f40:	9307      	str	r3, [sp, #28]
 8004f42:	2367      	movs	r3, #103	; 0x67
 8004f44:	e7db      	b.n	8004efe <_vfprintf_r+0x962>
 8004f46:	9b08      	ldr	r3, [sp, #32]
 8004f48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f4a:	2d00      	cmp	r5, #0
 8004f4c:	4413      	add	r3, r2
 8004f4e:	9307      	str	r3, [sp, #28]
 8004f50:	dcf7      	bgt.n	8004f42 <_vfprintf_r+0x9a6>
 8004f52:	9a07      	ldr	r2, [sp, #28]
 8004f54:	f1c5 0301 	rsb	r3, r5, #1
 8004f58:	441a      	add	r2, r3
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	e7f0      	b.n	8004f40 <_vfprintf_r+0x9a4>
 8004f5e:	9507      	str	r5, [sp, #28]
 8004f60:	e7cc      	b.n	8004efc <_vfprintf_r+0x960>
 8004f62:	2366      	movs	r3, #102	; 0x66
 8004f64:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f66:	2301      	movs	r3, #1
 8004f68:	9307      	str	r3, [sp, #28]
 8004f6a:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 8004f6e:	930d      	str	r3, [sp, #52]	; 0x34
 8004f70:	d025      	beq.n	8004fbe <_vfprintf_r+0xa22>
 8004f72:	2300      	movs	r3, #0
 8004f74:	2d00      	cmp	r5, #0
 8004f76:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8004f7a:	f77f ae64 	ble.w	8004c46 <_vfprintf_r+0x6aa>
 8004f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2bff      	cmp	r3, #255	; 0xff
 8004f84:	d10a      	bne.n	8004f9c <_vfprintf_r+0xa00>
 8004f86:	9907      	ldr	r1, [sp, #28]
 8004f88:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f8c:	4413      	add	r3, r2
 8004f8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004f90:	fb02 1303 	mla	r3, r2, r3, r1
 8004f94:	9307      	str	r3, [sp, #28]
 8004f96:	e656      	b.n	8004c46 <_vfprintf_r+0x6aa>
 8004f98:	9507      	str	r5, [sp, #28]
 8004f9a:	e7d2      	b.n	8004f42 <_vfprintf_r+0x9a6>
 8004f9c:	42ab      	cmp	r3, r5
 8004f9e:	daf2      	bge.n	8004f86 <_vfprintf_r+0x9ea>
 8004fa0:	1aed      	subs	r5, r5, r3
 8004fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fa4:	785b      	ldrb	r3, [r3, #1]
 8004fa6:	b133      	cbz	r3, 8004fb6 <_vfprintf_r+0xa1a>
 8004fa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004faa:	3301      	adds	r3, #1
 8004fac:	930d      	str	r3, [sp, #52]	; 0x34
 8004fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	930e      	str	r3, [sp, #56]	; 0x38
 8004fb4:	e7e3      	b.n	8004f7e <_vfprintf_r+0x9e2>
 8004fb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fb8:	3301      	adds	r3, #1
 8004fba:	930c      	str	r3, [sp, #48]	; 0x30
 8004fbc:	e7df      	b.n	8004f7e <_vfprintf_r+0x9e2>
 8004fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fc0:	930c      	str	r3, [sp, #48]	; 0x30
 8004fc2:	e640      	b.n	8004c46 <_vfprintf_r+0x6aa>
 8004fc4:	4632      	mov	r2, r6
 8004fc6:	f852 3b04 	ldr.w	r3, [r2], #4
 8004fca:	f018 0f20 	tst.w	r8, #32
 8004fce:	920a      	str	r2, [sp, #40]	; 0x28
 8004fd0:	d009      	beq.n	8004fe6 <_vfprintf_r+0xa4a>
 8004fd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	17d1      	asrs	r1, r2, #31
 8004fd8:	e9c3 0100 	strd	r0, r1, [r3]
 8004fdc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004fde:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8004fe2:	f7ff bb5a 	b.w	800469a <_vfprintf_r+0xfe>
 8004fe6:	f018 0f10 	tst.w	r8, #16
 8004fea:	d002      	beq.n	8004ff2 <_vfprintf_r+0xa56>
 8004fec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	e7f4      	b.n	8004fdc <_vfprintf_r+0xa40>
 8004ff2:	f018 0f40 	tst.w	r8, #64	; 0x40
 8004ff6:	d002      	beq.n	8004ffe <_vfprintf_r+0xa62>
 8004ff8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004ffa:	801a      	strh	r2, [r3, #0]
 8004ffc:	e7ee      	b.n	8004fdc <_vfprintf_r+0xa40>
 8004ffe:	f418 7f00 	tst.w	r8, #512	; 0x200
 8005002:	d0f3      	beq.n	8004fec <_vfprintf_r+0xa50>
 8005004:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005006:	701a      	strb	r2, [r3, #0]
 8005008:	e7e8      	b.n	8004fdc <_vfprintf_r+0xa40>
 800500a:	f048 0810 	orr.w	r8, r8, #16
 800500e:	f018 0f20 	tst.w	r8, #32
 8005012:	d01e      	beq.n	8005052 <_vfprintf_r+0xab6>
 8005014:	3607      	adds	r6, #7
 8005016:	f026 0307 	bic.w	r3, r6, #7
 800501a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800501e:	930a      	str	r3, [sp, #40]	; 0x28
 8005020:	2300      	movs	r3, #0
 8005022:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8005026:	2200      	movs	r2, #0
 8005028:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800502c:	9a07      	ldr	r2, [sp, #28]
 800502e:	3201      	adds	r2, #1
 8005030:	f000 849b 	beq.w	800596a <_vfprintf_r+0x13ce>
 8005034:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 8005038:	920c      	str	r2, [sp, #48]	; 0x30
 800503a:	ea56 0207 	orrs.w	r2, r6, r7
 800503e:	f040 849a 	bne.w	8005976 <_vfprintf_r+0x13da>
 8005042:	9a07      	ldr	r2, [sp, #28]
 8005044:	2a00      	cmp	r2, #0
 8005046:	f000 80f5 	beq.w	8005234 <_vfprintf_r+0xc98>
 800504a:	2b01      	cmp	r3, #1
 800504c:	f040 8496 	bne.w	800597c <_vfprintf_r+0x13e0>
 8005050:	e097      	b.n	8005182 <_vfprintf_r+0xbe6>
 8005052:	1d33      	adds	r3, r6, #4
 8005054:	f018 0f10 	tst.w	r8, #16
 8005058:	930a      	str	r3, [sp, #40]	; 0x28
 800505a:	d001      	beq.n	8005060 <_vfprintf_r+0xac4>
 800505c:	6836      	ldr	r6, [r6, #0]
 800505e:	e003      	b.n	8005068 <_vfprintf_r+0xacc>
 8005060:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005064:	d002      	beq.n	800506c <_vfprintf_r+0xad0>
 8005066:	8836      	ldrh	r6, [r6, #0]
 8005068:	2700      	movs	r7, #0
 800506a:	e7d9      	b.n	8005020 <_vfprintf_r+0xa84>
 800506c:	f418 7f00 	tst.w	r8, #512	; 0x200
 8005070:	d0f4      	beq.n	800505c <_vfprintf_r+0xac0>
 8005072:	7836      	ldrb	r6, [r6, #0]
 8005074:	e7f8      	b.n	8005068 <_vfprintf_r+0xacc>
 8005076:	4633      	mov	r3, r6
 8005078:	f853 6b04 	ldr.w	r6, [r3], #4
 800507c:	2278      	movs	r2, #120	; 0x78
 800507e:	930a      	str	r3, [sp, #40]	; 0x28
 8005080:	f647 0330 	movw	r3, #30768	; 0x7830
 8005084:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8005088:	4ba1      	ldr	r3, [pc, #644]	; (8005310 <_vfprintf_r+0xd74>)
 800508a:	2700      	movs	r7, #0
 800508c:	931b      	str	r3, [sp, #108]	; 0x6c
 800508e:	f048 0802 	orr.w	r8, r8, #2
 8005092:	2302      	movs	r3, #2
 8005094:	920b      	str	r2, [sp, #44]	; 0x2c
 8005096:	e7c6      	b.n	8005026 <_vfprintf_r+0xa8a>
 8005098:	4633      	mov	r3, r6
 800509a:	2500      	movs	r5, #0
 800509c:	f853 9b04 	ldr.w	r9, [r3], #4
 80050a0:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 80050a4:	930a      	str	r3, [sp, #40]	; 0x28
 80050a6:	9b07      	ldr	r3, [sp, #28]
 80050a8:	1c5e      	adds	r6, r3, #1
 80050aa:	d010      	beq.n	80050ce <_vfprintf_r+0xb32>
 80050ac:	461a      	mov	r2, r3
 80050ae:	4629      	mov	r1, r5
 80050b0:	4648      	mov	r0, r9
 80050b2:	f002 f9f1 	bl	8007498 <memchr>
 80050b6:	4607      	mov	r7, r0
 80050b8:	2800      	cmp	r0, #0
 80050ba:	f43f ac74 	beq.w	80049a6 <_vfprintf_r+0x40a>
 80050be:	eba0 0309 	sub.w	r3, r0, r9
 80050c2:	462f      	mov	r7, r5
 80050c4:	462e      	mov	r6, r5
 80050c6:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
 80050ca:	9307      	str	r3, [sp, #28]
 80050cc:	e5c3      	b.n	8004c56 <_vfprintf_r+0x6ba>
 80050ce:	4648      	mov	r0, r9
 80050d0:	f7fb f83e 	bl	8000150 <strlen>
 80050d4:	462f      	mov	r7, r5
 80050d6:	9007      	str	r0, [sp, #28]
 80050d8:	e465      	b.n	80049a6 <_vfprintf_r+0x40a>
 80050da:	f048 0810 	orr.w	r8, r8, #16
 80050de:	f018 0f20 	tst.w	r8, #32
 80050e2:	d007      	beq.n	80050f4 <_vfprintf_r+0xb58>
 80050e4:	3607      	adds	r6, #7
 80050e6:	f026 0307 	bic.w	r3, r6, #7
 80050ea:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80050ee:	930a      	str	r3, [sp, #40]	; 0x28
 80050f0:	2301      	movs	r3, #1
 80050f2:	e798      	b.n	8005026 <_vfprintf_r+0xa8a>
 80050f4:	1d33      	adds	r3, r6, #4
 80050f6:	f018 0f10 	tst.w	r8, #16
 80050fa:	930a      	str	r3, [sp, #40]	; 0x28
 80050fc:	d001      	beq.n	8005102 <_vfprintf_r+0xb66>
 80050fe:	6836      	ldr	r6, [r6, #0]
 8005100:	e003      	b.n	800510a <_vfprintf_r+0xb6e>
 8005102:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005106:	d002      	beq.n	800510e <_vfprintf_r+0xb72>
 8005108:	8836      	ldrh	r6, [r6, #0]
 800510a:	2700      	movs	r7, #0
 800510c:	e7f0      	b.n	80050f0 <_vfprintf_r+0xb54>
 800510e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8005112:	d0f4      	beq.n	80050fe <_vfprintf_r+0xb62>
 8005114:	7836      	ldrb	r6, [r6, #0]
 8005116:	e7f8      	b.n	800510a <_vfprintf_r+0xb6e>
 8005118:	4b7e      	ldr	r3, [pc, #504]	; (8005314 <_vfprintf_r+0xd78>)
 800511a:	f018 0f20 	tst.w	r8, #32
 800511e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005120:	d019      	beq.n	8005156 <_vfprintf_r+0xbba>
 8005122:	3607      	adds	r6, #7
 8005124:	f026 0307 	bic.w	r3, r6, #7
 8005128:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800512c:	930a      	str	r3, [sp, #40]	; 0x28
 800512e:	f018 0f01 	tst.w	r8, #1
 8005132:	d00a      	beq.n	800514a <_vfprintf_r+0xbae>
 8005134:	ea56 0307 	orrs.w	r3, r6, r7
 8005138:	d007      	beq.n	800514a <_vfprintf_r+0xbae>
 800513a:	2330      	movs	r3, #48	; 0x30
 800513c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8005140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005142:	f048 0802 	orr.w	r8, r8, #2
 8005146:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800514a:	2302      	movs	r3, #2
 800514c:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8005150:	e769      	b.n	8005026 <_vfprintf_r+0xa8a>
 8005152:	4b6f      	ldr	r3, [pc, #444]	; (8005310 <_vfprintf_r+0xd74>)
 8005154:	e7e1      	b.n	800511a <_vfprintf_r+0xb7e>
 8005156:	1d33      	adds	r3, r6, #4
 8005158:	f018 0f10 	tst.w	r8, #16
 800515c:	930a      	str	r3, [sp, #40]	; 0x28
 800515e:	d001      	beq.n	8005164 <_vfprintf_r+0xbc8>
 8005160:	6836      	ldr	r6, [r6, #0]
 8005162:	e003      	b.n	800516c <_vfprintf_r+0xbd0>
 8005164:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005168:	d002      	beq.n	8005170 <_vfprintf_r+0xbd4>
 800516a:	8836      	ldrh	r6, [r6, #0]
 800516c:	2700      	movs	r7, #0
 800516e:	e7de      	b.n	800512e <_vfprintf_r+0xb92>
 8005170:	f418 7f00 	tst.w	r8, #512	; 0x200
 8005174:	d0f4      	beq.n	8005160 <_vfprintf_r+0xbc4>
 8005176:	7836      	ldrb	r6, [r6, #0]
 8005178:	e7f8      	b.n	800516c <_vfprintf_r+0xbd0>
 800517a:	2f00      	cmp	r7, #0
 800517c:	bf08      	it	eq
 800517e:	2e0a      	cmpeq	r6, #10
 8005180:	d206      	bcs.n	8005190 <_vfprintf_r+0xbf4>
 8005182:	3630      	adds	r6, #48	; 0x30
 8005184:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 8005188:	f20d 1947 	addw	r9, sp, #327	; 0x147
 800518c:	f000 bc14 	b.w	80059b8 <_vfprintf_r+0x141c>
 8005190:	2300      	movs	r3, #0
 8005192:	9308      	str	r3, [sp, #32]
 8005194:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005196:	ad52      	add	r5, sp, #328	; 0x148
 8005198:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 800519c:	220a      	movs	r2, #10
 800519e:	2300      	movs	r3, #0
 80051a0:	4630      	mov	r0, r6
 80051a2:	4639      	mov	r1, r7
 80051a4:	f7fb fc70 	bl	8000a88 <__aeabi_uldivmod>
 80051a8:	9b08      	ldr	r3, [sp, #32]
 80051aa:	3230      	adds	r2, #48	; 0x30
 80051ac:	3301      	adds	r3, #1
 80051ae:	f105 39ff 	add.w	r9, r5, #4294967295
 80051b2:	f805 2c01 	strb.w	r2, [r5, #-1]
 80051b6:	9308      	str	r3, [sp, #32]
 80051b8:	f1b8 0f00 	cmp.w	r8, #0
 80051bc:	d019      	beq.n	80051f2 <_vfprintf_r+0xc56>
 80051be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051c0:	9a08      	ldr	r2, [sp, #32]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d114      	bne.n	80051f2 <_vfprintf_r+0xc56>
 80051c8:	2aff      	cmp	r2, #255	; 0xff
 80051ca:	d012      	beq.n	80051f2 <_vfprintf_r+0xc56>
 80051cc:	2f00      	cmp	r7, #0
 80051ce:	bf08      	it	eq
 80051d0:	2e0a      	cmpeq	r6, #10
 80051d2:	d30e      	bcc.n	80051f2 <_vfprintf_r+0xc56>
 80051d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80051d6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80051d8:	eba9 0903 	sub.w	r9, r9, r3
 80051dc:	461a      	mov	r2, r3
 80051de:	4648      	mov	r0, r9
 80051e0:	f002 fef3 	bl	8007fca <strncpy>
 80051e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051e6:	785d      	ldrb	r5, [r3, #1]
 80051e8:	b195      	cbz	r5, 8005210 <_vfprintf_r+0xc74>
 80051ea:	3301      	adds	r3, #1
 80051ec:	930e      	str	r3, [sp, #56]	; 0x38
 80051ee:	2300      	movs	r3, #0
 80051f0:	9308      	str	r3, [sp, #32]
 80051f2:	220a      	movs	r2, #10
 80051f4:	2300      	movs	r3, #0
 80051f6:	4630      	mov	r0, r6
 80051f8:	4639      	mov	r1, r7
 80051fa:	f7fb fc45 	bl	8000a88 <__aeabi_uldivmod>
 80051fe:	2f00      	cmp	r7, #0
 8005200:	bf08      	it	eq
 8005202:	2e0a      	cmpeq	r6, #10
 8005204:	f0c0 83d8 	bcc.w	80059b8 <_vfprintf_r+0x141c>
 8005208:	4606      	mov	r6, r0
 800520a:	460f      	mov	r7, r1
 800520c:	464d      	mov	r5, r9
 800520e:	e7c5      	b.n	800519c <_vfprintf_r+0xc00>
 8005210:	9508      	str	r5, [sp, #32]
 8005212:	e7ee      	b.n	80051f2 <_vfprintf_r+0xc56>
 8005214:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005216:	f006 030f 	and.w	r3, r6, #15
 800521a:	5cd3      	ldrb	r3, [r2, r3]
 800521c:	093a      	lsrs	r2, r7, #4
 800521e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8005222:	0933      	lsrs	r3, r6, #4
 8005224:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005228:	461e      	mov	r6, r3
 800522a:	4617      	mov	r7, r2
 800522c:	ea56 0307 	orrs.w	r3, r6, r7
 8005230:	d1f0      	bne.n	8005214 <_vfprintf_r+0xc78>
 8005232:	e3c1      	b.n	80059b8 <_vfprintf_r+0x141c>
 8005234:	b933      	cbnz	r3, 8005244 <_vfprintf_r+0xca8>
 8005236:	f018 0f01 	tst.w	r8, #1
 800523a:	d003      	beq.n	8005244 <_vfprintf_r+0xca8>
 800523c:	2330      	movs	r3, #48	; 0x30
 800523e:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 8005242:	e7a1      	b.n	8005188 <_vfprintf_r+0xbec>
 8005244:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8005248:	e3b6      	b.n	80059b8 <_vfprintf_r+0x141c>
 800524a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 837d 	beq.w	800594c <_vfprintf_r+0x13b0>
 8005252:	2000      	movs	r0, #0
 8005254:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8005258:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800525c:	960a      	str	r6, [sp, #40]	; 0x28
 800525e:	f7ff bb3b 	b.w	80048d8 <_vfprintf_r+0x33c>
 8005262:	2010      	movs	r0, #16
 8005264:	2b07      	cmp	r3, #7
 8005266:	4402      	add	r2, r0
 8005268:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800526c:	6060      	str	r0, [r4, #4]
 800526e:	dd08      	ble.n	8005282 <_vfprintf_r+0xce6>
 8005270:	4651      	mov	r1, sl
 8005272:	4658      	mov	r0, fp
 8005274:	aa26      	add	r2, sp, #152	; 0x98
 8005276:	f002 ff43 	bl	8008100 <__sprint_r>
 800527a:	2800      	cmp	r0, #0
 800527c:	f040 8344 	bne.w	8005908 <_vfprintf_r+0x136c>
 8005280:	a929      	add	r1, sp, #164	; 0xa4
 8005282:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005284:	460c      	mov	r4, r1
 8005286:	3b10      	subs	r3, #16
 8005288:	9317      	str	r3, [sp, #92]	; 0x5c
 800528a:	e500      	b.n	8004c8e <_vfprintf_r+0x6f2>
 800528c:	460c      	mov	r4, r1
 800528e:	e51a      	b.n	8004cc6 <_vfprintf_r+0x72a>
 8005290:	4651      	mov	r1, sl
 8005292:	4658      	mov	r0, fp
 8005294:	aa26      	add	r2, sp, #152	; 0x98
 8005296:	f002 ff33 	bl	8008100 <__sprint_r>
 800529a:	2800      	cmp	r0, #0
 800529c:	f040 8334 	bne.w	8005908 <_vfprintf_r+0x136c>
 80052a0:	ac29      	add	r4, sp, #164	; 0xa4
 80052a2:	e522      	b.n	8004cea <_vfprintf_r+0x74e>
 80052a4:	4651      	mov	r1, sl
 80052a6:	4658      	mov	r0, fp
 80052a8:	aa26      	add	r2, sp, #152	; 0x98
 80052aa:	f002 ff29 	bl	8008100 <__sprint_r>
 80052ae:	2800      	cmp	r0, #0
 80052b0:	f040 832a 	bne.w	8005908 <_vfprintf_r+0x136c>
 80052b4:	ac29      	add	r4, sp, #164	; 0xa4
 80052b6:	e528      	b.n	8004d0a <_vfprintf_r+0x76e>
 80052b8:	2010      	movs	r0, #16
 80052ba:	2b07      	cmp	r3, #7
 80052bc:	4402      	add	r2, r0
 80052be:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80052c2:	6060      	str	r0, [r4, #4]
 80052c4:	dd08      	ble.n	80052d8 <_vfprintf_r+0xd3c>
 80052c6:	4651      	mov	r1, sl
 80052c8:	4658      	mov	r0, fp
 80052ca:	aa26      	add	r2, sp, #152	; 0x98
 80052cc:	f002 ff18 	bl	8008100 <__sprint_r>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f040 8319 	bne.w	8005908 <_vfprintf_r+0x136c>
 80052d6:	a929      	add	r1, sp, #164	; 0xa4
 80052d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052da:	460c      	mov	r4, r1
 80052dc:	3b10      	subs	r3, #16
 80052de:	9317      	str	r3, [sp, #92]	; 0x5c
 80052e0:	e51c      	b.n	8004d1c <_vfprintf_r+0x780>
 80052e2:	460c      	mov	r4, r1
 80052e4:	e536      	b.n	8004d54 <_vfprintf_r+0x7b8>
 80052e6:	2010      	movs	r0, #16
 80052e8:	2b07      	cmp	r3, #7
 80052ea:	4402      	add	r2, r0
 80052ec:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80052f0:	6060      	str	r0, [r4, #4]
 80052f2:	dd08      	ble.n	8005306 <_vfprintf_r+0xd6a>
 80052f4:	4651      	mov	r1, sl
 80052f6:	4658      	mov	r0, fp
 80052f8:	aa26      	add	r2, sp, #152	; 0x98
 80052fa:	f002 ff01 	bl	8008100 <__sprint_r>
 80052fe:	2800      	cmp	r0, #0
 8005300:	f040 8302 	bne.w	8005908 <_vfprintf_r+0x136c>
 8005304:	a929      	add	r1, sp, #164	; 0xa4
 8005306:	460c      	mov	r4, r1
 8005308:	3e10      	subs	r6, #16
 800530a:	e527      	b.n	8004d5c <_vfprintf_r+0x7c0>
 800530c:	460c      	mov	r4, r1
 800530e:	e54e      	b.n	8004dae <_vfprintf_r+0x812>
 8005310:	080092cc 	.word	0x080092cc
 8005314:	080092dd 	.word	0x080092dd
 8005318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800531a:	2b65      	cmp	r3, #101	; 0x65
 800531c:	f340 8238 	ble.w	8005790 <_vfprintf_r+0x11f4>
 8005320:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005324:	2200      	movs	r2, #0
 8005326:	2300      	movs	r3, #0
 8005328:	f7fb fb3e 	bl	80009a8 <__aeabi_dcmpeq>
 800532c:	2800      	cmp	r0, #0
 800532e:	d06a      	beq.n	8005406 <_vfprintf_r+0xe6a>
 8005330:	4b6e      	ldr	r3, [pc, #440]	; (80054ec <_vfprintf_r+0xf50>)
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	2301      	movs	r3, #1
 8005336:	441e      	add	r6, r3
 8005338:	6063      	str	r3, [r4, #4]
 800533a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800533c:	9628      	str	r6, [sp, #160]	; 0xa0
 800533e:	3301      	adds	r3, #1
 8005340:	2b07      	cmp	r3, #7
 8005342:	9327      	str	r3, [sp, #156]	; 0x9c
 8005344:	dc38      	bgt.n	80053b8 <_vfprintf_r+0xe1c>
 8005346:	3408      	adds	r4, #8
 8005348:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800534a:	9a08      	ldr	r2, [sp, #32]
 800534c:	4293      	cmp	r3, r2
 800534e:	db03      	blt.n	8005358 <_vfprintf_r+0xdbc>
 8005350:	f018 0f01 	tst.w	r8, #1
 8005354:	f43f ad3d 	beq.w	8004dd2 <_vfprintf_r+0x836>
 8005358:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800535a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800535c:	6023      	str	r3, [r4, #0]
 800535e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005360:	6063      	str	r3, [r4, #4]
 8005362:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005364:	4413      	add	r3, r2
 8005366:	9328      	str	r3, [sp, #160]	; 0xa0
 8005368:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800536a:	3301      	adds	r3, #1
 800536c:	2b07      	cmp	r3, #7
 800536e:	9327      	str	r3, [sp, #156]	; 0x9c
 8005370:	dc2c      	bgt.n	80053cc <_vfprintf_r+0xe30>
 8005372:	3408      	adds	r4, #8
 8005374:	9b08      	ldr	r3, [sp, #32]
 8005376:	1e5d      	subs	r5, r3, #1
 8005378:	2d00      	cmp	r5, #0
 800537a:	f77f ad2a 	ble.w	8004dd2 <_vfprintf_r+0x836>
 800537e:	f04f 0910 	mov.w	r9, #16
 8005382:	4e5b      	ldr	r6, [pc, #364]	; (80054f0 <_vfprintf_r+0xf54>)
 8005384:	2d10      	cmp	r5, #16
 8005386:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800538a:	f104 0108 	add.w	r1, r4, #8
 800538e:	f103 0301 	add.w	r3, r3, #1
 8005392:	6026      	str	r6, [r4, #0]
 8005394:	dc24      	bgt.n	80053e0 <_vfprintf_r+0xe44>
 8005396:	6065      	str	r5, [r4, #4]
 8005398:	2b07      	cmp	r3, #7
 800539a:	4415      	add	r5, r2
 800539c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80053a0:	f340 8290 	ble.w	80058c4 <_vfprintf_r+0x1328>
 80053a4:	4651      	mov	r1, sl
 80053a6:	4658      	mov	r0, fp
 80053a8:	aa26      	add	r2, sp, #152	; 0x98
 80053aa:	f002 fea9 	bl	8008100 <__sprint_r>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	f040 82aa 	bne.w	8005908 <_vfprintf_r+0x136c>
 80053b4:	ac29      	add	r4, sp, #164	; 0xa4
 80053b6:	e50c      	b.n	8004dd2 <_vfprintf_r+0x836>
 80053b8:	4651      	mov	r1, sl
 80053ba:	4658      	mov	r0, fp
 80053bc:	aa26      	add	r2, sp, #152	; 0x98
 80053be:	f002 fe9f 	bl	8008100 <__sprint_r>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	f040 82a0 	bne.w	8005908 <_vfprintf_r+0x136c>
 80053c8:	ac29      	add	r4, sp, #164	; 0xa4
 80053ca:	e7bd      	b.n	8005348 <_vfprintf_r+0xdac>
 80053cc:	4651      	mov	r1, sl
 80053ce:	4658      	mov	r0, fp
 80053d0:	aa26      	add	r2, sp, #152	; 0x98
 80053d2:	f002 fe95 	bl	8008100 <__sprint_r>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	f040 8296 	bne.w	8005908 <_vfprintf_r+0x136c>
 80053dc:	ac29      	add	r4, sp, #164	; 0xa4
 80053de:	e7c9      	b.n	8005374 <_vfprintf_r+0xdd8>
 80053e0:	3210      	adds	r2, #16
 80053e2:	2b07      	cmp	r3, #7
 80053e4:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80053e8:	f8c4 9004 	str.w	r9, [r4, #4]
 80053ec:	dd08      	ble.n	8005400 <_vfprintf_r+0xe64>
 80053ee:	4651      	mov	r1, sl
 80053f0:	4658      	mov	r0, fp
 80053f2:	aa26      	add	r2, sp, #152	; 0x98
 80053f4:	f002 fe84 	bl	8008100 <__sprint_r>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	f040 8285 	bne.w	8005908 <_vfprintf_r+0x136c>
 80053fe:	a929      	add	r1, sp, #164	; 0xa4
 8005400:	460c      	mov	r4, r1
 8005402:	3d10      	subs	r5, #16
 8005404:	e7be      	b.n	8005384 <_vfprintf_r+0xde8>
 8005406:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005408:	2b00      	cmp	r3, #0
 800540a:	dc73      	bgt.n	80054f4 <_vfprintf_r+0xf58>
 800540c:	4b37      	ldr	r3, [pc, #220]	; (80054ec <_vfprintf_r+0xf50>)
 800540e:	6023      	str	r3, [r4, #0]
 8005410:	2301      	movs	r3, #1
 8005412:	441e      	add	r6, r3
 8005414:	6063      	str	r3, [r4, #4]
 8005416:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005418:	9628      	str	r6, [sp, #160]	; 0xa0
 800541a:	3301      	adds	r3, #1
 800541c:	2b07      	cmp	r3, #7
 800541e:	9327      	str	r3, [sp, #156]	; 0x9c
 8005420:	dc3c      	bgt.n	800549c <_vfprintf_r+0xf00>
 8005422:	3408      	adds	r4, #8
 8005424:	9908      	ldr	r1, [sp, #32]
 8005426:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005428:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800542a:	430a      	orrs	r2, r1
 800542c:	f008 0101 	and.w	r1, r8, #1
 8005430:	430a      	orrs	r2, r1
 8005432:	f43f acce 	beq.w	8004dd2 <_vfprintf_r+0x836>
 8005436:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005438:	6022      	str	r2, [r4, #0]
 800543a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800543c:	4413      	add	r3, r2
 800543e:	9328      	str	r3, [sp, #160]	; 0xa0
 8005440:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005442:	6062      	str	r2, [r4, #4]
 8005444:	3301      	adds	r3, #1
 8005446:	2b07      	cmp	r3, #7
 8005448:	9327      	str	r3, [sp, #156]	; 0x9c
 800544a:	dc31      	bgt.n	80054b0 <_vfprintf_r+0xf14>
 800544c:	3408      	adds	r4, #8
 800544e:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005450:	2d00      	cmp	r5, #0
 8005452:	da1a      	bge.n	800548a <_vfprintf_r+0xeee>
 8005454:	4623      	mov	r3, r4
 8005456:	4e26      	ldr	r6, [pc, #152]	; (80054f0 <_vfprintf_r+0xf54>)
 8005458:	426d      	negs	r5, r5
 800545a:	2d10      	cmp	r5, #16
 800545c:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8005460:	f104 0408 	add.w	r4, r4, #8
 8005464:	f102 0201 	add.w	r2, r2, #1
 8005468:	601e      	str	r6, [r3, #0]
 800546a:	dc2b      	bgt.n	80054c4 <_vfprintf_r+0xf28>
 800546c:	605d      	str	r5, [r3, #4]
 800546e:	2a07      	cmp	r2, #7
 8005470:	440d      	add	r5, r1
 8005472:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8005476:	dd08      	ble.n	800548a <_vfprintf_r+0xeee>
 8005478:	4651      	mov	r1, sl
 800547a:	4658      	mov	r0, fp
 800547c:	aa26      	add	r2, sp, #152	; 0x98
 800547e:	f002 fe3f 	bl	8008100 <__sprint_r>
 8005482:	2800      	cmp	r0, #0
 8005484:	f040 8240 	bne.w	8005908 <_vfprintf_r+0x136c>
 8005488:	ac29      	add	r4, sp, #164	; 0xa4
 800548a:	9b08      	ldr	r3, [sp, #32]
 800548c:	9a08      	ldr	r2, [sp, #32]
 800548e:	6063      	str	r3, [r4, #4]
 8005490:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005492:	f8c4 9000 	str.w	r9, [r4]
 8005496:	4413      	add	r3, r2
 8005498:	9328      	str	r3, [sp, #160]	; 0xa0
 800549a:	e493      	b.n	8004dc4 <_vfprintf_r+0x828>
 800549c:	4651      	mov	r1, sl
 800549e:	4658      	mov	r0, fp
 80054a0:	aa26      	add	r2, sp, #152	; 0x98
 80054a2:	f002 fe2d 	bl	8008100 <__sprint_r>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	f040 822e 	bne.w	8005908 <_vfprintf_r+0x136c>
 80054ac:	ac29      	add	r4, sp, #164	; 0xa4
 80054ae:	e7b9      	b.n	8005424 <_vfprintf_r+0xe88>
 80054b0:	4651      	mov	r1, sl
 80054b2:	4658      	mov	r0, fp
 80054b4:	aa26      	add	r2, sp, #152	; 0x98
 80054b6:	f002 fe23 	bl	8008100 <__sprint_r>
 80054ba:	2800      	cmp	r0, #0
 80054bc:	f040 8224 	bne.w	8005908 <_vfprintf_r+0x136c>
 80054c0:	ac29      	add	r4, sp, #164	; 0xa4
 80054c2:	e7c4      	b.n	800544e <_vfprintf_r+0xeb2>
 80054c4:	2010      	movs	r0, #16
 80054c6:	2a07      	cmp	r2, #7
 80054c8:	4401      	add	r1, r0
 80054ca:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 80054ce:	6058      	str	r0, [r3, #4]
 80054d0:	dd08      	ble.n	80054e4 <_vfprintf_r+0xf48>
 80054d2:	4651      	mov	r1, sl
 80054d4:	4658      	mov	r0, fp
 80054d6:	aa26      	add	r2, sp, #152	; 0x98
 80054d8:	f002 fe12 	bl	8008100 <__sprint_r>
 80054dc:	2800      	cmp	r0, #0
 80054de:	f040 8213 	bne.w	8005908 <_vfprintf_r+0x136c>
 80054e2:	ac29      	add	r4, sp, #164	; 0xa4
 80054e4:	4623      	mov	r3, r4
 80054e6:	3d10      	subs	r5, #16
 80054e8:	e7b7      	b.n	800545a <_vfprintf_r+0xebe>
 80054ea:	bf00      	nop
 80054ec:	080092ee 	.word	0x080092ee
 80054f0:	08009320 	.word	0x08009320
 80054f4:	9b08      	ldr	r3, [sp, #32]
 80054f6:	42ab      	cmp	r3, r5
 80054f8:	bfa8      	it	ge
 80054fa:	462b      	movge	r3, r5
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	9307      	str	r3, [sp, #28]
 8005500:	dd0a      	ble.n	8005518 <_vfprintf_r+0xf7c>
 8005502:	441e      	add	r6, r3
 8005504:	e9c4 9300 	strd	r9, r3, [r4]
 8005508:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800550a:	9628      	str	r6, [sp, #160]	; 0xa0
 800550c:	3301      	adds	r3, #1
 800550e:	2b07      	cmp	r3, #7
 8005510:	9327      	str	r3, [sp, #156]	; 0x9c
 8005512:	f300 8088 	bgt.w	8005626 <_vfprintf_r+0x108a>
 8005516:	3408      	adds	r4, #8
 8005518:	9b07      	ldr	r3, [sp, #28]
 800551a:	2b00      	cmp	r3, #0
 800551c:	bfb4      	ite	lt
 800551e:	462e      	movlt	r6, r5
 8005520:	1aee      	subge	r6, r5, r3
 8005522:	2e00      	cmp	r6, #0
 8005524:	dd19      	ble.n	800555a <_vfprintf_r+0xfbe>
 8005526:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800552a:	4898      	ldr	r0, [pc, #608]	; (800578c <_vfprintf_r+0x11f0>)
 800552c:	2e10      	cmp	r6, #16
 800552e:	f103 0301 	add.w	r3, r3, #1
 8005532:	f104 0108 	add.w	r1, r4, #8
 8005536:	6020      	str	r0, [r4, #0]
 8005538:	dc7f      	bgt.n	800563a <_vfprintf_r+0x109e>
 800553a:	6066      	str	r6, [r4, #4]
 800553c:	2b07      	cmp	r3, #7
 800553e:	4416      	add	r6, r2
 8005540:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 8005544:	f340 808c 	ble.w	8005660 <_vfprintf_r+0x10c4>
 8005548:	4651      	mov	r1, sl
 800554a:	4658      	mov	r0, fp
 800554c:	aa26      	add	r2, sp, #152	; 0x98
 800554e:	f002 fdd7 	bl	8008100 <__sprint_r>
 8005552:	2800      	cmp	r0, #0
 8005554:	f040 81d8 	bne.w	8005908 <_vfprintf_r+0x136c>
 8005558:	ac29      	add	r4, sp, #164	; 0xa4
 800555a:	f418 6f80 	tst.w	r8, #1024	; 0x400
 800555e:	444d      	add	r5, r9
 8005560:	d00a      	beq.n	8005578 <_vfprintf_r+0xfdc>
 8005562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005564:	2b00      	cmp	r3, #0
 8005566:	d17d      	bne.n	8005664 <_vfprintf_r+0x10c8>
 8005568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800556a:	2b00      	cmp	r3, #0
 800556c:	d17d      	bne.n	800566a <_vfprintf_r+0x10ce>
 800556e:	9b08      	ldr	r3, [sp, #32]
 8005570:	444b      	add	r3, r9
 8005572:	429d      	cmp	r5, r3
 8005574:	bf28      	it	cs
 8005576:	461d      	movcs	r5, r3
 8005578:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800557a:	9a08      	ldr	r2, [sp, #32]
 800557c:	4293      	cmp	r3, r2
 800557e:	db02      	blt.n	8005586 <_vfprintf_r+0xfea>
 8005580:	f018 0f01 	tst.w	r8, #1
 8005584:	d00e      	beq.n	80055a4 <_vfprintf_r+0x1008>
 8005586:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005588:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800558a:	6023      	str	r3, [r4, #0]
 800558c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800558e:	6063      	str	r3, [r4, #4]
 8005590:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005592:	4413      	add	r3, r2
 8005594:	9328      	str	r3, [sp, #160]	; 0xa0
 8005596:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005598:	3301      	adds	r3, #1
 800559a:	2b07      	cmp	r3, #7
 800559c:	9327      	str	r3, [sp, #156]	; 0x9c
 800559e:	f300 80e0 	bgt.w	8005762 <_vfprintf_r+0x11c6>
 80055a2:	3408      	adds	r4, #8
 80055a4:	9b08      	ldr	r3, [sp, #32]
 80055a6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80055a8:	eb09 0203 	add.w	r2, r9, r3
 80055ac:	1b9e      	subs	r6, r3, r6
 80055ae:	1b52      	subs	r2, r2, r5
 80055b0:	4296      	cmp	r6, r2
 80055b2:	bfa8      	it	ge
 80055b4:	4616      	movge	r6, r2
 80055b6:	2e00      	cmp	r6, #0
 80055b8:	dd0b      	ble.n	80055d2 <_vfprintf_r+0x1036>
 80055ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80055bc:	e9c4 5600 	strd	r5, r6, [r4]
 80055c0:	4433      	add	r3, r6
 80055c2:	9328      	str	r3, [sp, #160]	; 0xa0
 80055c4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80055c6:	3301      	adds	r3, #1
 80055c8:	2b07      	cmp	r3, #7
 80055ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80055cc:	f300 80d3 	bgt.w	8005776 <_vfprintf_r+0x11da>
 80055d0:	3408      	adds	r4, #8
 80055d2:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80055d4:	9b08      	ldr	r3, [sp, #32]
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	eba3 0505 	sub.w	r5, r3, r5
 80055dc:	bfa8      	it	ge
 80055de:	1bad      	subge	r5, r5, r6
 80055e0:	2d00      	cmp	r5, #0
 80055e2:	f77f abf6 	ble.w	8004dd2 <_vfprintf_r+0x836>
 80055e6:	f04f 0910 	mov.w	r9, #16
 80055ea:	4e68      	ldr	r6, [pc, #416]	; (800578c <_vfprintf_r+0x11f0>)
 80055ec:	2d10      	cmp	r5, #16
 80055ee:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80055f2:	f104 0108 	add.w	r1, r4, #8
 80055f6:	f103 0301 	add.w	r3, r3, #1
 80055fa:	6026      	str	r6, [r4, #0]
 80055fc:	f77f aecb 	ble.w	8005396 <_vfprintf_r+0xdfa>
 8005600:	3210      	adds	r2, #16
 8005602:	2b07      	cmp	r3, #7
 8005604:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005608:	f8c4 9004 	str.w	r9, [r4, #4]
 800560c:	dd08      	ble.n	8005620 <_vfprintf_r+0x1084>
 800560e:	4651      	mov	r1, sl
 8005610:	4658      	mov	r0, fp
 8005612:	aa26      	add	r2, sp, #152	; 0x98
 8005614:	f002 fd74 	bl	8008100 <__sprint_r>
 8005618:	2800      	cmp	r0, #0
 800561a:	f040 8175 	bne.w	8005908 <_vfprintf_r+0x136c>
 800561e:	a929      	add	r1, sp, #164	; 0xa4
 8005620:	460c      	mov	r4, r1
 8005622:	3d10      	subs	r5, #16
 8005624:	e7e2      	b.n	80055ec <_vfprintf_r+0x1050>
 8005626:	4651      	mov	r1, sl
 8005628:	4658      	mov	r0, fp
 800562a:	aa26      	add	r2, sp, #152	; 0x98
 800562c:	f002 fd68 	bl	8008100 <__sprint_r>
 8005630:	2800      	cmp	r0, #0
 8005632:	f040 8169 	bne.w	8005908 <_vfprintf_r+0x136c>
 8005636:	ac29      	add	r4, sp, #164	; 0xa4
 8005638:	e76e      	b.n	8005518 <_vfprintf_r+0xf7c>
 800563a:	2010      	movs	r0, #16
 800563c:	2b07      	cmp	r3, #7
 800563e:	4402      	add	r2, r0
 8005640:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005644:	6060      	str	r0, [r4, #4]
 8005646:	dd08      	ble.n	800565a <_vfprintf_r+0x10be>
 8005648:	4651      	mov	r1, sl
 800564a:	4658      	mov	r0, fp
 800564c:	aa26      	add	r2, sp, #152	; 0x98
 800564e:	f002 fd57 	bl	8008100 <__sprint_r>
 8005652:	2800      	cmp	r0, #0
 8005654:	f040 8158 	bne.w	8005908 <_vfprintf_r+0x136c>
 8005658:	a929      	add	r1, sp, #164	; 0xa4
 800565a:	460c      	mov	r4, r1
 800565c:	3e10      	subs	r6, #16
 800565e:	e762      	b.n	8005526 <_vfprintf_r+0xf8a>
 8005660:	460c      	mov	r4, r1
 8005662:	e77a      	b.n	800555a <_vfprintf_r+0xfbe>
 8005664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005666:	2b00      	cmp	r3, #0
 8005668:	d04b      	beq.n	8005702 <_vfprintf_r+0x1166>
 800566a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800566c:	3b01      	subs	r3, #1
 800566e:	930c      	str	r3, [sp, #48]	; 0x30
 8005670:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005672:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005678:	6063      	str	r3, [r4, #4]
 800567a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800567c:	4413      	add	r3, r2
 800567e:	9328      	str	r3, [sp, #160]	; 0xa0
 8005680:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005682:	3301      	adds	r3, #1
 8005684:	2b07      	cmp	r3, #7
 8005686:	9327      	str	r3, [sp, #156]	; 0x9c
 8005688:	dc42      	bgt.n	8005710 <_vfprintf_r+0x1174>
 800568a:	3408      	adds	r4, #8
 800568c:	9b08      	ldr	r3, [sp, #32]
 800568e:	444b      	add	r3, r9
 8005690:	1b5a      	subs	r2, r3, r5
 8005692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	4293      	cmp	r3, r2
 8005698:	bfa8      	it	ge
 800569a:	4613      	movge	r3, r2
 800569c:	2b00      	cmp	r3, #0
 800569e:	461e      	mov	r6, r3
 80056a0:	dd0a      	ble.n	80056b8 <_vfprintf_r+0x111c>
 80056a2:	e9c4 5300 	strd	r5, r3, [r4]
 80056a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80056a8:	4433      	add	r3, r6
 80056aa:	9328      	str	r3, [sp, #160]	; 0xa0
 80056ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80056ae:	3301      	adds	r3, #1
 80056b0:	2b07      	cmp	r3, #7
 80056b2:	9327      	str	r3, [sp, #156]	; 0x9c
 80056b4:	dc36      	bgt.n	8005724 <_vfprintf_r+0x1188>
 80056b6:	3408      	adds	r4, #8
 80056b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056ba:	2e00      	cmp	r6, #0
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	bfb4      	ite	lt
 80056c0:	461e      	movlt	r6, r3
 80056c2:	1b9e      	subge	r6, r3, r6
 80056c4:	2e00      	cmp	r6, #0
 80056c6:	dd18      	ble.n	80056fa <_vfprintf_r+0x115e>
 80056c8:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 80056cc:	482f      	ldr	r0, [pc, #188]	; (800578c <_vfprintf_r+0x11f0>)
 80056ce:	2e10      	cmp	r6, #16
 80056d0:	f102 0201 	add.w	r2, r2, #1
 80056d4:	f104 0108 	add.w	r1, r4, #8
 80056d8:	6020      	str	r0, [r4, #0]
 80056da:	dc2d      	bgt.n	8005738 <_vfprintf_r+0x119c>
 80056dc:	4433      	add	r3, r6
 80056de:	2a07      	cmp	r2, #7
 80056e0:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80056e4:	6066      	str	r6, [r4, #4]
 80056e6:	dd3a      	ble.n	800575e <_vfprintf_r+0x11c2>
 80056e8:	4651      	mov	r1, sl
 80056ea:	4658      	mov	r0, fp
 80056ec:	aa26      	add	r2, sp, #152	; 0x98
 80056ee:	f002 fd07 	bl	8008100 <__sprint_r>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	f040 8108 	bne.w	8005908 <_vfprintf_r+0x136c>
 80056f8:	ac29      	add	r4, sp, #164	; 0xa4
 80056fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	441d      	add	r5, r3
 8005700:	e72f      	b.n	8005562 <_vfprintf_r+0xfc6>
 8005702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005704:	3b01      	subs	r3, #1
 8005706:	930e      	str	r3, [sp, #56]	; 0x38
 8005708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800570a:	3b01      	subs	r3, #1
 800570c:	930d      	str	r3, [sp, #52]	; 0x34
 800570e:	e7af      	b.n	8005670 <_vfprintf_r+0x10d4>
 8005710:	4651      	mov	r1, sl
 8005712:	4658      	mov	r0, fp
 8005714:	aa26      	add	r2, sp, #152	; 0x98
 8005716:	f002 fcf3 	bl	8008100 <__sprint_r>
 800571a:	2800      	cmp	r0, #0
 800571c:	f040 80f4 	bne.w	8005908 <_vfprintf_r+0x136c>
 8005720:	ac29      	add	r4, sp, #164	; 0xa4
 8005722:	e7b3      	b.n	800568c <_vfprintf_r+0x10f0>
 8005724:	4651      	mov	r1, sl
 8005726:	4658      	mov	r0, fp
 8005728:	aa26      	add	r2, sp, #152	; 0x98
 800572a:	f002 fce9 	bl	8008100 <__sprint_r>
 800572e:	2800      	cmp	r0, #0
 8005730:	f040 80ea 	bne.w	8005908 <_vfprintf_r+0x136c>
 8005734:	ac29      	add	r4, sp, #164	; 0xa4
 8005736:	e7bf      	b.n	80056b8 <_vfprintf_r+0x111c>
 8005738:	2010      	movs	r0, #16
 800573a:	2a07      	cmp	r2, #7
 800573c:	4403      	add	r3, r0
 800573e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8005742:	6060      	str	r0, [r4, #4]
 8005744:	dd08      	ble.n	8005758 <_vfprintf_r+0x11bc>
 8005746:	4651      	mov	r1, sl
 8005748:	4658      	mov	r0, fp
 800574a:	aa26      	add	r2, sp, #152	; 0x98
 800574c:	f002 fcd8 	bl	8008100 <__sprint_r>
 8005750:	2800      	cmp	r0, #0
 8005752:	f040 80d9 	bne.w	8005908 <_vfprintf_r+0x136c>
 8005756:	a929      	add	r1, sp, #164	; 0xa4
 8005758:	460c      	mov	r4, r1
 800575a:	3e10      	subs	r6, #16
 800575c:	e7b4      	b.n	80056c8 <_vfprintf_r+0x112c>
 800575e:	460c      	mov	r4, r1
 8005760:	e7cb      	b.n	80056fa <_vfprintf_r+0x115e>
 8005762:	4651      	mov	r1, sl
 8005764:	4658      	mov	r0, fp
 8005766:	aa26      	add	r2, sp, #152	; 0x98
 8005768:	f002 fcca 	bl	8008100 <__sprint_r>
 800576c:	2800      	cmp	r0, #0
 800576e:	f040 80cb 	bne.w	8005908 <_vfprintf_r+0x136c>
 8005772:	ac29      	add	r4, sp, #164	; 0xa4
 8005774:	e716      	b.n	80055a4 <_vfprintf_r+0x1008>
 8005776:	4651      	mov	r1, sl
 8005778:	4658      	mov	r0, fp
 800577a:	aa26      	add	r2, sp, #152	; 0x98
 800577c:	f002 fcc0 	bl	8008100 <__sprint_r>
 8005780:	2800      	cmp	r0, #0
 8005782:	f040 80c1 	bne.w	8005908 <_vfprintf_r+0x136c>
 8005786:	ac29      	add	r4, sp, #164	; 0xa4
 8005788:	e723      	b.n	80055d2 <_vfprintf_r+0x1036>
 800578a:	bf00      	nop
 800578c:	08009320 	.word	0x08009320
 8005790:	9a08      	ldr	r2, [sp, #32]
 8005792:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005794:	2a01      	cmp	r2, #1
 8005796:	f106 0601 	add.w	r6, r6, #1
 800579a:	f103 0301 	add.w	r3, r3, #1
 800579e:	f104 0508 	add.w	r5, r4, #8
 80057a2:	dc03      	bgt.n	80057ac <_vfprintf_r+0x1210>
 80057a4:	f018 0f01 	tst.w	r8, #1
 80057a8:	f000 8081 	beq.w	80058ae <_vfprintf_r+0x1312>
 80057ac:	2201      	movs	r2, #1
 80057ae:	2b07      	cmp	r3, #7
 80057b0:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 80057b4:	f8c4 9000 	str.w	r9, [r4]
 80057b8:	6062      	str	r2, [r4, #4]
 80057ba:	dd08      	ble.n	80057ce <_vfprintf_r+0x1232>
 80057bc:	4651      	mov	r1, sl
 80057be:	4658      	mov	r0, fp
 80057c0:	aa26      	add	r2, sp, #152	; 0x98
 80057c2:	f002 fc9d 	bl	8008100 <__sprint_r>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	f040 809e 	bne.w	8005908 <_vfprintf_r+0x136c>
 80057cc:	ad29      	add	r5, sp, #164	; 0xa4
 80057ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80057d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057d2:	602b      	str	r3, [r5, #0]
 80057d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057d6:	606b      	str	r3, [r5, #4]
 80057d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80057da:	4413      	add	r3, r2
 80057dc:	9328      	str	r3, [sp, #160]	; 0xa0
 80057de:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80057e0:	3301      	adds	r3, #1
 80057e2:	2b07      	cmp	r3, #7
 80057e4:	9327      	str	r3, [sp, #156]	; 0x9c
 80057e6:	dc32      	bgt.n	800584e <_vfprintf_r+0x12b2>
 80057e8:	3508      	adds	r5, #8
 80057ea:	9b08      	ldr	r3, [sp, #32]
 80057ec:	2200      	movs	r2, #0
 80057ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057f2:	1e5c      	subs	r4, r3, #1
 80057f4:	2300      	movs	r3, #0
 80057f6:	f7fb f8d7 	bl	80009a8 <__aeabi_dcmpeq>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	d130      	bne.n	8005860 <_vfprintf_r+0x12c4>
 80057fe:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8005800:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005802:	9a08      	ldr	r2, [sp, #32]
 8005804:	3101      	adds	r1, #1
 8005806:	3b01      	subs	r3, #1
 8005808:	f109 0001 	add.w	r0, r9, #1
 800580c:	4413      	add	r3, r2
 800580e:	2907      	cmp	r1, #7
 8005810:	e9c5 0400 	strd	r0, r4, [r5]
 8005814:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 8005818:	dd52      	ble.n	80058c0 <_vfprintf_r+0x1324>
 800581a:	4651      	mov	r1, sl
 800581c:	4658      	mov	r0, fp
 800581e:	aa26      	add	r2, sp, #152	; 0x98
 8005820:	f002 fc6e 	bl	8008100 <__sprint_r>
 8005824:	2800      	cmp	r0, #0
 8005826:	d16f      	bne.n	8005908 <_vfprintf_r+0x136c>
 8005828:	ad29      	add	r5, sp, #164	; 0xa4
 800582a:	ab22      	add	r3, sp, #136	; 0x88
 800582c:	602b      	str	r3, [r5, #0]
 800582e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005830:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005832:	606b      	str	r3, [r5, #4]
 8005834:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005836:	4413      	add	r3, r2
 8005838:	9328      	str	r3, [sp, #160]	; 0xa0
 800583a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800583c:	3301      	adds	r3, #1
 800583e:	2b07      	cmp	r3, #7
 8005840:	9327      	str	r3, [sp, #156]	; 0x9c
 8005842:	f73f adaf 	bgt.w	80053a4 <_vfprintf_r+0xe08>
 8005846:	f105 0408 	add.w	r4, r5, #8
 800584a:	f7ff bac2 	b.w	8004dd2 <_vfprintf_r+0x836>
 800584e:	4651      	mov	r1, sl
 8005850:	4658      	mov	r0, fp
 8005852:	aa26      	add	r2, sp, #152	; 0x98
 8005854:	f002 fc54 	bl	8008100 <__sprint_r>
 8005858:	2800      	cmp	r0, #0
 800585a:	d155      	bne.n	8005908 <_vfprintf_r+0x136c>
 800585c:	ad29      	add	r5, sp, #164	; 0xa4
 800585e:	e7c4      	b.n	80057ea <_vfprintf_r+0x124e>
 8005860:	2c00      	cmp	r4, #0
 8005862:	dde2      	ble.n	800582a <_vfprintf_r+0x128e>
 8005864:	f04f 0910 	mov.w	r9, #16
 8005868:	4e5a      	ldr	r6, [pc, #360]	; (80059d4 <_vfprintf_r+0x1438>)
 800586a:	2c10      	cmp	r4, #16
 800586c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005870:	f105 0108 	add.w	r1, r5, #8
 8005874:	f103 0301 	add.w	r3, r3, #1
 8005878:	602e      	str	r6, [r5, #0]
 800587a:	dc07      	bgt.n	800588c <_vfprintf_r+0x12f0>
 800587c:	606c      	str	r4, [r5, #4]
 800587e:	2b07      	cmp	r3, #7
 8005880:	4414      	add	r4, r2
 8005882:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 8005886:	dcc8      	bgt.n	800581a <_vfprintf_r+0x127e>
 8005888:	460d      	mov	r5, r1
 800588a:	e7ce      	b.n	800582a <_vfprintf_r+0x128e>
 800588c:	3210      	adds	r2, #16
 800588e:	2b07      	cmp	r3, #7
 8005890:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005894:	f8c5 9004 	str.w	r9, [r5, #4]
 8005898:	dd06      	ble.n	80058a8 <_vfprintf_r+0x130c>
 800589a:	4651      	mov	r1, sl
 800589c:	4658      	mov	r0, fp
 800589e:	aa26      	add	r2, sp, #152	; 0x98
 80058a0:	f002 fc2e 	bl	8008100 <__sprint_r>
 80058a4:	bb80      	cbnz	r0, 8005908 <_vfprintf_r+0x136c>
 80058a6:	a929      	add	r1, sp, #164	; 0xa4
 80058a8:	460d      	mov	r5, r1
 80058aa:	3c10      	subs	r4, #16
 80058ac:	e7dd      	b.n	800586a <_vfprintf_r+0x12ce>
 80058ae:	2201      	movs	r2, #1
 80058b0:	2b07      	cmp	r3, #7
 80058b2:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 80058b6:	f8c4 9000 	str.w	r9, [r4]
 80058ba:	6062      	str	r2, [r4, #4]
 80058bc:	ddb5      	ble.n	800582a <_vfprintf_r+0x128e>
 80058be:	e7ac      	b.n	800581a <_vfprintf_r+0x127e>
 80058c0:	3508      	adds	r5, #8
 80058c2:	e7b2      	b.n	800582a <_vfprintf_r+0x128e>
 80058c4:	460c      	mov	r4, r1
 80058c6:	f7ff ba84 	b.w	8004dd2 <_vfprintf_r+0x836>
 80058ca:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 80058ce:	1a9d      	subs	r5, r3, r2
 80058d0:	2d00      	cmp	r5, #0
 80058d2:	f77f aa82 	ble.w	8004dda <_vfprintf_r+0x83e>
 80058d6:	f04f 0810 	mov.w	r8, #16
 80058da:	4e3f      	ldr	r6, [pc, #252]	; (80059d8 <_vfprintf_r+0x143c>)
 80058dc:	2d10      	cmp	r5, #16
 80058de:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80058e2:	6026      	str	r6, [r4, #0]
 80058e4:	f103 0301 	add.w	r3, r3, #1
 80058e8:	dc17      	bgt.n	800591a <_vfprintf_r+0x137e>
 80058ea:	6065      	str	r5, [r4, #4]
 80058ec:	2b07      	cmp	r3, #7
 80058ee:	4415      	add	r5, r2
 80058f0:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80058f4:	f77f aa71 	ble.w	8004dda <_vfprintf_r+0x83e>
 80058f8:	4651      	mov	r1, sl
 80058fa:	4658      	mov	r0, fp
 80058fc:	aa26      	add	r2, sp, #152	; 0x98
 80058fe:	f002 fbff 	bl	8008100 <__sprint_r>
 8005902:	2800      	cmp	r0, #0
 8005904:	f43f aa69 	beq.w	8004dda <_vfprintf_r+0x83e>
 8005908:	2f00      	cmp	r7, #0
 800590a:	f43f a884 	beq.w	8004a16 <_vfprintf_r+0x47a>
 800590e:	4639      	mov	r1, r7
 8005910:	4658      	mov	r0, fp
 8005912:	f001 f8e1 	bl	8006ad8 <_free_r>
 8005916:	f7ff b87e 	b.w	8004a16 <_vfprintf_r+0x47a>
 800591a:	3210      	adds	r2, #16
 800591c:	2b07      	cmp	r3, #7
 800591e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005922:	f8c4 8004 	str.w	r8, [r4, #4]
 8005926:	dc02      	bgt.n	800592e <_vfprintf_r+0x1392>
 8005928:	3408      	adds	r4, #8
 800592a:	3d10      	subs	r5, #16
 800592c:	e7d6      	b.n	80058dc <_vfprintf_r+0x1340>
 800592e:	4651      	mov	r1, sl
 8005930:	4658      	mov	r0, fp
 8005932:	aa26      	add	r2, sp, #152	; 0x98
 8005934:	f002 fbe4 	bl	8008100 <__sprint_r>
 8005938:	2800      	cmp	r0, #0
 800593a:	d1e5      	bne.n	8005908 <_vfprintf_r+0x136c>
 800593c:	ac29      	add	r4, sp, #164	; 0xa4
 800593e:	e7f4      	b.n	800592a <_vfprintf_r+0x138e>
 8005940:	4639      	mov	r1, r7
 8005942:	4658      	mov	r0, fp
 8005944:	f001 f8c8 	bl	8006ad8 <_free_r>
 8005948:	f7ff ba5e 	b.w	8004e08 <_vfprintf_r+0x86c>
 800594c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800594e:	b91b      	cbnz	r3, 8005958 <_vfprintf_r+0x13bc>
 8005950:	2300      	movs	r3, #0
 8005952:	9327      	str	r3, [sp, #156]	; 0x9c
 8005954:	f7ff b85f 	b.w	8004a16 <_vfprintf_r+0x47a>
 8005958:	4651      	mov	r1, sl
 800595a:	4658      	mov	r0, fp
 800595c:	aa26      	add	r2, sp, #152	; 0x98
 800595e:	f002 fbcf 	bl	8008100 <__sprint_r>
 8005962:	2800      	cmp	r0, #0
 8005964:	d0f4      	beq.n	8005950 <_vfprintf_r+0x13b4>
 8005966:	f7ff b856 	b.w	8004a16 <_vfprintf_r+0x47a>
 800596a:	ea56 0207 	orrs.w	r2, r6, r7
 800596e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8005972:	f43f ab6a 	beq.w	800504a <_vfprintf_r+0xaae>
 8005976:	2b01      	cmp	r3, #1
 8005978:	f43f abff 	beq.w	800517a <_vfprintf_r+0xbde>
 800597c:	2b02      	cmp	r3, #2
 800597e:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8005982:	f43f ac47 	beq.w	8005214 <_vfprintf_r+0xc78>
 8005986:	08f2      	lsrs	r2, r6, #3
 8005988:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800598c:	08f8      	lsrs	r0, r7, #3
 800598e:	f006 0307 	and.w	r3, r6, #7
 8005992:	4607      	mov	r7, r0
 8005994:	4616      	mov	r6, r2
 8005996:	3330      	adds	r3, #48	; 0x30
 8005998:	ea56 0207 	orrs.w	r2, r6, r7
 800599c:	4649      	mov	r1, r9
 800599e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80059a2:	d1f0      	bne.n	8005986 <_vfprintf_r+0x13ea>
 80059a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059a6:	07d0      	lsls	r0, r2, #31
 80059a8:	d506      	bpl.n	80059b8 <_vfprintf_r+0x141c>
 80059aa:	2b30      	cmp	r3, #48	; 0x30
 80059ac:	d004      	beq.n	80059b8 <_vfprintf_r+0x141c>
 80059ae:	2330      	movs	r3, #48	; 0x30
 80059b0:	f809 3c01 	strb.w	r3, [r9, #-1]
 80059b4:	f1a1 0902 	sub.w	r9, r1, #2
 80059b8:	2700      	movs	r7, #0
 80059ba:	ab52      	add	r3, sp, #328	; 0x148
 80059bc:	eba3 0309 	sub.w	r3, r3, r9
 80059c0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80059c4:	9e07      	ldr	r6, [sp, #28]
 80059c6:	9307      	str	r3, [sp, #28]
 80059c8:	463d      	mov	r5, r7
 80059ca:	e9cd 770c 	strd	r7, r7, [sp, #48]	; 0x30
 80059ce:	f7ff b942 	b.w	8004c56 <_vfprintf_r+0x6ba>
 80059d2:	bf00      	nop
 80059d4:	08009320 	.word	0x08009320
 80059d8:	08009310 	.word	0x08009310

080059dc <__sbprintf>:
 80059dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059de:	461f      	mov	r7, r3
 80059e0:	898b      	ldrh	r3, [r1, #12]
 80059e2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80059e6:	f023 0302 	bic.w	r3, r3, #2
 80059ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 80059ee:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80059f0:	4615      	mov	r5, r2
 80059f2:	9319      	str	r3, [sp, #100]	; 0x64
 80059f4:	89cb      	ldrh	r3, [r1, #14]
 80059f6:	4606      	mov	r6, r0
 80059f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80059fc:	69cb      	ldr	r3, [r1, #28]
 80059fe:	a816      	add	r0, sp, #88	; 0x58
 8005a00:	9307      	str	r3, [sp, #28]
 8005a02:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005a04:	460c      	mov	r4, r1
 8005a06:	9309      	str	r3, [sp, #36]	; 0x24
 8005a08:	ab1a      	add	r3, sp, #104	; 0x68
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	9304      	str	r3, [sp, #16]
 8005a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a12:	9302      	str	r3, [sp, #8]
 8005a14:	9305      	str	r3, [sp, #20]
 8005a16:	2300      	movs	r3, #0
 8005a18:	9306      	str	r3, [sp, #24]
 8005a1a:	f001 fa8b 	bl	8006f34 <__retarget_lock_init_recursive>
 8005a1e:	462a      	mov	r2, r5
 8005a20:	463b      	mov	r3, r7
 8005a22:	4669      	mov	r1, sp
 8005a24:	4630      	mov	r0, r6
 8005a26:	f7fe fdb9 	bl	800459c <_vfprintf_r>
 8005a2a:	1e05      	subs	r5, r0, #0
 8005a2c:	db07      	blt.n	8005a3e <__sbprintf+0x62>
 8005a2e:	4669      	mov	r1, sp
 8005a30:	4630      	mov	r0, r6
 8005a32:	f000 ff55 	bl	80068e0 <_fflush_r>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	bf18      	it	ne
 8005a3a:	f04f 35ff 	movne.w	r5, #4294967295
 8005a3e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005a42:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005a44:	065b      	lsls	r3, r3, #25
 8005a46:	bf42      	ittt	mi
 8005a48:	89a3      	ldrhmi	r3, [r4, #12]
 8005a4a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8005a4e:	81a3      	strhmi	r3, [r4, #12]
 8005a50:	f001 fa71 	bl	8006f36 <__retarget_lock_close_recursive>
 8005a54:	4628      	mov	r0, r5
 8005a56:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8005a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a5c <__swsetup_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <__swsetup_r+0xac>)
 8005a60:	4605      	mov	r5, r0
 8005a62:	6818      	ldr	r0, [r3, #0]
 8005a64:	460c      	mov	r4, r1
 8005a66:	b118      	cbz	r0, 8005a70 <__swsetup_r+0x14>
 8005a68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005a6a:	b90b      	cbnz	r3, 8005a70 <__swsetup_r+0x14>
 8005a6c:	f000 ffa4 	bl	80069b8 <__sinit>
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a76:	0718      	lsls	r0, r3, #28
 8005a78:	d422      	bmi.n	8005ac0 <__swsetup_r+0x64>
 8005a7a:	06d9      	lsls	r1, r3, #27
 8005a7c:	d407      	bmi.n	8005a8e <__swsetup_r+0x32>
 8005a7e:	2309      	movs	r3, #9
 8005a80:	602b      	str	r3, [r5, #0]
 8005a82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a86:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8a:	81a3      	strh	r3, [r4, #12]
 8005a8c:	e034      	b.n	8005af8 <__swsetup_r+0x9c>
 8005a8e:	0758      	lsls	r0, r3, #29
 8005a90:	d512      	bpl.n	8005ab8 <__swsetup_r+0x5c>
 8005a92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005a94:	b141      	cbz	r1, 8005aa8 <__swsetup_r+0x4c>
 8005a96:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8005a9a:	4299      	cmp	r1, r3
 8005a9c:	d002      	beq.n	8005aa4 <__swsetup_r+0x48>
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f001 f81a 	bl	8006ad8 <_free_r>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	6323      	str	r3, [r4, #48]	; 0x30
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005aae:	81a3      	strh	r3, [r4, #12]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	6063      	str	r3, [r4, #4]
 8005ab4:	6923      	ldr	r3, [r4, #16]
 8005ab6:	6023      	str	r3, [r4, #0]
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	f043 0308 	orr.w	r3, r3, #8
 8005abe:	81a3      	strh	r3, [r4, #12]
 8005ac0:	6923      	ldr	r3, [r4, #16]
 8005ac2:	b94b      	cbnz	r3, 8005ad8 <__swsetup_r+0x7c>
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ace:	d003      	beq.n	8005ad8 <__swsetup_r+0x7c>
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f001 fa5e 	bl	8006f94 <__smakebuf_r>
 8005ad8:	89a0      	ldrh	r0, [r4, #12]
 8005ada:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ade:	f010 0301 	ands.w	r3, r0, #1
 8005ae2:	d00a      	beq.n	8005afa <__swsetup_r+0x9e>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60a3      	str	r3, [r4, #8]
 8005ae8:	6963      	ldr	r3, [r4, #20]
 8005aea:	425b      	negs	r3, r3
 8005aec:	61a3      	str	r3, [r4, #24]
 8005aee:	6923      	ldr	r3, [r4, #16]
 8005af0:	b943      	cbnz	r3, 8005b04 <__swsetup_r+0xa8>
 8005af2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005af6:	d1c4      	bne.n	8005a82 <__swsetup_r+0x26>
 8005af8:	bd38      	pop	{r3, r4, r5, pc}
 8005afa:	0781      	lsls	r1, r0, #30
 8005afc:	bf58      	it	pl
 8005afe:	6963      	ldrpl	r3, [r4, #20]
 8005b00:	60a3      	str	r3, [r4, #8]
 8005b02:	e7f4      	b.n	8005aee <__swsetup_r+0x92>
 8005b04:	2000      	movs	r0, #0
 8005b06:	e7f7      	b.n	8005af8 <__swsetup_r+0x9c>
 8005b08:	2000000c 	.word	0x2000000c

08005b0c <register_fini>:
 8005b0c:	4b02      	ldr	r3, [pc, #8]	; (8005b18 <register_fini+0xc>)
 8005b0e:	b113      	cbz	r3, 8005b16 <register_fini+0xa>
 8005b10:	4802      	ldr	r0, [pc, #8]	; (8005b1c <register_fini+0x10>)
 8005b12:	f000 b805 	b.w	8005b20 <atexit>
 8005b16:	4770      	bx	lr
 8005b18:	00000000 	.word	0x00000000
 8005b1c:	08006a09 	.word	0x08006a09

08005b20 <atexit>:
 8005b20:	2300      	movs	r3, #0
 8005b22:	4601      	mov	r1, r0
 8005b24:	461a      	mov	r2, r3
 8005b26:	4618      	mov	r0, r3
 8005b28:	f002 bfee 	b.w	8008b08 <__register_exitproc>

08005b2c <quorem>:
 8005b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	6903      	ldr	r3, [r0, #16]
 8005b32:	690c      	ldr	r4, [r1, #16]
 8005b34:	4607      	mov	r7, r0
 8005b36:	42a3      	cmp	r3, r4
 8005b38:	f2c0 8083 	blt.w	8005c42 <quorem+0x116>
 8005b3c:	3c01      	subs	r4, #1
 8005b3e:	f100 0514 	add.w	r5, r0, #20
 8005b42:	f101 0814 	add.w	r8, r1, #20
 8005b46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b54:	3301      	adds	r3, #1
 8005b56:	429a      	cmp	r2, r3
 8005b58:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b64:	d332      	bcc.n	8005bcc <quorem+0xa0>
 8005b66:	f04f 0e00 	mov.w	lr, #0
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	46ac      	mov	ip, r5
 8005b6e:	46f2      	mov	sl, lr
 8005b70:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b74:	b293      	uxth	r3, r2
 8005b76:	fb06 e303 	mla	r3, r6, r3, lr
 8005b7a:	0c12      	lsrs	r2, r2, #16
 8005b7c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005b80:	fb06 e202 	mla	r2, r6, r2, lr
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	ebaa 0303 	sub.w	r3, sl, r3
 8005b8a:	f8dc a000 	ldr.w	sl, [ip]
 8005b8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b92:	fa1f fa8a 	uxth.w	sl, sl
 8005b96:	4453      	add	r3, sl
 8005b98:	fa1f fa82 	uxth.w	sl, r2
 8005b9c:	f8dc 2000 	ldr.w	r2, [ip]
 8005ba0:	4581      	cmp	r9, r0
 8005ba2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005ba6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bb0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005bb4:	f84c 3b04 	str.w	r3, [ip], #4
 8005bb8:	d2da      	bcs.n	8005b70 <quorem+0x44>
 8005bba:	f855 300b 	ldr.w	r3, [r5, fp]
 8005bbe:	b92b      	cbnz	r3, 8005bcc <quorem+0xa0>
 8005bc0:	9b01      	ldr	r3, [sp, #4]
 8005bc2:	3b04      	subs	r3, #4
 8005bc4:	429d      	cmp	r5, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	d32f      	bcc.n	8005c2a <quorem+0xfe>
 8005bca:	613c      	str	r4, [r7, #16]
 8005bcc:	4638      	mov	r0, r7
 8005bce:	f001 fec3 	bl	8007958 <__mcmp>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	db25      	blt.n	8005c22 <quorem+0xf6>
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f04f 0c00 	mov.w	ip, #0
 8005bdc:	3601      	adds	r6, #1
 8005bde:	f858 1b04 	ldr.w	r1, [r8], #4
 8005be2:	f8d0 e000 	ldr.w	lr, [r0]
 8005be6:	b28b      	uxth	r3, r1
 8005be8:	ebac 0303 	sub.w	r3, ip, r3
 8005bec:	fa1f f28e 	uxth.w	r2, lr
 8005bf0:	4413      	add	r3, r2
 8005bf2:	0c0a      	lsrs	r2, r1, #16
 8005bf4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005bf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c02:	45c1      	cmp	r9, r8
 8005c04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c08:	f840 3b04 	str.w	r3, [r0], #4
 8005c0c:	d2e7      	bcs.n	8005bde <quorem+0xb2>
 8005c0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c16:	b922      	cbnz	r2, 8005c22 <quorem+0xf6>
 8005c18:	3b04      	subs	r3, #4
 8005c1a:	429d      	cmp	r5, r3
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	d30a      	bcc.n	8005c36 <quorem+0x10a>
 8005c20:	613c      	str	r4, [r7, #16]
 8005c22:	4630      	mov	r0, r6
 8005c24:	b003      	add	sp, #12
 8005c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2a:	6812      	ldr	r2, [r2, #0]
 8005c2c:	3b04      	subs	r3, #4
 8005c2e:	2a00      	cmp	r2, #0
 8005c30:	d1cb      	bne.n	8005bca <quorem+0x9e>
 8005c32:	3c01      	subs	r4, #1
 8005c34:	e7c6      	b.n	8005bc4 <quorem+0x98>
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	3b04      	subs	r3, #4
 8005c3a:	2a00      	cmp	r2, #0
 8005c3c:	d1f0      	bne.n	8005c20 <quorem+0xf4>
 8005c3e:	3c01      	subs	r4, #1
 8005c40:	e7eb      	b.n	8005c1a <quorem+0xee>
 8005c42:	2000      	movs	r0, #0
 8005c44:	e7ee      	b.n	8005c24 <quorem+0xf8>
	...

08005c48 <_dtoa_r>:
 8005c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005c4e:	b097      	sub	sp, #92	; 0x5c
 8005c50:	4681      	mov	r9, r0
 8005c52:	4614      	mov	r4, r2
 8005c54:	461d      	mov	r5, r3
 8005c56:	4692      	mov	sl, r2
 8005c58:	469b      	mov	fp, r3
 8005c5a:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8005c5c:	b149      	cbz	r1, 8005c72 <_dtoa_r+0x2a>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c62:	4093      	lsls	r3, r2
 8005c64:	608b      	str	r3, [r1, #8]
 8005c66:	604a      	str	r2, [r1, #4]
 8005c68:	f001 fc6f 	bl	800754a <_Bfree>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8005c72:	1e2b      	subs	r3, r5, #0
 8005c74:	bfad      	iteet	ge
 8005c76:	2300      	movge	r3, #0
 8005c78:	2201      	movlt	r2, #1
 8005c7a:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005c7e:	6033      	strge	r3, [r6, #0]
 8005c80:	4ba3      	ldr	r3, [pc, #652]	; (8005f10 <_dtoa_r+0x2c8>)
 8005c82:	bfb8      	it	lt
 8005c84:	6032      	strlt	r2, [r6, #0]
 8005c86:	ea33 030b 	bics.w	r3, r3, fp
 8005c8a:	f8cd b00c 	str.w	fp, [sp, #12]
 8005c8e:	d119      	bne.n	8005cc4 <_dtoa_r+0x7c>
 8005c90:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c94:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c9c:	4323      	orrs	r3, r4
 8005c9e:	f000 857b 	beq.w	8006798 <_dtoa_r+0xb50>
 8005ca2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005ca4:	b90b      	cbnz	r3, 8005caa <_dtoa_r+0x62>
 8005ca6:	4b9b      	ldr	r3, [pc, #620]	; (8005f14 <_dtoa_r+0x2cc>)
 8005ca8:	e020      	b.n	8005cec <_dtoa_r+0xa4>
 8005caa:	4b9a      	ldr	r3, [pc, #616]	; (8005f14 <_dtoa_r+0x2cc>)
 8005cac:	9306      	str	r3, [sp, #24]
 8005cae:	3303      	adds	r3, #3
 8005cb0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005cb2:	6013      	str	r3, [r2, #0]
 8005cb4:	9806      	ldr	r0, [sp, #24]
 8005cb6:	b017      	add	sp, #92	; 0x5c
 8005cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cbc:	4b96      	ldr	r3, [pc, #600]	; (8005f18 <_dtoa_r+0x2d0>)
 8005cbe:	9306      	str	r3, [sp, #24]
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	e7f5      	b.n	8005cb0 <_dtoa_r+0x68>
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	4650      	mov	r0, sl
 8005cca:	4659      	mov	r1, fp
 8005ccc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8005cd0:	f7fa fe6a 	bl	80009a8 <__aeabi_dcmpeq>
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	b158      	cbz	r0, 8005cf0 <_dtoa_r+0xa8>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8556 	beq.w	8006792 <_dtoa_r+0xb4a>
 8005ce6:	488d      	ldr	r0, [pc, #564]	; (8005f1c <_dtoa_r+0x2d4>)
 8005ce8:	6018      	str	r0, [r3, #0]
 8005cea:	1e43      	subs	r3, r0, #1
 8005cec:	9306      	str	r3, [sp, #24]
 8005cee:	e7e1      	b.n	8005cb4 <_dtoa_r+0x6c>
 8005cf0:	ab14      	add	r3, sp, #80	; 0x50
 8005cf2:	9301      	str	r3, [sp, #4]
 8005cf4:	ab15      	add	r3, sp, #84	; 0x54
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	4648      	mov	r0, r9
 8005cfa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005cfe:	f001 fed7 	bl	8007ab0 <__d2b>
 8005d02:	9b03      	ldr	r3, [sp, #12]
 8005d04:	4680      	mov	r8, r0
 8005d06:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8005d0a:	2e00      	cmp	r6, #0
 8005d0c:	d07f      	beq.n	8005e0e <_dtoa_r+0x1c6>
 8005d0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d14:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8005d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d1c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005d20:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005d24:	9713      	str	r7, [sp, #76]	; 0x4c
 8005d26:	2200      	movs	r2, #0
 8005d28:	4b7d      	ldr	r3, [pc, #500]	; (8005f20 <_dtoa_r+0x2d8>)
 8005d2a:	f7fa fa1d 	bl	8000168 <__aeabi_dsub>
 8005d2e:	a372      	add	r3, pc, #456	; (adr r3, 8005ef8 <_dtoa_r+0x2b0>)
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	f7fa fbd0 	bl	80004d8 <__aeabi_dmul>
 8005d38:	a371      	add	r3, pc, #452	; (adr r3, 8005f00 <_dtoa_r+0x2b8>)
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	f7fa fa15 	bl	800016c <__adddf3>
 8005d42:	4604      	mov	r4, r0
 8005d44:	4630      	mov	r0, r6
 8005d46:	460d      	mov	r5, r1
 8005d48:	f7fa fb5c 	bl	8000404 <__aeabi_i2d>
 8005d4c:	a36e      	add	r3, pc, #440	; (adr r3, 8005f08 <_dtoa_r+0x2c0>)
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	f7fa fbc1 	bl	80004d8 <__aeabi_dmul>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	f7fa fa05 	bl	800016c <__adddf3>
 8005d62:	4604      	mov	r4, r0
 8005d64:	460d      	mov	r5, r1
 8005d66:	f7fa fe67 	bl	8000a38 <__aeabi_d2iz>
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	9003      	str	r0, [sp, #12]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	4620      	mov	r0, r4
 8005d72:	4629      	mov	r1, r5
 8005d74:	f7fa fe22 	bl	80009bc <__aeabi_dcmplt>
 8005d78:	b150      	cbz	r0, 8005d90 <_dtoa_r+0x148>
 8005d7a:	9803      	ldr	r0, [sp, #12]
 8005d7c:	f7fa fb42 	bl	8000404 <__aeabi_i2d>
 8005d80:	4622      	mov	r2, r4
 8005d82:	462b      	mov	r3, r5
 8005d84:	f7fa fe10 	bl	80009a8 <__aeabi_dcmpeq>
 8005d88:	b910      	cbnz	r0, 8005d90 <_dtoa_r+0x148>
 8005d8a:	9b03      	ldr	r3, [sp, #12]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	9303      	str	r3, [sp, #12]
 8005d90:	9b03      	ldr	r3, [sp, #12]
 8005d92:	2b16      	cmp	r3, #22
 8005d94:	d858      	bhi.n	8005e48 <_dtoa_r+0x200>
 8005d96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d9a:	9a03      	ldr	r2, [sp, #12]
 8005d9c:	4b61      	ldr	r3, [pc, #388]	; (8005f24 <_dtoa_r+0x2dc>)
 8005d9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	f7fa fe09 	bl	80009bc <__aeabi_dcmplt>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d04e      	beq.n	8005e4c <_dtoa_r+0x204>
 8005dae:	9b03      	ldr	r3, [sp, #12]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	9303      	str	r3, [sp, #12]
 8005db4:	2300      	movs	r3, #0
 8005db6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005db8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005dba:	1b9e      	subs	r6, r3, r6
 8005dbc:	1e73      	subs	r3, r6, #1
 8005dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc0:	bf49      	itett	mi
 8005dc2:	f1c6 0301 	rsbmi	r3, r6, #1
 8005dc6:	2300      	movpl	r3, #0
 8005dc8:	9308      	strmi	r3, [sp, #32]
 8005dca:	2300      	movmi	r3, #0
 8005dcc:	bf54      	ite	pl
 8005dce:	9308      	strpl	r3, [sp, #32]
 8005dd0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005dd2:	9b03      	ldr	r3, [sp, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	db3b      	blt.n	8005e50 <_dtoa_r+0x208>
 8005dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dda:	9a03      	ldr	r2, [sp, #12]
 8005ddc:	4413      	add	r3, r2
 8005dde:	9309      	str	r3, [sp, #36]	; 0x24
 8005de0:	2300      	movs	r3, #0
 8005de2:	920e      	str	r2, [sp, #56]	; 0x38
 8005de4:	930a      	str	r3, [sp, #40]	; 0x28
 8005de6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005de8:	2b09      	cmp	r3, #9
 8005dea:	d86b      	bhi.n	8005ec4 <_dtoa_r+0x27c>
 8005dec:	2b05      	cmp	r3, #5
 8005dee:	bfc4      	itt	gt
 8005df0:	3b04      	subgt	r3, #4
 8005df2:	9320      	strgt	r3, [sp, #128]	; 0x80
 8005df4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005df6:	bfc8      	it	gt
 8005df8:	2400      	movgt	r4, #0
 8005dfa:	f1a3 0302 	sub.w	r3, r3, #2
 8005dfe:	bfd8      	it	le
 8005e00:	2401      	movle	r4, #1
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d869      	bhi.n	8005eda <_dtoa_r+0x292>
 8005e06:	e8df f003 	tbb	[pc, r3]
 8005e0a:	392c      	.short	0x392c
 8005e0c:	5b37      	.short	0x5b37
 8005e0e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 8005e12:	441e      	add	r6, r3
 8005e14:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	dd10      	ble.n	8005e3e <_dtoa_r+0x1f6>
 8005e1c:	9a03      	ldr	r2, [sp, #12]
 8005e1e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005e22:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8005e26:	409a      	lsls	r2, r3
 8005e28:	fa24 f000 	lsr.w	r0, r4, r0
 8005e2c:	4310      	orrs	r0, r2
 8005e2e:	f7fa fad9 	bl	80003e4 <__aeabi_ui2d>
 8005e32:	2301      	movs	r3, #1
 8005e34:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005e38:	3e01      	subs	r6, #1
 8005e3a:	9313      	str	r3, [sp, #76]	; 0x4c
 8005e3c:	e773      	b.n	8005d26 <_dtoa_r+0xde>
 8005e3e:	f1c3 0320 	rsb	r3, r3, #32
 8005e42:	fa04 f003 	lsl.w	r0, r4, r3
 8005e46:	e7f2      	b.n	8005e2e <_dtoa_r+0x1e6>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e7b4      	b.n	8005db6 <_dtoa_r+0x16e>
 8005e4c:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e4e:	e7b3      	b.n	8005db8 <_dtoa_r+0x170>
 8005e50:	9b08      	ldr	r3, [sp, #32]
 8005e52:	9a03      	ldr	r2, [sp, #12]
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	9308      	str	r3, [sp, #32]
 8005e58:	4253      	negs	r3, r2
 8005e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	930e      	str	r3, [sp, #56]	; 0x38
 8005e60:	e7c1      	b.n	8005de6 <_dtoa_r+0x19e>
 8005e62:	2300      	movs	r3, #0
 8005e64:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	dc39      	bgt.n	8005ee0 <_dtoa_r+0x298>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	461a      	mov	r2, r3
 8005e70:	9304      	str	r3, [sp, #16]
 8005e72:	9307      	str	r3, [sp, #28]
 8005e74:	9221      	str	r2, [sp, #132]	; 0x84
 8005e76:	e00c      	b.n	8005e92 <_dtoa_r+0x24a>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e7f3      	b.n	8005e64 <_dtoa_r+0x21c>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e80:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e82:	9b03      	ldr	r3, [sp, #12]
 8005e84:	4413      	add	r3, r2
 8005e86:	9304      	str	r3, [sp, #16]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	9307      	str	r3, [sp, #28]
 8005e8e:	bfb8      	it	lt
 8005e90:	2301      	movlt	r3, #1
 8005e92:	2200      	movs	r2, #0
 8005e94:	f8c9 2044 	str.w	r2, [r9, #68]	; 0x44
 8005e98:	2204      	movs	r2, #4
 8005e9a:	f102 0014 	add.w	r0, r2, #20
 8005e9e:	4298      	cmp	r0, r3
 8005ea0:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 8005ea4:	d920      	bls.n	8005ee8 <_dtoa_r+0x2a0>
 8005ea6:	4648      	mov	r0, r9
 8005ea8:	f001 fb2a 	bl	8007500 <_Balloc>
 8005eac:	9006      	str	r0, [sp, #24]
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d13e      	bne.n	8005f30 <_dtoa_r+0x2e8>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	; (8005f28 <_dtoa_r+0x2e0>)
 8005eba:	481c      	ldr	r0, [pc, #112]	; (8005f2c <_dtoa_r+0x2e4>)
 8005ebc:	f002 fe64 	bl	8008b88 <__assert_func>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e7dc      	b.n	8005e7e <_dtoa_r+0x236>
 8005ec4:	2401      	movs	r4, #1
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005eca:	9320      	str	r3, [sp, #128]	; 0x80
 8005ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	9304      	str	r3, [sp, #16]
 8005ed4:	9307      	str	r3, [sp, #28]
 8005ed6:	2312      	movs	r3, #18
 8005ed8:	e7cc      	b.n	8005e74 <_dtoa_r+0x22c>
 8005eda:	2301      	movs	r3, #1
 8005edc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ede:	e7f5      	b.n	8005ecc <_dtoa_r+0x284>
 8005ee0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ee2:	9304      	str	r3, [sp, #16]
 8005ee4:	9307      	str	r3, [sp, #28]
 8005ee6:	e7d4      	b.n	8005e92 <_dtoa_r+0x24a>
 8005ee8:	3101      	adds	r1, #1
 8005eea:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8005eee:	0052      	lsls	r2, r2, #1
 8005ef0:	e7d3      	b.n	8005e9a <_dtoa_r+0x252>
 8005ef2:	bf00      	nop
 8005ef4:	f3af 8000 	nop.w
 8005ef8:	636f4361 	.word	0x636f4361
 8005efc:	3fd287a7 	.word	0x3fd287a7
 8005f00:	8b60c8b3 	.word	0x8b60c8b3
 8005f04:	3fc68a28 	.word	0x3fc68a28
 8005f08:	509f79fb 	.word	0x509f79fb
 8005f0c:	3fd34413 	.word	0x3fd34413
 8005f10:	7ff00000 	.word	0x7ff00000
 8005f14:	08009330 	.word	0x08009330
 8005f18:	08009334 	.word	0x08009334
 8005f1c:	080092ef 	.word	0x080092ef
 8005f20:	3ff80000 	.word	0x3ff80000
 8005f24:	08009438 	.word	0x08009438
 8005f28:	0800933d 	.word	0x0800933d
 8005f2c:	0800934e 	.word	0x0800934e
 8005f30:	9b06      	ldr	r3, [sp, #24]
 8005f32:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8005f36:	9b07      	ldr	r3, [sp, #28]
 8005f38:	2b0e      	cmp	r3, #14
 8005f3a:	f200 80a1 	bhi.w	8006080 <_dtoa_r+0x438>
 8005f3e:	2c00      	cmp	r4, #0
 8005f40:	f000 809e 	beq.w	8006080 <_dtoa_r+0x438>
 8005f44:	9b03      	ldr	r3, [sp, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	dd34      	ble.n	8005fb4 <_dtoa_r+0x36c>
 8005f4a:	4a96      	ldr	r2, [pc, #600]	; (80061a4 <_dtoa_r+0x55c>)
 8005f4c:	f003 030f 	and.w	r3, r3, #15
 8005f50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f58:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005f5c:	9b03      	ldr	r3, [sp, #12]
 8005f5e:	05d8      	lsls	r0, r3, #23
 8005f60:	ea4f 1523 	mov.w	r5, r3, asr #4
 8005f64:	d516      	bpl.n	8005f94 <_dtoa_r+0x34c>
 8005f66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f6a:	4b8f      	ldr	r3, [pc, #572]	; (80061a8 <_dtoa_r+0x560>)
 8005f6c:	2603      	movs	r6, #3
 8005f6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f72:	f7fa fbdb 	bl	800072c <__aeabi_ddiv>
 8005f76:	4682      	mov	sl, r0
 8005f78:	468b      	mov	fp, r1
 8005f7a:	f005 050f 	and.w	r5, r5, #15
 8005f7e:	4c8a      	ldr	r4, [pc, #552]	; (80061a8 <_dtoa_r+0x560>)
 8005f80:	b955      	cbnz	r5, 8005f98 <_dtoa_r+0x350>
 8005f82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f86:	4650      	mov	r0, sl
 8005f88:	4659      	mov	r1, fp
 8005f8a:	f7fa fbcf 	bl	800072c <__aeabi_ddiv>
 8005f8e:	4682      	mov	sl, r0
 8005f90:	468b      	mov	fp, r1
 8005f92:	e028      	b.n	8005fe6 <_dtoa_r+0x39e>
 8005f94:	2602      	movs	r6, #2
 8005f96:	e7f2      	b.n	8005f7e <_dtoa_r+0x336>
 8005f98:	07e9      	lsls	r1, r5, #31
 8005f9a:	d508      	bpl.n	8005fae <_dtoa_r+0x366>
 8005f9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fa0:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005fa4:	f7fa fa98 	bl	80004d8 <__aeabi_dmul>
 8005fa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fac:	3601      	adds	r6, #1
 8005fae:	106d      	asrs	r5, r5, #1
 8005fb0:	3408      	adds	r4, #8
 8005fb2:	e7e5      	b.n	8005f80 <_dtoa_r+0x338>
 8005fb4:	f000 809f 	beq.w	80060f6 <_dtoa_r+0x4ae>
 8005fb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fbc:	9b03      	ldr	r3, [sp, #12]
 8005fbe:	2602      	movs	r6, #2
 8005fc0:	425c      	negs	r4, r3
 8005fc2:	4b78      	ldr	r3, [pc, #480]	; (80061a4 <_dtoa_r+0x55c>)
 8005fc4:	f004 020f 	and.w	r2, r4, #15
 8005fc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f7fa fa82 	bl	80004d8 <__aeabi_dmul>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	4682      	mov	sl, r0
 8005fd8:	468b      	mov	fp, r1
 8005fda:	4d73      	ldr	r5, [pc, #460]	; (80061a8 <_dtoa_r+0x560>)
 8005fdc:	1124      	asrs	r4, r4, #4
 8005fde:	2c00      	cmp	r4, #0
 8005fe0:	d17e      	bne.n	80060e0 <_dtoa_r+0x498>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1d3      	bne.n	8005f8e <_dtoa_r+0x346>
 8005fe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 8086 	beq.w	80060fa <_dtoa_r+0x4b2>
 8005fee:	2200      	movs	r2, #0
 8005ff0:	4650      	mov	r0, sl
 8005ff2:	4659      	mov	r1, fp
 8005ff4:	4b6d      	ldr	r3, [pc, #436]	; (80061ac <_dtoa_r+0x564>)
 8005ff6:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 8005ffa:	f7fa fcdf 	bl	80009bc <__aeabi_dcmplt>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d07b      	beq.n	80060fa <_dtoa_r+0x4b2>
 8006002:	9b07      	ldr	r3, [sp, #28]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d078      	beq.n	80060fa <_dtoa_r+0x4b2>
 8006008:	9b04      	ldr	r3, [sp, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	dd36      	ble.n	800607c <_dtoa_r+0x434>
 800600e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006012:	9b03      	ldr	r3, [sp, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	1e5d      	subs	r5, r3, #1
 8006018:	4b65      	ldr	r3, [pc, #404]	; (80061b0 <_dtoa_r+0x568>)
 800601a:	f7fa fa5d 	bl	80004d8 <__aeabi_dmul>
 800601e:	4682      	mov	sl, r0
 8006020:	468b      	mov	fp, r1
 8006022:	9c04      	ldr	r4, [sp, #16]
 8006024:	3601      	adds	r6, #1
 8006026:	4630      	mov	r0, r6
 8006028:	f7fa f9ec 	bl	8000404 <__aeabi_i2d>
 800602c:	4652      	mov	r2, sl
 800602e:	465b      	mov	r3, fp
 8006030:	f7fa fa52 	bl	80004d8 <__aeabi_dmul>
 8006034:	2200      	movs	r2, #0
 8006036:	4b5f      	ldr	r3, [pc, #380]	; (80061b4 <_dtoa_r+0x56c>)
 8006038:	f7fa f898 	bl	800016c <__adddf3>
 800603c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006040:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006044:	9611      	str	r6, [sp, #68]	; 0x44
 8006046:	2c00      	cmp	r4, #0
 8006048:	d15a      	bne.n	8006100 <_dtoa_r+0x4b8>
 800604a:	2200      	movs	r2, #0
 800604c:	4650      	mov	r0, sl
 800604e:	4659      	mov	r1, fp
 8006050:	4b59      	ldr	r3, [pc, #356]	; (80061b8 <_dtoa_r+0x570>)
 8006052:	f7fa f889 	bl	8000168 <__aeabi_dsub>
 8006056:	4633      	mov	r3, r6
 8006058:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800605a:	4682      	mov	sl, r0
 800605c:	468b      	mov	fp, r1
 800605e:	f7fa fccb 	bl	80009f8 <__aeabi_dcmpgt>
 8006062:	2800      	cmp	r0, #0
 8006064:	f040 828b 	bne.w	800657e <_dtoa_r+0x936>
 8006068:	4650      	mov	r0, sl
 800606a:	4659      	mov	r1, fp
 800606c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800606e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006072:	f7fa fca3 	bl	80009bc <__aeabi_dcmplt>
 8006076:	2800      	cmp	r0, #0
 8006078:	f040 827f 	bne.w	800657a <_dtoa_r+0x932>
 800607c:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 8006080:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006082:	2b00      	cmp	r3, #0
 8006084:	f2c0 814d 	blt.w	8006322 <_dtoa_r+0x6da>
 8006088:	9a03      	ldr	r2, [sp, #12]
 800608a:	2a0e      	cmp	r2, #14
 800608c:	f300 8149 	bgt.w	8006322 <_dtoa_r+0x6da>
 8006090:	4b44      	ldr	r3, [pc, #272]	; (80061a4 <_dtoa_r+0x55c>)
 8006092:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006096:	e9d3 3400 	ldrd	r3, r4, [r3]
 800609a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800609e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f280 80d6 	bge.w	8006252 <_dtoa_r+0x60a>
 80060a6:	9b07      	ldr	r3, [sp, #28]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f300 80d2 	bgt.w	8006252 <_dtoa_r+0x60a>
 80060ae:	f040 8263 	bne.w	8006578 <_dtoa_r+0x930>
 80060b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060b6:	2200      	movs	r2, #0
 80060b8:	4b3f      	ldr	r3, [pc, #252]	; (80061b8 <_dtoa_r+0x570>)
 80060ba:	f7fa fa0d 	bl	80004d8 <__aeabi_dmul>
 80060be:	4652      	mov	r2, sl
 80060c0:	465b      	mov	r3, fp
 80060c2:	f7fa fc8f 	bl	80009e4 <__aeabi_dcmpge>
 80060c6:	9c07      	ldr	r4, [sp, #28]
 80060c8:	4625      	mov	r5, r4
 80060ca:	2800      	cmp	r0, #0
 80060cc:	f040 823c 	bne.w	8006548 <_dtoa_r+0x900>
 80060d0:	2331      	movs	r3, #49	; 0x31
 80060d2:	9e06      	ldr	r6, [sp, #24]
 80060d4:	f806 3b01 	strb.w	r3, [r6], #1
 80060d8:	9b03      	ldr	r3, [sp, #12]
 80060da:	3301      	adds	r3, #1
 80060dc:	9303      	str	r3, [sp, #12]
 80060de:	e237      	b.n	8006550 <_dtoa_r+0x908>
 80060e0:	07e2      	lsls	r2, r4, #31
 80060e2:	d505      	bpl.n	80060f0 <_dtoa_r+0x4a8>
 80060e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060e8:	f7fa f9f6 	bl	80004d8 <__aeabi_dmul>
 80060ec:	2301      	movs	r3, #1
 80060ee:	3601      	adds	r6, #1
 80060f0:	1064      	asrs	r4, r4, #1
 80060f2:	3508      	adds	r5, #8
 80060f4:	e773      	b.n	8005fde <_dtoa_r+0x396>
 80060f6:	2602      	movs	r6, #2
 80060f8:	e775      	b.n	8005fe6 <_dtoa_r+0x39e>
 80060fa:	9d03      	ldr	r5, [sp, #12]
 80060fc:	9c07      	ldr	r4, [sp, #28]
 80060fe:	e792      	b.n	8006026 <_dtoa_r+0x3de>
 8006100:	9906      	ldr	r1, [sp, #24]
 8006102:	4b28      	ldr	r3, [pc, #160]	; (80061a4 <_dtoa_r+0x55c>)
 8006104:	4421      	add	r1, r4
 8006106:	9112      	str	r1, [sp, #72]	; 0x48
 8006108:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800610a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800610e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006112:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006116:	2900      	cmp	r1, #0
 8006118:	d052      	beq.n	80061c0 <_dtoa_r+0x578>
 800611a:	2000      	movs	r0, #0
 800611c:	4927      	ldr	r1, [pc, #156]	; (80061bc <_dtoa_r+0x574>)
 800611e:	f7fa fb05 	bl	800072c <__aeabi_ddiv>
 8006122:	4632      	mov	r2, r6
 8006124:	463b      	mov	r3, r7
 8006126:	f7fa f81f 	bl	8000168 <__aeabi_dsub>
 800612a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800612e:	9e06      	ldr	r6, [sp, #24]
 8006130:	4659      	mov	r1, fp
 8006132:	4650      	mov	r0, sl
 8006134:	f7fa fc80 	bl	8000a38 <__aeabi_d2iz>
 8006138:	4604      	mov	r4, r0
 800613a:	f7fa f963 	bl	8000404 <__aeabi_i2d>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4650      	mov	r0, sl
 8006144:	4659      	mov	r1, fp
 8006146:	f7fa f80f 	bl	8000168 <__aeabi_dsub>
 800614a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800614e:	3430      	adds	r4, #48	; 0x30
 8006150:	f806 4b01 	strb.w	r4, [r6], #1
 8006154:	4682      	mov	sl, r0
 8006156:	468b      	mov	fp, r1
 8006158:	f7fa fc30 	bl	80009bc <__aeabi_dcmplt>
 800615c:	2800      	cmp	r0, #0
 800615e:	d170      	bne.n	8006242 <_dtoa_r+0x5fa>
 8006160:	4652      	mov	r2, sl
 8006162:	465b      	mov	r3, fp
 8006164:	2000      	movs	r0, #0
 8006166:	4911      	ldr	r1, [pc, #68]	; (80061ac <_dtoa_r+0x564>)
 8006168:	f7f9 fffe 	bl	8000168 <__aeabi_dsub>
 800616c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006170:	f7fa fc24 	bl	80009bc <__aeabi_dcmplt>
 8006174:	2800      	cmp	r0, #0
 8006176:	f040 80b6 	bne.w	80062e6 <_dtoa_r+0x69e>
 800617a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800617c:	429e      	cmp	r6, r3
 800617e:	f43f af7d 	beq.w	800607c <_dtoa_r+0x434>
 8006182:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006186:	2200      	movs	r2, #0
 8006188:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <_dtoa_r+0x568>)
 800618a:	f7fa f9a5 	bl	80004d8 <__aeabi_dmul>
 800618e:	2200      	movs	r2, #0
 8006190:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006194:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <_dtoa_r+0x568>)
 8006196:	4650      	mov	r0, sl
 8006198:	4659      	mov	r1, fp
 800619a:	f7fa f99d 	bl	80004d8 <__aeabi_dmul>
 800619e:	4682      	mov	sl, r0
 80061a0:	468b      	mov	fp, r1
 80061a2:	e7c5      	b.n	8006130 <_dtoa_r+0x4e8>
 80061a4:	08009438 	.word	0x08009438
 80061a8:	08009410 	.word	0x08009410
 80061ac:	3ff00000 	.word	0x3ff00000
 80061b0:	40240000 	.word	0x40240000
 80061b4:	401c0000 	.word	0x401c0000
 80061b8:	40140000 	.word	0x40140000
 80061bc:	3fe00000 	.word	0x3fe00000
 80061c0:	4630      	mov	r0, r6
 80061c2:	4639      	mov	r1, r7
 80061c4:	f7fa f988 	bl	80004d8 <__aeabi_dmul>
 80061c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061cc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80061ce:	9e06      	ldr	r6, [sp, #24]
 80061d0:	4659      	mov	r1, fp
 80061d2:	4650      	mov	r0, sl
 80061d4:	f7fa fc30 	bl	8000a38 <__aeabi_d2iz>
 80061d8:	4604      	mov	r4, r0
 80061da:	f7fa f913 	bl	8000404 <__aeabi_i2d>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4650      	mov	r0, sl
 80061e4:	4659      	mov	r1, fp
 80061e6:	f7f9 ffbf 	bl	8000168 <__aeabi_dsub>
 80061ea:	3430      	adds	r4, #48	; 0x30
 80061ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061ee:	f806 4b01 	strb.w	r4, [r6], #1
 80061f2:	429e      	cmp	r6, r3
 80061f4:	4682      	mov	sl, r0
 80061f6:	468b      	mov	fp, r1
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	d123      	bne.n	8006246 <_dtoa_r+0x5fe>
 80061fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006202:	4bb2      	ldr	r3, [pc, #712]	; (80064cc <_dtoa_r+0x884>)
 8006204:	f7f9 ffb2 	bl	800016c <__adddf3>
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	4650      	mov	r0, sl
 800620e:	4659      	mov	r1, fp
 8006210:	f7fa fbf2 	bl	80009f8 <__aeabi_dcmpgt>
 8006214:	2800      	cmp	r0, #0
 8006216:	d166      	bne.n	80062e6 <_dtoa_r+0x69e>
 8006218:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800621c:	2000      	movs	r0, #0
 800621e:	49ab      	ldr	r1, [pc, #684]	; (80064cc <_dtoa_r+0x884>)
 8006220:	f7f9 ffa2 	bl	8000168 <__aeabi_dsub>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4650      	mov	r0, sl
 800622a:	4659      	mov	r1, fp
 800622c:	f7fa fbc6 	bl	80009bc <__aeabi_dcmplt>
 8006230:	2800      	cmp	r0, #0
 8006232:	f43f af23 	beq.w	800607c <_dtoa_r+0x434>
 8006236:	463e      	mov	r6, r7
 8006238:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800623c:	3f01      	subs	r7, #1
 800623e:	2b30      	cmp	r3, #48	; 0x30
 8006240:	d0f9      	beq.n	8006236 <_dtoa_r+0x5ee>
 8006242:	9503      	str	r5, [sp, #12]
 8006244:	e03e      	b.n	80062c4 <_dtoa_r+0x67c>
 8006246:	4ba2      	ldr	r3, [pc, #648]	; (80064d0 <_dtoa_r+0x888>)
 8006248:	f7fa f946 	bl	80004d8 <__aeabi_dmul>
 800624c:	4682      	mov	sl, r0
 800624e:	468b      	mov	fp, r1
 8006250:	e7be      	b.n	80061d0 <_dtoa_r+0x588>
 8006252:	4654      	mov	r4, sl
 8006254:	f04f 0a00 	mov.w	sl, #0
 8006258:	465d      	mov	r5, fp
 800625a:	9e06      	ldr	r6, [sp, #24]
 800625c:	f8df b270 	ldr.w	fp, [pc, #624]	; 80064d0 <_dtoa_r+0x888>
 8006260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006264:	4620      	mov	r0, r4
 8006266:	4629      	mov	r1, r5
 8006268:	f7fa fa60 	bl	800072c <__aeabi_ddiv>
 800626c:	f7fa fbe4 	bl	8000a38 <__aeabi_d2iz>
 8006270:	4607      	mov	r7, r0
 8006272:	f7fa f8c7 	bl	8000404 <__aeabi_i2d>
 8006276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800627a:	f7fa f92d 	bl	80004d8 <__aeabi_dmul>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4620      	mov	r0, r4
 8006284:	4629      	mov	r1, r5
 8006286:	f7f9 ff6f 	bl	8000168 <__aeabi_dsub>
 800628a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800628e:	f806 4b01 	strb.w	r4, [r6], #1
 8006292:	9c06      	ldr	r4, [sp, #24]
 8006294:	9d07      	ldr	r5, [sp, #28]
 8006296:	1b34      	subs	r4, r6, r4
 8006298:	42a5      	cmp	r5, r4
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	d133      	bne.n	8006308 <_dtoa_r+0x6c0>
 80062a0:	f7f9 ff64 	bl	800016c <__adddf3>
 80062a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062a8:	4604      	mov	r4, r0
 80062aa:	460d      	mov	r5, r1
 80062ac:	f7fa fba4 	bl	80009f8 <__aeabi_dcmpgt>
 80062b0:	b9c0      	cbnz	r0, 80062e4 <_dtoa_r+0x69c>
 80062b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062b6:	4620      	mov	r0, r4
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7fa fb75 	bl	80009a8 <__aeabi_dcmpeq>
 80062be:	b108      	cbz	r0, 80062c4 <_dtoa_r+0x67c>
 80062c0:	07fb      	lsls	r3, r7, #31
 80062c2:	d40f      	bmi.n	80062e4 <_dtoa_r+0x69c>
 80062c4:	4648      	mov	r0, r9
 80062c6:	4641      	mov	r1, r8
 80062c8:	f001 f93f 	bl	800754a <_Bfree>
 80062cc:	2300      	movs	r3, #0
 80062ce:	9803      	ldr	r0, [sp, #12]
 80062d0:	7033      	strb	r3, [r6, #0]
 80062d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062d4:	3001      	adds	r0, #1
 80062d6:	6018      	str	r0, [r3, #0]
 80062d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f43f acea 	beq.w	8005cb4 <_dtoa_r+0x6c>
 80062e0:	601e      	str	r6, [r3, #0]
 80062e2:	e4e7      	b.n	8005cb4 <_dtoa_r+0x6c>
 80062e4:	9d03      	ldr	r5, [sp, #12]
 80062e6:	4633      	mov	r3, r6
 80062e8:	461e      	mov	r6, r3
 80062ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062ee:	2a39      	cmp	r2, #57	; 0x39
 80062f0:	d106      	bne.n	8006300 <_dtoa_r+0x6b8>
 80062f2:	9a06      	ldr	r2, [sp, #24]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d1f7      	bne.n	80062e8 <_dtoa_r+0x6a0>
 80062f8:	2230      	movs	r2, #48	; 0x30
 80062fa:	9906      	ldr	r1, [sp, #24]
 80062fc:	3501      	adds	r5, #1
 80062fe:	700a      	strb	r2, [r1, #0]
 8006300:	781a      	ldrb	r2, [r3, #0]
 8006302:	3201      	adds	r2, #1
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	e79c      	b.n	8006242 <_dtoa_r+0x5fa>
 8006308:	4652      	mov	r2, sl
 800630a:	465b      	mov	r3, fp
 800630c:	f7fa f8e4 	bl	80004d8 <__aeabi_dmul>
 8006310:	2200      	movs	r2, #0
 8006312:	2300      	movs	r3, #0
 8006314:	4604      	mov	r4, r0
 8006316:	460d      	mov	r5, r1
 8006318:	f7fa fb46 	bl	80009a8 <__aeabi_dcmpeq>
 800631c:	2800      	cmp	r0, #0
 800631e:	d09f      	beq.n	8006260 <_dtoa_r+0x618>
 8006320:	e7d0      	b.n	80062c4 <_dtoa_r+0x67c>
 8006322:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006324:	2a00      	cmp	r2, #0
 8006326:	f000 80cb 	beq.w	80064c0 <_dtoa_r+0x878>
 800632a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800632c:	2a01      	cmp	r2, #1
 800632e:	f300 80ae 	bgt.w	800648e <_dtoa_r+0x846>
 8006332:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006334:	2a00      	cmp	r2, #0
 8006336:	f000 80a6 	beq.w	8006486 <_dtoa_r+0x83e>
 800633a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800633e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006340:	9e08      	ldr	r6, [sp, #32]
 8006342:	9a08      	ldr	r2, [sp, #32]
 8006344:	2101      	movs	r1, #1
 8006346:	441a      	add	r2, r3
 8006348:	9208      	str	r2, [sp, #32]
 800634a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800634c:	4648      	mov	r0, r9
 800634e:	441a      	add	r2, r3
 8006350:	9209      	str	r2, [sp, #36]	; 0x24
 8006352:	f001 f99b 	bl	800768c <__i2b>
 8006356:	4605      	mov	r5, r0
 8006358:	2e00      	cmp	r6, #0
 800635a:	dd0c      	ble.n	8006376 <_dtoa_r+0x72e>
 800635c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800635e:	2b00      	cmp	r3, #0
 8006360:	dd09      	ble.n	8006376 <_dtoa_r+0x72e>
 8006362:	42b3      	cmp	r3, r6
 8006364:	bfa8      	it	ge
 8006366:	4633      	movge	r3, r6
 8006368:	9a08      	ldr	r2, [sp, #32]
 800636a:	1af6      	subs	r6, r6, r3
 800636c:	1ad2      	subs	r2, r2, r3
 800636e:	9208      	str	r2, [sp, #32]
 8006370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	9309      	str	r3, [sp, #36]	; 0x24
 8006376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006378:	b1f3      	cbz	r3, 80063b8 <_dtoa_r+0x770>
 800637a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 80a3 	beq.w	80064c8 <_dtoa_r+0x880>
 8006382:	2c00      	cmp	r4, #0
 8006384:	dd10      	ble.n	80063a8 <_dtoa_r+0x760>
 8006386:	4629      	mov	r1, r5
 8006388:	4622      	mov	r2, r4
 800638a:	4648      	mov	r0, r9
 800638c:	f001 fa38 	bl	8007800 <__pow5mult>
 8006390:	4642      	mov	r2, r8
 8006392:	4601      	mov	r1, r0
 8006394:	4605      	mov	r5, r0
 8006396:	4648      	mov	r0, r9
 8006398:	f001 f98e 	bl	80076b8 <__multiply>
 800639c:	4607      	mov	r7, r0
 800639e:	4641      	mov	r1, r8
 80063a0:	4648      	mov	r0, r9
 80063a2:	f001 f8d2 	bl	800754a <_Bfree>
 80063a6:	46b8      	mov	r8, r7
 80063a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063aa:	1b1a      	subs	r2, r3, r4
 80063ac:	d004      	beq.n	80063b8 <_dtoa_r+0x770>
 80063ae:	4641      	mov	r1, r8
 80063b0:	4648      	mov	r0, r9
 80063b2:	f001 fa25 	bl	8007800 <__pow5mult>
 80063b6:	4680      	mov	r8, r0
 80063b8:	2101      	movs	r1, #1
 80063ba:	4648      	mov	r0, r9
 80063bc:	f001 f966 	bl	800768c <__i2b>
 80063c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063c2:	4604      	mov	r4, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f340 8085 	ble.w	80064d4 <_dtoa_r+0x88c>
 80063ca:	461a      	mov	r2, r3
 80063cc:	4601      	mov	r1, r0
 80063ce:	4648      	mov	r0, r9
 80063d0:	f001 fa16 	bl	8007800 <__pow5mult>
 80063d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80063d6:	4604      	mov	r4, r0
 80063d8:	2b01      	cmp	r3, #1
 80063da:	dd7e      	ble.n	80064da <_dtoa_r+0x892>
 80063dc:	2700      	movs	r7, #0
 80063de:	6923      	ldr	r3, [r4, #16]
 80063e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063e4:	6918      	ldr	r0, [r3, #16]
 80063e6:	f001 f903 	bl	80075f0 <__hi0bits>
 80063ea:	f1c0 0020 	rsb	r0, r0, #32
 80063ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f0:	4418      	add	r0, r3
 80063f2:	f010 001f 	ands.w	r0, r0, #31
 80063f6:	f000 808e 	beq.w	8006516 <_dtoa_r+0x8ce>
 80063fa:	f1c0 0320 	rsb	r3, r0, #32
 80063fe:	2b04      	cmp	r3, #4
 8006400:	f340 8087 	ble.w	8006512 <_dtoa_r+0x8ca>
 8006404:	f1c0 001c 	rsb	r0, r0, #28
 8006408:	9b08      	ldr	r3, [sp, #32]
 800640a:	4406      	add	r6, r0
 800640c:	4403      	add	r3, r0
 800640e:	9308      	str	r3, [sp, #32]
 8006410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006412:	4403      	add	r3, r0
 8006414:	9309      	str	r3, [sp, #36]	; 0x24
 8006416:	9b08      	ldr	r3, [sp, #32]
 8006418:	2b00      	cmp	r3, #0
 800641a:	dd05      	ble.n	8006428 <_dtoa_r+0x7e0>
 800641c:	4641      	mov	r1, r8
 800641e:	461a      	mov	r2, r3
 8006420:	4648      	mov	r0, r9
 8006422:	f001 fa2d 	bl	8007880 <__lshift>
 8006426:	4680      	mov	r8, r0
 8006428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800642a:	2b00      	cmp	r3, #0
 800642c:	dd05      	ble.n	800643a <_dtoa_r+0x7f2>
 800642e:	4621      	mov	r1, r4
 8006430:	461a      	mov	r2, r3
 8006432:	4648      	mov	r0, r9
 8006434:	f001 fa24 	bl	8007880 <__lshift>
 8006438:	4604      	mov	r4, r0
 800643a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d06c      	beq.n	800651a <_dtoa_r+0x8d2>
 8006440:	4621      	mov	r1, r4
 8006442:	4640      	mov	r0, r8
 8006444:	f001 fa88 	bl	8007958 <__mcmp>
 8006448:	2800      	cmp	r0, #0
 800644a:	da66      	bge.n	800651a <_dtoa_r+0x8d2>
 800644c:	9b03      	ldr	r3, [sp, #12]
 800644e:	4641      	mov	r1, r8
 8006450:	3b01      	subs	r3, #1
 8006452:	9303      	str	r3, [sp, #12]
 8006454:	220a      	movs	r2, #10
 8006456:	2300      	movs	r3, #0
 8006458:	4648      	mov	r0, r9
 800645a:	f001 f87f 	bl	800755c <__multadd>
 800645e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006460:	4680      	mov	r8, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 819f 	beq.w	80067a6 <_dtoa_r+0xb5e>
 8006468:	2300      	movs	r3, #0
 800646a:	4629      	mov	r1, r5
 800646c:	220a      	movs	r2, #10
 800646e:	4648      	mov	r0, r9
 8006470:	f001 f874 	bl	800755c <__multadd>
 8006474:	9b04      	ldr	r3, [sp, #16]
 8006476:	4605      	mov	r5, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	f300 8089 	bgt.w	8006590 <_dtoa_r+0x948>
 800647e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006480:	2b02      	cmp	r3, #2
 8006482:	dc52      	bgt.n	800652a <_dtoa_r+0x8e2>
 8006484:	e084      	b.n	8006590 <_dtoa_r+0x948>
 8006486:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006488:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800648c:	e757      	b.n	800633e <_dtoa_r+0x6f6>
 800648e:	9b07      	ldr	r3, [sp, #28]
 8006490:	1e5c      	subs	r4, r3, #1
 8006492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006494:	42a3      	cmp	r3, r4
 8006496:	bfb7      	itett	lt
 8006498:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800649a:	1b1c      	subge	r4, r3, r4
 800649c:	1ae2      	sublt	r2, r4, r3
 800649e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80064a0:	bfbe      	ittt	lt
 80064a2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80064a4:	189b      	addlt	r3, r3, r2
 80064a6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80064a8:	9b07      	ldr	r3, [sp, #28]
 80064aa:	bfb8      	it	lt
 80064ac:	2400      	movlt	r4, #0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	bfb7      	itett	lt
 80064b2:	e9dd 2307 	ldrdlt	r2, r3, [sp, #28]
 80064b6:	e9dd 3607 	ldrdge	r3, r6, [sp, #28]
 80064ba:	1a9e      	sublt	r6, r3, r2
 80064bc:	2300      	movlt	r3, #0
 80064be:	e740      	b.n	8006342 <_dtoa_r+0x6fa>
 80064c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80064c2:	9e08      	ldr	r6, [sp, #32]
 80064c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80064c6:	e747      	b.n	8006358 <_dtoa_r+0x710>
 80064c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ca:	e770      	b.n	80063ae <_dtoa_r+0x766>
 80064cc:	3fe00000 	.word	0x3fe00000
 80064d0:	40240000 	.word	0x40240000
 80064d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	dc17      	bgt.n	800650a <_dtoa_r+0x8c2>
 80064da:	f1ba 0f00 	cmp.w	sl, #0
 80064de:	d114      	bne.n	800650a <_dtoa_r+0x8c2>
 80064e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064e4:	b99b      	cbnz	r3, 800650e <_dtoa_r+0x8c6>
 80064e6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80064ea:	0d3f      	lsrs	r7, r7, #20
 80064ec:	053f      	lsls	r7, r7, #20
 80064ee:	b137      	cbz	r7, 80064fe <_dtoa_r+0x8b6>
 80064f0:	2701      	movs	r7, #1
 80064f2:	9b08      	ldr	r3, [sp, #32]
 80064f4:	3301      	adds	r3, #1
 80064f6:	9308      	str	r3, [sp, #32]
 80064f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fa:	3301      	adds	r3, #1
 80064fc:	9309      	str	r3, [sp, #36]	; 0x24
 80064fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006500:	2b00      	cmp	r3, #0
 8006502:	f47f af6c 	bne.w	80063de <_dtoa_r+0x796>
 8006506:	2001      	movs	r0, #1
 8006508:	e771      	b.n	80063ee <_dtoa_r+0x7a6>
 800650a:	2700      	movs	r7, #0
 800650c:	e7f7      	b.n	80064fe <_dtoa_r+0x8b6>
 800650e:	4657      	mov	r7, sl
 8006510:	e7f5      	b.n	80064fe <_dtoa_r+0x8b6>
 8006512:	d080      	beq.n	8006416 <_dtoa_r+0x7ce>
 8006514:	4618      	mov	r0, r3
 8006516:	301c      	adds	r0, #28
 8006518:	e776      	b.n	8006408 <_dtoa_r+0x7c0>
 800651a:	9b07      	ldr	r3, [sp, #28]
 800651c:	2b00      	cmp	r3, #0
 800651e:	dc31      	bgt.n	8006584 <_dtoa_r+0x93c>
 8006520:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006522:	2b02      	cmp	r3, #2
 8006524:	dd2e      	ble.n	8006584 <_dtoa_r+0x93c>
 8006526:	9b07      	ldr	r3, [sp, #28]
 8006528:	9304      	str	r3, [sp, #16]
 800652a:	9b04      	ldr	r3, [sp, #16]
 800652c:	b963      	cbnz	r3, 8006548 <_dtoa_r+0x900>
 800652e:	4621      	mov	r1, r4
 8006530:	2205      	movs	r2, #5
 8006532:	4648      	mov	r0, r9
 8006534:	f001 f812 	bl	800755c <__multadd>
 8006538:	4601      	mov	r1, r0
 800653a:	4604      	mov	r4, r0
 800653c:	4640      	mov	r0, r8
 800653e:	f001 fa0b 	bl	8007958 <__mcmp>
 8006542:	2800      	cmp	r0, #0
 8006544:	f73f adc4 	bgt.w	80060d0 <_dtoa_r+0x488>
 8006548:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800654a:	9e06      	ldr	r6, [sp, #24]
 800654c:	43db      	mvns	r3, r3
 800654e:	9303      	str	r3, [sp, #12]
 8006550:	2700      	movs	r7, #0
 8006552:	4621      	mov	r1, r4
 8006554:	4648      	mov	r0, r9
 8006556:	f000 fff8 	bl	800754a <_Bfree>
 800655a:	2d00      	cmp	r5, #0
 800655c:	f43f aeb2 	beq.w	80062c4 <_dtoa_r+0x67c>
 8006560:	b12f      	cbz	r7, 800656e <_dtoa_r+0x926>
 8006562:	42af      	cmp	r7, r5
 8006564:	d003      	beq.n	800656e <_dtoa_r+0x926>
 8006566:	4639      	mov	r1, r7
 8006568:	4648      	mov	r0, r9
 800656a:	f000 ffee 	bl	800754a <_Bfree>
 800656e:	4629      	mov	r1, r5
 8006570:	4648      	mov	r0, r9
 8006572:	f000 ffea 	bl	800754a <_Bfree>
 8006576:	e6a5      	b.n	80062c4 <_dtoa_r+0x67c>
 8006578:	2400      	movs	r4, #0
 800657a:	4625      	mov	r5, r4
 800657c:	e7e4      	b.n	8006548 <_dtoa_r+0x900>
 800657e:	9503      	str	r5, [sp, #12]
 8006580:	4625      	mov	r5, r4
 8006582:	e5a5      	b.n	80060d0 <_dtoa_r+0x488>
 8006584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 80c4 	beq.w	8006714 <_dtoa_r+0xacc>
 800658c:	9b07      	ldr	r3, [sp, #28]
 800658e:	9304      	str	r3, [sp, #16]
 8006590:	2e00      	cmp	r6, #0
 8006592:	dd05      	ble.n	80065a0 <_dtoa_r+0x958>
 8006594:	4629      	mov	r1, r5
 8006596:	4632      	mov	r2, r6
 8006598:	4648      	mov	r0, r9
 800659a:	f001 f971 	bl	8007880 <__lshift>
 800659e:	4605      	mov	r5, r0
 80065a0:	2f00      	cmp	r7, #0
 80065a2:	d058      	beq.n	8006656 <_dtoa_r+0xa0e>
 80065a4:	4648      	mov	r0, r9
 80065a6:	6869      	ldr	r1, [r5, #4]
 80065a8:	f000 ffaa 	bl	8007500 <_Balloc>
 80065ac:	4606      	mov	r6, r0
 80065ae:	b920      	cbnz	r0, 80065ba <_dtoa_r+0x972>
 80065b0:	4602      	mov	r2, r0
 80065b2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80065b6:	4b80      	ldr	r3, [pc, #512]	; (80067b8 <_dtoa_r+0xb70>)
 80065b8:	e47f      	b.n	8005eba <_dtoa_r+0x272>
 80065ba:	692a      	ldr	r2, [r5, #16]
 80065bc:	f105 010c 	add.w	r1, r5, #12
 80065c0:	3202      	adds	r2, #2
 80065c2:	0092      	lsls	r2, r2, #2
 80065c4:	300c      	adds	r0, #12
 80065c6:	f7fc fd7d 	bl	80030c4 <memcpy>
 80065ca:	2201      	movs	r2, #1
 80065cc:	4631      	mov	r1, r6
 80065ce:	4648      	mov	r0, r9
 80065d0:	f001 f956 	bl	8007880 <__lshift>
 80065d4:	462f      	mov	r7, r5
 80065d6:	4605      	mov	r5, r0
 80065d8:	9b06      	ldr	r3, [sp, #24]
 80065da:	9a06      	ldr	r2, [sp, #24]
 80065dc:	3301      	adds	r3, #1
 80065de:	9307      	str	r3, [sp, #28]
 80065e0:	9b04      	ldr	r3, [sp, #16]
 80065e2:	4413      	add	r3, r2
 80065e4:	930a      	str	r3, [sp, #40]	; 0x28
 80065e6:	f00a 0301 	and.w	r3, sl, #1
 80065ea:	9309      	str	r3, [sp, #36]	; 0x24
 80065ec:	9b07      	ldr	r3, [sp, #28]
 80065ee:	4621      	mov	r1, r4
 80065f0:	4640      	mov	r0, r8
 80065f2:	f103 3bff 	add.w	fp, r3, #4294967295
 80065f6:	f7ff fa99 	bl	8005b2c <quorem>
 80065fa:	4639      	mov	r1, r7
 80065fc:	9004      	str	r0, [sp, #16]
 80065fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006602:	4640      	mov	r0, r8
 8006604:	f001 f9a8 	bl	8007958 <__mcmp>
 8006608:	462a      	mov	r2, r5
 800660a:	9008      	str	r0, [sp, #32]
 800660c:	4621      	mov	r1, r4
 800660e:	4648      	mov	r0, r9
 8006610:	f001 f9be 	bl	8007990 <__mdiff>
 8006614:	68c2      	ldr	r2, [r0, #12]
 8006616:	4606      	mov	r6, r0
 8006618:	b9fa      	cbnz	r2, 800665a <_dtoa_r+0xa12>
 800661a:	4601      	mov	r1, r0
 800661c:	4640      	mov	r0, r8
 800661e:	f001 f99b 	bl	8007958 <__mcmp>
 8006622:	4602      	mov	r2, r0
 8006624:	4631      	mov	r1, r6
 8006626:	4648      	mov	r0, r9
 8006628:	920b      	str	r2, [sp, #44]	; 0x2c
 800662a:	f000 ff8e 	bl	800754a <_Bfree>
 800662e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006630:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006632:	9e07      	ldr	r6, [sp, #28]
 8006634:	ea43 0102 	orr.w	r1, r3, r2
 8006638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800663a:	430b      	orrs	r3, r1
 800663c:	d10f      	bne.n	800665e <_dtoa_r+0xa16>
 800663e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006642:	d028      	beq.n	8006696 <_dtoa_r+0xa4e>
 8006644:	9b08      	ldr	r3, [sp, #32]
 8006646:	2b00      	cmp	r3, #0
 8006648:	dd02      	ble.n	8006650 <_dtoa_r+0xa08>
 800664a:	9b04      	ldr	r3, [sp, #16]
 800664c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006650:	f88b a000 	strb.w	sl, [fp]
 8006654:	e77d      	b.n	8006552 <_dtoa_r+0x90a>
 8006656:	4628      	mov	r0, r5
 8006658:	e7bc      	b.n	80065d4 <_dtoa_r+0x98c>
 800665a:	2201      	movs	r2, #1
 800665c:	e7e2      	b.n	8006624 <_dtoa_r+0x9dc>
 800665e:	9b08      	ldr	r3, [sp, #32]
 8006660:	2b00      	cmp	r3, #0
 8006662:	db04      	blt.n	800666e <_dtoa_r+0xa26>
 8006664:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006666:	430b      	orrs	r3, r1
 8006668:	9909      	ldr	r1, [sp, #36]	; 0x24
 800666a:	430b      	orrs	r3, r1
 800666c:	d120      	bne.n	80066b0 <_dtoa_r+0xa68>
 800666e:	2a00      	cmp	r2, #0
 8006670:	ddee      	ble.n	8006650 <_dtoa_r+0xa08>
 8006672:	4641      	mov	r1, r8
 8006674:	2201      	movs	r2, #1
 8006676:	4648      	mov	r0, r9
 8006678:	f001 f902 	bl	8007880 <__lshift>
 800667c:	4621      	mov	r1, r4
 800667e:	4680      	mov	r8, r0
 8006680:	f001 f96a 	bl	8007958 <__mcmp>
 8006684:	2800      	cmp	r0, #0
 8006686:	dc03      	bgt.n	8006690 <_dtoa_r+0xa48>
 8006688:	d1e2      	bne.n	8006650 <_dtoa_r+0xa08>
 800668a:	f01a 0f01 	tst.w	sl, #1
 800668e:	d0df      	beq.n	8006650 <_dtoa_r+0xa08>
 8006690:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006694:	d1d9      	bne.n	800664a <_dtoa_r+0xa02>
 8006696:	2339      	movs	r3, #57	; 0x39
 8006698:	f88b 3000 	strb.w	r3, [fp]
 800669c:	4633      	mov	r3, r6
 800669e:	461e      	mov	r6, r3
 80066a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	2a39      	cmp	r2, #57	; 0x39
 80066a8:	d06a      	beq.n	8006780 <_dtoa_r+0xb38>
 80066aa:	3201      	adds	r2, #1
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e750      	b.n	8006552 <_dtoa_r+0x90a>
 80066b0:	2a00      	cmp	r2, #0
 80066b2:	dd07      	ble.n	80066c4 <_dtoa_r+0xa7c>
 80066b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80066b8:	d0ed      	beq.n	8006696 <_dtoa_r+0xa4e>
 80066ba:	f10a 0301 	add.w	r3, sl, #1
 80066be:	f88b 3000 	strb.w	r3, [fp]
 80066c2:	e746      	b.n	8006552 <_dtoa_r+0x90a>
 80066c4:	9b07      	ldr	r3, [sp, #28]
 80066c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066c8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d041      	beq.n	8006754 <_dtoa_r+0xb0c>
 80066d0:	4641      	mov	r1, r8
 80066d2:	2300      	movs	r3, #0
 80066d4:	220a      	movs	r2, #10
 80066d6:	4648      	mov	r0, r9
 80066d8:	f000 ff40 	bl	800755c <__multadd>
 80066dc:	42af      	cmp	r7, r5
 80066de:	4680      	mov	r8, r0
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	f04f 020a 	mov.w	r2, #10
 80066e8:	4639      	mov	r1, r7
 80066ea:	4648      	mov	r0, r9
 80066ec:	d107      	bne.n	80066fe <_dtoa_r+0xab6>
 80066ee:	f000 ff35 	bl	800755c <__multadd>
 80066f2:	4607      	mov	r7, r0
 80066f4:	4605      	mov	r5, r0
 80066f6:	9b07      	ldr	r3, [sp, #28]
 80066f8:	3301      	adds	r3, #1
 80066fa:	9307      	str	r3, [sp, #28]
 80066fc:	e776      	b.n	80065ec <_dtoa_r+0x9a4>
 80066fe:	f000 ff2d 	bl	800755c <__multadd>
 8006702:	4629      	mov	r1, r5
 8006704:	4607      	mov	r7, r0
 8006706:	2300      	movs	r3, #0
 8006708:	220a      	movs	r2, #10
 800670a:	4648      	mov	r0, r9
 800670c:	f000 ff26 	bl	800755c <__multadd>
 8006710:	4605      	mov	r5, r0
 8006712:	e7f0      	b.n	80066f6 <_dtoa_r+0xaae>
 8006714:	9b07      	ldr	r3, [sp, #28]
 8006716:	9304      	str	r3, [sp, #16]
 8006718:	9e06      	ldr	r6, [sp, #24]
 800671a:	4621      	mov	r1, r4
 800671c:	4640      	mov	r0, r8
 800671e:	f7ff fa05 	bl	8005b2c <quorem>
 8006722:	9b06      	ldr	r3, [sp, #24]
 8006724:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006728:	f806 ab01 	strb.w	sl, [r6], #1
 800672c:	1af2      	subs	r2, r6, r3
 800672e:	9b04      	ldr	r3, [sp, #16]
 8006730:	4293      	cmp	r3, r2
 8006732:	dd07      	ble.n	8006744 <_dtoa_r+0xafc>
 8006734:	4641      	mov	r1, r8
 8006736:	2300      	movs	r3, #0
 8006738:	220a      	movs	r2, #10
 800673a:	4648      	mov	r0, r9
 800673c:	f000 ff0e 	bl	800755c <__multadd>
 8006740:	4680      	mov	r8, r0
 8006742:	e7ea      	b.n	800671a <_dtoa_r+0xad2>
 8006744:	9b04      	ldr	r3, [sp, #16]
 8006746:	2700      	movs	r7, #0
 8006748:	2b00      	cmp	r3, #0
 800674a:	bfcc      	ite	gt
 800674c:	461e      	movgt	r6, r3
 800674e:	2601      	movle	r6, #1
 8006750:	9b06      	ldr	r3, [sp, #24]
 8006752:	441e      	add	r6, r3
 8006754:	4641      	mov	r1, r8
 8006756:	2201      	movs	r2, #1
 8006758:	4648      	mov	r0, r9
 800675a:	f001 f891 	bl	8007880 <__lshift>
 800675e:	4621      	mov	r1, r4
 8006760:	4680      	mov	r8, r0
 8006762:	f001 f8f9 	bl	8007958 <__mcmp>
 8006766:	2800      	cmp	r0, #0
 8006768:	dc98      	bgt.n	800669c <_dtoa_r+0xa54>
 800676a:	d102      	bne.n	8006772 <_dtoa_r+0xb2a>
 800676c:	f01a 0f01 	tst.w	sl, #1
 8006770:	d194      	bne.n	800669c <_dtoa_r+0xa54>
 8006772:	4633      	mov	r3, r6
 8006774:	461e      	mov	r6, r3
 8006776:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800677a:	2a30      	cmp	r2, #48	; 0x30
 800677c:	d0fa      	beq.n	8006774 <_dtoa_r+0xb2c>
 800677e:	e6e8      	b.n	8006552 <_dtoa_r+0x90a>
 8006780:	9a06      	ldr	r2, [sp, #24]
 8006782:	429a      	cmp	r2, r3
 8006784:	d18b      	bne.n	800669e <_dtoa_r+0xa56>
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	3301      	adds	r3, #1
 800678a:	9303      	str	r3, [sp, #12]
 800678c:	2331      	movs	r3, #49	; 0x31
 800678e:	7013      	strb	r3, [r2, #0]
 8006790:	e6df      	b.n	8006552 <_dtoa_r+0x90a>
 8006792:	4b0a      	ldr	r3, [pc, #40]	; (80067bc <_dtoa_r+0xb74>)
 8006794:	f7ff baaa 	b.w	8005cec <_dtoa_r+0xa4>
 8006798:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800679a:	2b00      	cmp	r3, #0
 800679c:	f47f aa8e 	bne.w	8005cbc <_dtoa_r+0x74>
 80067a0:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <_dtoa_r+0xb78>)
 80067a2:	f7ff baa3 	b.w	8005cec <_dtoa_r+0xa4>
 80067a6:	9b04      	ldr	r3, [sp, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	dcb5      	bgt.n	8006718 <_dtoa_r+0xad0>
 80067ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	f73f aebb 	bgt.w	800652a <_dtoa_r+0x8e2>
 80067b4:	e7b0      	b.n	8006718 <_dtoa_r+0xad0>
 80067b6:	bf00      	nop
 80067b8:	0800933d 	.word	0x0800933d
 80067bc:	080092ee 	.word	0x080092ee
 80067c0:	08009334 	.word	0x08009334

080067c4 <__sflush_r>:
 80067c4:	898b      	ldrh	r3, [r1, #12]
 80067c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ca:	4605      	mov	r5, r0
 80067cc:	0718      	lsls	r0, r3, #28
 80067ce:	460c      	mov	r4, r1
 80067d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067d4:	d45f      	bmi.n	8006896 <__sflush_r+0xd2>
 80067d6:	684b      	ldr	r3, [r1, #4]
 80067d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067dc:	2b00      	cmp	r3, #0
 80067de:	818a      	strh	r2, [r1, #12]
 80067e0:	dc05      	bgt.n	80067ee <__sflush_r+0x2a>
 80067e2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	dc02      	bgt.n	80067ee <__sflush_r+0x2a>
 80067e8:	2000      	movs	r0, #0
 80067ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067f0:	2e00      	cmp	r6, #0
 80067f2:	d0f9      	beq.n	80067e8 <__sflush_r+0x24>
 80067f4:	2300      	movs	r3, #0
 80067f6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067fa:	682f      	ldr	r7, [r5, #0]
 80067fc:	602b      	str	r3, [r5, #0]
 80067fe:	d036      	beq.n	800686e <__sflush_r+0xaa>
 8006800:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	075a      	lsls	r2, r3, #29
 8006806:	d505      	bpl.n	8006814 <__sflush_r+0x50>
 8006808:	6863      	ldr	r3, [r4, #4]
 800680a:	1ac0      	subs	r0, r0, r3
 800680c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800680e:	b10b      	cbz	r3, 8006814 <__sflush_r+0x50>
 8006810:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006812:	1ac0      	subs	r0, r0, r3
 8006814:	2300      	movs	r3, #0
 8006816:	4602      	mov	r2, r0
 8006818:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800681a:	4628      	mov	r0, r5
 800681c:	69e1      	ldr	r1, [r4, #28]
 800681e:	47b0      	blx	r6
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	89a3      	ldrh	r3, [r4, #12]
 8006824:	d106      	bne.n	8006834 <__sflush_r+0x70>
 8006826:	6829      	ldr	r1, [r5, #0]
 8006828:	291d      	cmp	r1, #29
 800682a:	d830      	bhi.n	800688e <__sflush_r+0xca>
 800682c:	4a2b      	ldr	r2, [pc, #172]	; (80068dc <__sflush_r+0x118>)
 800682e:	40ca      	lsrs	r2, r1
 8006830:	07d6      	lsls	r6, r2, #31
 8006832:	d52c      	bpl.n	800688e <__sflush_r+0xca>
 8006834:	2200      	movs	r2, #0
 8006836:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800683a:	b21b      	sxth	r3, r3
 800683c:	6062      	str	r2, [r4, #4]
 800683e:	6922      	ldr	r2, [r4, #16]
 8006840:	04d9      	lsls	r1, r3, #19
 8006842:	81a3      	strh	r3, [r4, #12]
 8006844:	6022      	str	r2, [r4, #0]
 8006846:	d504      	bpl.n	8006852 <__sflush_r+0x8e>
 8006848:	1c42      	adds	r2, r0, #1
 800684a:	d101      	bne.n	8006850 <__sflush_r+0x8c>
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	b903      	cbnz	r3, 8006852 <__sflush_r+0x8e>
 8006850:	6520      	str	r0, [r4, #80]	; 0x50
 8006852:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006854:	602f      	str	r7, [r5, #0]
 8006856:	2900      	cmp	r1, #0
 8006858:	d0c6      	beq.n	80067e8 <__sflush_r+0x24>
 800685a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800685e:	4299      	cmp	r1, r3
 8006860:	d002      	beq.n	8006868 <__sflush_r+0xa4>
 8006862:	4628      	mov	r0, r5
 8006864:	f000 f938 	bl	8006ad8 <_free_r>
 8006868:	2000      	movs	r0, #0
 800686a:	6320      	str	r0, [r4, #48]	; 0x30
 800686c:	e7bd      	b.n	80067ea <__sflush_r+0x26>
 800686e:	69e1      	ldr	r1, [r4, #28]
 8006870:	2301      	movs	r3, #1
 8006872:	4628      	mov	r0, r5
 8006874:	47b0      	blx	r6
 8006876:	1c41      	adds	r1, r0, #1
 8006878:	d1c3      	bne.n	8006802 <__sflush_r+0x3e>
 800687a:	682b      	ldr	r3, [r5, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d0c0      	beq.n	8006802 <__sflush_r+0x3e>
 8006880:	2b1d      	cmp	r3, #29
 8006882:	d001      	beq.n	8006888 <__sflush_r+0xc4>
 8006884:	2b16      	cmp	r3, #22
 8006886:	d101      	bne.n	800688c <__sflush_r+0xc8>
 8006888:	602f      	str	r7, [r5, #0]
 800688a:	e7ad      	b.n	80067e8 <__sflush_r+0x24>
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006892:	81a3      	strh	r3, [r4, #12]
 8006894:	e7a9      	b.n	80067ea <__sflush_r+0x26>
 8006896:	690f      	ldr	r7, [r1, #16]
 8006898:	2f00      	cmp	r7, #0
 800689a:	d0a5      	beq.n	80067e8 <__sflush_r+0x24>
 800689c:	079b      	lsls	r3, r3, #30
 800689e:	bf18      	it	ne
 80068a0:	2300      	movne	r3, #0
 80068a2:	680e      	ldr	r6, [r1, #0]
 80068a4:	bf08      	it	eq
 80068a6:	694b      	ldreq	r3, [r1, #20]
 80068a8:	eba6 0807 	sub.w	r8, r6, r7
 80068ac:	600f      	str	r7, [r1, #0]
 80068ae:	608b      	str	r3, [r1, #8]
 80068b0:	f1b8 0f00 	cmp.w	r8, #0
 80068b4:	dd98      	ble.n	80067e8 <__sflush_r+0x24>
 80068b6:	4643      	mov	r3, r8
 80068b8:	463a      	mov	r2, r7
 80068ba:	4628      	mov	r0, r5
 80068bc:	69e1      	ldr	r1, [r4, #28]
 80068be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80068c0:	47b0      	blx	r6
 80068c2:	2800      	cmp	r0, #0
 80068c4:	dc06      	bgt.n	80068d4 <__sflush_r+0x110>
 80068c6:	89a3      	ldrh	r3, [r4, #12]
 80068c8:	f04f 30ff 	mov.w	r0, #4294967295
 80068cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068d0:	81a3      	strh	r3, [r4, #12]
 80068d2:	e78a      	b.n	80067ea <__sflush_r+0x26>
 80068d4:	4407      	add	r7, r0
 80068d6:	eba8 0800 	sub.w	r8, r8, r0
 80068da:	e7e9      	b.n	80068b0 <__sflush_r+0xec>
 80068dc:	20400001 	.word	0x20400001

080068e0 <_fflush_r>:
 80068e0:	b538      	push	{r3, r4, r5, lr}
 80068e2:	460c      	mov	r4, r1
 80068e4:	4605      	mov	r5, r0
 80068e6:	b118      	cbz	r0, 80068f0 <_fflush_r+0x10>
 80068e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80068ea:	b90b      	cbnz	r3, 80068f0 <_fflush_r+0x10>
 80068ec:	f000 f864 	bl	80069b8 <__sinit>
 80068f0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80068f4:	b1b8      	cbz	r0, 8006926 <_fflush_r+0x46>
 80068f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068f8:	07db      	lsls	r3, r3, #31
 80068fa:	d404      	bmi.n	8006906 <_fflush_r+0x26>
 80068fc:	0581      	lsls	r1, r0, #22
 80068fe:	d402      	bmi.n	8006906 <_fflush_r+0x26>
 8006900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006902:	f000 fb19 	bl	8006f38 <__retarget_lock_acquire_recursive>
 8006906:	4628      	mov	r0, r5
 8006908:	4621      	mov	r1, r4
 800690a:	f7ff ff5b 	bl	80067c4 <__sflush_r>
 800690e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006910:	4605      	mov	r5, r0
 8006912:	07da      	lsls	r2, r3, #31
 8006914:	d405      	bmi.n	8006922 <_fflush_r+0x42>
 8006916:	89a3      	ldrh	r3, [r4, #12]
 8006918:	059b      	lsls	r3, r3, #22
 800691a:	d402      	bmi.n	8006922 <_fflush_r+0x42>
 800691c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800691e:	f000 fb0c 	bl	8006f3a <__retarget_lock_release_recursive>
 8006922:	4628      	mov	r0, r5
 8006924:	bd38      	pop	{r3, r4, r5, pc}
 8006926:	4605      	mov	r5, r0
 8006928:	e7fb      	b.n	8006922 <_fflush_r+0x42>
	...

0800692c <std>:
 800692c:	2300      	movs	r3, #0
 800692e:	b510      	push	{r4, lr}
 8006930:	4604      	mov	r4, r0
 8006932:	e9c0 3300 	strd	r3, r3, [r0]
 8006936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800693a:	6083      	str	r3, [r0, #8]
 800693c:	8181      	strh	r1, [r0, #12]
 800693e:	6643      	str	r3, [r0, #100]	; 0x64
 8006940:	81c2      	strh	r2, [r0, #14]
 8006942:	6183      	str	r3, [r0, #24]
 8006944:	4619      	mov	r1, r3
 8006946:	2208      	movs	r2, #8
 8006948:	305c      	adds	r0, #92	; 0x5c
 800694a:	f7fc fbc9 	bl	80030e0 <memset>
 800694e:	4b07      	ldr	r3, [pc, #28]	; (800696c <std+0x40>)
 8006950:	61e4      	str	r4, [r4, #28]
 8006952:	6223      	str	r3, [r4, #32]
 8006954:	4b06      	ldr	r3, [pc, #24]	; (8006970 <std+0x44>)
 8006956:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800695a:	6263      	str	r3, [r4, #36]	; 0x24
 800695c:	4b05      	ldr	r3, [pc, #20]	; (8006974 <std+0x48>)
 800695e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006960:	4b05      	ldr	r3, [pc, #20]	; (8006978 <std+0x4c>)
 8006962:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006968:	f000 bae4 	b.w	8006f34 <__retarget_lock_init_recursive>
 800696c:	08007f45 	.word	0x08007f45
 8006970:	08007f67 	.word	0x08007f67
 8006974:	08007f9f 	.word	0x08007f9f
 8006978:	08007fc3 	.word	0x08007fc3

0800697c <_cleanup_r>:
 800697c:	4901      	ldr	r1, [pc, #4]	; (8006984 <_cleanup_r+0x8>)
 800697e:	f000 bab5 	b.w	8006eec <_fwalk_reent>
 8006982:	bf00      	nop
 8006984:	08008c41 	.word	0x08008c41

08006988 <__sfp_lock_acquire>:
 8006988:	4801      	ldr	r0, [pc, #4]	; (8006990 <__sfp_lock_acquire+0x8>)
 800698a:	f000 bad5 	b.w	8006f38 <__retarget_lock_acquire_recursive>
 800698e:	bf00      	nop
 8006990:	20000c58 	.word	0x20000c58

08006994 <__sfp_lock_release>:
 8006994:	4801      	ldr	r0, [pc, #4]	; (800699c <__sfp_lock_release+0x8>)
 8006996:	f000 bad0 	b.w	8006f3a <__retarget_lock_release_recursive>
 800699a:	bf00      	nop
 800699c:	20000c58 	.word	0x20000c58

080069a0 <__sinit_lock_acquire>:
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <__sinit_lock_acquire+0x8>)
 80069a2:	f000 bac9 	b.w	8006f38 <__retarget_lock_acquire_recursive>
 80069a6:	bf00      	nop
 80069a8:	20000c53 	.word	0x20000c53

080069ac <__sinit_lock_release>:
 80069ac:	4801      	ldr	r0, [pc, #4]	; (80069b4 <__sinit_lock_release+0x8>)
 80069ae:	f000 bac4 	b.w	8006f3a <__retarget_lock_release_recursive>
 80069b2:	bf00      	nop
 80069b4:	20000c53 	.word	0x20000c53

080069b8 <__sinit>:
 80069b8:	b510      	push	{r4, lr}
 80069ba:	4604      	mov	r4, r0
 80069bc:	f7ff fff0 	bl	80069a0 <__sinit_lock_acquire>
 80069c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80069c2:	b11a      	cbz	r2, 80069cc <__sinit+0x14>
 80069c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c8:	f7ff bff0 	b.w	80069ac <__sinit_lock_release>
 80069cc:	4b0d      	ldr	r3, [pc, #52]	; (8006a04 <__sinit+0x4c>)
 80069ce:	2104      	movs	r1, #4
 80069d0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80069d2:	2303      	movs	r3, #3
 80069d4:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80069d8:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 80069dc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 80069e0:	6860      	ldr	r0, [r4, #4]
 80069e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80069e6:	f7ff ffa1 	bl	800692c <std>
 80069ea:	2201      	movs	r2, #1
 80069ec:	2109      	movs	r1, #9
 80069ee:	68a0      	ldr	r0, [r4, #8]
 80069f0:	f7ff ff9c 	bl	800692c <std>
 80069f4:	2202      	movs	r2, #2
 80069f6:	2112      	movs	r1, #18
 80069f8:	68e0      	ldr	r0, [r4, #12]
 80069fa:	f7ff ff97 	bl	800692c <std>
 80069fe:	2301      	movs	r3, #1
 8006a00:	63a3      	str	r3, [r4, #56]	; 0x38
 8006a02:	e7df      	b.n	80069c4 <__sinit+0xc>
 8006a04:	0800697d 	.word	0x0800697d

08006a08 <__libc_fini_array>:
 8006a08:	b538      	push	{r3, r4, r5, lr}
 8006a0a:	4d07      	ldr	r5, [pc, #28]	; (8006a28 <__libc_fini_array+0x20>)
 8006a0c:	4c07      	ldr	r4, [pc, #28]	; (8006a2c <__libc_fini_array+0x24>)
 8006a0e:	1b64      	subs	r4, r4, r5
 8006a10:	10a4      	asrs	r4, r4, #2
 8006a12:	b91c      	cbnz	r4, 8006a1c <__libc_fini_array+0x14>
 8006a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a18:	f002 bb04 	b.w	8009024 <_fini>
 8006a1c:	3c01      	subs	r4, #1
 8006a1e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006a22:	4798      	blx	r3
 8006a24:	e7f5      	b.n	8006a12 <__libc_fini_array+0xa>
 8006a26:	bf00      	nop
 8006a28:	08009584 	.word	0x08009584
 8006a2c:	08009588 	.word	0x08009588

08006a30 <_malloc_trim_r>:
 8006a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a34:	4606      	mov	r6, r0
 8006a36:	2008      	movs	r0, #8
 8006a38:	460c      	mov	r4, r1
 8006a3a:	f001 fb54 	bl	80080e6 <sysconf>
 8006a3e:	4680      	mov	r8, r0
 8006a40:	4f22      	ldr	r7, [pc, #136]	; (8006acc <_malloc_trim_r+0x9c>)
 8006a42:	4630      	mov	r0, r6
 8006a44:	f000 fd50 	bl	80074e8 <__malloc_lock>
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	685d      	ldr	r5, [r3, #4]
 8006a4c:	f025 0503 	bic.w	r5, r5, #3
 8006a50:	1b2c      	subs	r4, r5, r4
 8006a52:	3c11      	subs	r4, #17
 8006a54:	4444      	add	r4, r8
 8006a56:	fbb4 f4f8 	udiv	r4, r4, r8
 8006a5a:	3c01      	subs	r4, #1
 8006a5c:	fb08 f404 	mul.w	r4, r8, r4
 8006a60:	45a0      	cmp	r8, r4
 8006a62:	dd05      	ble.n	8006a70 <_malloc_trim_r+0x40>
 8006a64:	4630      	mov	r0, r6
 8006a66:	f000 fd45 	bl	80074f4 <__malloc_unlock>
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a70:	2100      	movs	r1, #0
 8006a72:	4630      	mov	r0, r6
 8006a74:	f001 fa56 	bl	8007f24 <_sbrk_r>
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	442b      	add	r3, r5
 8006a7c:	4298      	cmp	r0, r3
 8006a7e:	d1f1      	bne.n	8006a64 <_malloc_trim_r+0x34>
 8006a80:	4630      	mov	r0, r6
 8006a82:	4261      	negs	r1, r4
 8006a84:	f001 fa4e 	bl	8007f24 <_sbrk_r>
 8006a88:	3001      	adds	r0, #1
 8006a8a:	d110      	bne.n	8006aae <_malloc_trim_r+0x7e>
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f001 fa48 	bl	8007f24 <_sbrk_r>
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	1a83      	subs	r3, r0, r2
 8006a98:	2b0f      	cmp	r3, #15
 8006a9a:	dde3      	ble.n	8006a64 <_malloc_trim_r+0x34>
 8006a9c:	490c      	ldr	r1, [pc, #48]	; (8006ad0 <_malloc_trim_r+0xa0>)
 8006a9e:	f043 0301 	orr.w	r3, r3, #1
 8006aa2:	6809      	ldr	r1, [r1, #0]
 8006aa4:	6053      	str	r3, [r2, #4]
 8006aa6:	1a40      	subs	r0, r0, r1
 8006aa8:	490a      	ldr	r1, [pc, #40]	; (8006ad4 <_malloc_trim_r+0xa4>)
 8006aaa:	6008      	str	r0, [r1, #0]
 8006aac:	e7da      	b.n	8006a64 <_malloc_trim_r+0x34>
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	4a08      	ldr	r2, [pc, #32]	; (8006ad4 <_malloc_trim_r+0xa4>)
 8006ab2:	1b2d      	subs	r5, r5, r4
 8006ab4:	f045 0501 	orr.w	r5, r5, #1
 8006ab8:	605d      	str	r5, [r3, #4]
 8006aba:	6813      	ldr	r3, [r2, #0]
 8006abc:	4630      	mov	r0, r6
 8006abe:	1b1c      	subs	r4, r3, r4
 8006ac0:	6014      	str	r4, [r2, #0]
 8006ac2:	f000 fd17 	bl	80074f4 <__malloc_unlock>
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	e7d0      	b.n	8006a6c <_malloc_trim_r+0x3c>
 8006aca:	bf00      	nop
 8006acc:	2000043c 	.word	0x2000043c
 8006ad0:	20000844 	.word	0x20000844
 8006ad4:	200009d8 	.word	0x200009d8

08006ad8 <_free_r>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	4605      	mov	r5, r0
 8006adc:	460f      	mov	r7, r1
 8006ade:	2900      	cmp	r1, #0
 8006ae0:	f000 80b1 	beq.w	8006c46 <_free_r+0x16e>
 8006ae4:	f000 fd00 	bl	80074e8 <__malloc_lock>
 8006ae8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006aec:	4856      	ldr	r0, [pc, #344]	; (8006c48 <_free_r+0x170>)
 8006aee:	f022 0401 	bic.w	r4, r2, #1
 8006af2:	f1a7 0308 	sub.w	r3, r7, #8
 8006af6:	eb03 0c04 	add.w	ip, r3, r4
 8006afa:	6881      	ldr	r1, [r0, #8]
 8006afc:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8006b00:	4561      	cmp	r1, ip
 8006b02:	f026 0603 	bic.w	r6, r6, #3
 8006b06:	f002 0201 	and.w	r2, r2, #1
 8006b0a:	d11b      	bne.n	8006b44 <_free_r+0x6c>
 8006b0c:	4434      	add	r4, r6
 8006b0e:	b93a      	cbnz	r2, 8006b20 <_free_r+0x48>
 8006b10:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8006b14:	1a9b      	subs	r3, r3, r2
 8006b16:	4414      	add	r4, r2
 8006b18:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8006b1c:	60ca      	str	r2, [r1, #12]
 8006b1e:	6091      	str	r1, [r2, #8]
 8006b20:	f044 0201 	orr.w	r2, r4, #1
 8006b24:	605a      	str	r2, [r3, #4]
 8006b26:	6083      	str	r3, [r0, #8]
 8006b28:	4b48      	ldr	r3, [pc, #288]	; (8006c4c <_free_r+0x174>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	42a3      	cmp	r3, r4
 8006b2e:	d804      	bhi.n	8006b3a <_free_r+0x62>
 8006b30:	4b47      	ldr	r3, [pc, #284]	; (8006c50 <_free_r+0x178>)
 8006b32:	4628      	mov	r0, r5
 8006b34:	6819      	ldr	r1, [r3, #0]
 8006b36:	f7ff ff7b 	bl	8006a30 <_malloc_trim_r>
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b40:	f000 bcd8 	b.w	80074f4 <__malloc_unlock>
 8006b44:	f8cc 6004 	str.w	r6, [ip, #4]
 8006b48:	2a00      	cmp	r2, #0
 8006b4a:	d138      	bne.n	8006bbe <_free_r+0xe6>
 8006b4c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8006b50:	f100 0708 	add.w	r7, r0, #8
 8006b54:	1a5b      	subs	r3, r3, r1
 8006b56:	440c      	add	r4, r1
 8006b58:	6899      	ldr	r1, [r3, #8]
 8006b5a:	42b9      	cmp	r1, r7
 8006b5c:	d031      	beq.n	8006bc2 <_free_r+0xea>
 8006b5e:	68df      	ldr	r7, [r3, #12]
 8006b60:	60cf      	str	r7, [r1, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	eb0c 0106 	add.w	r1, ip, r6
 8006b68:	6849      	ldr	r1, [r1, #4]
 8006b6a:	07c9      	lsls	r1, r1, #31
 8006b6c:	d40b      	bmi.n	8006b86 <_free_r+0xae>
 8006b6e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8006b72:	4434      	add	r4, r6
 8006b74:	bb3a      	cbnz	r2, 8006bc6 <_free_r+0xee>
 8006b76:	4e37      	ldr	r6, [pc, #220]	; (8006c54 <_free_r+0x17c>)
 8006b78:	42b1      	cmp	r1, r6
 8006b7a:	d124      	bne.n	8006bc6 <_free_r+0xee>
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b82:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8006b86:	f044 0101 	orr.w	r1, r4, #1
 8006b8a:	6059      	str	r1, [r3, #4]
 8006b8c:	511c      	str	r4, [r3, r4]
 8006b8e:	2a00      	cmp	r2, #0
 8006b90:	d1d3      	bne.n	8006b3a <_free_r+0x62>
 8006b92:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8006b96:	d21b      	bcs.n	8006bd0 <_free_r+0xf8>
 8006b98:	0961      	lsrs	r1, r4, #5
 8006b9a:	08e2      	lsrs	r2, r4, #3
 8006b9c:	2401      	movs	r4, #1
 8006b9e:	408c      	lsls	r4, r1
 8006ba0:	6841      	ldr	r1, [r0, #4]
 8006ba2:	3201      	adds	r2, #1
 8006ba4:	430c      	orrs	r4, r1
 8006ba6:	6044      	str	r4, [r0, #4]
 8006ba8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8006bac:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8006bb0:	3908      	subs	r1, #8
 8006bb2:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8006bb6:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8006bba:	60e3      	str	r3, [r4, #12]
 8006bbc:	e7bd      	b.n	8006b3a <_free_r+0x62>
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	e7d0      	b.n	8006b64 <_free_r+0x8c>
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	e7ce      	b.n	8006b64 <_free_r+0x8c>
 8006bc6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8006bca:	60ce      	str	r6, [r1, #12]
 8006bcc:	60b1      	str	r1, [r6, #8]
 8006bce:	e7da      	b.n	8006b86 <_free_r+0xae>
 8006bd0:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8006bd4:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8006bd8:	d214      	bcs.n	8006c04 <_free_r+0x12c>
 8006bda:	09a2      	lsrs	r2, r4, #6
 8006bdc:	3238      	adds	r2, #56	; 0x38
 8006bde:	1c51      	adds	r1, r2, #1
 8006be0:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8006be4:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8006be8:	428e      	cmp	r6, r1
 8006bea:	d125      	bne.n	8006c38 <_free_r+0x160>
 8006bec:	2401      	movs	r4, #1
 8006bee:	1092      	asrs	r2, r2, #2
 8006bf0:	fa04 f202 	lsl.w	r2, r4, r2
 8006bf4:	6844      	ldr	r4, [r0, #4]
 8006bf6:	4322      	orrs	r2, r4
 8006bf8:	6042      	str	r2, [r0, #4]
 8006bfa:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8006bfe:	60b3      	str	r3, [r6, #8]
 8006c00:	60cb      	str	r3, [r1, #12]
 8006c02:	e79a      	b.n	8006b3a <_free_r+0x62>
 8006c04:	2a14      	cmp	r2, #20
 8006c06:	d801      	bhi.n	8006c0c <_free_r+0x134>
 8006c08:	325b      	adds	r2, #91	; 0x5b
 8006c0a:	e7e8      	b.n	8006bde <_free_r+0x106>
 8006c0c:	2a54      	cmp	r2, #84	; 0x54
 8006c0e:	d802      	bhi.n	8006c16 <_free_r+0x13e>
 8006c10:	0b22      	lsrs	r2, r4, #12
 8006c12:	326e      	adds	r2, #110	; 0x6e
 8006c14:	e7e3      	b.n	8006bde <_free_r+0x106>
 8006c16:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006c1a:	d802      	bhi.n	8006c22 <_free_r+0x14a>
 8006c1c:	0be2      	lsrs	r2, r4, #15
 8006c1e:	3277      	adds	r2, #119	; 0x77
 8006c20:	e7dd      	b.n	8006bde <_free_r+0x106>
 8006c22:	f240 5154 	movw	r1, #1364	; 0x554
 8006c26:	428a      	cmp	r2, r1
 8006c28:	bf96      	itet	ls
 8006c2a:	0ca2      	lsrls	r2, r4, #18
 8006c2c:	227e      	movhi	r2, #126	; 0x7e
 8006c2e:	327c      	addls	r2, #124	; 0x7c
 8006c30:	e7d5      	b.n	8006bde <_free_r+0x106>
 8006c32:	6889      	ldr	r1, [r1, #8]
 8006c34:	428e      	cmp	r6, r1
 8006c36:	d004      	beq.n	8006c42 <_free_r+0x16a>
 8006c38:	684a      	ldr	r2, [r1, #4]
 8006c3a:	f022 0203 	bic.w	r2, r2, #3
 8006c3e:	42a2      	cmp	r2, r4
 8006c40:	d8f7      	bhi.n	8006c32 <_free_r+0x15a>
 8006c42:	68ce      	ldr	r6, [r1, #12]
 8006c44:	e7d9      	b.n	8006bfa <_free_r+0x122>
 8006c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c48:	2000043c 	.word	0x2000043c
 8006c4c:	20000848 	.word	0x20000848
 8006c50:	20000a08 	.word	0x20000a08
 8006c54:	20000444 	.word	0x20000444

08006c58 <__sfvwrite_r>:
 8006c58:	6893      	ldr	r3, [r2, #8]
 8006c5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5e:	4606      	mov	r6, r0
 8006c60:	460c      	mov	r4, r1
 8006c62:	4690      	mov	r8, r2
 8006c64:	b91b      	cbnz	r3, 8006c6e <__sfvwrite_r+0x16>
 8006c66:	2000      	movs	r0, #0
 8006c68:	b003      	add	sp, #12
 8006c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6e:	898b      	ldrh	r3, [r1, #12]
 8006c70:	0718      	lsls	r0, r3, #28
 8006c72:	d550      	bpl.n	8006d16 <__sfvwrite_r+0xbe>
 8006c74:	690b      	ldr	r3, [r1, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d04d      	beq.n	8006d16 <__sfvwrite_r+0xbe>
 8006c7a:	89a3      	ldrh	r3, [r4, #12]
 8006c7c:	f8d8 7000 	ldr.w	r7, [r8]
 8006c80:	f013 0902 	ands.w	r9, r3, #2
 8006c84:	d16c      	bne.n	8006d60 <__sfvwrite_r+0x108>
 8006c86:	f013 0301 	ands.w	r3, r3, #1
 8006c8a:	f000 809c 	beq.w	8006dc6 <__sfvwrite_r+0x16e>
 8006c8e:	4648      	mov	r0, r9
 8006c90:	46ca      	mov	sl, r9
 8006c92:	46cb      	mov	fp, r9
 8006c94:	f1bb 0f00 	cmp.w	fp, #0
 8006c98:	f000 8103 	beq.w	8006ea2 <__sfvwrite_r+0x24a>
 8006c9c:	b950      	cbnz	r0, 8006cb4 <__sfvwrite_r+0x5c>
 8006c9e:	465a      	mov	r2, fp
 8006ca0:	210a      	movs	r1, #10
 8006ca2:	4650      	mov	r0, sl
 8006ca4:	f000 fbf8 	bl	8007498 <memchr>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	f000 80ff 	beq.w	8006eac <__sfvwrite_r+0x254>
 8006cae:	3001      	adds	r0, #1
 8006cb0:	eba0 090a 	sub.w	r9, r0, sl
 8006cb4:	6820      	ldr	r0, [r4, #0]
 8006cb6:	6921      	ldr	r1, [r4, #16]
 8006cb8:	45d9      	cmp	r9, fp
 8006cba:	464a      	mov	r2, r9
 8006cbc:	bf28      	it	cs
 8006cbe:	465a      	movcs	r2, fp
 8006cc0:	4288      	cmp	r0, r1
 8006cc2:	6963      	ldr	r3, [r4, #20]
 8006cc4:	f240 80f5 	bls.w	8006eb2 <__sfvwrite_r+0x25a>
 8006cc8:	68a5      	ldr	r5, [r4, #8]
 8006cca:	441d      	add	r5, r3
 8006ccc:	42aa      	cmp	r2, r5
 8006cce:	f340 80f0 	ble.w	8006eb2 <__sfvwrite_r+0x25a>
 8006cd2:	4651      	mov	r1, sl
 8006cd4:	462a      	mov	r2, r5
 8006cd6:	f000 fbed 	bl	80074b4 <memmove>
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	4621      	mov	r1, r4
 8006cde:	442b      	add	r3, r5
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	6023      	str	r3, [r4, #0]
 8006ce4:	f7ff fdfc 	bl	80068e0 <_fflush_r>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d167      	bne.n	8006dbc <__sfvwrite_r+0x164>
 8006cec:	ebb9 0905 	subs.w	r9, r9, r5
 8006cf0:	f040 80f7 	bne.w	8006ee2 <__sfvwrite_r+0x28a>
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f7ff fdf2 	bl	80068e0 <_fflush_r>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	d15d      	bne.n	8006dbc <__sfvwrite_r+0x164>
 8006d00:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8006d04:	44aa      	add	sl, r5
 8006d06:	ebab 0b05 	sub.w	fp, fp, r5
 8006d0a:	1b55      	subs	r5, r2, r5
 8006d0c:	f8c8 5008 	str.w	r5, [r8, #8]
 8006d10:	2d00      	cmp	r5, #0
 8006d12:	d1bf      	bne.n	8006c94 <__sfvwrite_r+0x3c>
 8006d14:	e7a7      	b.n	8006c66 <__sfvwrite_r+0xe>
 8006d16:	4621      	mov	r1, r4
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f7fe fe9f 	bl	8005a5c <__swsetup_r>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d0ab      	beq.n	8006c7a <__sfvwrite_r+0x22>
 8006d22:	f04f 30ff 	mov.w	r0, #4294967295
 8006d26:	e79f      	b.n	8006c68 <__sfvwrite_r+0x10>
 8006d28:	e9d7 b900 	ldrd	fp, r9, [r7]
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	f1b9 0f00 	cmp.w	r9, #0
 8006d32:	d0f9      	beq.n	8006d28 <__sfvwrite_r+0xd0>
 8006d34:	45d1      	cmp	r9, sl
 8006d36:	464b      	mov	r3, r9
 8006d38:	465a      	mov	r2, fp
 8006d3a:	bf28      	it	cs
 8006d3c:	4653      	movcs	r3, sl
 8006d3e:	4630      	mov	r0, r6
 8006d40:	69e1      	ldr	r1, [r4, #28]
 8006d42:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006d44:	47a8      	blx	r5
 8006d46:	2800      	cmp	r0, #0
 8006d48:	dd38      	ble.n	8006dbc <__sfvwrite_r+0x164>
 8006d4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d4e:	4483      	add	fp, r0
 8006d50:	eba9 0900 	sub.w	r9, r9, r0
 8006d54:	1a18      	subs	r0, r3, r0
 8006d56:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d1e7      	bne.n	8006d2e <__sfvwrite_r+0xd6>
 8006d5e:	e782      	b.n	8006c66 <__sfvwrite_r+0xe>
 8006d60:	f04f 0b00 	mov.w	fp, #0
 8006d64:	f8df a180 	ldr.w	sl, [pc, #384]	; 8006ee8 <__sfvwrite_r+0x290>
 8006d68:	46d9      	mov	r9, fp
 8006d6a:	e7e0      	b.n	8006d2e <__sfvwrite_r+0xd6>
 8006d6c:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8006d70:	3708      	adds	r7, #8
 8006d72:	f1ba 0f00 	cmp.w	sl, #0
 8006d76:	d0f9      	beq.n	8006d6c <__sfvwrite_r+0x114>
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	68a2      	ldr	r2, [r4, #8]
 8006d7c:	0599      	lsls	r1, r3, #22
 8006d7e:	6820      	ldr	r0, [r4, #0]
 8006d80:	d563      	bpl.n	8006e4a <__sfvwrite_r+0x1f2>
 8006d82:	4552      	cmp	r2, sl
 8006d84:	d836      	bhi.n	8006df4 <__sfvwrite_r+0x19c>
 8006d86:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006d8a:	d033      	beq.n	8006df4 <__sfvwrite_r+0x19c>
 8006d8c:	6921      	ldr	r1, [r4, #16]
 8006d8e:	6965      	ldr	r5, [r4, #20]
 8006d90:	eba0 0b01 	sub.w	fp, r0, r1
 8006d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d9c:	f10b 0201 	add.w	r2, fp, #1
 8006da0:	106d      	asrs	r5, r5, #1
 8006da2:	4452      	add	r2, sl
 8006da4:	4295      	cmp	r5, r2
 8006da6:	bf38      	it	cc
 8006da8:	4615      	movcc	r5, r2
 8006daa:	055b      	lsls	r3, r3, #21
 8006dac:	d53d      	bpl.n	8006e2a <__sfvwrite_r+0x1d2>
 8006dae:	4629      	mov	r1, r5
 8006db0:	4630      	mov	r0, r6
 8006db2:	f000 f92f 	bl	8007014 <_malloc_r>
 8006db6:	b948      	cbnz	r0, 8006dcc <__sfvwrite_r+0x174>
 8006db8:	230c      	movs	r3, #12
 8006dba:	6033      	str	r3, [r6, #0]
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dc2:	81a3      	strh	r3, [r4, #12]
 8006dc4:	e7ad      	b.n	8006d22 <__sfvwrite_r+0xca>
 8006dc6:	4699      	mov	r9, r3
 8006dc8:	469a      	mov	sl, r3
 8006dca:	e7d2      	b.n	8006d72 <__sfvwrite_r+0x11a>
 8006dcc:	465a      	mov	r2, fp
 8006dce:	6921      	ldr	r1, [r4, #16]
 8006dd0:	9001      	str	r0, [sp, #4]
 8006dd2:	f7fc f977 	bl	80030c4 <memcpy>
 8006dd6:	89a2      	ldrh	r2, [r4, #12]
 8006dd8:	9b01      	ldr	r3, [sp, #4]
 8006dda:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006dde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006de2:	81a2      	strh	r2, [r4, #12]
 8006de4:	4652      	mov	r2, sl
 8006de6:	6123      	str	r3, [r4, #16]
 8006de8:	6165      	str	r5, [r4, #20]
 8006dea:	445b      	add	r3, fp
 8006dec:	eba5 050b 	sub.w	r5, r5, fp
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	60a5      	str	r5, [r4, #8]
 8006df4:	4552      	cmp	r2, sl
 8006df6:	bf28      	it	cs
 8006df8:	4652      	movcs	r2, sl
 8006dfa:	4655      	mov	r5, sl
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	6820      	ldr	r0, [r4, #0]
 8006e00:	9201      	str	r2, [sp, #4]
 8006e02:	f000 fb57 	bl	80074b4 <memmove>
 8006e06:	68a3      	ldr	r3, [r4, #8]
 8006e08:	9a01      	ldr	r2, [sp, #4]
 8006e0a:	1a9b      	subs	r3, r3, r2
 8006e0c:	60a3      	str	r3, [r4, #8]
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	441a      	add	r2, r3
 8006e12:	6022      	str	r2, [r4, #0]
 8006e14:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006e18:	44a9      	add	r9, r5
 8006e1a:	ebaa 0a05 	sub.w	sl, sl, r5
 8006e1e:	1b45      	subs	r5, r0, r5
 8006e20:	f8c8 5008 	str.w	r5, [r8, #8]
 8006e24:	2d00      	cmp	r5, #0
 8006e26:	d1a4      	bne.n	8006d72 <__sfvwrite_r+0x11a>
 8006e28:	e71d      	b.n	8006c66 <__sfvwrite_r+0xe>
 8006e2a:	462a      	mov	r2, r5
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	f000 fe9b 	bl	8007b68 <_realloc_r>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d1d5      	bne.n	8006de4 <__sfvwrite_r+0x18c>
 8006e38:	4630      	mov	r0, r6
 8006e3a:	6921      	ldr	r1, [r4, #16]
 8006e3c:	f7ff fe4c 	bl	8006ad8 <_free_r>
 8006e40:	89a3      	ldrh	r3, [r4, #12]
 8006e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e46:	81a3      	strh	r3, [r4, #12]
 8006e48:	e7b6      	b.n	8006db8 <__sfvwrite_r+0x160>
 8006e4a:	6923      	ldr	r3, [r4, #16]
 8006e4c:	4283      	cmp	r3, r0
 8006e4e:	d302      	bcc.n	8006e56 <__sfvwrite_r+0x1fe>
 8006e50:	6961      	ldr	r1, [r4, #20]
 8006e52:	4551      	cmp	r1, sl
 8006e54:	d915      	bls.n	8006e82 <__sfvwrite_r+0x22a>
 8006e56:	4552      	cmp	r2, sl
 8006e58:	bf28      	it	cs
 8006e5a:	4652      	movcs	r2, sl
 8006e5c:	4615      	mov	r5, r2
 8006e5e:	4649      	mov	r1, r9
 8006e60:	f000 fb28 	bl	80074b4 <memmove>
 8006e64:	68a3      	ldr	r3, [r4, #8]
 8006e66:	6822      	ldr	r2, [r4, #0]
 8006e68:	1b5b      	subs	r3, r3, r5
 8006e6a:	442a      	add	r2, r5
 8006e6c:	60a3      	str	r3, [r4, #8]
 8006e6e:	6022      	str	r2, [r4, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1cf      	bne.n	8006e14 <__sfvwrite_r+0x1bc>
 8006e74:	4621      	mov	r1, r4
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7ff fd32 	bl	80068e0 <_fflush_r>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d0c9      	beq.n	8006e14 <__sfvwrite_r+0x1bc>
 8006e80:	e79c      	b.n	8006dbc <__sfvwrite_r+0x164>
 8006e82:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006e86:	459a      	cmp	sl, r3
 8006e88:	bf38      	it	cc
 8006e8a:	4653      	movcc	r3, sl
 8006e8c:	fb93 f3f1 	sdiv	r3, r3, r1
 8006e90:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006e92:	434b      	muls	r3, r1
 8006e94:	464a      	mov	r2, r9
 8006e96:	4630      	mov	r0, r6
 8006e98:	69e1      	ldr	r1, [r4, #28]
 8006e9a:	47a8      	blx	r5
 8006e9c:	1e05      	subs	r5, r0, #0
 8006e9e:	dcb9      	bgt.n	8006e14 <__sfvwrite_r+0x1bc>
 8006ea0:	e78c      	b.n	8006dbc <__sfvwrite_r+0x164>
 8006ea2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	e6f3      	b.n	8006c94 <__sfvwrite_r+0x3c>
 8006eac:	f10b 0901 	add.w	r9, fp, #1
 8006eb0:	e700      	b.n	8006cb4 <__sfvwrite_r+0x5c>
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	dc08      	bgt.n	8006ec8 <__sfvwrite_r+0x270>
 8006eb6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006eb8:	4652      	mov	r2, sl
 8006eba:	4630      	mov	r0, r6
 8006ebc:	69e1      	ldr	r1, [r4, #28]
 8006ebe:	47a8      	blx	r5
 8006ec0:	1e05      	subs	r5, r0, #0
 8006ec2:	f73f af13 	bgt.w	8006cec <__sfvwrite_r+0x94>
 8006ec6:	e779      	b.n	8006dbc <__sfvwrite_r+0x164>
 8006ec8:	4651      	mov	r1, sl
 8006eca:	9201      	str	r2, [sp, #4]
 8006ecc:	f000 faf2 	bl	80074b4 <memmove>
 8006ed0:	9a01      	ldr	r2, [sp, #4]
 8006ed2:	68a3      	ldr	r3, [r4, #8]
 8006ed4:	4615      	mov	r5, r2
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	60a3      	str	r3, [r4, #8]
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	4413      	add	r3, r2
 8006ede:	6023      	str	r3, [r4, #0]
 8006ee0:	e704      	b.n	8006cec <__sfvwrite_r+0x94>
 8006ee2:	2001      	movs	r0, #1
 8006ee4:	e70c      	b.n	8006d00 <__sfvwrite_r+0xa8>
 8006ee6:	bf00      	nop
 8006ee8:	7ffffc00 	.word	0x7ffffc00

08006eec <_fwalk_reent>:
 8006eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ef0:	4606      	mov	r6, r0
 8006ef2:	4688      	mov	r8, r1
 8006ef4:	2700      	movs	r7, #0
 8006ef6:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8006efa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006efe:	f1b9 0901 	subs.w	r9, r9, #1
 8006f02:	d505      	bpl.n	8006f10 <_fwalk_reent+0x24>
 8006f04:	6824      	ldr	r4, [r4, #0]
 8006f06:	2c00      	cmp	r4, #0
 8006f08:	d1f7      	bne.n	8006efa <_fwalk_reent+0xe>
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f10:	89ab      	ldrh	r3, [r5, #12]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d907      	bls.n	8006f26 <_fwalk_reent+0x3a>
 8006f16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	d003      	beq.n	8006f26 <_fwalk_reent+0x3a>
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4630      	mov	r0, r6
 8006f22:	47c0      	blx	r8
 8006f24:	4307      	orrs	r7, r0
 8006f26:	3568      	adds	r5, #104	; 0x68
 8006f28:	e7e9      	b.n	8006efe <_fwalk_reent+0x12>
	...

08006f2c <_localeconv_r>:
 8006f2c:	4800      	ldr	r0, [pc, #0]	; (8006f30 <_localeconv_r+0x4>)
 8006f2e:	4770      	bx	lr
 8006f30:	2000093c 	.word	0x2000093c

08006f34 <__retarget_lock_init_recursive>:
 8006f34:	4770      	bx	lr

08006f36 <__retarget_lock_close_recursive>:
 8006f36:	4770      	bx	lr

08006f38 <__retarget_lock_acquire_recursive>:
 8006f38:	4770      	bx	lr

08006f3a <__retarget_lock_release_recursive>:
 8006f3a:	4770      	bx	lr

08006f3c <__swhatbuf_r>:
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	460e      	mov	r6, r1
 8006f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f44:	4614      	mov	r4, r2
 8006f46:	2900      	cmp	r1, #0
 8006f48:	461d      	mov	r5, r3
 8006f4a:	b096      	sub	sp, #88	; 0x58
 8006f4c:	da09      	bge.n	8006f62 <__swhatbuf_r+0x26>
 8006f4e:	2200      	movs	r2, #0
 8006f50:	89b3      	ldrh	r3, [r6, #12]
 8006f52:	602a      	str	r2, [r5, #0]
 8006f54:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006f58:	d116      	bne.n	8006f88 <__swhatbuf_r+0x4c>
 8006f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f5e:	6023      	str	r3, [r4, #0]
 8006f60:	e015      	b.n	8006f8e <__swhatbuf_r+0x52>
 8006f62:	466a      	mov	r2, sp
 8006f64:	f001 ff40 	bl	8008de8 <_fstat_r>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	dbf0      	blt.n	8006f4e <__swhatbuf_r+0x12>
 8006f6c:	9a01      	ldr	r2, [sp, #4]
 8006f6e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f7a:	425a      	negs	r2, r3
 8006f7c:	415a      	adcs	r2, r3
 8006f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f82:	602a      	str	r2, [r5, #0]
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	e002      	b.n	8006f8e <__swhatbuf_r+0x52>
 8006f88:	2340      	movs	r3, #64	; 0x40
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	b016      	add	sp, #88	; 0x58
 8006f90:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f94 <__smakebuf_r>:
 8006f94:	898b      	ldrh	r3, [r1, #12]
 8006f96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f98:	079d      	lsls	r5, r3, #30
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	d507      	bpl.n	8006fb0 <__smakebuf_r+0x1c>
 8006fa0:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	6123      	str	r3, [r4, #16]
 8006fa8:	2301      	movs	r3, #1
 8006faa:	6163      	str	r3, [r4, #20]
 8006fac:	b002      	add	sp, #8
 8006fae:	bd70      	pop	{r4, r5, r6, pc}
 8006fb0:	466a      	mov	r2, sp
 8006fb2:	ab01      	add	r3, sp, #4
 8006fb4:	f7ff ffc2 	bl	8006f3c <__swhatbuf_r>
 8006fb8:	9900      	ldr	r1, [sp, #0]
 8006fba:	4605      	mov	r5, r0
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f000 f829 	bl	8007014 <_malloc_r>
 8006fc2:	b948      	cbnz	r0, 8006fd8 <__smakebuf_r+0x44>
 8006fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fc8:	059a      	lsls	r2, r3, #22
 8006fca:	d4ef      	bmi.n	8006fac <__smakebuf_r+0x18>
 8006fcc:	f023 0303 	bic.w	r3, r3, #3
 8006fd0:	f043 0302 	orr.w	r3, r3, #2
 8006fd4:	81a3      	strh	r3, [r4, #12]
 8006fd6:	e7e3      	b.n	8006fa0 <__smakebuf_r+0xc>
 8006fd8:	4b0d      	ldr	r3, [pc, #52]	; (8007010 <__smakebuf_r+0x7c>)
 8006fda:	63f3      	str	r3, [r6, #60]	; 0x3c
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	6020      	str	r0, [r4, #0]
 8006fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe4:	81a3      	strh	r3, [r4, #12]
 8006fe6:	9b00      	ldr	r3, [sp, #0]
 8006fe8:	6120      	str	r0, [r4, #16]
 8006fea:	6163      	str	r3, [r4, #20]
 8006fec:	9b01      	ldr	r3, [sp, #4]
 8006fee:	b15b      	cbz	r3, 8007008 <__smakebuf_r+0x74>
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ff6:	f001 ff09 	bl	8008e0c <_isatty_r>
 8006ffa:	b128      	cbz	r0, 8007008 <__smakebuf_r+0x74>
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	f023 0303 	bic.w	r3, r3, #3
 8007002:	f043 0301 	orr.w	r3, r3, #1
 8007006:	81a3      	strh	r3, [r4, #12]
 8007008:	89a0      	ldrh	r0, [r4, #12]
 800700a:	4305      	orrs	r5, r0
 800700c:	81a5      	strh	r5, [r4, #12]
 800700e:	e7cd      	b.n	8006fac <__smakebuf_r+0x18>
 8007010:	0800697d 	.word	0x0800697d

08007014 <_malloc_r>:
 8007014:	f101 030b 	add.w	r3, r1, #11
 8007018:	2b16      	cmp	r3, #22
 800701a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701e:	4605      	mov	r5, r0
 8007020:	d906      	bls.n	8007030 <_malloc_r+0x1c>
 8007022:	f033 0707 	bics.w	r7, r3, #7
 8007026:	d504      	bpl.n	8007032 <_malloc_r+0x1e>
 8007028:	230c      	movs	r3, #12
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	2400      	movs	r4, #0
 800702e:	e1ae      	b.n	800738e <_malloc_r+0x37a>
 8007030:	2710      	movs	r7, #16
 8007032:	42b9      	cmp	r1, r7
 8007034:	d8f8      	bhi.n	8007028 <_malloc_r+0x14>
 8007036:	4628      	mov	r0, r5
 8007038:	f000 fa56 	bl	80074e8 <__malloc_lock>
 800703c:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8007040:	4ec3      	ldr	r6, [pc, #780]	; (8007350 <_malloc_r+0x33c>)
 8007042:	d238      	bcs.n	80070b6 <_malloc_r+0xa2>
 8007044:	f107 0208 	add.w	r2, r7, #8
 8007048:	4432      	add	r2, r6
 800704a:	6854      	ldr	r4, [r2, #4]
 800704c:	f1a2 0108 	sub.w	r1, r2, #8
 8007050:	428c      	cmp	r4, r1
 8007052:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8007056:	d102      	bne.n	800705e <_malloc_r+0x4a>
 8007058:	68d4      	ldr	r4, [r2, #12]
 800705a:	42a2      	cmp	r2, r4
 800705c:	d010      	beq.n	8007080 <_malloc_r+0x6c>
 800705e:	6863      	ldr	r3, [r4, #4]
 8007060:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8007064:	f023 0303 	bic.w	r3, r3, #3
 8007068:	60ca      	str	r2, [r1, #12]
 800706a:	4423      	add	r3, r4
 800706c:	6091      	str	r1, [r2, #8]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	f042 0201 	orr.w	r2, r2, #1
 8007074:	605a      	str	r2, [r3, #4]
 8007076:	4628      	mov	r0, r5
 8007078:	f000 fa3c 	bl	80074f4 <__malloc_unlock>
 800707c:	3408      	adds	r4, #8
 800707e:	e186      	b.n	800738e <_malloc_r+0x37a>
 8007080:	3302      	adds	r3, #2
 8007082:	4ab4      	ldr	r2, [pc, #720]	; (8007354 <_malloc_r+0x340>)
 8007084:	6934      	ldr	r4, [r6, #16]
 8007086:	4611      	mov	r1, r2
 8007088:	4294      	cmp	r4, r2
 800708a:	d077      	beq.n	800717c <_malloc_r+0x168>
 800708c:	6860      	ldr	r0, [r4, #4]
 800708e:	f020 0c03 	bic.w	ip, r0, #3
 8007092:	ebac 0007 	sub.w	r0, ip, r7
 8007096:	280f      	cmp	r0, #15
 8007098:	dd48      	ble.n	800712c <_malloc_r+0x118>
 800709a:	19e1      	adds	r1, r4, r7
 800709c:	f040 0301 	orr.w	r3, r0, #1
 80070a0:	f047 0701 	orr.w	r7, r7, #1
 80070a4:	6067      	str	r7, [r4, #4]
 80070a6:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80070aa:	e9c1 2202 	strd	r2, r2, [r1, #8]
 80070ae:	604b      	str	r3, [r1, #4]
 80070b0:	f844 000c 	str.w	r0, [r4, ip]
 80070b4:	e7df      	b.n	8007076 <_malloc_r+0x62>
 80070b6:	0a7b      	lsrs	r3, r7, #9
 80070b8:	d02a      	beq.n	8007110 <_malloc_r+0xfc>
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d812      	bhi.n	80070e4 <_malloc_r+0xd0>
 80070be:	09bb      	lsrs	r3, r7, #6
 80070c0:	3338      	adds	r3, #56	; 0x38
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80070c8:	6854      	ldr	r4, [r2, #4]
 80070ca:	f1a2 0c08 	sub.w	ip, r2, #8
 80070ce:	4564      	cmp	r4, ip
 80070d0:	d006      	beq.n	80070e0 <_malloc_r+0xcc>
 80070d2:	6862      	ldr	r2, [r4, #4]
 80070d4:	f022 0203 	bic.w	r2, r2, #3
 80070d8:	1bd0      	subs	r0, r2, r7
 80070da:	280f      	cmp	r0, #15
 80070dc:	dd1c      	ble.n	8007118 <_malloc_r+0x104>
 80070de:	3b01      	subs	r3, #1
 80070e0:	3301      	adds	r3, #1
 80070e2:	e7ce      	b.n	8007082 <_malloc_r+0x6e>
 80070e4:	2b14      	cmp	r3, #20
 80070e6:	d801      	bhi.n	80070ec <_malloc_r+0xd8>
 80070e8:	335b      	adds	r3, #91	; 0x5b
 80070ea:	e7ea      	b.n	80070c2 <_malloc_r+0xae>
 80070ec:	2b54      	cmp	r3, #84	; 0x54
 80070ee:	d802      	bhi.n	80070f6 <_malloc_r+0xe2>
 80070f0:	0b3b      	lsrs	r3, r7, #12
 80070f2:	336e      	adds	r3, #110	; 0x6e
 80070f4:	e7e5      	b.n	80070c2 <_malloc_r+0xae>
 80070f6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80070fa:	d802      	bhi.n	8007102 <_malloc_r+0xee>
 80070fc:	0bfb      	lsrs	r3, r7, #15
 80070fe:	3377      	adds	r3, #119	; 0x77
 8007100:	e7df      	b.n	80070c2 <_malloc_r+0xae>
 8007102:	f240 5254 	movw	r2, #1364	; 0x554
 8007106:	4293      	cmp	r3, r2
 8007108:	d804      	bhi.n	8007114 <_malloc_r+0x100>
 800710a:	0cbb      	lsrs	r3, r7, #18
 800710c:	337c      	adds	r3, #124	; 0x7c
 800710e:	e7d8      	b.n	80070c2 <_malloc_r+0xae>
 8007110:	233f      	movs	r3, #63	; 0x3f
 8007112:	e7d6      	b.n	80070c2 <_malloc_r+0xae>
 8007114:	237e      	movs	r3, #126	; 0x7e
 8007116:	e7d4      	b.n	80070c2 <_malloc_r+0xae>
 8007118:	2800      	cmp	r0, #0
 800711a:	68e1      	ldr	r1, [r4, #12]
 800711c:	db04      	blt.n	8007128 <_malloc_r+0x114>
 800711e:	68a3      	ldr	r3, [r4, #8]
 8007120:	60d9      	str	r1, [r3, #12]
 8007122:	608b      	str	r3, [r1, #8]
 8007124:	18a3      	adds	r3, r4, r2
 8007126:	e7a2      	b.n	800706e <_malloc_r+0x5a>
 8007128:	460c      	mov	r4, r1
 800712a:	e7d0      	b.n	80070ce <_malloc_r+0xba>
 800712c:	2800      	cmp	r0, #0
 800712e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8007132:	db07      	blt.n	8007144 <_malloc_r+0x130>
 8007134:	44a4      	add	ip, r4
 8007136:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800713a:	f043 0301 	orr.w	r3, r3, #1
 800713e:	f8cc 3004 	str.w	r3, [ip, #4]
 8007142:	e798      	b.n	8007076 <_malloc_r+0x62>
 8007144:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8007148:	6870      	ldr	r0, [r6, #4]
 800714a:	f080 809e 	bcs.w	800728a <_malloc_r+0x276>
 800714e:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8007152:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8007156:	f04f 0c01 	mov.w	ip, #1
 800715a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800715e:	ea4c 0000 	orr.w	r0, ip, r0
 8007162:	3201      	adds	r2, #1
 8007164:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8007168:	6070      	str	r0, [r6, #4]
 800716a:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800716e:	3808      	subs	r0, #8
 8007170:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8007174:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8007178:	f8cc 400c 	str.w	r4, [ip, #12]
 800717c:	2001      	movs	r0, #1
 800717e:	109a      	asrs	r2, r3, #2
 8007180:	fa00 f202 	lsl.w	r2, r0, r2
 8007184:	6870      	ldr	r0, [r6, #4]
 8007186:	4290      	cmp	r0, r2
 8007188:	d326      	bcc.n	80071d8 <_malloc_r+0x1c4>
 800718a:	4210      	tst	r0, r2
 800718c:	d106      	bne.n	800719c <_malloc_r+0x188>
 800718e:	f023 0303 	bic.w	r3, r3, #3
 8007192:	0052      	lsls	r2, r2, #1
 8007194:	4210      	tst	r0, r2
 8007196:	f103 0304 	add.w	r3, r3, #4
 800719a:	d0fa      	beq.n	8007192 <_malloc_r+0x17e>
 800719c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80071a0:	46c1      	mov	r9, r8
 80071a2:	469e      	mov	lr, r3
 80071a4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80071a8:	454c      	cmp	r4, r9
 80071aa:	f040 80b3 	bne.w	8007314 <_malloc_r+0x300>
 80071ae:	f10e 0e01 	add.w	lr, lr, #1
 80071b2:	f01e 0f03 	tst.w	lr, #3
 80071b6:	f109 0908 	add.w	r9, r9, #8
 80071ba:	d1f3      	bne.n	80071a4 <_malloc_r+0x190>
 80071bc:	0798      	lsls	r0, r3, #30
 80071be:	f040 80ec 	bne.w	800739a <_malloc_r+0x386>
 80071c2:	6873      	ldr	r3, [r6, #4]
 80071c4:	ea23 0302 	bic.w	r3, r3, r2
 80071c8:	6073      	str	r3, [r6, #4]
 80071ca:	6870      	ldr	r0, [r6, #4]
 80071cc:	0052      	lsls	r2, r2, #1
 80071ce:	4290      	cmp	r0, r2
 80071d0:	d302      	bcc.n	80071d8 <_malloc_r+0x1c4>
 80071d2:	2a00      	cmp	r2, #0
 80071d4:	f040 80ed 	bne.w	80073b2 <_malloc_r+0x39e>
 80071d8:	f8d6 b008 	ldr.w	fp, [r6, #8]
 80071dc:	f8db 1004 	ldr.w	r1, [fp, #4]
 80071e0:	f021 0903 	bic.w	r9, r1, #3
 80071e4:	45b9      	cmp	r9, r7
 80071e6:	d304      	bcc.n	80071f2 <_malloc_r+0x1de>
 80071e8:	eba9 0207 	sub.w	r2, r9, r7
 80071ec:	2a0f      	cmp	r2, #15
 80071ee:	f300 8148 	bgt.w	8007482 <_malloc_r+0x46e>
 80071f2:	4a59      	ldr	r2, [pc, #356]	; (8007358 <_malloc_r+0x344>)
 80071f4:	eb0b 0309 	add.w	r3, fp, r9
 80071f8:	6811      	ldr	r1, [r2, #0]
 80071fa:	2008      	movs	r0, #8
 80071fc:	3110      	adds	r1, #16
 80071fe:	4439      	add	r1, r7
 8007200:	9301      	str	r3, [sp, #4]
 8007202:	9100      	str	r1, [sp, #0]
 8007204:	f000 ff6f 	bl	80080e6 <sysconf>
 8007208:	e9dd 1300 	ldrd	r1, r3, [sp]
 800720c:	4680      	mov	r8, r0
 800720e:	4a53      	ldr	r2, [pc, #332]	; (800735c <_malloc_r+0x348>)
 8007210:	6810      	ldr	r0, [r2, #0]
 8007212:	3001      	adds	r0, #1
 8007214:	bf1f      	itttt	ne
 8007216:	f101 31ff 	addne.w	r1, r1, #4294967295
 800721a:	4441      	addne	r1, r8
 800721c:	f1c8 0000 	rsbne	r0, r8, #0
 8007220:	4001      	andne	r1, r0
 8007222:	4628      	mov	r0, r5
 8007224:	e9cd 1300 	strd	r1, r3, [sp]
 8007228:	f000 fe7c 	bl	8007f24 <_sbrk_r>
 800722c:	1c42      	adds	r2, r0, #1
 800722e:	4604      	mov	r4, r0
 8007230:	f000 80fb 	beq.w	800742a <_malloc_r+0x416>
 8007234:	9b01      	ldr	r3, [sp, #4]
 8007236:	9900      	ldr	r1, [sp, #0]
 8007238:	4283      	cmp	r3, r0
 800723a:	4a48      	ldr	r2, [pc, #288]	; (800735c <_malloc_r+0x348>)
 800723c:	d902      	bls.n	8007244 <_malloc_r+0x230>
 800723e:	45b3      	cmp	fp, r6
 8007240:	f040 80f3 	bne.w	800742a <_malloc_r+0x416>
 8007244:	f8df a120 	ldr.w	sl, [pc, #288]	; 8007368 <_malloc_r+0x354>
 8007248:	42a3      	cmp	r3, r4
 800724a:	f8da 0000 	ldr.w	r0, [sl]
 800724e:	f108 3cff 	add.w	ip, r8, #4294967295
 8007252:	eb00 0e01 	add.w	lr, r0, r1
 8007256:	f8ca e000 	str.w	lr, [sl]
 800725a:	f040 80ac 	bne.w	80073b6 <_malloc_r+0x3a2>
 800725e:	ea13 0f0c 	tst.w	r3, ip
 8007262:	f040 80a8 	bne.w	80073b6 <_malloc_r+0x3a2>
 8007266:	68b3      	ldr	r3, [r6, #8]
 8007268:	4449      	add	r1, r9
 800726a:	f041 0101 	orr.w	r1, r1, #1
 800726e:	6059      	str	r1, [r3, #4]
 8007270:	4a3b      	ldr	r2, [pc, #236]	; (8007360 <_malloc_r+0x34c>)
 8007272:	f8da 3000 	ldr.w	r3, [sl]
 8007276:	6811      	ldr	r1, [r2, #0]
 8007278:	428b      	cmp	r3, r1
 800727a:	bf88      	it	hi
 800727c:	6013      	strhi	r3, [r2, #0]
 800727e:	4a39      	ldr	r2, [pc, #228]	; (8007364 <_malloc_r+0x350>)
 8007280:	6811      	ldr	r1, [r2, #0]
 8007282:	428b      	cmp	r3, r1
 8007284:	bf88      	it	hi
 8007286:	6013      	strhi	r3, [r2, #0]
 8007288:	e0cf      	b.n	800742a <_malloc_r+0x416>
 800728a:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800728e:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8007292:	d218      	bcs.n	80072c6 <_malloc_r+0x2b2>
 8007294:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8007298:	3238      	adds	r2, #56	; 0x38
 800729a:	f102 0e01 	add.w	lr, r2, #1
 800729e:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80072a2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80072a6:	45f0      	cmp	r8, lr
 80072a8:	d12b      	bne.n	8007302 <_malloc_r+0x2ee>
 80072aa:	f04f 0c01 	mov.w	ip, #1
 80072ae:	1092      	asrs	r2, r2, #2
 80072b0:	fa0c f202 	lsl.w	r2, ip, r2
 80072b4:	4310      	orrs	r0, r2
 80072b6:	6070      	str	r0, [r6, #4]
 80072b8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80072bc:	f8c8 4008 	str.w	r4, [r8, #8]
 80072c0:	f8ce 400c 	str.w	r4, [lr, #12]
 80072c4:	e75a      	b.n	800717c <_malloc_r+0x168>
 80072c6:	2a14      	cmp	r2, #20
 80072c8:	d801      	bhi.n	80072ce <_malloc_r+0x2ba>
 80072ca:	325b      	adds	r2, #91	; 0x5b
 80072cc:	e7e5      	b.n	800729a <_malloc_r+0x286>
 80072ce:	2a54      	cmp	r2, #84	; 0x54
 80072d0:	d803      	bhi.n	80072da <_malloc_r+0x2c6>
 80072d2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80072d6:	326e      	adds	r2, #110	; 0x6e
 80072d8:	e7df      	b.n	800729a <_malloc_r+0x286>
 80072da:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80072de:	d803      	bhi.n	80072e8 <_malloc_r+0x2d4>
 80072e0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80072e4:	3277      	adds	r2, #119	; 0x77
 80072e6:	e7d8      	b.n	800729a <_malloc_r+0x286>
 80072e8:	f240 5e54 	movw	lr, #1364	; 0x554
 80072ec:	4572      	cmp	r2, lr
 80072ee:	bf96      	itet	ls
 80072f0:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80072f4:	227e      	movhi	r2, #126	; 0x7e
 80072f6:	327c      	addls	r2, #124	; 0x7c
 80072f8:	e7cf      	b.n	800729a <_malloc_r+0x286>
 80072fa:	f8de e008 	ldr.w	lr, [lr, #8]
 80072fe:	45f0      	cmp	r8, lr
 8007300:	d005      	beq.n	800730e <_malloc_r+0x2fa>
 8007302:	f8de 2004 	ldr.w	r2, [lr, #4]
 8007306:	f022 0203 	bic.w	r2, r2, #3
 800730a:	4562      	cmp	r2, ip
 800730c:	d8f5      	bhi.n	80072fa <_malloc_r+0x2e6>
 800730e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8007312:	e7d1      	b.n	80072b8 <_malloc_r+0x2a4>
 8007314:	6860      	ldr	r0, [r4, #4]
 8007316:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800731a:	f020 0003 	bic.w	r0, r0, #3
 800731e:	eba0 0a07 	sub.w	sl, r0, r7
 8007322:	f1ba 0f0f 	cmp.w	sl, #15
 8007326:	dd21      	ble.n	800736c <_malloc_r+0x358>
 8007328:	68a3      	ldr	r3, [r4, #8]
 800732a:	19e2      	adds	r2, r4, r7
 800732c:	f047 0701 	orr.w	r7, r7, #1
 8007330:	6067      	str	r7, [r4, #4]
 8007332:	f8c3 c00c 	str.w	ip, [r3, #12]
 8007336:	f8cc 3008 	str.w	r3, [ip, #8]
 800733a:	f04a 0301 	orr.w	r3, sl, #1
 800733e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8007342:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8007346:	6053      	str	r3, [r2, #4]
 8007348:	f844 a000 	str.w	sl, [r4, r0]
 800734c:	e693      	b.n	8007076 <_malloc_r+0x62>
 800734e:	bf00      	nop
 8007350:	2000043c 	.word	0x2000043c
 8007354:	20000444 	.word	0x20000444
 8007358:	20000a08 	.word	0x20000a08
 800735c:	20000844 	.word	0x20000844
 8007360:	20000a00 	.word	0x20000a00
 8007364:	20000a04 	.word	0x20000a04
 8007368:	200009d8 	.word	0x200009d8
 800736c:	f1ba 0f00 	cmp.w	sl, #0
 8007370:	db11      	blt.n	8007396 <_malloc_r+0x382>
 8007372:	4420      	add	r0, r4
 8007374:	6843      	ldr	r3, [r0, #4]
 8007376:	f043 0301 	orr.w	r3, r3, #1
 800737a:	6043      	str	r3, [r0, #4]
 800737c:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8007380:	4628      	mov	r0, r5
 8007382:	f8c3 c00c 	str.w	ip, [r3, #12]
 8007386:	f8cc 3008 	str.w	r3, [ip, #8]
 800738a:	f000 f8b3 	bl	80074f4 <__malloc_unlock>
 800738e:	4620      	mov	r0, r4
 8007390:	b003      	add	sp, #12
 8007392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007396:	4664      	mov	r4, ip
 8007398:	e706      	b.n	80071a8 <_malloc_r+0x194>
 800739a:	f858 0908 	ldr.w	r0, [r8], #-8
 800739e:	3b01      	subs	r3, #1
 80073a0:	4540      	cmp	r0, r8
 80073a2:	f43f af0b 	beq.w	80071bc <_malloc_r+0x1a8>
 80073a6:	e710      	b.n	80071ca <_malloc_r+0x1b6>
 80073a8:	3304      	adds	r3, #4
 80073aa:	0052      	lsls	r2, r2, #1
 80073ac:	4210      	tst	r0, r2
 80073ae:	d0fb      	beq.n	80073a8 <_malloc_r+0x394>
 80073b0:	e6f4      	b.n	800719c <_malloc_r+0x188>
 80073b2:	4673      	mov	r3, lr
 80073b4:	e7fa      	b.n	80073ac <_malloc_r+0x398>
 80073b6:	6810      	ldr	r0, [r2, #0]
 80073b8:	3001      	adds	r0, #1
 80073ba:	bf1b      	ittet	ne
 80073bc:	1ae3      	subne	r3, r4, r3
 80073be:	4473      	addne	r3, lr
 80073c0:	6014      	streq	r4, [r2, #0]
 80073c2:	f8ca 3000 	strne.w	r3, [sl]
 80073c6:	f014 0307 	ands.w	r3, r4, #7
 80073ca:	bf0e      	itee	eq
 80073cc:	4618      	moveq	r0, r3
 80073ce:	f1c3 0008 	rsbne	r0, r3, #8
 80073d2:	1824      	addne	r4, r4, r0
 80073d4:	1862      	adds	r2, r4, r1
 80073d6:	ea02 010c 	and.w	r1, r2, ip
 80073da:	4480      	add	r8, r0
 80073dc:	eba8 0801 	sub.w	r8, r8, r1
 80073e0:	ea08 080c 	and.w	r8, r8, ip
 80073e4:	4641      	mov	r1, r8
 80073e6:	4628      	mov	r0, r5
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	9200      	str	r2, [sp, #0]
 80073ec:	f000 fd9a 	bl	8007f24 <_sbrk_r>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073f6:	d105      	bne.n	8007404 <_malloc_r+0x3f0>
 80073f8:	b32b      	cbz	r3, 8007446 <_malloc_r+0x432>
 80073fa:	f04f 0800 	mov.w	r8, #0
 80073fe:	f1a3 0008 	sub.w	r0, r3, #8
 8007402:	4410      	add	r0, r2
 8007404:	f8da 2000 	ldr.w	r2, [sl]
 8007408:	1b00      	subs	r0, r0, r4
 800740a:	4440      	add	r0, r8
 800740c:	4442      	add	r2, r8
 800740e:	f040 0001 	orr.w	r0, r0, #1
 8007412:	45b3      	cmp	fp, r6
 8007414:	60b4      	str	r4, [r6, #8]
 8007416:	f8ca 2000 	str.w	r2, [sl]
 800741a:	6060      	str	r0, [r4, #4]
 800741c:	f43f af28 	beq.w	8007270 <_malloc_r+0x25c>
 8007420:	f1b9 0f0f 	cmp.w	r9, #15
 8007424:	d812      	bhi.n	800744c <_malloc_r+0x438>
 8007426:	2301      	movs	r3, #1
 8007428:	6063      	str	r3, [r4, #4]
 800742a:	68b3      	ldr	r3, [r6, #8]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f023 0303 	bic.w	r3, r3, #3
 8007432:	42bb      	cmp	r3, r7
 8007434:	eba3 0207 	sub.w	r2, r3, r7
 8007438:	d301      	bcc.n	800743e <_malloc_r+0x42a>
 800743a:	2a0f      	cmp	r2, #15
 800743c:	dc21      	bgt.n	8007482 <_malloc_r+0x46e>
 800743e:	4628      	mov	r0, r5
 8007440:	f000 f858 	bl	80074f4 <__malloc_unlock>
 8007444:	e5f2      	b.n	800702c <_malloc_r+0x18>
 8007446:	4610      	mov	r0, r2
 8007448:	4698      	mov	r8, r3
 800744a:	e7db      	b.n	8007404 <_malloc_r+0x3f0>
 800744c:	2205      	movs	r2, #5
 800744e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007452:	f1a9 090c 	sub.w	r9, r9, #12
 8007456:	f029 0907 	bic.w	r9, r9, #7
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	ea43 0309 	orr.w	r3, r3, r9
 8007462:	f8cb 3004 	str.w	r3, [fp, #4]
 8007466:	f1b9 0f0f 	cmp.w	r9, #15
 800746a:	eb0b 0309 	add.w	r3, fp, r9
 800746e:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8007472:	f67f aefd 	bls.w	8007270 <_malloc_r+0x25c>
 8007476:	4628      	mov	r0, r5
 8007478:	f10b 0108 	add.w	r1, fp, #8
 800747c:	f7ff fb2c 	bl	8006ad8 <_free_r>
 8007480:	e6f6      	b.n	8007270 <_malloc_r+0x25c>
 8007482:	68b4      	ldr	r4, [r6, #8]
 8007484:	f047 0301 	orr.w	r3, r7, #1
 8007488:	f042 0201 	orr.w	r2, r2, #1
 800748c:	4427      	add	r7, r4
 800748e:	6063      	str	r3, [r4, #4]
 8007490:	60b7      	str	r7, [r6, #8]
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	e5ef      	b.n	8007076 <_malloc_r+0x62>
 8007496:	bf00      	nop

08007498 <memchr>:
 8007498:	4603      	mov	r3, r0
 800749a:	b510      	push	{r4, lr}
 800749c:	b2c9      	uxtb	r1, r1
 800749e:	4402      	add	r2, r0
 80074a0:	4293      	cmp	r3, r2
 80074a2:	4618      	mov	r0, r3
 80074a4:	d101      	bne.n	80074aa <memchr+0x12>
 80074a6:	2000      	movs	r0, #0
 80074a8:	e003      	b.n	80074b2 <memchr+0x1a>
 80074aa:	7804      	ldrb	r4, [r0, #0]
 80074ac:	3301      	adds	r3, #1
 80074ae:	428c      	cmp	r4, r1
 80074b0:	d1f6      	bne.n	80074a0 <memchr+0x8>
 80074b2:	bd10      	pop	{r4, pc}

080074b4 <memmove>:
 80074b4:	4288      	cmp	r0, r1
 80074b6:	b510      	push	{r4, lr}
 80074b8:	eb01 0402 	add.w	r4, r1, r2
 80074bc:	d902      	bls.n	80074c4 <memmove+0x10>
 80074be:	4284      	cmp	r4, r0
 80074c0:	4623      	mov	r3, r4
 80074c2:	d807      	bhi.n	80074d4 <memmove+0x20>
 80074c4:	1e43      	subs	r3, r0, #1
 80074c6:	42a1      	cmp	r1, r4
 80074c8:	d008      	beq.n	80074dc <memmove+0x28>
 80074ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074d2:	e7f8      	b.n	80074c6 <memmove+0x12>
 80074d4:	4601      	mov	r1, r0
 80074d6:	4402      	add	r2, r0
 80074d8:	428a      	cmp	r2, r1
 80074da:	d100      	bne.n	80074de <memmove+0x2a>
 80074dc:	bd10      	pop	{r4, pc}
 80074de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074e6:	e7f7      	b.n	80074d8 <memmove+0x24>

080074e8 <__malloc_lock>:
 80074e8:	4801      	ldr	r0, [pc, #4]	; (80074f0 <__malloc_lock+0x8>)
 80074ea:	f7ff bd25 	b.w	8006f38 <__retarget_lock_acquire_recursive>
 80074ee:	bf00      	nop
 80074f0:	20000c54 	.word	0x20000c54

080074f4 <__malloc_unlock>:
 80074f4:	4801      	ldr	r0, [pc, #4]	; (80074fc <__malloc_unlock+0x8>)
 80074f6:	f7ff bd20 	b.w	8006f3a <__retarget_lock_release_recursive>
 80074fa:	bf00      	nop
 80074fc:	20000c54 	.word	0x20000c54

08007500 <_Balloc>:
 8007500:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007502:	b570      	push	{r4, r5, r6, lr}
 8007504:	4605      	mov	r5, r0
 8007506:	460c      	mov	r4, r1
 8007508:	b17b      	cbz	r3, 800752a <_Balloc+0x2a>
 800750a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800750c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007510:	b9a0      	cbnz	r0, 800753c <_Balloc+0x3c>
 8007512:	2101      	movs	r1, #1
 8007514:	fa01 f604 	lsl.w	r6, r1, r4
 8007518:	1d72      	adds	r2, r6, #5
 800751a:	4628      	mov	r0, r5
 800751c:	0092      	lsls	r2, r2, #2
 800751e:	f001 fb51 	bl	8008bc4 <_calloc_r>
 8007522:	b148      	cbz	r0, 8007538 <_Balloc+0x38>
 8007524:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8007528:	e00b      	b.n	8007542 <_Balloc+0x42>
 800752a:	2221      	movs	r2, #33	; 0x21
 800752c:	2104      	movs	r1, #4
 800752e:	f001 fb49 	bl	8008bc4 <_calloc_r>
 8007532:	64e8      	str	r0, [r5, #76]	; 0x4c
 8007534:	2800      	cmp	r0, #0
 8007536:	d1e8      	bne.n	800750a <_Balloc+0xa>
 8007538:	2000      	movs	r0, #0
 800753a:	bd70      	pop	{r4, r5, r6, pc}
 800753c:	6802      	ldr	r2, [r0, #0]
 800753e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8007542:	2300      	movs	r3, #0
 8007544:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007548:	e7f7      	b.n	800753a <_Balloc+0x3a>

0800754a <_Bfree>:
 800754a:	b131      	cbz	r1, 800755a <_Bfree+0x10>
 800754c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800754e:	684a      	ldr	r2, [r1, #4]
 8007550:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007554:	6008      	str	r0, [r1, #0]
 8007556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800755a:	4770      	bx	lr

0800755c <__multadd>:
 800755c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007560:	4698      	mov	r8, r3
 8007562:	460c      	mov	r4, r1
 8007564:	2300      	movs	r3, #0
 8007566:	690e      	ldr	r6, [r1, #16]
 8007568:	4607      	mov	r7, r0
 800756a:	f101 0014 	add.w	r0, r1, #20
 800756e:	6805      	ldr	r5, [r0, #0]
 8007570:	3301      	adds	r3, #1
 8007572:	b2a9      	uxth	r1, r5
 8007574:	fb02 8101 	mla	r1, r2, r1, r8
 8007578:	0c2d      	lsrs	r5, r5, #16
 800757a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800757e:	fb02 c505 	mla	r5, r2, r5, ip
 8007582:	b289      	uxth	r1, r1
 8007584:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007588:	429e      	cmp	r6, r3
 800758a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800758e:	f840 1b04 	str.w	r1, [r0], #4
 8007592:	dcec      	bgt.n	800756e <__multadd+0x12>
 8007594:	f1b8 0f00 	cmp.w	r8, #0
 8007598:	d022      	beq.n	80075e0 <__multadd+0x84>
 800759a:	68a3      	ldr	r3, [r4, #8]
 800759c:	42b3      	cmp	r3, r6
 800759e:	dc19      	bgt.n	80075d4 <__multadd+0x78>
 80075a0:	6861      	ldr	r1, [r4, #4]
 80075a2:	4638      	mov	r0, r7
 80075a4:	3101      	adds	r1, #1
 80075a6:	f7ff ffab 	bl	8007500 <_Balloc>
 80075aa:	4605      	mov	r5, r0
 80075ac:	b928      	cbnz	r0, 80075ba <__multadd+0x5e>
 80075ae:	4602      	mov	r2, r0
 80075b0:	21b5      	movs	r1, #181	; 0xb5
 80075b2:	4b0d      	ldr	r3, [pc, #52]	; (80075e8 <__multadd+0x8c>)
 80075b4:	480d      	ldr	r0, [pc, #52]	; (80075ec <__multadd+0x90>)
 80075b6:	f001 fae7 	bl	8008b88 <__assert_func>
 80075ba:	6922      	ldr	r2, [r4, #16]
 80075bc:	f104 010c 	add.w	r1, r4, #12
 80075c0:	3202      	adds	r2, #2
 80075c2:	0092      	lsls	r2, r2, #2
 80075c4:	300c      	adds	r0, #12
 80075c6:	f7fb fd7d 	bl	80030c4 <memcpy>
 80075ca:	4621      	mov	r1, r4
 80075cc:	4638      	mov	r0, r7
 80075ce:	f7ff ffbc 	bl	800754a <_Bfree>
 80075d2:	462c      	mov	r4, r5
 80075d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80075d8:	3601      	adds	r6, #1
 80075da:	f8c3 8014 	str.w	r8, [r3, #20]
 80075de:	6126      	str	r6, [r4, #16]
 80075e0:	4620      	mov	r0, r4
 80075e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e6:	bf00      	nop
 80075e8:	0800933d 	.word	0x0800933d
 80075ec:	080093ad 	.word	0x080093ad

080075f0 <__hi0bits>:
 80075f0:	0c02      	lsrs	r2, r0, #16
 80075f2:	0412      	lsls	r2, r2, #16
 80075f4:	4603      	mov	r3, r0
 80075f6:	b9ca      	cbnz	r2, 800762c <__hi0bits+0x3c>
 80075f8:	0403      	lsls	r3, r0, #16
 80075fa:	2010      	movs	r0, #16
 80075fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007600:	bf04      	itt	eq
 8007602:	021b      	lsleq	r3, r3, #8
 8007604:	3008      	addeq	r0, #8
 8007606:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800760a:	bf04      	itt	eq
 800760c:	011b      	lsleq	r3, r3, #4
 800760e:	3004      	addeq	r0, #4
 8007610:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007614:	bf04      	itt	eq
 8007616:	009b      	lsleq	r3, r3, #2
 8007618:	3002      	addeq	r0, #2
 800761a:	2b00      	cmp	r3, #0
 800761c:	db05      	blt.n	800762a <__hi0bits+0x3a>
 800761e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007622:	f100 0001 	add.w	r0, r0, #1
 8007626:	bf08      	it	eq
 8007628:	2020      	moveq	r0, #32
 800762a:	4770      	bx	lr
 800762c:	2000      	movs	r0, #0
 800762e:	e7e5      	b.n	80075fc <__hi0bits+0xc>

08007630 <__lo0bits>:
 8007630:	6803      	ldr	r3, [r0, #0]
 8007632:	4602      	mov	r2, r0
 8007634:	f013 0007 	ands.w	r0, r3, #7
 8007638:	d00b      	beq.n	8007652 <__lo0bits+0x22>
 800763a:	07d9      	lsls	r1, r3, #31
 800763c:	d422      	bmi.n	8007684 <__lo0bits+0x54>
 800763e:	0798      	lsls	r0, r3, #30
 8007640:	bf49      	itett	mi
 8007642:	085b      	lsrmi	r3, r3, #1
 8007644:	089b      	lsrpl	r3, r3, #2
 8007646:	2001      	movmi	r0, #1
 8007648:	6013      	strmi	r3, [r2, #0]
 800764a:	bf5c      	itt	pl
 800764c:	2002      	movpl	r0, #2
 800764e:	6013      	strpl	r3, [r2, #0]
 8007650:	4770      	bx	lr
 8007652:	b299      	uxth	r1, r3
 8007654:	b909      	cbnz	r1, 800765a <__lo0bits+0x2a>
 8007656:	2010      	movs	r0, #16
 8007658:	0c1b      	lsrs	r3, r3, #16
 800765a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800765e:	bf04      	itt	eq
 8007660:	0a1b      	lsreq	r3, r3, #8
 8007662:	3008      	addeq	r0, #8
 8007664:	0719      	lsls	r1, r3, #28
 8007666:	bf04      	itt	eq
 8007668:	091b      	lsreq	r3, r3, #4
 800766a:	3004      	addeq	r0, #4
 800766c:	0799      	lsls	r1, r3, #30
 800766e:	bf04      	itt	eq
 8007670:	089b      	lsreq	r3, r3, #2
 8007672:	3002      	addeq	r0, #2
 8007674:	07d9      	lsls	r1, r3, #31
 8007676:	d403      	bmi.n	8007680 <__lo0bits+0x50>
 8007678:	085b      	lsrs	r3, r3, #1
 800767a:	f100 0001 	add.w	r0, r0, #1
 800767e:	d003      	beq.n	8007688 <__lo0bits+0x58>
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	4770      	bx	lr
 8007684:	2000      	movs	r0, #0
 8007686:	4770      	bx	lr
 8007688:	2020      	movs	r0, #32
 800768a:	4770      	bx	lr

0800768c <__i2b>:
 800768c:	b510      	push	{r4, lr}
 800768e:	460c      	mov	r4, r1
 8007690:	2101      	movs	r1, #1
 8007692:	f7ff ff35 	bl	8007500 <_Balloc>
 8007696:	4602      	mov	r2, r0
 8007698:	b928      	cbnz	r0, 80076a6 <__i2b+0x1a>
 800769a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800769e:	4b04      	ldr	r3, [pc, #16]	; (80076b0 <__i2b+0x24>)
 80076a0:	4804      	ldr	r0, [pc, #16]	; (80076b4 <__i2b+0x28>)
 80076a2:	f001 fa71 	bl	8008b88 <__assert_func>
 80076a6:	2301      	movs	r3, #1
 80076a8:	6144      	str	r4, [r0, #20]
 80076aa:	6103      	str	r3, [r0, #16]
 80076ac:	bd10      	pop	{r4, pc}
 80076ae:	bf00      	nop
 80076b0:	0800933d 	.word	0x0800933d
 80076b4:	080093ad 	.word	0x080093ad

080076b8 <__multiply>:
 80076b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	4614      	mov	r4, r2
 80076be:	690a      	ldr	r2, [r1, #16]
 80076c0:	6923      	ldr	r3, [r4, #16]
 80076c2:	460d      	mov	r5, r1
 80076c4:	429a      	cmp	r2, r3
 80076c6:	bfbe      	ittt	lt
 80076c8:	460b      	movlt	r3, r1
 80076ca:	4625      	movlt	r5, r4
 80076cc:	461c      	movlt	r4, r3
 80076ce:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80076d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80076d6:	68ab      	ldr	r3, [r5, #8]
 80076d8:	6869      	ldr	r1, [r5, #4]
 80076da:	eb0a 0709 	add.w	r7, sl, r9
 80076de:	42bb      	cmp	r3, r7
 80076e0:	b085      	sub	sp, #20
 80076e2:	bfb8      	it	lt
 80076e4:	3101      	addlt	r1, #1
 80076e6:	f7ff ff0b 	bl	8007500 <_Balloc>
 80076ea:	b930      	cbnz	r0, 80076fa <__multiply+0x42>
 80076ec:	4602      	mov	r2, r0
 80076ee:	f240 115d 	movw	r1, #349	; 0x15d
 80076f2:	4b41      	ldr	r3, [pc, #260]	; (80077f8 <__multiply+0x140>)
 80076f4:	4841      	ldr	r0, [pc, #260]	; (80077fc <__multiply+0x144>)
 80076f6:	f001 fa47 	bl	8008b88 <__assert_func>
 80076fa:	f100 0614 	add.w	r6, r0, #20
 80076fe:	4633      	mov	r3, r6
 8007700:	2200      	movs	r2, #0
 8007702:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007706:	4543      	cmp	r3, r8
 8007708:	d31e      	bcc.n	8007748 <__multiply+0x90>
 800770a:	f105 0c14 	add.w	ip, r5, #20
 800770e:	f104 0314 	add.w	r3, r4, #20
 8007712:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007716:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800771a:	9202      	str	r2, [sp, #8]
 800771c:	ebac 0205 	sub.w	r2, ip, r5
 8007720:	3a15      	subs	r2, #21
 8007722:	f022 0203 	bic.w	r2, r2, #3
 8007726:	3204      	adds	r2, #4
 8007728:	f105 0115 	add.w	r1, r5, #21
 800772c:	458c      	cmp	ip, r1
 800772e:	bf38      	it	cc
 8007730:	2204      	movcc	r2, #4
 8007732:	9201      	str	r2, [sp, #4]
 8007734:	9a02      	ldr	r2, [sp, #8]
 8007736:	9303      	str	r3, [sp, #12]
 8007738:	429a      	cmp	r2, r3
 800773a:	d808      	bhi.n	800774e <__multiply+0x96>
 800773c:	2f00      	cmp	r7, #0
 800773e:	dc55      	bgt.n	80077ec <__multiply+0x134>
 8007740:	6107      	str	r7, [r0, #16]
 8007742:	b005      	add	sp, #20
 8007744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007748:	f843 2b04 	str.w	r2, [r3], #4
 800774c:	e7db      	b.n	8007706 <__multiply+0x4e>
 800774e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007752:	f1ba 0f00 	cmp.w	sl, #0
 8007756:	d020      	beq.n	800779a <__multiply+0xe2>
 8007758:	46b1      	mov	r9, r6
 800775a:	2200      	movs	r2, #0
 800775c:	f105 0e14 	add.w	lr, r5, #20
 8007760:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007764:	f8d9 b000 	ldr.w	fp, [r9]
 8007768:	b2a1      	uxth	r1, r4
 800776a:	fa1f fb8b 	uxth.w	fp, fp
 800776e:	fb0a b101 	mla	r1, sl, r1, fp
 8007772:	4411      	add	r1, r2
 8007774:	f8d9 2000 	ldr.w	r2, [r9]
 8007778:	0c24      	lsrs	r4, r4, #16
 800777a:	0c12      	lsrs	r2, r2, #16
 800777c:	fb0a 2404 	mla	r4, sl, r4, r2
 8007780:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007784:	b289      	uxth	r1, r1
 8007786:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800778a:	45f4      	cmp	ip, lr
 800778c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007790:	f849 1b04 	str.w	r1, [r9], #4
 8007794:	d8e4      	bhi.n	8007760 <__multiply+0xa8>
 8007796:	9901      	ldr	r1, [sp, #4]
 8007798:	5072      	str	r2, [r6, r1]
 800779a:	9a03      	ldr	r2, [sp, #12]
 800779c:	3304      	adds	r3, #4
 800779e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077a2:	f1b9 0f00 	cmp.w	r9, #0
 80077a6:	d01f      	beq.n	80077e8 <__multiply+0x130>
 80077a8:	46b6      	mov	lr, r6
 80077aa:	f04f 0a00 	mov.w	sl, #0
 80077ae:	6834      	ldr	r4, [r6, #0]
 80077b0:	f105 0114 	add.w	r1, r5, #20
 80077b4:	880a      	ldrh	r2, [r1, #0]
 80077b6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80077ba:	b2a4      	uxth	r4, r4
 80077bc:	fb09 b202 	mla	r2, r9, r2, fp
 80077c0:	4492      	add	sl, r2
 80077c2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80077c6:	f84e 4b04 	str.w	r4, [lr], #4
 80077ca:	f851 4b04 	ldr.w	r4, [r1], #4
 80077ce:	f8be 2000 	ldrh.w	r2, [lr]
 80077d2:	0c24      	lsrs	r4, r4, #16
 80077d4:	fb09 2404 	mla	r4, r9, r4, r2
 80077d8:	458c      	cmp	ip, r1
 80077da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80077de:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80077e2:	d8e7      	bhi.n	80077b4 <__multiply+0xfc>
 80077e4:	9a01      	ldr	r2, [sp, #4]
 80077e6:	50b4      	str	r4, [r6, r2]
 80077e8:	3604      	adds	r6, #4
 80077ea:	e7a3      	b.n	8007734 <__multiply+0x7c>
 80077ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1a5      	bne.n	8007740 <__multiply+0x88>
 80077f4:	3f01      	subs	r7, #1
 80077f6:	e7a1      	b.n	800773c <__multiply+0x84>
 80077f8:	0800933d 	.word	0x0800933d
 80077fc:	080093ad 	.word	0x080093ad

08007800 <__pow5mult>:
 8007800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007804:	4615      	mov	r5, r2
 8007806:	f012 0203 	ands.w	r2, r2, #3
 800780a:	4606      	mov	r6, r0
 800780c:	460f      	mov	r7, r1
 800780e:	d007      	beq.n	8007820 <__pow5mult+0x20>
 8007810:	4c1a      	ldr	r4, [pc, #104]	; (800787c <__pow5mult+0x7c>)
 8007812:	3a01      	subs	r2, #1
 8007814:	2300      	movs	r3, #0
 8007816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800781a:	f7ff fe9f 	bl	800755c <__multadd>
 800781e:	4607      	mov	r7, r0
 8007820:	10ad      	asrs	r5, r5, #2
 8007822:	d027      	beq.n	8007874 <__pow5mult+0x74>
 8007824:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8007826:	b944      	cbnz	r4, 800783a <__pow5mult+0x3a>
 8007828:	f240 2171 	movw	r1, #625	; 0x271
 800782c:	4630      	mov	r0, r6
 800782e:	f7ff ff2d 	bl	800768c <__i2b>
 8007832:	2300      	movs	r3, #0
 8007834:	4604      	mov	r4, r0
 8007836:	64b0      	str	r0, [r6, #72]	; 0x48
 8007838:	6003      	str	r3, [r0, #0]
 800783a:	f04f 0900 	mov.w	r9, #0
 800783e:	07eb      	lsls	r3, r5, #31
 8007840:	d50a      	bpl.n	8007858 <__pow5mult+0x58>
 8007842:	4639      	mov	r1, r7
 8007844:	4622      	mov	r2, r4
 8007846:	4630      	mov	r0, r6
 8007848:	f7ff ff36 	bl	80076b8 <__multiply>
 800784c:	4680      	mov	r8, r0
 800784e:	4639      	mov	r1, r7
 8007850:	4630      	mov	r0, r6
 8007852:	f7ff fe7a 	bl	800754a <_Bfree>
 8007856:	4647      	mov	r7, r8
 8007858:	106d      	asrs	r5, r5, #1
 800785a:	d00b      	beq.n	8007874 <__pow5mult+0x74>
 800785c:	6820      	ldr	r0, [r4, #0]
 800785e:	b938      	cbnz	r0, 8007870 <__pow5mult+0x70>
 8007860:	4622      	mov	r2, r4
 8007862:	4621      	mov	r1, r4
 8007864:	4630      	mov	r0, r6
 8007866:	f7ff ff27 	bl	80076b8 <__multiply>
 800786a:	6020      	str	r0, [r4, #0]
 800786c:	f8c0 9000 	str.w	r9, [r0]
 8007870:	4604      	mov	r4, r0
 8007872:	e7e4      	b.n	800783e <__pow5mult+0x3e>
 8007874:	4638      	mov	r0, r7
 8007876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800787a:	bf00      	nop
 800787c:	08009500 	.word	0x08009500

08007880 <__lshift>:
 8007880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007884:	460c      	mov	r4, r1
 8007886:	4607      	mov	r7, r0
 8007888:	4691      	mov	r9, r2
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	6849      	ldr	r1, [r1, #4]
 800788e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007892:	68a3      	ldr	r3, [r4, #8]
 8007894:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007898:	f108 0601 	add.w	r6, r8, #1
 800789c:	42b3      	cmp	r3, r6
 800789e:	db0b      	blt.n	80078b8 <__lshift+0x38>
 80078a0:	4638      	mov	r0, r7
 80078a2:	f7ff fe2d 	bl	8007500 <_Balloc>
 80078a6:	4605      	mov	r5, r0
 80078a8:	b948      	cbnz	r0, 80078be <__lshift+0x3e>
 80078aa:	4602      	mov	r2, r0
 80078ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80078b0:	4b27      	ldr	r3, [pc, #156]	; (8007950 <__lshift+0xd0>)
 80078b2:	4828      	ldr	r0, [pc, #160]	; (8007954 <__lshift+0xd4>)
 80078b4:	f001 f968 	bl	8008b88 <__assert_func>
 80078b8:	3101      	adds	r1, #1
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	e7ee      	b.n	800789c <__lshift+0x1c>
 80078be:	2300      	movs	r3, #0
 80078c0:	f100 0114 	add.w	r1, r0, #20
 80078c4:	f100 0210 	add.w	r2, r0, #16
 80078c8:	4618      	mov	r0, r3
 80078ca:	4553      	cmp	r3, sl
 80078cc:	db33      	blt.n	8007936 <__lshift+0xb6>
 80078ce:	6920      	ldr	r0, [r4, #16]
 80078d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078d4:	f104 0314 	add.w	r3, r4, #20
 80078d8:	f019 091f 	ands.w	r9, r9, #31
 80078dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078e4:	d02b      	beq.n	800793e <__lshift+0xbe>
 80078e6:	468a      	mov	sl, r1
 80078e8:	2200      	movs	r2, #0
 80078ea:	f1c9 0e20 	rsb	lr, r9, #32
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	fa00 f009 	lsl.w	r0, r0, r9
 80078f4:	4302      	orrs	r2, r0
 80078f6:	f84a 2b04 	str.w	r2, [sl], #4
 80078fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80078fe:	459c      	cmp	ip, r3
 8007900:	fa22 f20e 	lsr.w	r2, r2, lr
 8007904:	d8f3      	bhi.n	80078ee <__lshift+0x6e>
 8007906:	ebac 0304 	sub.w	r3, ip, r4
 800790a:	3b15      	subs	r3, #21
 800790c:	f023 0303 	bic.w	r3, r3, #3
 8007910:	3304      	adds	r3, #4
 8007912:	f104 0015 	add.w	r0, r4, #21
 8007916:	4584      	cmp	ip, r0
 8007918:	bf38      	it	cc
 800791a:	2304      	movcc	r3, #4
 800791c:	50ca      	str	r2, [r1, r3]
 800791e:	b10a      	cbz	r2, 8007924 <__lshift+0xa4>
 8007920:	f108 0602 	add.w	r6, r8, #2
 8007924:	3e01      	subs	r6, #1
 8007926:	4638      	mov	r0, r7
 8007928:	4621      	mov	r1, r4
 800792a:	612e      	str	r6, [r5, #16]
 800792c:	f7ff fe0d 	bl	800754a <_Bfree>
 8007930:	4628      	mov	r0, r5
 8007932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007936:	f842 0f04 	str.w	r0, [r2, #4]!
 800793a:	3301      	adds	r3, #1
 800793c:	e7c5      	b.n	80078ca <__lshift+0x4a>
 800793e:	3904      	subs	r1, #4
 8007940:	f853 2b04 	ldr.w	r2, [r3], #4
 8007944:	459c      	cmp	ip, r3
 8007946:	f841 2f04 	str.w	r2, [r1, #4]!
 800794a:	d8f9      	bhi.n	8007940 <__lshift+0xc0>
 800794c:	e7ea      	b.n	8007924 <__lshift+0xa4>
 800794e:	bf00      	nop
 8007950:	0800933d 	.word	0x0800933d
 8007954:	080093ad 	.word	0x080093ad

08007958 <__mcmp>:
 8007958:	4603      	mov	r3, r0
 800795a:	690a      	ldr	r2, [r1, #16]
 800795c:	6900      	ldr	r0, [r0, #16]
 800795e:	b530      	push	{r4, r5, lr}
 8007960:	1a80      	subs	r0, r0, r2
 8007962:	d10d      	bne.n	8007980 <__mcmp+0x28>
 8007964:	3314      	adds	r3, #20
 8007966:	3114      	adds	r1, #20
 8007968:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800796c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007970:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007974:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007978:	4295      	cmp	r5, r2
 800797a:	d002      	beq.n	8007982 <__mcmp+0x2a>
 800797c:	d304      	bcc.n	8007988 <__mcmp+0x30>
 800797e:	2001      	movs	r0, #1
 8007980:	bd30      	pop	{r4, r5, pc}
 8007982:	42a3      	cmp	r3, r4
 8007984:	d3f4      	bcc.n	8007970 <__mcmp+0x18>
 8007986:	e7fb      	b.n	8007980 <__mcmp+0x28>
 8007988:	f04f 30ff 	mov.w	r0, #4294967295
 800798c:	e7f8      	b.n	8007980 <__mcmp+0x28>
	...

08007990 <__mdiff>:
 8007990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	460c      	mov	r4, r1
 8007996:	4606      	mov	r6, r0
 8007998:	4611      	mov	r1, r2
 800799a:	4620      	mov	r0, r4
 800799c:	4692      	mov	sl, r2
 800799e:	f7ff ffdb 	bl	8007958 <__mcmp>
 80079a2:	1e05      	subs	r5, r0, #0
 80079a4:	d111      	bne.n	80079ca <__mdiff+0x3a>
 80079a6:	4629      	mov	r1, r5
 80079a8:	4630      	mov	r0, r6
 80079aa:	f7ff fda9 	bl	8007500 <_Balloc>
 80079ae:	4602      	mov	r2, r0
 80079b0:	b928      	cbnz	r0, 80079be <__mdiff+0x2e>
 80079b2:	f240 2132 	movw	r1, #562	; 0x232
 80079b6:	4b3c      	ldr	r3, [pc, #240]	; (8007aa8 <__mdiff+0x118>)
 80079b8:	483c      	ldr	r0, [pc, #240]	; (8007aac <__mdiff+0x11c>)
 80079ba:	f001 f8e5 	bl	8008b88 <__assert_func>
 80079be:	2301      	movs	r3, #1
 80079c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079c4:	4610      	mov	r0, r2
 80079c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ca:	bfa4      	itt	ge
 80079cc:	4653      	movge	r3, sl
 80079ce:	46a2      	movge	sl, r4
 80079d0:	4630      	mov	r0, r6
 80079d2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80079d6:	bfa6      	itte	ge
 80079d8:	461c      	movge	r4, r3
 80079da:	2500      	movge	r5, #0
 80079dc:	2501      	movlt	r5, #1
 80079de:	f7ff fd8f 	bl	8007500 <_Balloc>
 80079e2:	4602      	mov	r2, r0
 80079e4:	b918      	cbnz	r0, 80079ee <__mdiff+0x5e>
 80079e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80079ea:	4b2f      	ldr	r3, [pc, #188]	; (8007aa8 <__mdiff+0x118>)
 80079ec:	e7e4      	b.n	80079b8 <__mdiff+0x28>
 80079ee:	f100 0814 	add.w	r8, r0, #20
 80079f2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80079f6:	60c5      	str	r5, [r0, #12]
 80079f8:	f04f 0c00 	mov.w	ip, #0
 80079fc:	f10a 0514 	add.w	r5, sl, #20
 8007a00:	f10a 0010 	add.w	r0, sl, #16
 8007a04:	46c2      	mov	sl, r8
 8007a06:	6926      	ldr	r6, [r4, #16]
 8007a08:	f104 0914 	add.w	r9, r4, #20
 8007a0c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007a10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a14:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007a18:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a1c:	fa1f f18b 	uxth.w	r1, fp
 8007a20:	4461      	add	r1, ip
 8007a22:	fa1f fc83 	uxth.w	ip, r3
 8007a26:	0c1b      	lsrs	r3, r3, #16
 8007a28:	eba1 010c 	sub.w	r1, r1, ip
 8007a2c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a30:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007a34:	b289      	uxth	r1, r1
 8007a36:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007a3a:	454e      	cmp	r6, r9
 8007a3c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007a40:	f84a 3b04 	str.w	r3, [sl], #4
 8007a44:	d8e6      	bhi.n	8007a14 <__mdiff+0x84>
 8007a46:	1b33      	subs	r3, r6, r4
 8007a48:	3b15      	subs	r3, #21
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	3415      	adds	r4, #21
 8007a50:	3304      	adds	r3, #4
 8007a52:	42a6      	cmp	r6, r4
 8007a54:	bf38      	it	cc
 8007a56:	2304      	movcc	r3, #4
 8007a58:	441d      	add	r5, r3
 8007a5a:	4443      	add	r3, r8
 8007a5c:	461e      	mov	r6, r3
 8007a5e:	462c      	mov	r4, r5
 8007a60:	4574      	cmp	r4, lr
 8007a62:	d30e      	bcc.n	8007a82 <__mdiff+0xf2>
 8007a64:	f10e 0103 	add.w	r1, lr, #3
 8007a68:	1b49      	subs	r1, r1, r5
 8007a6a:	f021 0103 	bic.w	r1, r1, #3
 8007a6e:	3d03      	subs	r5, #3
 8007a70:	45ae      	cmp	lr, r5
 8007a72:	bf38      	it	cc
 8007a74:	2100      	movcc	r1, #0
 8007a76:	4419      	add	r1, r3
 8007a78:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007a7c:	b18b      	cbz	r3, 8007aa2 <__mdiff+0x112>
 8007a7e:	6117      	str	r7, [r2, #16]
 8007a80:	e7a0      	b.n	80079c4 <__mdiff+0x34>
 8007a82:	f854 8b04 	ldr.w	r8, [r4], #4
 8007a86:	fa1f f188 	uxth.w	r1, r8
 8007a8a:	4461      	add	r1, ip
 8007a8c:	1408      	asrs	r0, r1, #16
 8007a8e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007a92:	b289      	uxth	r1, r1
 8007a94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a9c:	f846 1b04 	str.w	r1, [r6], #4
 8007aa0:	e7de      	b.n	8007a60 <__mdiff+0xd0>
 8007aa2:	3f01      	subs	r7, #1
 8007aa4:	e7e8      	b.n	8007a78 <__mdiff+0xe8>
 8007aa6:	bf00      	nop
 8007aa8:	0800933d 	.word	0x0800933d
 8007aac:	080093ad 	.word	0x080093ad

08007ab0 <__d2b>:
 8007ab0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007aba:	4690      	mov	r8, r2
 8007abc:	461d      	mov	r5, r3
 8007abe:	f7ff fd1f 	bl	8007500 <_Balloc>
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	b930      	cbnz	r0, 8007ad4 <__d2b+0x24>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	f240 310a 	movw	r1, #778	; 0x30a
 8007acc:	4b24      	ldr	r3, [pc, #144]	; (8007b60 <__d2b+0xb0>)
 8007ace:	4825      	ldr	r0, [pc, #148]	; (8007b64 <__d2b+0xb4>)
 8007ad0:	f001 f85a 	bl	8008b88 <__assert_func>
 8007ad4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007ad8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007adc:	bb2d      	cbnz	r5, 8007b2a <__d2b+0x7a>
 8007ade:	9301      	str	r3, [sp, #4]
 8007ae0:	f1b8 0300 	subs.w	r3, r8, #0
 8007ae4:	d026      	beq.n	8007b34 <__d2b+0x84>
 8007ae6:	4668      	mov	r0, sp
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	f7ff fda1 	bl	8007630 <__lo0bits>
 8007aee:	9900      	ldr	r1, [sp, #0]
 8007af0:	b1f0      	cbz	r0, 8007b30 <__d2b+0x80>
 8007af2:	9a01      	ldr	r2, [sp, #4]
 8007af4:	f1c0 0320 	rsb	r3, r0, #32
 8007af8:	fa02 f303 	lsl.w	r3, r2, r3
 8007afc:	430b      	orrs	r3, r1
 8007afe:	40c2      	lsrs	r2, r0
 8007b00:	6163      	str	r3, [r4, #20]
 8007b02:	9201      	str	r2, [sp, #4]
 8007b04:	9b01      	ldr	r3, [sp, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bf14      	ite	ne
 8007b0a:	2102      	movne	r1, #2
 8007b0c:	2101      	moveq	r1, #1
 8007b0e:	61a3      	str	r3, [r4, #24]
 8007b10:	6121      	str	r1, [r4, #16]
 8007b12:	b1c5      	cbz	r5, 8007b46 <__d2b+0x96>
 8007b14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b18:	4405      	add	r5, r0
 8007b1a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b1e:	603d      	str	r5, [r7, #0]
 8007b20:	6030      	str	r0, [r6, #0]
 8007b22:	4620      	mov	r0, r4
 8007b24:	b002      	add	sp, #8
 8007b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b2e:	e7d6      	b.n	8007ade <__d2b+0x2e>
 8007b30:	6161      	str	r1, [r4, #20]
 8007b32:	e7e7      	b.n	8007b04 <__d2b+0x54>
 8007b34:	a801      	add	r0, sp, #4
 8007b36:	f7ff fd7b 	bl	8007630 <__lo0bits>
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	9b01      	ldr	r3, [sp, #4]
 8007b3e:	6121      	str	r1, [r4, #16]
 8007b40:	6163      	str	r3, [r4, #20]
 8007b42:	3020      	adds	r0, #32
 8007b44:	e7e5      	b.n	8007b12 <__d2b+0x62>
 8007b46:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007b4a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b4e:	6038      	str	r0, [r7, #0]
 8007b50:	6918      	ldr	r0, [r3, #16]
 8007b52:	f7ff fd4d 	bl	80075f0 <__hi0bits>
 8007b56:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007b5a:	6031      	str	r1, [r6, #0]
 8007b5c:	e7e1      	b.n	8007b22 <__d2b+0x72>
 8007b5e:	bf00      	nop
 8007b60:	0800933d 	.word	0x0800933d
 8007b64:	080093ad 	.word	0x080093ad

08007b68 <_realloc_r>:
 8007b68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	4681      	mov	r9, r0
 8007b70:	4611      	mov	r1, r2
 8007b72:	b924      	cbnz	r4, 8007b7e <_realloc_r+0x16>
 8007b74:	b003      	add	sp, #12
 8007b76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7a:	f7ff ba4b 	b.w	8007014 <_malloc_r>
 8007b7e:	9201      	str	r2, [sp, #4]
 8007b80:	f7ff fcb2 	bl	80074e8 <__malloc_lock>
 8007b84:	9901      	ldr	r1, [sp, #4]
 8007b86:	f101 080b 	add.w	r8, r1, #11
 8007b8a:	f1b8 0f16 	cmp.w	r8, #22
 8007b8e:	d90b      	bls.n	8007ba8 <_realloc_r+0x40>
 8007b90:	f038 0807 	bics.w	r8, r8, #7
 8007b94:	d50a      	bpl.n	8007bac <_realloc_r+0x44>
 8007b96:	230c      	movs	r3, #12
 8007b98:	f04f 0b00 	mov.w	fp, #0
 8007b9c:	f8c9 3000 	str.w	r3, [r9]
 8007ba0:	4658      	mov	r0, fp
 8007ba2:	b003      	add	sp, #12
 8007ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba8:	f04f 0810 	mov.w	r8, #16
 8007bac:	4588      	cmp	r8, r1
 8007bae:	d3f2      	bcc.n	8007b96 <_realloc_r+0x2e>
 8007bb0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8007bb4:	f1a4 0a08 	sub.w	sl, r4, #8
 8007bb8:	f025 0603 	bic.w	r6, r5, #3
 8007bbc:	45b0      	cmp	r8, r6
 8007bbe:	f340 8173 	ble.w	8007ea8 <_realloc_r+0x340>
 8007bc2:	48aa      	ldr	r0, [pc, #680]	; (8007e6c <_realloc_r+0x304>)
 8007bc4:	eb0a 0306 	add.w	r3, sl, r6
 8007bc8:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	459c      	cmp	ip, r3
 8007bd0:	9001      	str	r0, [sp, #4]
 8007bd2:	d005      	beq.n	8007be0 <_realloc_r+0x78>
 8007bd4:	f022 0001 	bic.w	r0, r2, #1
 8007bd8:	4418      	add	r0, r3
 8007bda:	6840      	ldr	r0, [r0, #4]
 8007bdc:	07c7      	lsls	r7, r0, #31
 8007bde:	d427      	bmi.n	8007c30 <_realloc_r+0xc8>
 8007be0:	f022 0203 	bic.w	r2, r2, #3
 8007be4:	459c      	cmp	ip, r3
 8007be6:	eb06 0702 	add.w	r7, r6, r2
 8007bea:	d119      	bne.n	8007c20 <_realloc_r+0xb8>
 8007bec:	f108 0010 	add.w	r0, r8, #16
 8007bf0:	42b8      	cmp	r0, r7
 8007bf2:	dc1f      	bgt.n	8007c34 <_realloc_r+0xcc>
 8007bf4:	9a01      	ldr	r2, [sp, #4]
 8007bf6:	eba7 0708 	sub.w	r7, r7, r8
 8007bfa:	eb0a 0308 	add.w	r3, sl, r8
 8007bfe:	f047 0701 	orr.w	r7, r7, #1
 8007c02:	6093      	str	r3, [r2, #8]
 8007c04:	605f      	str	r7, [r3, #4]
 8007c06:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007c0a:	4648      	mov	r0, r9
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	ea43 0308 	orr.w	r3, r3, r8
 8007c14:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c18:	f7ff fc6c 	bl	80074f4 <__malloc_unlock>
 8007c1c:	46a3      	mov	fp, r4
 8007c1e:	e7bf      	b.n	8007ba0 <_realloc_r+0x38>
 8007c20:	45b8      	cmp	r8, r7
 8007c22:	dc07      	bgt.n	8007c34 <_realloc_r+0xcc>
 8007c24:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007c28:	60da      	str	r2, [r3, #12]
 8007c2a:	6093      	str	r3, [r2, #8]
 8007c2c:	4655      	mov	r5, sl
 8007c2e:	e080      	b.n	8007d32 <_realloc_r+0x1ca>
 8007c30:	2200      	movs	r2, #0
 8007c32:	4613      	mov	r3, r2
 8007c34:	07e8      	lsls	r0, r5, #31
 8007c36:	f100 80e8 	bmi.w	8007e0a <_realloc_r+0x2a2>
 8007c3a:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8007c3e:	ebaa 0505 	sub.w	r5, sl, r5
 8007c42:	6868      	ldr	r0, [r5, #4]
 8007c44:	f020 0003 	bic.w	r0, r0, #3
 8007c48:	eb00 0b06 	add.w	fp, r0, r6
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 80a7 	beq.w	8007da0 <_realloc_r+0x238>
 8007c52:	459c      	cmp	ip, r3
 8007c54:	eb02 070b 	add.w	r7, r2, fp
 8007c58:	d14b      	bne.n	8007cf2 <_realloc_r+0x18a>
 8007c5a:	f108 0310 	add.w	r3, r8, #16
 8007c5e:	42bb      	cmp	r3, r7
 8007c60:	f300 809e 	bgt.w	8007da0 <_realloc_r+0x238>
 8007c64:	46ab      	mov	fp, r5
 8007c66:	68eb      	ldr	r3, [r5, #12]
 8007c68:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8007c6c:	60d3      	str	r3, [r2, #12]
 8007c6e:	609a      	str	r2, [r3, #8]
 8007c70:	1f32      	subs	r2, r6, #4
 8007c72:	2a24      	cmp	r2, #36	; 0x24
 8007c74:	d838      	bhi.n	8007ce8 <_realloc_r+0x180>
 8007c76:	2a13      	cmp	r2, #19
 8007c78:	d934      	bls.n	8007ce4 <_realloc_r+0x17c>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	2a1b      	cmp	r2, #27
 8007c7e:	60ab      	str	r3, [r5, #8]
 8007c80:	6863      	ldr	r3, [r4, #4]
 8007c82:	60eb      	str	r3, [r5, #12]
 8007c84:	d81b      	bhi.n	8007cbe <_realloc_r+0x156>
 8007c86:	3408      	adds	r4, #8
 8007c88:	f105 0310 	add.w	r3, r5, #16
 8007c8c:	6822      	ldr	r2, [r4, #0]
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	6862      	ldr	r2, [r4, #4]
 8007c92:	605a      	str	r2, [r3, #4]
 8007c94:	68a2      	ldr	r2, [r4, #8]
 8007c96:	609a      	str	r2, [r3, #8]
 8007c98:	9a01      	ldr	r2, [sp, #4]
 8007c9a:	eba7 0708 	sub.w	r7, r7, r8
 8007c9e:	eb05 0308 	add.w	r3, r5, r8
 8007ca2:	f047 0701 	orr.w	r7, r7, #1
 8007ca6:	6093      	str	r3, [r2, #8]
 8007ca8:	605f      	str	r7, [r3, #4]
 8007caa:	686b      	ldr	r3, [r5, #4]
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	ea43 0308 	orr.w	r3, r3, r8
 8007cb4:	606b      	str	r3, [r5, #4]
 8007cb6:	4648      	mov	r0, r9
 8007cb8:	f7ff fc1c 	bl	80074f4 <__malloc_unlock>
 8007cbc:	e770      	b.n	8007ba0 <_realloc_r+0x38>
 8007cbe:	68a3      	ldr	r3, [r4, #8]
 8007cc0:	2a24      	cmp	r2, #36	; 0x24
 8007cc2:	612b      	str	r3, [r5, #16]
 8007cc4:	68e3      	ldr	r3, [r4, #12]
 8007cc6:	bf18      	it	ne
 8007cc8:	3410      	addne	r4, #16
 8007cca:	616b      	str	r3, [r5, #20]
 8007ccc:	bf09      	itett	eq
 8007cce:	6923      	ldreq	r3, [r4, #16]
 8007cd0:	f105 0318 	addne.w	r3, r5, #24
 8007cd4:	61ab      	streq	r3, [r5, #24]
 8007cd6:	6962      	ldreq	r2, [r4, #20]
 8007cd8:	bf02      	ittt	eq
 8007cda:	f105 0320 	addeq.w	r3, r5, #32
 8007cde:	61ea      	streq	r2, [r5, #28]
 8007ce0:	3418      	addeq	r4, #24
 8007ce2:	e7d3      	b.n	8007c8c <_realloc_r+0x124>
 8007ce4:	465b      	mov	r3, fp
 8007ce6:	e7d1      	b.n	8007c8c <_realloc_r+0x124>
 8007ce8:	4621      	mov	r1, r4
 8007cea:	4658      	mov	r0, fp
 8007cec:	f7ff fbe2 	bl	80074b4 <memmove>
 8007cf0:	e7d2      	b.n	8007c98 <_realloc_r+0x130>
 8007cf2:	45b8      	cmp	r8, r7
 8007cf4:	dc54      	bgt.n	8007da0 <_realloc_r+0x238>
 8007cf6:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	60da      	str	r2, [r3, #12]
 8007cfe:	6093      	str	r3, [r2, #8]
 8007d00:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007d04:	68eb      	ldr	r3, [r5, #12]
 8007d06:	60d3      	str	r3, [r2, #12]
 8007d08:	609a      	str	r2, [r3, #8]
 8007d0a:	1f32      	subs	r2, r6, #4
 8007d0c:	2a24      	cmp	r2, #36	; 0x24
 8007d0e:	d843      	bhi.n	8007d98 <_realloc_r+0x230>
 8007d10:	2a13      	cmp	r2, #19
 8007d12:	d908      	bls.n	8007d26 <_realloc_r+0x1be>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	2a1b      	cmp	r2, #27
 8007d18:	60ab      	str	r3, [r5, #8]
 8007d1a:	6863      	ldr	r3, [r4, #4]
 8007d1c:	60eb      	str	r3, [r5, #12]
 8007d1e:	d828      	bhi.n	8007d72 <_realloc_r+0x20a>
 8007d20:	3408      	adds	r4, #8
 8007d22:	f105 0010 	add.w	r0, r5, #16
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	6003      	str	r3, [r0, #0]
 8007d2a:	6863      	ldr	r3, [r4, #4]
 8007d2c:	6043      	str	r3, [r0, #4]
 8007d2e:	68a3      	ldr	r3, [r4, #8]
 8007d30:	6083      	str	r3, [r0, #8]
 8007d32:	686a      	ldr	r2, [r5, #4]
 8007d34:	eba7 0008 	sub.w	r0, r7, r8
 8007d38:	280f      	cmp	r0, #15
 8007d3a:	f002 0201 	and.w	r2, r2, #1
 8007d3e:	eb05 0307 	add.w	r3, r5, r7
 8007d42:	f240 80b3 	bls.w	8007eac <_realloc_r+0x344>
 8007d46:	eb05 0108 	add.w	r1, r5, r8
 8007d4a:	ea48 0202 	orr.w	r2, r8, r2
 8007d4e:	f040 0001 	orr.w	r0, r0, #1
 8007d52:	606a      	str	r2, [r5, #4]
 8007d54:	6048      	str	r0, [r1, #4]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	4648      	mov	r0, r9
 8007d5a:	f042 0201 	orr.w	r2, r2, #1
 8007d5e:	605a      	str	r2, [r3, #4]
 8007d60:	3108      	adds	r1, #8
 8007d62:	f7fe feb9 	bl	8006ad8 <_free_r>
 8007d66:	4648      	mov	r0, r9
 8007d68:	f7ff fbc4 	bl	80074f4 <__malloc_unlock>
 8007d6c:	f105 0b08 	add.w	fp, r5, #8
 8007d70:	e716      	b.n	8007ba0 <_realloc_r+0x38>
 8007d72:	68a3      	ldr	r3, [r4, #8]
 8007d74:	2a24      	cmp	r2, #36	; 0x24
 8007d76:	612b      	str	r3, [r5, #16]
 8007d78:	68e3      	ldr	r3, [r4, #12]
 8007d7a:	bf18      	it	ne
 8007d7c:	f105 0018 	addne.w	r0, r5, #24
 8007d80:	616b      	str	r3, [r5, #20]
 8007d82:	bf09      	itett	eq
 8007d84:	6923      	ldreq	r3, [r4, #16]
 8007d86:	3410      	addne	r4, #16
 8007d88:	61ab      	streq	r3, [r5, #24]
 8007d8a:	6963      	ldreq	r3, [r4, #20]
 8007d8c:	bf02      	ittt	eq
 8007d8e:	f105 0020 	addeq.w	r0, r5, #32
 8007d92:	61eb      	streq	r3, [r5, #28]
 8007d94:	3418      	addeq	r4, #24
 8007d96:	e7c6      	b.n	8007d26 <_realloc_r+0x1be>
 8007d98:	4621      	mov	r1, r4
 8007d9a:	f7ff fb8b 	bl	80074b4 <memmove>
 8007d9e:	e7c8      	b.n	8007d32 <_realloc_r+0x1ca>
 8007da0:	45d8      	cmp	r8, fp
 8007da2:	dc32      	bgt.n	8007e0a <_realloc_r+0x2a2>
 8007da4:	4628      	mov	r0, r5
 8007da6:	68eb      	ldr	r3, [r5, #12]
 8007da8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007dac:	60d3      	str	r3, [r2, #12]
 8007dae:	609a      	str	r2, [r3, #8]
 8007db0:	1f32      	subs	r2, r6, #4
 8007db2:	2a24      	cmp	r2, #36	; 0x24
 8007db4:	d825      	bhi.n	8007e02 <_realloc_r+0x29a>
 8007db6:	2a13      	cmp	r2, #19
 8007db8:	d908      	bls.n	8007dcc <_realloc_r+0x264>
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	2a1b      	cmp	r2, #27
 8007dbe:	60ab      	str	r3, [r5, #8]
 8007dc0:	6863      	ldr	r3, [r4, #4]
 8007dc2:	60eb      	str	r3, [r5, #12]
 8007dc4:	d80a      	bhi.n	8007ddc <_realloc_r+0x274>
 8007dc6:	3408      	adds	r4, #8
 8007dc8:	f105 0010 	add.w	r0, r5, #16
 8007dcc:	6823      	ldr	r3, [r4, #0]
 8007dce:	6003      	str	r3, [r0, #0]
 8007dd0:	6863      	ldr	r3, [r4, #4]
 8007dd2:	6043      	str	r3, [r0, #4]
 8007dd4:	68a3      	ldr	r3, [r4, #8]
 8007dd6:	6083      	str	r3, [r0, #8]
 8007dd8:	465f      	mov	r7, fp
 8007dda:	e7aa      	b.n	8007d32 <_realloc_r+0x1ca>
 8007ddc:	68a3      	ldr	r3, [r4, #8]
 8007dde:	2a24      	cmp	r2, #36	; 0x24
 8007de0:	612b      	str	r3, [r5, #16]
 8007de2:	68e3      	ldr	r3, [r4, #12]
 8007de4:	bf18      	it	ne
 8007de6:	f105 0018 	addne.w	r0, r5, #24
 8007dea:	616b      	str	r3, [r5, #20]
 8007dec:	bf09      	itett	eq
 8007dee:	6923      	ldreq	r3, [r4, #16]
 8007df0:	3410      	addne	r4, #16
 8007df2:	61ab      	streq	r3, [r5, #24]
 8007df4:	6963      	ldreq	r3, [r4, #20]
 8007df6:	bf02      	ittt	eq
 8007df8:	f105 0020 	addeq.w	r0, r5, #32
 8007dfc:	61eb      	streq	r3, [r5, #28]
 8007dfe:	3418      	addeq	r4, #24
 8007e00:	e7e4      	b.n	8007dcc <_realloc_r+0x264>
 8007e02:	4621      	mov	r1, r4
 8007e04:	f7ff fb56 	bl	80074b4 <memmove>
 8007e08:	e7e6      	b.n	8007dd8 <_realloc_r+0x270>
 8007e0a:	4648      	mov	r0, r9
 8007e0c:	f7ff f902 	bl	8007014 <_malloc_r>
 8007e10:	4683      	mov	fp, r0
 8007e12:	2800      	cmp	r0, #0
 8007e14:	f43f af4f 	beq.w	8007cb6 <_realloc_r+0x14e>
 8007e18:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007e1c:	f1a0 0208 	sub.w	r2, r0, #8
 8007e20:	f023 0301 	bic.w	r3, r3, #1
 8007e24:	4453      	add	r3, sl
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d105      	bne.n	8007e36 <_realloc_r+0x2ce>
 8007e2a:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8007e2e:	f027 0703 	bic.w	r7, r7, #3
 8007e32:	4437      	add	r7, r6
 8007e34:	e6fa      	b.n	8007c2c <_realloc_r+0xc4>
 8007e36:	1f32      	subs	r2, r6, #4
 8007e38:	2a24      	cmp	r2, #36	; 0x24
 8007e3a:	d831      	bhi.n	8007ea0 <_realloc_r+0x338>
 8007e3c:	2a13      	cmp	r2, #19
 8007e3e:	d92c      	bls.n	8007e9a <_realloc_r+0x332>
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	2a1b      	cmp	r2, #27
 8007e44:	6003      	str	r3, [r0, #0]
 8007e46:	6863      	ldr	r3, [r4, #4]
 8007e48:	6043      	str	r3, [r0, #4]
 8007e4a:	d811      	bhi.n	8007e70 <_realloc_r+0x308>
 8007e4c:	f104 0208 	add.w	r2, r4, #8
 8007e50:	f100 0308 	add.w	r3, r0, #8
 8007e54:	6811      	ldr	r1, [r2, #0]
 8007e56:	6019      	str	r1, [r3, #0]
 8007e58:	6851      	ldr	r1, [r2, #4]
 8007e5a:	6059      	str	r1, [r3, #4]
 8007e5c:	6892      	ldr	r2, [r2, #8]
 8007e5e:	609a      	str	r2, [r3, #8]
 8007e60:	4621      	mov	r1, r4
 8007e62:	4648      	mov	r0, r9
 8007e64:	f7fe fe38 	bl	8006ad8 <_free_r>
 8007e68:	e725      	b.n	8007cb6 <_realloc_r+0x14e>
 8007e6a:	bf00      	nop
 8007e6c:	2000043c 	.word	0x2000043c
 8007e70:	68a3      	ldr	r3, [r4, #8]
 8007e72:	2a24      	cmp	r2, #36	; 0x24
 8007e74:	6083      	str	r3, [r0, #8]
 8007e76:	68e3      	ldr	r3, [r4, #12]
 8007e78:	bf18      	it	ne
 8007e7a:	f104 0210 	addne.w	r2, r4, #16
 8007e7e:	60c3      	str	r3, [r0, #12]
 8007e80:	bf09      	itett	eq
 8007e82:	6923      	ldreq	r3, [r4, #16]
 8007e84:	f100 0310 	addne.w	r3, r0, #16
 8007e88:	6103      	streq	r3, [r0, #16]
 8007e8a:	6961      	ldreq	r1, [r4, #20]
 8007e8c:	bf02      	ittt	eq
 8007e8e:	f104 0218 	addeq.w	r2, r4, #24
 8007e92:	f100 0318 	addeq.w	r3, r0, #24
 8007e96:	6141      	streq	r1, [r0, #20]
 8007e98:	e7dc      	b.n	8007e54 <_realloc_r+0x2ec>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	4622      	mov	r2, r4
 8007e9e:	e7d9      	b.n	8007e54 <_realloc_r+0x2ec>
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	f7ff fb07 	bl	80074b4 <memmove>
 8007ea6:	e7db      	b.n	8007e60 <_realloc_r+0x2f8>
 8007ea8:	4637      	mov	r7, r6
 8007eaa:	e6bf      	b.n	8007c2c <_realloc_r+0xc4>
 8007eac:	4317      	orrs	r7, r2
 8007eae:	606f      	str	r7, [r5, #4]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	f042 0201 	orr.w	r2, r2, #1
 8007eb6:	605a      	str	r2, [r3, #4]
 8007eb8:	e755      	b.n	8007d66 <_realloc_r+0x1fe>
 8007eba:	bf00      	nop

08007ebc <frexp>:
 8007ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebe:	4617      	mov	r7, r2
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	603a      	str	r2, [r7, #0]
 8007ec4:	4a14      	ldr	r2, [pc, #80]	; (8007f18 <frexp+0x5c>)
 8007ec6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007eca:	4296      	cmp	r6, r2
 8007ecc:	4604      	mov	r4, r0
 8007ece:	460d      	mov	r5, r1
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	dc1e      	bgt.n	8007f12 <frexp+0x56>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	4332      	orrs	r2, r6
 8007ed8:	d01b      	beq.n	8007f12 <frexp+0x56>
 8007eda:	4a10      	ldr	r2, [pc, #64]	; (8007f1c <frexp+0x60>)
 8007edc:	400a      	ands	r2, r1
 8007ede:	b952      	cbnz	r2, 8007ef6 <frexp+0x3a>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <frexp+0x64>)
 8007ee4:	f7f8 faf8 	bl	80004d8 <__aeabi_dmul>
 8007ee8:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8007eec:	4604      	mov	r4, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007ef4:	603a      	str	r2, [r7, #0]
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	1536      	asrs	r6, r6, #20
 8007efa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007efe:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 8007f02:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f06:	4416      	add	r6, r2
 8007f08:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8007f0c:	603e      	str	r6, [r7, #0]
 8007f0e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8007f12:	4620      	mov	r0, r4
 8007f14:	4629      	mov	r1, r5
 8007f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f18:	7fefffff 	.word	0x7fefffff
 8007f1c:	7ff00000 	.word	0x7ff00000
 8007f20:	43500000 	.word	0x43500000

08007f24 <_sbrk_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	2300      	movs	r3, #0
 8007f28:	4d05      	ldr	r5, [pc, #20]	; (8007f40 <_sbrk_r+0x1c>)
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	602b      	str	r3, [r5, #0]
 8007f30:	f7f9 fba0 	bl	8001674 <_sbrk>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_sbrk_r+0x1a>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_sbrk_r+0x1a>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	20000c5c 	.word	0x20000c5c

08007f44 <__sread>:
 8007f44:	b510      	push	{r4, lr}
 8007f46:	460c      	mov	r4, r1
 8007f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4c:	f000 ff98 	bl	8008e80 <_read_r>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	bfab      	itete	ge
 8007f54:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8007f56:	89a3      	ldrhlt	r3, [r4, #12]
 8007f58:	181b      	addge	r3, r3, r0
 8007f5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f5e:	bfac      	ite	ge
 8007f60:	6523      	strge	r3, [r4, #80]	; 0x50
 8007f62:	81a3      	strhlt	r3, [r4, #12]
 8007f64:	bd10      	pop	{r4, pc}

08007f66 <__swrite>:
 8007f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6a:	461f      	mov	r7, r3
 8007f6c:	898b      	ldrh	r3, [r1, #12]
 8007f6e:	4605      	mov	r5, r0
 8007f70:	05db      	lsls	r3, r3, #23
 8007f72:	460c      	mov	r4, r1
 8007f74:	4616      	mov	r6, r2
 8007f76:	d505      	bpl.n	8007f84 <__swrite+0x1e>
 8007f78:	2302      	movs	r3, #2
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f80:	f000 ff5a 	bl	8008e38 <_lseek_r>
 8007f84:	89a3      	ldrh	r3, [r4, #12]
 8007f86:	4632      	mov	r2, r6
 8007f88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f8c:	81a3      	strh	r3, [r4, #12]
 8007f8e:	4628      	mov	r0, r5
 8007f90:	463b      	mov	r3, r7
 8007f92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9a:	f000 bda3 	b.w	8008ae4 <_write_r>

08007f9e <__sseek>:
 8007f9e:	b510      	push	{r4, lr}
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa6:	f000 ff47 	bl	8008e38 <_lseek_r>
 8007faa:	1c43      	adds	r3, r0, #1
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	bf15      	itete	ne
 8007fb0:	6520      	strne	r0, [r4, #80]	; 0x50
 8007fb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fba:	81a3      	strheq	r3, [r4, #12]
 8007fbc:	bf18      	it	ne
 8007fbe:	81a3      	strhne	r3, [r4, #12]
 8007fc0:	bd10      	pop	{r4, pc}

08007fc2 <__sclose>:
 8007fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc6:	f000 be2b 	b.w	8008c20 <_close_r>

08007fca <strncpy>:
 8007fca:	4603      	mov	r3, r0
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	3901      	subs	r1, #1
 8007fd0:	b132      	cbz	r2, 8007fe0 <strncpy+0x16>
 8007fd2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007fd6:	3a01      	subs	r2, #1
 8007fd8:	f803 4b01 	strb.w	r4, [r3], #1
 8007fdc:	2c00      	cmp	r4, #0
 8007fde:	d1f7      	bne.n	8007fd0 <strncpy+0x6>
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	441a      	add	r2, r3
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d100      	bne.n	8007fea <strncpy+0x20>
 8007fe8:	bd10      	pop	{r4, pc}
 8007fea:	f803 1b01 	strb.w	r1, [r3], #1
 8007fee:	e7f9      	b.n	8007fe4 <strncpy+0x1a>

08007ff0 <__ssprint_r>:
 8007ff0:	6893      	ldr	r3, [r2, #8]
 8007ff2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff6:	4680      	mov	r8, r0
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	4617      	mov	r7, r2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d061      	beq.n	80080c4 <__ssprint_r+0xd4>
 8008000:	2300      	movs	r3, #0
 8008002:	469b      	mov	fp, r3
 8008004:	f8d2 a000 	ldr.w	sl, [r2]
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	f1bb 0f00 	cmp.w	fp, #0
 800800e:	d02b      	beq.n	8008068 <__ssprint_r+0x78>
 8008010:	68a6      	ldr	r6, [r4, #8]
 8008012:	45b3      	cmp	fp, r6
 8008014:	d342      	bcc.n	800809c <__ssprint_r+0xac>
 8008016:	89a2      	ldrh	r2, [r4, #12]
 8008018:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800801c:	d03e      	beq.n	800809c <__ssprint_r+0xac>
 800801e:	6825      	ldr	r5, [r4, #0]
 8008020:	6921      	ldr	r1, [r4, #16]
 8008022:	eba5 0901 	sub.w	r9, r5, r1
 8008026:	6965      	ldr	r5, [r4, #20]
 8008028:	f109 0001 	add.w	r0, r9, #1
 800802c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008030:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008034:	106d      	asrs	r5, r5, #1
 8008036:	4458      	add	r0, fp
 8008038:	4285      	cmp	r5, r0
 800803a:	bf38      	it	cc
 800803c:	4605      	movcc	r5, r0
 800803e:	0553      	lsls	r3, r2, #21
 8008040:	d545      	bpl.n	80080ce <__ssprint_r+0xde>
 8008042:	4629      	mov	r1, r5
 8008044:	4640      	mov	r0, r8
 8008046:	f7fe ffe5 	bl	8007014 <_malloc_r>
 800804a:	4606      	mov	r6, r0
 800804c:	b9a0      	cbnz	r0, 8008078 <__ssprint_r+0x88>
 800804e:	230c      	movs	r3, #12
 8008050:	f8c8 3000 	str.w	r3, [r8]
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	f04f 30ff 	mov.w	r0, #4294967295
 800805a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800805e:	81a3      	strh	r3, [r4, #12]
 8008060:	2300      	movs	r3, #0
 8008062:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8008066:	e02f      	b.n	80080c8 <__ssprint_r+0xd8>
 8008068:	f8da 3000 	ldr.w	r3, [sl]
 800806c:	f8da b004 	ldr.w	fp, [sl, #4]
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	f10a 0a08 	add.w	sl, sl, #8
 8008076:	e7c8      	b.n	800800a <__ssprint_r+0x1a>
 8008078:	464a      	mov	r2, r9
 800807a:	6921      	ldr	r1, [r4, #16]
 800807c:	f7fb f822 	bl	80030c4 <memcpy>
 8008080:	89a2      	ldrh	r2, [r4, #12]
 8008082:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008086:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800808a:	81a2      	strh	r2, [r4, #12]
 800808c:	6126      	str	r6, [r4, #16]
 800808e:	444e      	add	r6, r9
 8008090:	6026      	str	r6, [r4, #0]
 8008092:	465e      	mov	r6, fp
 8008094:	6165      	str	r5, [r4, #20]
 8008096:	eba5 0509 	sub.w	r5, r5, r9
 800809a:	60a5      	str	r5, [r4, #8]
 800809c:	455e      	cmp	r6, fp
 800809e:	bf28      	it	cs
 80080a0:	465e      	movcs	r6, fp
 80080a2:	9901      	ldr	r1, [sp, #4]
 80080a4:	4632      	mov	r2, r6
 80080a6:	6820      	ldr	r0, [r4, #0]
 80080a8:	f7ff fa04 	bl	80074b4 <memmove>
 80080ac:	68a2      	ldr	r2, [r4, #8]
 80080ae:	1b92      	subs	r2, r2, r6
 80080b0:	60a2      	str	r2, [r4, #8]
 80080b2:	6822      	ldr	r2, [r4, #0]
 80080b4:	4432      	add	r2, r6
 80080b6:	6022      	str	r2, [r4, #0]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	eba2 030b 	sub.w	r3, r2, fp
 80080be:	60bb      	str	r3, [r7, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1d1      	bne.n	8008068 <__ssprint_r+0x78>
 80080c4:	2000      	movs	r0, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	b003      	add	sp, #12
 80080ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ce:	462a      	mov	r2, r5
 80080d0:	4640      	mov	r0, r8
 80080d2:	f7ff fd49 	bl	8007b68 <_realloc_r>
 80080d6:	4606      	mov	r6, r0
 80080d8:	2800      	cmp	r0, #0
 80080da:	d1d7      	bne.n	800808c <__ssprint_r+0x9c>
 80080dc:	4640      	mov	r0, r8
 80080de:	6921      	ldr	r1, [r4, #16]
 80080e0:	f7fe fcfa 	bl	8006ad8 <_free_r>
 80080e4:	e7b3      	b.n	800804e <__ssprint_r+0x5e>

080080e6 <sysconf>:
 80080e6:	2808      	cmp	r0, #8
 80080e8:	b508      	push	{r3, lr}
 80080ea:	d006      	beq.n	80080fa <sysconf+0x14>
 80080ec:	f7fa ffc0 	bl	8003070 <__errno>
 80080f0:	2316      	movs	r3, #22
 80080f2:	6003      	str	r3, [r0, #0]
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	bd08      	pop	{r3, pc}
 80080fa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80080fe:	e7fb      	b.n	80080f8 <sysconf+0x12>

08008100 <__sprint_r>:
 8008100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	6893      	ldr	r3, [r2, #8]
 8008106:	4680      	mov	r8, r0
 8008108:	460f      	mov	r7, r1
 800810a:	4614      	mov	r4, r2
 800810c:	b91b      	cbnz	r3, 8008116 <__sprint_r+0x16>
 800810e:	4618      	mov	r0, r3
 8008110:	6053      	str	r3, [r2, #4]
 8008112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008116:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008118:	049d      	lsls	r5, r3, #18
 800811a:	d520      	bpl.n	800815e <__sprint_r+0x5e>
 800811c:	6815      	ldr	r5, [r2, #0]
 800811e:	3508      	adds	r5, #8
 8008120:	f04f 0900 	mov.w	r9, #0
 8008124:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8008128:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800812c:	45ca      	cmp	sl, r9
 800812e:	dc0b      	bgt.n	8008148 <__sprint_r+0x48>
 8008130:	68a0      	ldr	r0, [r4, #8]
 8008132:	f026 0603 	bic.w	r6, r6, #3
 8008136:	1b80      	subs	r0, r0, r6
 8008138:	60a0      	str	r0, [r4, #8]
 800813a:	3508      	adds	r5, #8
 800813c:	2800      	cmp	r0, #0
 800813e:	d1ef      	bne.n	8008120 <__sprint_r+0x20>
 8008140:	2300      	movs	r3, #0
 8008142:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8008146:	e7e4      	b.n	8008112 <__sprint_r+0x12>
 8008148:	463a      	mov	r2, r7
 800814a:	4640      	mov	r0, r8
 800814c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8008150:	f000 fe21 	bl	8008d96 <_fputwc_r>
 8008154:	1c43      	adds	r3, r0, #1
 8008156:	d0f3      	beq.n	8008140 <__sprint_r+0x40>
 8008158:	f109 0901 	add.w	r9, r9, #1
 800815c:	e7e6      	b.n	800812c <__sprint_r+0x2c>
 800815e:	f7fe fd7b 	bl	8006c58 <__sfvwrite_r>
 8008162:	e7ed      	b.n	8008140 <__sprint_r+0x40>

08008164 <_vfiprintf_r>:
 8008164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008168:	b0bb      	sub	sp, #236	; 0xec
 800816a:	460f      	mov	r7, r1
 800816c:	461d      	mov	r5, r3
 800816e:	461c      	mov	r4, r3
 8008170:	4681      	mov	r9, r0
 8008172:	9202      	str	r2, [sp, #8]
 8008174:	b118      	cbz	r0, 800817e <_vfiprintf_r+0x1a>
 8008176:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008178:	b90b      	cbnz	r3, 800817e <_vfiprintf_r+0x1a>
 800817a:	f7fe fc1d 	bl	80069b8 <__sinit>
 800817e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008180:	07d8      	lsls	r0, r3, #31
 8008182:	d405      	bmi.n	8008190 <_vfiprintf_r+0x2c>
 8008184:	89bb      	ldrh	r3, [r7, #12]
 8008186:	0599      	lsls	r1, r3, #22
 8008188:	d402      	bmi.n	8008190 <_vfiprintf_r+0x2c>
 800818a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800818c:	f7fe fed4 	bl	8006f38 <__retarget_lock_acquire_recursive>
 8008190:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008194:	049a      	lsls	r2, r3, #18
 8008196:	d406      	bmi.n	80081a6 <_vfiprintf_r+0x42>
 8008198:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800819c:	81bb      	strh	r3, [r7, #12]
 800819e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081a4:	667b      	str	r3, [r7, #100]	; 0x64
 80081a6:	89bb      	ldrh	r3, [r7, #12]
 80081a8:	071e      	lsls	r6, r3, #28
 80081aa:	d501      	bpl.n	80081b0 <_vfiprintf_r+0x4c>
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	b9ab      	cbnz	r3, 80081dc <_vfiprintf_r+0x78>
 80081b0:	4639      	mov	r1, r7
 80081b2:	4648      	mov	r0, r9
 80081b4:	f7fd fc52 	bl	8005a5c <__swsetup_r>
 80081b8:	b180      	cbz	r0, 80081dc <_vfiprintf_r+0x78>
 80081ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081bc:	07d8      	lsls	r0, r3, #31
 80081be:	d506      	bpl.n	80081ce <_vfiprintf_r+0x6a>
 80081c0:	f04f 33ff 	mov.w	r3, #4294967295
 80081c4:	9303      	str	r3, [sp, #12]
 80081c6:	9803      	ldr	r0, [sp, #12]
 80081c8:	b03b      	add	sp, #236	; 0xec
 80081ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ce:	89bb      	ldrh	r3, [r7, #12]
 80081d0:	0599      	lsls	r1, r3, #22
 80081d2:	d4f5      	bmi.n	80081c0 <_vfiprintf_r+0x5c>
 80081d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80081d6:	f7fe feb0 	bl	8006f3a <__retarget_lock_release_recursive>
 80081da:	e7f1      	b.n	80081c0 <_vfiprintf_r+0x5c>
 80081dc:	89bb      	ldrh	r3, [r7, #12]
 80081de:	f003 021a 	and.w	r2, r3, #26
 80081e2:	2a0a      	cmp	r2, #10
 80081e4:	d113      	bne.n	800820e <_vfiprintf_r+0xaa>
 80081e6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80081ea:	2a00      	cmp	r2, #0
 80081ec:	db0f      	blt.n	800820e <_vfiprintf_r+0xaa>
 80081ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80081f0:	07d2      	lsls	r2, r2, #31
 80081f2:	d404      	bmi.n	80081fe <_vfiprintf_r+0x9a>
 80081f4:	059e      	lsls	r6, r3, #22
 80081f6:	d402      	bmi.n	80081fe <_vfiprintf_r+0x9a>
 80081f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80081fa:	f7fe fe9e 	bl	8006f3a <__retarget_lock_release_recursive>
 80081fe:	462b      	mov	r3, r5
 8008200:	4639      	mov	r1, r7
 8008202:	4648      	mov	r0, r9
 8008204:	9a02      	ldr	r2, [sp, #8]
 8008206:	f000 fc2d 	bl	8008a64 <__sbprintf>
 800820a:	9003      	str	r0, [sp, #12]
 800820c:	e7db      	b.n	80081c6 <_vfiprintf_r+0x62>
 800820e:	2300      	movs	r3, #0
 8008210:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 8008214:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8008218:	ae11      	add	r6, sp, #68	; 0x44
 800821a:	960e      	str	r6, [sp, #56]	; 0x38
 800821c:	9308      	str	r3, [sp, #32]
 800821e:	930a      	str	r3, [sp, #40]	; 0x28
 8008220:	9303      	str	r3, [sp, #12]
 8008222:	9b02      	ldr	r3, [sp, #8]
 8008224:	461d      	mov	r5, r3
 8008226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800822a:	b10a      	cbz	r2, 8008230 <_vfiprintf_r+0xcc>
 800822c:	2a25      	cmp	r2, #37	; 0x25
 800822e:	d1f9      	bne.n	8008224 <_vfiprintf_r+0xc0>
 8008230:	9b02      	ldr	r3, [sp, #8]
 8008232:	ebb5 0803 	subs.w	r8, r5, r3
 8008236:	d00d      	beq.n	8008254 <_vfiprintf_r+0xf0>
 8008238:	e9c6 3800 	strd	r3, r8, [r6]
 800823c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800823e:	4443      	add	r3, r8
 8008240:	9310      	str	r3, [sp, #64]	; 0x40
 8008242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008244:	3301      	adds	r3, #1
 8008246:	2b07      	cmp	r3, #7
 8008248:	930f      	str	r3, [sp, #60]	; 0x3c
 800824a:	dc75      	bgt.n	8008338 <_vfiprintf_r+0x1d4>
 800824c:	3608      	adds	r6, #8
 800824e:	9b03      	ldr	r3, [sp, #12]
 8008250:	4443      	add	r3, r8
 8008252:	9303      	str	r3, [sp, #12]
 8008254:	782b      	ldrb	r3, [r5, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 83c6 	beq.w	80089e8 <_vfiprintf_r+0x884>
 800825c:	2300      	movs	r3, #0
 800825e:	f04f 31ff 	mov.w	r1, #4294967295
 8008262:	469a      	mov	sl, r3
 8008264:	1c6a      	adds	r2, r5, #1
 8008266:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800826a:	9101      	str	r1, [sp, #4]
 800826c:	9304      	str	r3, [sp, #16]
 800826e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008272:	9202      	str	r2, [sp, #8]
 8008274:	f1a3 0220 	sub.w	r2, r3, #32
 8008278:	2a5a      	cmp	r2, #90	; 0x5a
 800827a:	f200 830e 	bhi.w	800889a <_vfiprintf_r+0x736>
 800827e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008282:	0098      	.short	0x0098
 8008284:	030c030c 	.word	0x030c030c
 8008288:	030c00a0 	.word	0x030c00a0
 800828c:	030c030c 	.word	0x030c030c
 8008290:	030c0080 	.word	0x030c0080
 8008294:	00a3030c 	.word	0x00a3030c
 8008298:	030c00ad 	.word	0x030c00ad
 800829c:	00af00aa 	.word	0x00af00aa
 80082a0:	00ca030c 	.word	0x00ca030c
 80082a4:	00cd00cd 	.word	0x00cd00cd
 80082a8:	00cd00cd 	.word	0x00cd00cd
 80082ac:	00cd00cd 	.word	0x00cd00cd
 80082b0:	00cd00cd 	.word	0x00cd00cd
 80082b4:	030c00cd 	.word	0x030c00cd
 80082b8:	030c030c 	.word	0x030c030c
 80082bc:	030c030c 	.word	0x030c030c
 80082c0:	030c030c 	.word	0x030c030c
 80082c4:	030c030c 	.word	0x030c030c
 80082c8:	010500f7 	.word	0x010500f7
 80082cc:	030c030c 	.word	0x030c030c
 80082d0:	030c030c 	.word	0x030c030c
 80082d4:	030c030c 	.word	0x030c030c
 80082d8:	030c030c 	.word	0x030c030c
 80082dc:	030c030c 	.word	0x030c030c
 80082e0:	030c014b 	.word	0x030c014b
 80082e4:	030c030c 	.word	0x030c030c
 80082e8:	030c0191 	.word	0x030c0191
 80082ec:	030c026f 	.word	0x030c026f
 80082f0:	028d030c 	.word	0x028d030c
 80082f4:	030c030c 	.word	0x030c030c
 80082f8:	030c030c 	.word	0x030c030c
 80082fc:	030c030c 	.word	0x030c030c
 8008300:	030c030c 	.word	0x030c030c
 8008304:	030c030c 	.word	0x030c030c
 8008308:	010700f7 	.word	0x010700f7
 800830c:	030c030c 	.word	0x030c030c
 8008310:	00dd030c 	.word	0x00dd030c
 8008314:	00f10107 	.word	0x00f10107
 8008318:	00ea030c 	.word	0x00ea030c
 800831c:	012e030c 	.word	0x012e030c
 8008320:	0180014d 	.word	0x0180014d
 8008324:	030c00f1 	.word	0x030c00f1
 8008328:	00960191 	.word	0x00960191
 800832c:	030c0271 	.word	0x030c0271
 8008330:	0065030c 	.word	0x0065030c
 8008334:	0096030c 	.word	0x0096030c
 8008338:	4639      	mov	r1, r7
 800833a:	4648      	mov	r0, r9
 800833c:	aa0e      	add	r2, sp, #56	; 0x38
 800833e:	f7ff fedf 	bl	8008100 <__sprint_r>
 8008342:	2800      	cmp	r0, #0
 8008344:	f040 832f 	bne.w	80089a6 <_vfiprintf_r+0x842>
 8008348:	ae11      	add	r6, sp, #68	; 0x44
 800834a:	e780      	b.n	800824e <_vfiprintf_r+0xea>
 800834c:	4a94      	ldr	r2, [pc, #592]	; (80085a0 <_vfiprintf_r+0x43c>)
 800834e:	f01a 0f20 	tst.w	sl, #32
 8008352:	9206      	str	r2, [sp, #24]
 8008354:	f000 8224 	beq.w	80087a0 <_vfiprintf_r+0x63c>
 8008358:	3407      	adds	r4, #7
 800835a:	f024 0b07 	bic.w	fp, r4, #7
 800835e:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8008362:	f01a 0f01 	tst.w	sl, #1
 8008366:	d009      	beq.n	800837c <_vfiprintf_r+0x218>
 8008368:	ea54 0205 	orrs.w	r2, r4, r5
 800836c:	bf1f      	itttt	ne
 800836e:	2230      	movne	r2, #48	; 0x30
 8008370:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 8008374:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 8008378:	f04a 0a02 	orrne.w	sl, sl, #2
 800837c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8008380:	e10b      	b.n	800859a <_vfiprintf_r+0x436>
 8008382:	4648      	mov	r0, r9
 8008384:	f7fe fdd2 	bl	8006f2c <_localeconv_r>
 8008388:	6843      	ldr	r3, [r0, #4]
 800838a:	4618      	mov	r0, r3
 800838c:	930a      	str	r3, [sp, #40]	; 0x28
 800838e:	f7f7 fedf 	bl	8000150 <strlen>
 8008392:	9008      	str	r0, [sp, #32]
 8008394:	4648      	mov	r0, r9
 8008396:	f7fe fdc9 	bl	8006f2c <_localeconv_r>
 800839a:	6883      	ldr	r3, [r0, #8]
 800839c:	9307      	str	r3, [sp, #28]
 800839e:	9b08      	ldr	r3, [sp, #32]
 80083a0:	b12b      	cbz	r3, 80083ae <_vfiprintf_r+0x24a>
 80083a2:	9b07      	ldr	r3, [sp, #28]
 80083a4:	b11b      	cbz	r3, 80083ae <_vfiprintf_r+0x24a>
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	b10b      	cbz	r3, 80083ae <_vfiprintf_r+0x24a>
 80083aa:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80083ae:	9a02      	ldr	r2, [sp, #8]
 80083b0:	e75d      	b.n	800826e <_vfiprintf_r+0x10a>
 80083b2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1f9      	bne.n	80083ae <_vfiprintf_r+0x24a>
 80083ba:	2320      	movs	r3, #32
 80083bc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80083c0:	e7f5      	b.n	80083ae <_vfiprintf_r+0x24a>
 80083c2:	f04a 0a01 	orr.w	sl, sl, #1
 80083c6:	e7f2      	b.n	80083ae <_vfiprintf_r+0x24a>
 80083c8:	f854 3b04 	ldr.w	r3, [r4], #4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	9304      	str	r3, [sp, #16]
 80083d0:	daed      	bge.n	80083ae <_vfiprintf_r+0x24a>
 80083d2:	425b      	negs	r3, r3
 80083d4:	9304      	str	r3, [sp, #16]
 80083d6:	f04a 0a04 	orr.w	sl, sl, #4
 80083da:	e7e8      	b.n	80083ae <_vfiprintf_r+0x24a>
 80083dc:	232b      	movs	r3, #43	; 0x2b
 80083de:	e7ed      	b.n	80083bc <_vfiprintf_r+0x258>
 80083e0:	9a02      	ldr	r2, [sp, #8]
 80083e2:	f812 3b01 	ldrb.w	r3, [r2], #1
 80083e6:	2b2a      	cmp	r3, #42	; 0x2a
 80083e8:	d112      	bne.n	8008410 <_vfiprintf_r+0x2ac>
 80083ea:	f854 0b04 	ldr.w	r0, [r4], #4
 80083ee:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 80083f2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80083f6:	e7da      	b.n	80083ae <_vfiprintf_r+0x24a>
 80083f8:	200a      	movs	r0, #10
 80083fa:	9b01      	ldr	r3, [sp, #4]
 80083fc:	fb00 1303 	mla	r3, r0, r3, r1
 8008400:	9301      	str	r3, [sp, #4]
 8008402:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008406:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800840a:	2909      	cmp	r1, #9
 800840c:	d9f4      	bls.n	80083f8 <_vfiprintf_r+0x294>
 800840e:	e730      	b.n	8008272 <_vfiprintf_r+0x10e>
 8008410:	2100      	movs	r1, #0
 8008412:	9101      	str	r1, [sp, #4]
 8008414:	e7f7      	b.n	8008406 <_vfiprintf_r+0x2a2>
 8008416:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800841a:	e7c8      	b.n	80083ae <_vfiprintf_r+0x24a>
 800841c:	2100      	movs	r1, #0
 800841e:	9a02      	ldr	r2, [sp, #8]
 8008420:	9104      	str	r1, [sp, #16]
 8008422:	200a      	movs	r0, #10
 8008424:	9904      	ldr	r1, [sp, #16]
 8008426:	3b30      	subs	r3, #48	; 0x30
 8008428:	fb00 3301 	mla	r3, r0, r1, r3
 800842c:	9304      	str	r3, [sp, #16]
 800842e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008432:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008436:	2909      	cmp	r1, #9
 8008438:	d9f3      	bls.n	8008422 <_vfiprintf_r+0x2be>
 800843a:	e71a      	b.n	8008272 <_vfiprintf_r+0x10e>
 800843c:	9b02      	ldr	r3, [sp, #8]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	2b68      	cmp	r3, #104	; 0x68
 8008442:	bf01      	itttt	eq
 8008444:	9b02      	ldreq	r3, [sp, #8]
 8008446:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800844a:	3301      	addeq	r3, #1
 800844c:	9302      	streq	r3, [sp, #8]
 800844e:	bf18      	it	ne
 8008450:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8008454:	e7ab      	b.n	80083ae <_vfiprintf_r+0x24a>
 8008456:	9b02      	ldr	r3, [sp, #8]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	2b6c      	cmp	r3, #108	; 0x6c
 800845c:	d105      	bne.n	800846a <_vfiprintf_r+0x306>
 800845e:	9b02      	ldr	r3, [sp, #8]
 8008460:	3301      	adds	r3, #1
 8008462:	9302      	str	r3, [sp, #8]
 8008464:	f04a 0a20 	orr.w	sl, sl, #32
 8008468:	e7a1      	b.n	80083ae <_vfiprintf_r+0x24a>
 800846a:	f04a 0a10 	orr.w	sl, sl, #16
 800846e:	e79e      	b.n	80083ae <_vfiprintf_r+0x24a>
 8008470:	46a3      	mov	fp, r4
 8008472:	2100      	movs	r1, #0
 8008474:	f85b 3b04 	ldr.w	r3, [fp], #4
 8008478:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 800847c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8008480:	2301      	movs	r3, #1
 8008482:	460d      	mov	r5, r1
 8008484:	9301      	str	r3, [sp, #4]
 8008486:	f10d 0884 	add.w	r8, sp, #132	; 0x84
 800848a:	e0a0      	b.n	80085ce <_vfiprintf_r+0x46a>
 800848c:	f04a 0a10 	orr.w	sl, sl, #16
 8008490:	f01a 0f20 	tst.w	sl, #32
 8008494:	d010      	beq.n	80084b8 <_vfiprintf_r+0x354>
 8008496:	3407      	adds	r4, #7
 8008498:	f024 0b07 	bic.w	fp, r4, #7
 800849c:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 80084a0:	2c00      	cmp	r4, #0
 80084a2:	f175 0300 	sbcs.w	r3, r5, #0
 80084a6:	da05      	bge.n	80084b4 <_vfiprintf_r+0x350>
 80084a8:	232d      	movs	r3, #45	; 0x2d
 80084aa:	4264      	negs	r4, r4
 80084ac:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80084b0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80084b4:	2301      	movs	r3, #1
 80084b6:	e03f      	b.n	8008538 <_vfiprintf_r+0x3d4>
 80084b8:	f01a 0f10 	tst.w	sl, #16
 80084bc:	f104 0b04 	add.w	fp, r4, #4
 80084c0:	d002      	beq.n	80084c8 <_vfiprintf_r+0x364>
 80084c2:	6824      	ldr	r4, [r4, #0]
 80084c4:	17e5      	asrs	r5, r4, #31
 80084c6:	e7eb      	b.n	80084a0 <_vfiprintf_r+0x33c>
 80084c8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80084cc:	6824      	ldr	r4, [r4, #0]
 80084ce:	d001      	beq.n	80084d4 <_vfiprintf_r+0x370>
 80084d0:	b224      	sxth	r4, r4
 80084d2:	e7f7      	b.n	80084c4 <_vfiprintf_r+0x360>
 80084d4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80084d8:	bf18      	it	ne
 80084da:	b264      	sxtbne	r4, r4
 80084dc:	e7f2      	b.n	80084c4 <_vfiprintf_r+0x360>
 80084de:	f01a 0f20 	tst.w	sl, #32
 80084e2:	f854 3b04 	ldr.w	r3, [r4], #4
 80084e6:	d005      	beq.n	80084f4 <_vfiprintf_r+0x390>
 80084e8:	9a03      	ldr	r2, [sp, #12]
 80084ea:	4610      	mov	r0, r2
 80084ec:	17d1      	asrs	r1, r2, #31
 80084ee:	e9c3 0100 	strd	r0, r1, [r3]
 80084f2:	e696      	b.n	8008222 <_vfiprintf_r+0xbe>
 80084f4:	f01a 0f10 	tst.w	sl, #16
 80084f8:	d002      	beq.n	8008500 <_vfiprintf_r+0x39c>
 80084fa:	9a03      	ldr	r2, [sp, #12]
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	e690      	b.n	8008222 <_vfiprintf_r+0xbe>
 8008500:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008504:	d002      	beq.n	800850c <_vfiprintf_r+0x3a8>
 8008506:	9a03      	ldr	r2, [sp, #12]
 8008508:	801a      	strh	r2, [r3, #0]
 800850a:	e68a      	b.n	8008222 <_vfiprintf_r+0xbe>
 800850c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008510:	d0f3      	beq.n	80084fa <_vfiprintf_r+0x396>
 8008512:	9a03      	ldr	r2, [sp, #12]
 8008514:	701a      	strb	r2, [r3, #0]
 8008516:	e684      	b.n	8008222 <_vfiprintf_r+0xbe>
 8008518:	f04a 0a10 	orr.w	sl, sl, #16
 800851c:	f01a 0f20 	tst.w	sl, #32
 8008520:	d01d      	beq.n	800855e <_vfiprintf_r+0x3fa>
 8008522:	3407      	adds	r4, #7
 8008524:	f024 0b07 	bic.w	fp, r4, #7
 8008528:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800852c:	2300      	movs	r3, #0
 800852e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8008532:	2200      	movs	r2, #0
 8008534:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8008538:	9a01      	ldr	r2, [sp, #4]
 800853a:	3201      	adds	r2, #1
 800853c:	f000 8261 	beq.w	8008a02 <_vfiprintf_r+0x89e>
 8008540:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8008544:	9205      	str	r2, [sp, #20]
 8008546:	ea54 0205 	orrs.w	r2, r4, r5
 800854a:	f040 8260 	bne.w	8008a0e <_vfiprintf_r+0x8aa>
 800854e:	9a01      	ldr	r2, [sp, #4]
 8008550:	2a00      	cmp	r2, #0
 8008552:	f000 8197 	beq.w	8008884 <_vfiprintf_r+0x720>
 8008556:	2b01      	cmp	r3, #1
 8008558:	f040 825c 	bne.w	8008a14 <_vfiprintf_r+0x8b0>
 800855c:	e136      	b.n	80087cc <_vfiprintf_r+0x668>
 800855e:	f01a 0f10 	tst.w	sl, #16
 8008562:	f104 0b04 	add.w	fp, r4, #4
 8008566:	d001      	beq.n	800856c <_vfiprintf_r+0x408>
 8008568:	6824      	ldr	r4, [r4, #0]
 800856a:	e003      	b.n	8008574 <_vfiprintf_r+0x410>
 800856c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008570:	d002      	beq.n	8008578 <_vfiprintf_r+0x414>
 8008572:	8824      	ldrh	r4, [r4, #0]
 8008574:	2500      	movs	r5, #0
 8008576:	e7d9      	b.n	800852c <_vfiprintf_r+0x3c8>
 8008578:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800857c:	d0f4      	beq.n	8008568 <_vfiprintf_r+0x404>
 800857e:	7824      	ldrb	r4, [r4, #0]
 8008580:	e7f8      	b.n	8008574 <_vfiprintf_r+0x410>
 8008582:	f647 0330 	movw	r3, #30768	; 0x7830
 8008586:	46a3      	mov	fp, r4
 8008588:	2500      	movs	r5, #0
 800858a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800858e:	4b04      	ldr	r3, [pc, #16]	; (80085a0 <_vfiprintf_r+0x43c>)
 8008590:	f85b 4b04 	ldr.w	r4, [fp], #4
 8008594:	f04a 0a02 	orr.w	sl, sl, #2
 8008598:	9306      	str	r3, [sp, #24]
 800859a:	2302      	movs	r3, #2
 800859c:	e7c9      	b.n	8008532 <_vfiprintf_r+0x3ce>
 800859e:	bf00      	nop
 80085a0:	080092cc 	.word	0x080092cc
 80085a4:	46a3      	mov	fp, r4
 80085a6:	2500      	movs	r5, #0
 80085a8:	9b01      	ldr	r3, [sp, #4]
 80085aa:	f85b 8b04 	ldr.w	r8, [fp], #4
 80085ae:	1c5c      	adds	r4, r3, #1
 80085b0:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 80085b4:	f000 80cf 	beq.w	8008756 <_vfiprintf_r+0x5f2>
 80085b8:	461a      	mov	r2, r3
 80085ba:	4629      	mov	r1, r5
 80085bc:	4640      	mov	r0, r8
 80085be:	f7fe ff6b 	bl	8007498 <memchr>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	f000 8173 	beq.w	80088ae <_vfiprintf_r+0x74a>
 80085c8:	eba0 0308 	sub.w	r3, r0, r8
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	9b01      	ldr	r3, [sp, #4]
 80085d0:	42ab      	cmp	r3, r5
 80085d2:	bfb8      	it	lt
 80085d4:	462b      	movlt	r3, r5
 80085d6:	9305      	str	r3, [sp, #20]
 80085d8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80085dc:	b113      	cbz	r3, 80085e4 <_vfiprintf_r+0x480>
 80085de:	9b05      	ldr	r3, [sp, #20]
 80085e0:	3301      	adds	r3, #1
 80085e2:	9305      	str	r3, [sp, #20]
 80085e4:	f01a 0302 	ands.w	r3, sl, #2
 80085e8:	9309      	str	r3, [sp, #36]	; 0x24
 80085ea:	bf1e      	ittt	ne
 80085ec:	9b05      	ldrne	r3, [sp, #20]
 80085ee:	3302      	addne	r3, #2
 80085f0:	9305      	strne	r3, [sp, #20]
 80085f2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80085f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80085f8:	d11f      	bne.n	800863a <_vfiprintf_r+0x4d6>
 80085fa:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80085fe:	1a9c      	subs	r4, r3, r2
 8008600:	2c00      	cmp	r4, #0
 8008602:	dd1a      	ble.n	800863a <_vfiprintf_r+0x4d6>
 8008604:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8008608:	48b4      	ldr	r0, [pc, #720]	; (80088dc <_vfiprintf_r+0x778>)
 800860a:	2c10      	cmp	r4, #16
 800860c:	f103 0301 	add.w	r3, r3, #1
 8008610:	f106 0108 	add.w	r1, r6, #8
 8008614:	6030      	str	r0, [r6, #0]
 8008616:	f300 814c 	bgt.w	80088b2 <_vfiprintf_r+0x74e>
 800861a:	6074      	str	r4, [r6, #4]
 800861c:	2b07      	cmp	r3, #7
 800861e:	4414      	add	r4, r2
 8008620:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 8008624:	f340 8157 	ble.w	80088d6 <_vfiprintf_r+0x772>
 8008628:	4639      	mov	r1, r7
 800862a:	4648      	mov	r0, r9
 800862c:	aa0e      	add	r2, sp, #56	; 0x38
 800862e:	f7ff fd67 	bl	8008100 <__sprint_r>
 8008632:	2800      	cmp	r0, #0
 8008634:	f040 81b7 	bne.w	80089a6 <_vfiprintf_r+0x842>
 8008638:	ae11      	add	r6, sp, #68	; 0x44
 800863a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800863e:	b173      	cbz	r3, 800865e <_vfiprintf_r+0x4fa>
 8008640:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008644:	6032      	str	r2, [r6, #0]
 8008646:	2201      	movs	r2, #1
 8008648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800864a:	6072      	str	r2, [r6, #4]
 800864c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800864e:	3301      	adds	r3, #1
 8008650:	3201      	adds	r2, #1
 8008652:	2b07      	cmp	r3, #7
 8008654:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 8008658:	f300 8146 	bgt.w	80088e8 <_vfiprintf_r+0x784>
 800865c:	3608      	adds	r6, #8
 800865e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008660:	b16b      	cbz	r3, 800867e <_vfiprintf_r+0x51a>
 8008662:	aa0d      	add	r2, sp, #52	; 0x34
 8008664:	6032      	str	r2, [r6, #0]
 8008666:	2202      	movs	r2, #2
 8008668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800866a:	6072      	str	r2, [r6, #4]
 800866c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800866e:	3301      	adds	r3, #1
 8008670:	3202      	adds	r2, #2
 8008672:	2b07      	cmp	r3, #7
 8008674:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 8008678:	f300 813f 	bgt.w	80088fa <_vfiprintf_r+0x796>
 800867c:	3608      	adds	r6, #8
 800867e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008680:	2b80      	cmp	r3, #128	; 0x80
 8008682:	d11f      	bne.n	80086c4 <_vfiprintf_r+0x560>
 8008684:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008688:	1a9c      	subs	r4, r3, r2
 800868a:	2c00      	cmp	r4, #0
 800868c:	dd1a      	ble.n	80086c4 <_vfiprintf_r+0x560>
 800868e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8008692:	4893      	ldr	r0, [pc, #588]	; (80088e0 <_vfiprintf_r+0x77c>)
 8008694:	2c10      	cmp	r4, #16
 8008696:	f103 0301 	add.w	r3, r3, #1
 800869a:	f106 0108 	add.w	r1, r6, #8
 800869e:	6030      	str	r0, [r6, #0]
 80086a0:	f300 8134 	bgt.w	800890c <_vfiprintf_r+0x7a8>
 80086a4:	6074      	str	r4, [r6, #4]
 80086a6:	2b07      	cmp	r3, #7
 80086a8:	4414      	add	r4, r2
 80086aa:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 80086ae:	f340 813f 	ble.w	8008930 <_vfiprintf_r+0x7cc>
 80086b2:	4639      	mov	r1, r7
 80086b4:	4648      	mov	r0, r9
 80086b6:	aa0e      	add	r2, sp, #56	; 0x38
 80086b8:	f7ff fd22 	bl	8008100 <__sprint_r>
 80086bc:	2800      	cmp	r0, #0
 80086be:	f040 8172 	bne.w	80089a6 <_vfiprintf_r+0x842>
 80086c2:	ae11      	add	r6, sp, #68	; 0x44
 80086c4:	9b01      	ldr	r3, [sp, #4]
 80086c6:	1aec      	subs	r4, r5, r3
 80086c8:	2c00      	cmp	r4, #0
 80086ca:	dd1a      	ble.n	8008702 <_vfiprintf_r+0x59e>
 80086cc:	4d84      	ldr	r5, [pc, #528]	; (80088e0 <_vfiprintf_r+0x77c>)
 80086ce:	2c10      	cmp	r4, #16
 80086d0:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
 80086d4:	f106 0208 	add.w	r2, r6, #8
 80086d8:	f103 0301 	add.w	r3, r3, #1
 80086dc:	6035      	str	r5, [r6, #0]
 80086de:	f300 8129 	bgt.w	8008934 <_vfiprintf_r+0x7d0>
 80086e2:	6074      	str	r4, [r6, #4]
 80086e4:	2b07      	cmp	r3, #7
 80086e6:	440c      	add	r4, r1
 80086e8:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 80086ec:	f340 8133 	ble.w	8008956 <_vfiprintf_r+0x7f2>
 80086f0:	4639      	mov	r1, r7
 80086f2:	4648      	mov	r0, r9
 80086f4:	aa0e      	add	r2, sp, #56	; 0x38
 80086f6:	f7ff fd03 	bl	8008100 <__sprint_r>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	f040 8153 	bne.w	80089a6 <_vfiprintf_r+0x842>
 8008700:	ae11      	add	r6, sp, #68	; 0x44
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008706:	6073      	str	r3, [r6, #4]
 8008708:	4418      	add	r0, r3
 800870a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800870c:	f8c6 8000 	str.w	r8, [r6]
 8008710:	3301      	adds	r3, #1
 8008712:	2b07      	cmp	r3, #7
 8008714:	9010      	str	r0, [sp, #64]	; 0x40
 8008716:	930f      	str	r3, [sp, #60]	; 0x3c
 8008718:	f300 811f 	bgt.w	800895a <_vfiprintf_r+0x7f6>
 800871c:	f106 0308 	add.w	r3, r6, #8
 8008720:	f01a 0f04 	tst.w	sl, #4
 8008724:	f040 8121 	bne.w	800896a <_vfiprintf_r+0x806>
 8008728:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800872c:	9905      	ldr	r1, [sp, #20]
 800872e:	428a      	cmp	r2, r1
 8008730:	bfac      	ite	ge
 8008732:	189b      	addge	r3, r3, r2
 8008734:	185b      	addlt	r3, r3, r1
 8008736:	9303      	str	r3, [sp, #12]
 8008738:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800873a:	b13b      	cbz	r3, 800874c <_vfiprintf_r+0x5e8>
 800873c:	4639      	mov	r1, r7
 800873e:	4648      	mov	r0, r9
 8008740:	aa0e      	add	r2, sp, #56	; 0x38
 8008742:	f7ff fcdd 	bl	8008100 <__sprint_r>
 8008746:	2800      	cmp	r0, #0
 8008748:	f040 812d 	bne.w	80089a6 <_vfiprintf_r+0x842>
 800874c:	2300      	movs	r3, #0
 800874e:	465c      	mov	r4, fp
 8008750:	930f      	str	r3, [sp, #60]	; 0x3c
 8008752:	ae11      	add	r6, sp, #68	; 0x44
 8008754:	e565      	b.n	8008222 <_vfiprintf_r+0xbe>
 8008756:	4640      	mov	r0, r8
 8008758:	f7f7 fcfa 	bl	8000150 <strlen>
 800875c:	9001      	str	r0, [sp, #4]
 800875e:	e736      	b.n	80085ce <_vfiprintf_r+0x46a>
 8008760:	f04a 0a10 	orr.w	sl, sl, #16
 8008764:	f01a 0f20 	tst.w	sl, #32
 8008768:	d006      	beq.n	8008778 <_vfiprintf_r+0x614>
 800876a:	3407      	adds	r4, #7
 800876c:	f024 0b07 	bic.w	fp, r4, #7
 8008770:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8008774:	2301      	movs	r3, #1
 8008776:	e6dc      	b.n	8008532 <_vfiprintf_r+0x3ce>
 8008778:	f01a 0f10 	tst.w	sl, #16
 800877c:	f104 0b04 	add.w	fp, r4, #4
 8008780:	d001      	beq.n	8008786 <_vfiprintf_r+0x622>
 8008782:	6824      	ldr	r4, [r4, #0]
 8008784:	e003      	b.n	800878e <_vfiprintf_r+0x62a>
 8008786:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800878a:	d002      	beq.n	8008792 <_vfiprintf_r+0x62e>
 800878c:	8824      	ldrh	r4, [r4, #0]
 800878e:	2500      	movs	r5, #0
 8008790:	e7f0      	b.n	8008774 <_vfiprintf_r+0x610>
 8008792:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008796:	d0f4      	beq.n	8008782 <_vfiprintf_r+0x61e>
 8008798:	7824      	ldrb	r4, [r4, #0]
 800879a:	e7f8      	b.n	800878e <_vfiprintf_r+0x62a>
 800879c:	4a51      	ldr	r2, [pc, #324]	; (80088e4 <_vfiprintf_r+0x780>)
 800879e:	e5d6      	b.n	800834e <_vfiprintf_r+0x1ea>
 80087a0:	f01a 0f10 	tst.w	sl, #16
 80087a4:	f104 0b04 	add.w	fp, r4, #4
 80087a8:	d001      	beq.n	80087ae <_vfiprintf_r+0x64a>
 80087aa:	6824      	ldr	r4, [r4, #0]
 80087ac:	e003      	b.n	80087b6 <_vfiprintf_r+0x652>
 80087ae:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80087b2:	d002      	beq.n	80087ba <_vfiprintf_r+0x656>
 80087b4:	8824      	ldrh	r4, [r4, #0]
 80087b6:	2500      	movs	r5, #0
 80087b8:	e5d3      	b.n	8008362 <_vfiprintf_r+0x1fe>
 80087ba:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80087be:	d0f4      	beq.n	80087aa <_vfiprintf_r+0x646>
 80087c0:	7824      	ldrb	r4, [r4, #0]
 80087c2:	e7f8      	b.n	80087b6 <_vfiprintf_r+0x652>
 80087c4:	2d00      	cmp	r5, #0
 80087c6:	bf08      	it	eq
 80087c8:	2c0a      	cmpeq	r4, #10
 80087ca:	d205      	bcs.n	80087d8 <_vfiprintf_r+0x674>
 80087cc:	3430      	adds	r4, #48	; 0x30
 80087ce:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 80087d2:	f10d 08e7 	add.w	r8, sp, #231	; 0xe7
 80087d6:	e13b      	b.n	8008a50 <_vfiprintf_r+0x8ec>
 80087d8:	f04f 0a00 	mov.w	sl, #0
 80087dc:	ab3a      	add	r3, sp, #232	; 0xe8
 80087de:	9309      	str	r3, [sp, #36]	; 0x24
 80087e0:	9b05      	ldr	r3, [sp, #20]
 80087e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80087e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ea:	220a      	movs	r2, #10
 80087ec:	4620      	mov	r0, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	f103 38ff 	add.w	r8, r3, #4294967295
 80087f4:	2300      	movs	r3, #0
 80087f6:	f7f8 f947 	bl	8000a88 <__aeabi_uldivmod>
 80087fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087fc:	3230      	adds	r2, #48	; 0x30
 80087fe:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008804:	f10a 0a01 	add.w	sl, sl, #1
 8008808:	b1d3      	cbz	r3, 8008840 <_vfiprintf_r+0x6dc>
 800880a:	9b07      	ldr	r3, [sp, #28]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	4553      	cmp	r3, sl
 8008810:	d116      	bne.n	8008840 <_vfiprintf_r+0x6dc>
 8008812:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8008816:	d013      	beq.n	8008840 <_vfiprintf_r+0x6dc>
 8008818:	2d00      	cmp	r5, #0
 800881a:	bf08      	it	eq
 800881c:	2c0a      	cmpeq	r4, #10
 800881e:	d30f      	bcc.n	8008840 <_vfiprintf_r+0x6dc>
 8008820:	9b08      	ldr	r3, [sp, #32]
 8008822:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008824:	eba8 0803 	sub.w	r8, r8, r3
 8008828:	461a      	mov	r2, r3
 800882a:	4640      	mov	r0, r8
 800882c:	f7ff fbcd 	bl	8007fca <strncpy>
 8008830:	9b07      	ldr	r3, [sp, #28]
 8008832:	785b      	ldrb	r3, [r3, #1]
 8008834:	b1a3      	cbz	r3, 8008860 <_vfiprintf_r+0x6fc>
 8008836:	f04f 0a00 	mov.w	sl, #0
 800883a:	9b07      	ldr	r3, [sp, #28]
 800883c:	3301      	adds	r3, #1
 800883e:	9307      	str	r3, [sp, #28]
 8008840:	220a      	movs	r2, #10
 8008842:	2300      	movs	r3, #0
 8008844:	4620      	mov	r0, r4
 8008846:	4629      	mov	r1, r5
 8008848:	f7f8 f91e 	bl	8000a88 <__aeabi_uldivmod>
 800884c:	2d00      	cmp	r5, #0
 800884e:	bf08      	it	eq
 8008850:	2c0a      	cmpeq	r4, #10
 8008852:	f0c0 80fd 	bcc.w	8008a50 <_vfiprintf_r+0x8ec>
 8008856:	4604      	mov	r4, r0
 8008858:	460d      	mov	r5, r1
 800885a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800885e:	e7c3      	b.n	80087e8 <_vfiprintf_r+0x684>
 8008860:	469a      	mov	sl, r3
 8008862:	e7ed      	b.n	8008840 <_vfiprintf_r+0x6dc>
 8008864:	9a06      	ldr	r2, [sp, #24]
 8008866:	f004 030f 	and.w	r3, r4, #15
 800886a:	5cd3      	ldrb	r3, [r2, r3]
 800886c:	092a      	lsrs	r2, r5, #4
 800886e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8008872:	0923      	lsrs	r3, r4, #4
 8008874:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8008878:	461c      	mov	r4, r3
 800887a:	4615      	mov	r5, r2
 800887c:	ea54 0305 	orrs.w	r3, r4, r5
 8008880:	d1f0      	bne.n	8008864 <_vfiprintf_r+0x700>
 8008882:	e0e5      	b.n	8008a50 <_vfiprintf_r+0x8ec>
 8008884:	b933      	cbnz	r3, 8008894 <_vfiprintf_r+0x730>
 8008886:	f01a 0f01 	tst.w	sl, #1
 800888a:	d003      	beq.n	8008894 <_vfiprintf_r+0x730>
 800888c:	2330      	movs	r3, #48	; 0x30
 800888e:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 8008892:	e79e      	b.n	80087d2 <_vfiprintf_r+0x66e>
 8008894:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 8008898:	e0da      	b.n	8008a50 <_vfiprintf_r+0x8ec>
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 80a4 	beq.w	80089e8 <_vfiprintf_r+0x884>
 80088a0:	2100      	movs	r1, #0
 80088a2:	46a3      	mov	fp, r4
 80088a4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80088a8:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 80088ac:	e5e8      	b.n	8008480 <_vfiprintf_r+0x31c>
 80088ae:	4605      	mov	r5, r0
 80088b0:	e68d      	b.n	80085ce <_vfiprintf_r+0x46a>
 80088b2:	2010      	movs	r0, #16
 80088b4:	2b07      	cmp	r3, #7
 80088b6:	4402      	add	r2, r0
 80088b8:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 80088bc:	6070      	str	r0, [r6, #4]
 80088be:	dd07      	ble.n	80088d0 <_vfiprintf_r+0x76c>
 80088c0:	4639      	mov	r1, r7
 80088c2:	4648      	mov	r0, r9
 80088c4:	aa0e      	add	r2, sp, #56	; 0x38
 80088c6:	f7ff fc1b 	bl	8008100 <__sprint_r>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d16b      	bne.n	80089a6 <_vfiprintf_r+0x842>
 80088ce:	a911      	add	r1, sp, #68	; 0x44
 80088d0:	460e      	mov	r6, r1
 80088d2:	3c10      	subs	r4, #16
 80088d4:	e696      	b.n	8008604 <_vfiprintf_r+0x4a0>
 80088d6:	460e      	mov	r6, r1
 80088d8:	e6af      	b.n	800863a <_vfiprintf_r+0x4d6>
 80088da:	bf00      	nop
 80088dc:	0800950c 	.word	0x0800950c
 80088e0:	0800951c 	.word	0x0800951c
 80088e4:	080092dd 	.word	0x080092dd
 80088e8:	4639      	mov	r1, r7
 80088ea:	4648      	mov	r0, r9
 80088ec:	aa0e      	add	r2, sp, #56	; 0x38
 80088ee:	f7ff fc07 	bl	8008100 <__sprint_r>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d157      	bne.n	80089a6 <_vfiprintf_r+0x842>
 80088f6:	ae11      	add	r6, sp, #68	; 0x44
 80088f8:	e6b1      	b.n	800865e <_vfiprintf_r+0x4fa>
 80088fa:	4639      	mov	r1, r7
 80088fc:	4648      	mov	r0, r9
 80088fe:	aa0e      	add	r2, sp, #56	; 0x38
 8008900:	f7ff fbfe 	bl	8008100 <__sprint_r>
 8008904:	2800      	cmp	r0, #0
 8008906:	d14e      	bne.n	80089a6 <_vfiprintf_r+0x842>
 8008908:	ae11      	add	r6, sp, #68	; 0x44
 800890a:	e6b8      	b.n	800867e <_vfiprintf_r+0x51a>
 800890c:	2010      	movs	r0, #16
 800890e:	2b07      	cmp	r3, #7
 8008910:	4402      	add	r2, r0
 8008912:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 8008916:	6070      	str	r0, [r6, #4]
 8008918:	dd07      	ble.n	800892a <_vfiprintf_r+0x7c6>
 800891a:	4639      	mov	r1, r7
 800891c:	4648      	mov	r0, r9
 800891e:	aa0e      	add	r2, sp, #56	; 0x38
 8008920:	f7ff fbee 	bl	8008100 <__sprint_r>
 8008924:	2800      	cmp	r0, #0
 8008926:	d13e      	bne.n	80089a6 <_vfiprintf_r+0x842>
 8008928:	a911      	add	r1, sp, #68	; 0x44
 800892a:	460e      	mov	r6, r1
 800892c:	3c10      	subs	r4, #16
 800892e:	e6ae      	b.n	800868e <_vfiprintf_r+0x52a>
 8008930:	460e      	mov	r6, r1
 8008932:	e6c7      	b.n	80086c4 <_vfiprintf_r+0x560>
 8008934:	2010      	movs	r0, #16
 8008936:	2b07      	cmp	r3, #7
 8008938:	4401      	add	r1, r0
 800893a:	e9cd 310f 	strd	r3, r1, [sp, #60]	; 0x3c
 800893e:	6070      	str	r0, [r6, #4]
 8008940:	dd06      	ble.n	8008950 <_vfiprintf_r+0x7ec>
 8008942:	4639      	mov	r1, r7
 8008944:	4648      	mov	r0, r9
 8008946:	aa0e      	add	r2, sp, #56	; 0x38
 8008948:	f7ff fbda 	bl	8008100 <__sprint_r>
 800894c:	bb58      	cbnz	r0, 80089a6 <_vfiprintf_r+0x842>
 800894e:	aa11      	add	r2, sp, #68	; 0x44
 8008950:	4616      	mov	r6, r2
 8008952:	3c10      	subs	r4, #16
 8008954:	e6bb      	b.n	80086ce <_vfiprintf_r+0x56a>
 8008956:	4616      	mov	r6, r2
 8008958:	e6d3      	b.n	8008702 <_vfiprintf_r+0x59e>
 800895a:	4639      	mov	r1, r7
 800895c:	4648      	mov	r0, r9
 800895e:	aa0e      	add	r2, sp, #56	; 0x38
 8008960:	f7ff fbce 	bl	8008100 <__sprint_r>
 8008964:	b9f8      	cbnz	r0, 80089a6 <_vfiprintf_r+0x842>
 8008966:	ab11      	add	r3, sp, #68	; 0x44
 8008968:	e6da      	b.n	8008720 <_vfiprintf_r+0x5bc>
 800896a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800896e:	1a54      	subs	r4, r2, r1
 8008970:	2c00      	cmp	r4, #0
 8008972:	f77f aed9 	ble.w	8008728 <_vfiprintf_r+0x5c4>
 8008976:	2610      	movs	r6, #16
 8008978:	4d39      	ldr	r5, [pc, #228]	; (8008a60 <_vfiprintf_r+0x8fc>)
 800897a:	2c10      	cmp	r4, #16
 800897c:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8008980:	601d      	str	r5, [r3, #0]
 8008982:	f102 0201 	add.w	r2, r2, #1
 8008986:	dc1d      	bgt.n	80089c4 <_vfiprintf_r+0x860>
 8008988:	605c      	str	r4, [r3, #4]
 800898a:	2a07      	cmp	r2, #7
 800898c:	440c      	add	r4, r1
 800898e:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8008992:	f77f aec9 	ble.w	8008728 <_vfiprintf_r+0x5c4>
 8008996:	4639      	mov	r1, r7
 8008998:	4648      	mov	r0, r9
 800899a:	aa0e      	add	r2, sp, #56	; 0x38
 800899c:	f7ff fbb0 	bl	8008100 <__sprint_r>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	f43f aec1 	beq.w	8008728 <_vfiprintf_r+0x5c4>
 80089a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089a8:	07d9      	lsls	r1, r3, #31
 80089aa:	d405      	bmi.n	80089b8 <_vfiprintf_r+0x854>
 80089ac:	89bb      	ldrh	r3, [r7, #12]
 80089ae:	059a      	lsls	r2, r3, #22
 80089b0:	d402      	bmi.n	80089b8 <_vfiprintf_r+0x854>
 80089b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80089b4:	f7fe fac1 	bl	8006f3a <__retarget_lock_release_recursive>
 80089b8:	89bb      	ldrh	r3, [r7, #12]
 80089ba:	065b      	lsls	r3, r3, #25
 80089bc:	f57f ac03 	bpl.w	80081c6 <_vfiprintf_r+0x62>
 80089c0:	f7ff bbfe 	b.w	80081c0 <_vfiprintf_r+0x5c>
 80089c4:	3110      	adds	r1, #16
 80089c6:	2a07      	cmp	r2, #7
 80089c8:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 80089cc:	605e      	str	r6, [r3, #4]
 80089ce:	dc02      	bgt.n	80089d6 <_vfiprintf_r+0x872>
 80089d0:	3308      	adds	r3, #8
 80089d2:	3c10      	subs	r4, #16
 80089d4:	e7d1      	b.n	800897a <_vfiprintf_r+0x816>
 80089d6:	4639      	mov	r1, r7
 80089d8:	4648      	mov	r0, r9
 80089da:	aa0e      	add	r2, sp, #56	; 0x38
 80089dc:	f7ff fb90 	bl	8008100 <__sprint_r>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d1e0      	bne.n	80089a6 <_vfiprintf_r+0x842>
 80089e4:	ab11      	add	r3, sp, #68	; 0x44
 80089e6:	e7f4      	b.n	80089d2 <_vfiprintf_r+0x86e>
 80089e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089ea:	b913      	cbnz	r3, 80089f2 <_vfiprintf_r+0x88e>
 80089ec:	2300      	movs	r3, #0
 80089ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80089f0:	e7d9      	b.n	80089a6 <_vfiprintf_r+0x842>
 80089f2:	4639      	mov	r1, r7
 80089f4:	4648      	mov	r0, r9
 80089f6:	aa0e      	add	r2, sp, #56	; 0x38
 80089f8:	f7ff fb82 	bl	8008100 <__sprint_r>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d0f5      	beq.n	80089ec <_vfiprintf_r+0x888>
 8008a00:	e7d1      	b.n	80089a6 <_vfiprintf_r+0x842>
 8008a02:	ea54 0205 	orrs.w	r2, r4, r5
 8008a06:	f8cd a014 	str.w	sl, [sp, #20]
 8008a0a:	f43f ada4 	beq.w	8008556 <_vfiprintf_r+0x3f2>
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	f43f aed8 	beq.w	80087c4 <_vfiprintf_r+0x660>
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 8008a1a:	f43f af23 	beq.w	8008864 <_vfiprintf_r+0x700>
 8008a1e:	08e2      	lsrs	r2, r4, #3
 8008a20:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8008a24:	08e8      	lsrs	r0, r5, #3
 8008a26:	f004 0307 	and.w	r3, r4, #7
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	4614      	mov	r4, r2
 8008a2e:	3330      	adds	r3, #48	; 0x30
 8008a30:	ea54 0205 	orrs.w	r2, r4, r5
 8008a34:	4641      	mov	r1, r8
 8008a36:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8008a3a:	d1f0      	bne.n	8008a1e <_vfiprintf_r+0x8ba>
 8008a3c:	9a05      	ldr	r2, [sp, #20]
 8008a3e:	07d0      	lsls	r0, r2, #31
 8008a40:	d506      	bpl.n	8008a50 <_vfiprintf_r+0x8ec>
 8008a42:	2b30      	cmp	r3, #48	; 0x30
 8008a44:	d004      	beq.n	8008a50 <_vfiprintf_r+0x8ec>
 8008a46:	2330      	movs	r3, #48	; 0x30
 8008a48:	f808 3c01 	strb.w	r3, [r8, #-1]
 8008a4c:	f1a1 0802 	sub.w	r8, r1, #2
 8008a50:	ab3a      	add	r3, sp, #232	; 0xe8
 8008a52:	eba3 0308 	sub.w	r3, r3, r8
 8008a56:	9d01      	ldr	r5, [sp, #4]
 8008a58:	f8dd a014 	ldr.w	sl, [sp, #20]
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	e5b6      	b.n	80085ce <_vfiprintf_r+0x46a>
 8008a60:	0800950c 	.word	0x0800950c

08008a64 <__sbprintf>:
 8008a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a66:	461f      	mov	r7, r3
 8008a68:	898b      	ldrh	r3, [r1, #12]
 8008a6a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8008a6e:	f023 0302 	bic.w	r3, r3, #2
 8008a72:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008a76:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008a78:	4615      	mov	r5, r2
 8008a7a:	9319      	str	r3, [sp, #100]	; 0x64
 8008a7c:	89cb      	ldrh	r3, [r1, #14]
 8008a7e:	4606      	mov	r6, r0
 8008a80:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008a84:	69cb      	ldr	r3, [r1, #28]
 8008a86:	a816      	add	r0, sp, #88	; 0x58
 8008a88:	9307      	str	r3, [sp, #28]
 8008a8a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a90:	ab1a      	add	r3, sp, #104	; 0x68
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	9304      	str	r3, [sp, #16]
 8008a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a9a:	9302      	str	r3, [sp, #8]
 8008a9c:	9305      	str	r3, [sp, #20]
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	9306      	str	r3, [sp, #24]
 8008aa2:	f7fe fa47 	bl	8006f34 <__retarget_lock_init_recursive>
 8008aa6:	462a      	mov	r2, r5
 8008aa8:	463b      	mov	r3, r7
 8008aaa:	4669      	mov	r1, sp
 8008aac:	4630      	mov	r0, r6
 8008aae:	f7ff fb59 	bl	8008164 <_vfiprintf_r>
 8008ab2:	1e05      	subs	r5, r0, #0
 8008ab4:	db07      	blt.n	8008ac6 <__sbprintf+0x62>
 8008ab6:	4669      	mov	r1, sp
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f7fd ff11 	bl	80068e0 <_fflush_r>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	bf18      	it	ne
 8008ac2:	f04f 35ff 	movne.w	r5, #4294967295
 8008ac6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008aca:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008acc:	065b      	lsls	r3, r3, #25
 8008ace:	bf42      	ittt	mi
 8008ad0:	89a3      	ldrhmi	r3, [r4, #12]
 8008ad2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8008ad6:	81a3      	strhmi	r3, [r4, #12]
 8008ad8:	f7fe fa2d 	bl	8006f36 <__retarget_lock_close_recursive>
 8008adc:	4628      	mov	r0, r5
 8008ade:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8008ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ae4 <_write_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	4608      	mov	r0, r1
 8008aea:	4611      	mov	r1, r2
 8008aec:	2200      	movs	r2, #0
 8008aee:	4d05      	ldr	r5, [pc, #20]	; (8008b04 <_write_r+0x20>)
 8008af0:	602a      	str	r2, [r5, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	f7f8 fad0 	bl	8001098 <_write>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d102      	bne.n	8008b02 <_write_r+0x1e>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	b103      	cbz	r3, 8008b02 <_write_r+0x1e>
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	bd38      	pop	{r3, r4, r5, pc}
 8008b04:	20000c5c 	.word	0x20000c5c

08008b08 <__register_exitproc>:
 8008b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b0c:	4d1c      	ldr	r5, [pc, #112]	; (8008b80 <__register_exitproc+0x78>)
 8008b0e:	4606      	mov	r6, r0
 8008b10:	6828      	ldr	r0, [r5, #0]
 8008b12:	4698      	mov	r8, r3
 8008b14:	460f      	mov	r7, r1
 8008b16:	4691      	mov	r9, r2
 8008b18:	f7fe fa0e 	bl	8006f38 <__retarget_lock_acquire_recursive>
 8008b1c:	4b19      	ldr	r3, [pc, #100]	; (8008b84 <__register_exitproc+0x7c>)
 8008b1e:	4628      	mov	r0, r5
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8008b26:	b91c      	cbnz	r4, 8008b30 <__register_exitproc+0x28>
 8008b28:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8008b2c:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8008b30:	6865      	ldr	r5, [r4, #4]
 8008b32:	6800      	ldr	r0, [r0, #0]
 8008b34:	2d1f      	cmp	r5, #31
 8008b36:	dd05      	ble.n	8008b44 <__register_exitproc+0x3c>
 8008b38:	f7fe f9ff 	bl	8006f3a <__retarget_lock_release_recursive>
 8008b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b44:	b19e      	cbz	r6, 8008b6e <__register_exitproc+0x66>
 8008b46:	2201      	movs	r2, #1
 8008b48:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8008b4c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8008b50:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8008b54:	40aa      	lsls	r2, r5
 8008b56:	4313      	orrs	r3, r2
 8008b58:	2e02      	cmp	r6, #2
 8008b5a:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8008b5e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8008b62:	bf02      	ittt	eq
 8008b64:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8008b68:	431a      	orreq	r2, r3
 8008b6a:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8008b6e:	1c6b      	adds	r3, r5, #1
 8008b70:	3502      	adds	r5, #2
 8008b72:	6063      	str	r3, [r4, #4]
 8008b74:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8008b78:	f7fe f9df 	bl	8006f3a <__retarget_lock_release_recursive>
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	e7df      	b.n	8008b40 <__register_exitproc+0x38>
 8008b80:	20000438 	.word	0x20000438
 8008b84:	080092b8 	.word	0x080092b8

08008b88 <__assert_func>:
 8008b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b8a:	4614      	mov	r4, r2
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	4b09      	ldr	r3, [pc, #36]	; (8008bb4 <__assert_func+0x2c>)
 8008b90:	4605      	mov	r5, r0
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68d8      	ldr	r0, [r3, #12]
 8008b96:	b14c      	cbz	r4, 8008bac <__assert_func+0x24>
 8008b98:	4b07      	ldr	r3, [pc, #28]	; (8008bb8 <__assert_func+0x30>)
 8008b9a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b9e:	9100      	str	r1, [sp, #0]
 8008ba0:	462b      	mov	r3, r5
 8008ba2:	4906      	ldr	r1, [pc, #24]	; (8008bbc <__assert_func+0x34>)
 8008ba4:	f000 f8a4 	bl	8008cf0 <fiprintf>
 8008ba8:	f000 f9e9 	bl	8008f7e <abort>
 8008bac:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <__assert_func+0x38>)
 8008bae:	461c      	mov	r4, r3
 8008bb0:	e7f3      	b.n	8008b9a <__assert_func+0x12>
 8008bb2:	bf00      	nop
 8008bb4:	2000000c 	.word	0x2000000c
 8008bb8:	0800952c 	.word	0x0800952c
 8008bbc:	08009539 	.word	0x08009539
 8008bc0:	08009567 	.word	0x08009567

08008bc4 <_calloc_r>:
 8008bc4:	b510      	push	{r4, lr}
 8008bc6:	4351      	muls	r1, r2
 8008bc8:	f7fe fa24 	bl	8007014 <_malloc_r>
 8008bcc:	4604      	mov	r4, r0
 8008bce:	b198      	cbz	r0, 8008bf8 <_calloc_r+0x34>
 8008bd0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008bd4:	f022 0203 	bic.w	r2, r2, #3
 8008bd8:	3a04      	subs	r2, #4
 8008bda:	2a24      	cmp	r2, #36	; 0x24
 8008bdc:	d81b      	bhi.n	8008c16 <_calloc_r+0x52>
 8008bde:	2a13      	cmp	r2, #19
 8008be0:	d917      	bls.n	8008c12 <_calloc_r+0x4e>
 8008be2:	2100      	movs	r1, #0
 8008be4:	2a1b      	cmp	r2, #27
 8008be6:	e9c0 1100 	strd	r1, r1, [r0]
 8008bea:	d807      	bhi.n	8008bfc <_calloc_r+0x38>
 8008bec:	f100 0308 	add.w	r3, r0, #8
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	e9c3 2200 	strd	r2, r2, [r3]
 8008bf6:	609a      	str	r2, [r3, #8]
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	bd10      	pop	{r4, pc}
 8008bfc:	2a24      	cmp	r2, #36	; 0x24
 8008bfe:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8008c02:	bf11      	iteee	ne
 8008c04:	f100 0310 	addne.w	r3, r0, #16
 8008c08:	6101      	streq	r1, [r0, #16]
 8008c0a:	f100 0318 	addeq.w	r3, r0, #24
 8008c0e:	6141      	streq	r1, [r0, #20]
 8008c10:	e7ee      	b.n	8008bf0 <_calloc_r+0x2c>
 8008c12:	4603      	mov	r3, r0
 8008c14:	e7ec      	b.n	8008bf0 <_calloc_r+0x2c>
 8008c16:	2100      	movs	r1, #0
 8008c18:	f7fa fa62 	bl	80030e0 <memset>
 8008c1c:	e7ec      	b.n	8008bf8 <_calloc_r+0x34>
	...

08008c20 <_close_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	2300      	movs	r3, #0
 8008c24:	4d05      	ldr	r5, [pc, #20]	; (8008c3c <_close_r+0x1c>)
 8008c26:	4604      	mov	r4, r0
 8008c28:	4608      	mov	r0, r1
 8008c2a:	602b      	str	r3, [r5, #0]
 8008c2c:	f7f8 fcf2 	bl	8001614 <_close>
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	d102      	bne.n	8008c3a <_close_r+0x1a>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	b103      	cbz	r3, 8008c3a <_close_r+0x1a>
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	bd38      	pop	{r3, r4, r5, pc}
 8008c3c:	20000c5c 	.word	0x20000c5c

08008c40 <_fclose_r>:
 8008c40:	b570      	push	{r4, r5, r6, lr}
 8008c42:	4606      	mov	r6, r0
 8008c44:	460c      	mov	r4, r1
 8008c46:	b911      	cbnz	r1, 8008c4e <_fclose_r+0xe>
 8008c48:	2500      	movs	r5, #0
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	bd70      	pop	{r4, r5, r6, pc}
 8008c4e:	b118      	cbz	r0, 8008c58 <_fclose_r+0x18>
 8008c50:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008c52:	b90b      	cbnz	r3, 8008c58 <_fclose_r+0x18>
 8008c54:	f7fd feb0 	bl	80069b8 <__sinit>
 8008c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c5a:	07d8      	lsls	r0, r3, #31
 8008c5c:	d405      	bmi.n	8008c6a <_fclose_r+0x2a>
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	0599      	lsls	r1, r3, #22
 8008c62:	d402      	bmi.n	8008c6a <_fclose_r+0x2a>
 8008c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c66:	f7fe f967 	bl	8006f38 <__retarget_lock_acquire_recursive>
 8008c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c6e:	b93b      	cbnz	r3, 8008c80 <_fclose_r+0x40>
 8008c70:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008c72:	f015 0501 	ands.w	r5, r5, #1
 8008c76:	d1e7      	bne.n	8008c48 <_fclose_r+0x8>
 8008c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c7a:	f7fe f95e 	bl	8006f3a <__retarget_lock_release_recursive>
 8008c7e:	e7e4      	b.n	8008c4a <_fclose_r+0xa>
 8008c80:	4621      	mov	r1, r4
 8008c82:	4630      	mov	r0, r6
 8008c84:	f7fd fd9e 	bl	80067c4 <__sflush_r>
 8008c88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	b133      	cbz	r3, 8008c9c <_fclose_r+0x5c>
 8008c8e:	4630      	mov	r0, r6
 8008c90:	69e1      	ldr	r1, [r4, #28]
 8008c92:	4798      	blx	r3
 8008c94:	2800      	cmp	r0, #0
 8008c96:	bfb8      	it	lt
 8008c98:	f04f 35ff 	movlt.w	r5, #4294967295
 8008c9c:	89a3      	ldrh	r3, [r4, #12]
 8008c9e:	061a      	lsls	r2, r3, #24
 8008ca0:	d503      	bpl.n	8008caa <_fclose_r+0x6a>
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	6921      	ldr	r1, [r4, #16]
 8008ca6:	f7fd ff17 	bl	8006ad8 <_free_r>
 8008caa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008cac:	b141      	cbz	r1, 8008cc0 <_fclose_r+0x80>
 8008cae:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008cb2:	4299      	cmp	r1, r3
 8008cb4:	d002      	beq.n	8008cbc <_fclose_r+0x7c>
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	f7fd ff0e 	bl	8006ad8 <_free_r>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	6323      	str	r3, [r4, #48]	; 0x30
 8008cc0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008cc2:	b121      	cbz	r1, 8008cce <_fclose_r+0x8e>
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f7fd ff07 	bl	8006ad8 <_free_r>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	6463      	str	r3, [r4, #68]	; 0x44
 8008cce:	f7fd fe5b 	bl	8006988 <__sfp_lock_acquire>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	81a3      	strh	r3, [r4, #12]
 8008cd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cd8:	07db      	lsls	r3, r3, #31
 8008cda:	d402      	bmi.n	8008ce2 <_fclose_r+0xa2>
 8008cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cde:	f7fe f92c 	bl	8006f3a <__retarget_lock_release_recursive>
 8008ce2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ce4:	f7fe f927 	bl	8006f36 <__retarget_lock_close_recursive>
 8008ce8:	f7fd fe54 	bl	8006994 <__sfp_lock_release>
 8008cec:	e7ad      	b.n	8008c4a <_fclose_r+0xa>
	...

08008cf0 <fiprintf>:
 8008cf0:	b40e      	push	{r1, r2, r3}
 8008cf2:	b503      	push	{r0, r1, lr}
 8008cf4:	4601      	mov	r1, r0
 8008cf6:	ab03      	add	r3, sp, #12
 8008cf8:	4805      	ldr	r0, [pc, #20]	; (8008d10 <fiprintf+0x20>)
 8008cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cfe:	6800      	ldr	r0, [r0, #0]
 8008d00:	9301      	str	r3, [sp, #4]
 8008d02:	f7ff fa2f 	bl	8008164 <_vfiprintf_r>
 8008d06:	b002      	add	sp, #8
 8008d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d0c:	b003      	add	sp, #12
 8008d0e:	4770      	bx	lr
 8008d10:	2000000c 	.word	0x2000000c

08008d14 <__fputwc>:
 8008d14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d18:	4680      	mov	r8, r0
 8008d1a:	460e      	mov	r6, r1
 8008d1c:	4615      	mov	r5, r2
 8008d1e:	f000 f885 	bl	8008e2c <__locale_mb_cur_max>
 8008d22:	2801      	cmp	r0, #1
 8008d24:	4604      	mov	r4, r0
 8008d26:	d11b      	bne.n	8008d60 <__fputwc+0x4c>
 8008d28:	1e73      	subs	r3, r6, #1
 8008d2a:	2bfe      	cmp	r3, #254	; 0xfe
 8008d2c:	d818      	bhi.n	8008d60 <__fputwc+0x4c>
 8008d2e:	f88d 6004 	strb.w	r6, [sp, #4]
 8008d32:	2700      	movs	r7, #0
 8008d34:	f10d 0904 	add.w	r9, sp, #4
 8008d38:	42a7      	cmp	r7, r4
 8008d3a:	d020      	beq.n	8008d7e <__fputwc+0x6a>
 8008d3c:	68ab      	ldr	r3, [r5, #8]
 8008d3e:	f817 1009 	ldrb.w	r1, [r7, r9]
 8008d42:	3b01      	subs	r3, #1
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	60ab      	str	r3, [r5, #8]
 8008d48:	da04      	bge.n	8008d54 <__fputwc+0x40>
 8008d4a:	69aa      	ldr	r2, [r5, #24]
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	db1a      	blt.n	8008d86 <__fputwc+0x72>
 8008d50:	290a      	cmp	r1, #10
 8008d52:	d018      	beq.n	8008d86 <__fputwc+0x72>
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	1c5a      	adds	r2, r3, #1
 8008d58:	602a      	str	r2, [r5, #0]
 8008d5a:	7019      	strb	r1, [r3, #0]
 8008d5c:	3701      	adds	r7, #1
 8008d5e:	e7eb      	b.n	8008d38 <__fputwc+0x24>
 8008d60:	4632      	mov	r2, r6
 8008d62:	4640      	mov	r0, r8
 8008d64:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8008d68:	a901      	add	r1, sp, #4
 8008d6a:	f000 f8e5 	bl	8008f38 <_wcrtomb_r>
 8008d6e:	1c42      	adds	r2, r0, #1
 8008d70:	4604      	mov	r4, r0
 8008d72:	d1de      	bne.n	8008d32 <__fputwc+0x1e>
 8008d74:	4606      	mov	r6, r0
 8008d76:	89ab      	ldrh	r3, [r5, #12]
 8008d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d7c:	81ab      	strh	r3, [r5, #12]
 8008d7e:	4630      	mov	r0, r6
 8008d80:	b003      	add	sp, #12
 8008d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d86:	462a      	mov	r2, r5
 8008d88:	4640      	mov	r0, r8
 8008d8a:	f000 f88b 	bl	8008ea4 <__swbuf_r>
 8008d8e:	1c43      	adds	r3, r0, #1
 8008d90:	d1e4      	bne.n	8008d5c <__fputwc+0x48>
 8008d92:	4606      	mov	r6, r0
 8008d94:	e7f3      	b.n	8008d7e <__fputwc+0x6a>

08008d96 <_fputwc_r>:
 8008d96:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	07db      	lsls	r3, r3, #31
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	460e      	mov	r6, r1
 8008da0:	4614      	mov	r4, r2
 8008da2:	d405      	bmi.n	8008db0 <_fputwc_r+0x1a>
 8008da4:	8993      	ldrh	r3, [r2, #12]
 8008da6:	0598      	lsls	r0, r3, #22
 8008da8:	d402      	bmi.n	8008db0 <_fputwc_r+0x1a>
 8008daa:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8008dac:	f7fe f8c4 	bl	8006f38 <__retarget_lock_acquire_recursive>
 8008db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db4:	0499      	lsls	r1, r3, #18
 8008db6:	d406      	bmi.n	8008dc6 <_fputwc_r+0x30>
 8008db8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008dbc:	81a3      	strh	r3, [r4, #12]
 8008dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008dc4:	6663      	str	r3, [r4, #100]	; 0x64
 8008dc6:	4622      	mov	r2, r4
 8008dc8:	4628      	mov	r0, r5
 8008dca:	4631      	mov	r1, r6
 8008dcc:	f7ff ffa2 	bl	8008d14 <__fputwc>
 8008dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	07da      	lsls	r2, r3, #31
 8008dd6:	d405      	bmi.n	8008de4 <_fputwc_r+0x4e>
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	059b      	lsls	r3, r3, #22
 8008ddc:	d402      	bmi.n	8008de4 <_fputwc_r+0x4e>
 8008dde:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008de0:	f7fe f8ab 	bl	8006f3a <__retarget_lock_release_recursive>
 8008de4:	4628      	mov	r0, r5
 8008de6:	bd70      	pop	{r4, r5, r6, pc}

08008de8 <_fstat_r>:
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	2300      	movs	r3, #0
 8008dec:	4d06      	ldr	r5, [pc, #24]	; (8008e08 <_fstat_r+0x20>)
 8008dee:	4604      	mov	r4, r0
 8008df0:	4608      	mov	r0, r1
 8008df2:	4611      	mov	r1, r2
 8008df4:	602b      	str	r3, [r5, #0]
 8008df6:	f7f8 fc18 	bl	800162a <_fstat>
 8008dfa:	1c43      	adds	r3, r0, #1
 8008dfc:	d102      	bne.n	8008e04 <_fstat_r+0x1c>
 8008dfe:	682b      	ldr	r3, [r5, #0]
 8008e00:	b103      	cbz	r3, 8008e04 <_fstat_r+0x1c>
 8008e02:	6023      	str	r3, [r4, #0]
 8008e04:	bd38      	pop	{r3, r4, r5, pc}
 8008e06:	bf00      	nop
 8008e08:	20000c5c 	.word	0x20000c5c

08008e0c <_isatty_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	2300      	movs	r3, #0
 8008e10:	4d05      	ldr	r5, [pc, #20]	; (8008e28 <_isatty_r+0x1c>)
 8008e12:	4604      	mov	r4, r0
 8008e14:	4608      	mov	r0, r1
 8008e16:	602b      	str	r3, [r5, #0]
 8008e18:	f7f8 fc16 	bl	8001648 <_isatty>
 8008e1c:	1c43      	adds	r3, r0, #1
 8008e1e:	d102      	bne.n	8008e26 <_isatty_r+0x1a>
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	b103      	cbz	r3, 8008e26 <_isatty_r+0x1a>
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
 8008e28:	20000c5c 	.word	0x20000c5c

08008e2c <__locale_mb_cur_max>:
 8008e2c:	4b01      	ldr	r3, [pc, #4]	; (8008e34 <__locale_mb_cur_max+0x8>)
 8008e2e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8008e32:	4770      	bx	lr
 8008e34:	2000084c 	.word	0x2000084c

08008e38 <_lseek_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	4608      	mov	r0, r1
 8008e3e:	4611      	mov	r1, r2
 8008e40:	2200      	movs	r2, #0
 8008e42:	4d05      	ldr	r5, [pc, #20]	; (8008e58 <_lseek_r+0x20>)
 8008e44:	602a      	str	r2, [r5, #0]
 8008e46:	461a      	mov	r2, r3
 8008e48:	f7f8 fc08 	bl	800165c <_lseek>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	d102      	bne.n	8008e56 <_lseek_r+0x1e>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	b103      	cbz	r3, 8008e56 <_lseek_r+0x1e>
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	20000c5c 	.word	0x20000c5c

08008e5c <__ascii_mbtowc>:
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	b901      	cbnz	r1, 8008e62 <__ascii_mbtowc+0x6>
 8008e60:	a901      	add	r1, sp, #4
 8008e62:	b142      	cbz	r2, 8008e76 <__ascii_mbtowc+0x1a>
 8008e64:	b14b      	cbz	r3, 8008e7a <__ascii_mbtowc+0x1e>
 8008e66:	7813      	ldrb	r3, [r2, #0]
 8008e68:	600b      	str	r3, [r1, #0]
 8008e6a:	7812      	ldrb	r2, [r2, #0]
 8008e6c:	1e10      	subs	r0, r2, #0
 8008e6e:	bf18      	it	ne
 8008e70:	2001      	movne	r0, #1
 8008e72:	b002      	add	sp, #8
 8008e74:	4770      	bx	lr
 8008e76:	4610      	mov	r0, r2
 8008e78:	e7fb      	b.n	8008e72 <__ascii_mbtowc+0x16>
 8008e7a:	f06f 0001 	mvn.w	r0, #1
 8008e7e:	e7f8      	b.n	8008e72 <__ascii_mbtowc+0x16>

08008e80 <_read_r>:
 8008e80:	b538      	push	{r3, r4, r5, lr}
 8008e82:	4604      	mov	r4, r0
 8008e84:	4608      	mov	r0, r1
 8008e86:	4611      	mov	r1, r2
 8008e88:	2200      	movs	r2, #0
 8008e8a:	4d05      	ldr	r5, [pc, #20]	; (8008ea0 <_read_r+0x20>)
 8008e8c:	602a      	str	r2, [r5, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f7f8 fba3 	bl	80015da <_read>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_read_r+0x1e>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_read_r+0x1e>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	20000c5c 	.word	0x20000c5c

08008ea4 <__swbuf_r>:
 8008ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea6:	460e      	mov	r6, r1
 8008ea8:	4614      	mov	r4, r2
 8008eaa:	4605      	mov	r5, r0
 8008eac:	b118      	cbz	r0, 8008eb6 <__swbuf_r+0x12>
 8008eae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008eb0:	b90b      	cbnz	r3, 8008eb6 <__swbuf_r+0x12>
 8008eb2:	f7fd fd81 	bl	80069b8 <__sinit>
 8008eb6:	69a3      	ldr	r3, [r4, #24]
 8008eb8:	60a3      	str	r3, [r4, #8]
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	0719      	lsls	r1, r3, #28
 8008ebe:	d529      	bpl.n	8008f14 <__swbuf_r+0x70>
 8008ec0:	6923      	ldr	r3, [r4, #16]
 8008ec2:	b33b      	cbz	r3, 8008f14 <__swbuf_r+0x70>
 8008ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ec8:	b2f6      	uxtb	r6, r6
 8008eca:	049a      	lsls	r2, r3, #18
 8008ecc:	4637      	mov	r7, r6
 8008ece:	d52a      	bpl.n	8008f26 <__swbuf_r+0x82>
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	6920      	ldr	r0, [r4, #16]
 8008ed4:	1a18      	subs	r0, r3, r0
 8008ed6:	6963      	ldr	r3, [r4, #20]
 8008ed8:	4283      	cmp	r3, r0
 8008eda:	dc04      	bgt.n	8008ee6 <__swbuf_r+0x42>
 8008edc:	4621      	mov	r1, r4
 8008ede:	4628      	mov	r0, r5
 8008ee0:	f7fd fcfe 	bl	80068e0 <_fflush_r>
 8008ee4:	b9e0      	cbnz	r0, 8008f20 <__swbuf_r+0x7c>
 8008ee6:	68a3      	ldr	r3, [r4, #8]
 8008ee8:	3001      	adds	r0, #1
 8008eea:	3b01      	subs	r3, #1
 8008eec:	60a3      	str	r3, [r4, #8]
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	6022      	str	r2, [r4, #0]
 8008ef4:	701e      	strb	r6, [r3, #0]
 8008ef6:	6963      	ldr	r3, [r4, #20]
 8008ef8:	4283      	cmp	r3, r0
 8008efa:	d004      	beq.n	8008f06 <__swbuf_r+0x62>
 8008efc:	89a3      	ldrh	r3, [r4, #12]
 8008efe:	07db      	lsls	r3, r3, #31
 8008f00:	d506      	bpl.n	8008f10 <__swbuf_r+0x6c>
 8008f02:	2e0a      	cmp	r6, #10
 8008f04:	d104      	bne.n	8008f10 <__swbuf_r+0x6c>
 8008f06:	4621      	mov	r1, r4
 8008f08:	4628      	mov	r0, r5
 8008f0a:	f7fd fce9 	bl	80068e0 <_fflush_r>
 8008f0e:	b938      	cbnz	r0, 8008f20 <__swbuf_r+0x7c>
 8008f10:	4638      	mov	r0, r7
 8008f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f14:	4621      	mov	r1, r4
 8008f16:	4628      	mov	r0, r5
 8008f18:	f7fc fda0 	bl	8005a5c <__swsetup_r>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d0d1      	beq.n	8008ec4 <__swbuf_r+0x20>
 8008f20:	f04f 37ff 	mov.w	r7, #4294967295
 8008f24:	e7f4      	b.n	8008f10 <__swbuf_r+0x6c>
 8008f26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008f2a:	81a3      	strh	r3, [r4, #12]
 8008f2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f32:	6663      	str	r3, [r4, #100]	; 0x64
 8008f34:	e7cc      	b.n	8008ed0 <__swbuf_r+0x2c>
	...

08008f38 <_wcrtomb_r>:
 8008f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f3a:	4c09      	ldr	r4, [pc, #36]	; (8008f60 <_wcrtomb_r+0x28>)
 8008f3c:	4605      	mov	r5, r0
 8008f3e:	461e      	mov	r6, r3
 8008f40:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8008f44:	b085      	sub	sp, #20
 8008f46:	b909      	cbnz	r1, 8008f4c <_wcrtomb_r+0x14>
 8008f48:	460a      	mov	r2, r1
 8008f4a:	a901      	add	r1, sp, #4
 8008f4c:	47b8      	blx	r7
 8008f4e:	1c43      	adds	r3, r0, #1
 8008f50:	bf01      	itttt	eq
 8008f52:	2300      	moveq	r3, #0
 8008f54:	6033      	streq	r3, [r6, #0]
 8008f56:	238a      	moveq	r3, #138	; 0x8a
 8008f58:	602b      	streq	r3, [r5, #0]
 8008f5a:	b005      	add	sp, #20
 8008f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	2000084c 	.word	0x2000084c

08008f64 <__ascii_wctomb>:
 8008f64:	4603      	mov	r3, r0
 8008f66:	4608      	mov	r0, r1
 8008f68:	b141      	cbz	r1, 8008f7c <__ascii_wctomb+0x18>
 8008f6a:	2aff      	cmp	r2, #255	; 0xff
 8008f6c:	d904      	bls.n	8008f78 <__ascii_wctomb+0x14>
 8008f6e:	228a      	movs	r2, #138	; 0x8a
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	4770      	bx	lr
 8008f78:	2001      	movs	r0, #1
 8008f7a:	700a      	strb	r2, [r1, #0]
 8008f7c:	4770      	bx	lr

08008f7e <abort>:
 8008f7e:	2006      	movs	r0, #6
 8008f80:	b508      	push	{r3, lr}
 8008f82:	f000 f82d 	bl	8008fe0 <raise>
 8008f86:	2001      	movs	r0, #1
 8008f88:	f7f8 fb1d 	bl	80015c6 <_exit>

08008f8c <_raise_r>:
 8008f8c:	291f      	cmp	r1, #31
 8008f8e:	b538      	push	{r3, r4, r5, lr}
 8008f90:	4604      	mov	r4, r0
 8008f92:	460d      	mov	r5, r1
 8008f94:	d904      	bls.n	8008fa0 <_raise_r+0x14>
 8008f96:	2316      	movs	r3, #22
 8008f98:	6003      	str	r3, [r0, #0]
 8008f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8008fa4:	b112      	cbz	r2, 8008fac <_raise_r+0x20>
 8008fa6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008faa:	b94b      	cbnz	r3, 8008fc0 <_raise_r+0x34>
 8008fac:	4620      	mov	r0, r4
 8008fae:	f000 f831 	bl	8009014 <_getpid_r>
 8008fb2:	462a      	mov	r2, r5
 8008fb4:	4601      	mov	r1, r0
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fbc:	f000 b818 	b.w	8008ff0 <_kill_r>
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d00a      	beq.n	8008fda <_raise_r+0x4e>
 8008fc4:	1c59      	adds	r1, r3, #1
 8008fc6:	d103      	bne.n	8008fd0 <_raise_r+0x44>
 8008fc8:	2316      	movs	r3, #22
 8008fca:	6003      	str	r3, [r0, #0]
 8008fcc:	2001      	movs	r0, #1
 8008fce:	e7e6      	b.n	8008f9e <_raise_r+0x12>
 8008fd0:	2400      	movs	r4, #0
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fd8:	4798      	blx	r3
 8008fda:	2000      	movs	r0, #0
 8008fdc:	e7df      	b.n	8008f9e <_raise_r+0x12>
	...

08008fe0 <raise>:
 8008fe0:	4b02      	ldr	r3, [pc, #8]	; (8008fec <raise+0xc>)
 8008fe2:	4601      	mov	r1, r0
 8008fe4:	6818      	ldr	r0, [r3, #0]
 8008fe6:	f7ff bfd1 	b.w	8008f8c <_raise_r>
 8008fea:	bf00      	nop
 8008fec:	2000000c 	.word	0x2000000c

08008ff0 <_kill_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	4d06      	ldr	r5, [pc, #24]	; (8009010 <_kill_r+0x20>)
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	4608      	mov	r0, r1
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	602b      	str	r3, [r5, #0]
 8008ffe:	f7f8 fad2 	bl	80015a6 <_kill>
 8009002:	1c43      	adds	r3, r0, #1
 8009004:	d102      	bne.n	800900c <_kill_r+0x1c>
 8009006:	682b      	ldr	r3, [r5, #0]
 8009008:	b103      	cbz	r3, 800900c <_kill_r+0x1c>
 800900a:	6023      	str	r3, [r4, #0]
 800900c:	bd38      	pop	{r3, r4, r5, pc}
 800900e:	bf00      	nop
 8009010:	20000c5c 	.word	0x20000c5c

08009014 <_getpid_r>:
 8009014:	f7f8 bac0 	b.w	8001598 <_getpid>

08009018 <_init>:
 8009018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901a:	bf00      	nop
 800901c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901e:	bc08      	pop	{r3}
 8009020:	469e      	mov	lr, r3
 8009022:	4770      	bx	lr

08009024 <_fini>:
 8009024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009026:	bf00      	nop
 8009028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902a:	bc08      	pop	{r3}
 800902c:	469e      	mov	lr, r3
 800902e:	4770      	bx	lr
