
MBMS200711.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c500  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  0800c610  0800c610  0001c610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9f4  0800c9f4  00020b28  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9f4  0800c9f4  0001c9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9fc  0800c9fc  00020b28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c9fc  0800c9fc  0001c9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca04  0800ca04  0001ca04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b28  20000000  0800ca08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016a4  20000b28  0800d530  00020b28  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200021cc  0800d530  000221cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020b28  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140ad  00000000  00000000  00020b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033c5  00000000  00000000  00034bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db0  00000000  00000000  00037fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c18  00000000  00000000  00038d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000178c6  00000000  00000000  00039990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d66c  00000000  00000000  00051256  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00070068  00000000  00000000  0005e8c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce92a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000484c  00000000  00000000  000ce9a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000b28 	.word	0x20000b28
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c5f8 	.word	0x0800c5f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000b2c 	.word	0x20000b2c
 800014c:	0800c5f8 	.word	0x0800c5f8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9c:	f000 b974 	b.w	8000d88 <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	468c      	mov	ip, r1
 8000abe:	4604      	mov	r4, r0
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d14b      	bne.n	8000b5e <__udivmoddi4+0xa6>
 8000ac6:	428a      	cmp	r2, r1
 8000ac8:	4615      	mov	r5, r2
 8000aca:	d967      	bls.n	8000b9c <__udivmoddi4+0xe4>
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	b14a      	cbz	r2, 8000ae6 <__udivmoddi4+0x2e>
 8000ad2:	f1c2 0720 	rsb	r7, r2, #32
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	fa20 f707 	lsr.w	r7, r0, r7
 8000ade:	4095      	lsls	r5, r2
 8000ae0:	ea47 0c03 	orr.w	ip, r7, r3
 8000ae4:	4094      	lsls	r4, r2
 8000ae6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aea:	fbbc f7fe 	udiv	r7, ip, lr
 8000aee:	fa1f f885 	uxth.w	r8, r5
 8000af2:	fb0e c317 	mls	r3, lr, r7, ip
 8000af6:	fb07 f908 	mul.w	r9, r7, r8
 8000afa:	0c21      	lsrs	r1, r4, #16
 8000afc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b00:	4599      	cmp	r9, r3
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x60>
 8000b04:	18eb      	adds	r3, r5, r3
 8000b06:	f107 31ff 	add.w	r1, r7, #4294967295
 8000b0a:	f080 811c 	bcs.w	8000d46 <__udivmoddi4+0x28e>
 8000b0e:	4599      	cmp	r9, r3
 8000b10:	f240 8119 	bls.w	8000d46 <__udivmoddi4+0x28e>
 8000b14:	3f02      	subs	r7, #2
 8000b16:	442b      	add	r3, r5
 8000b18:	eba3 0309 	sub.w	r3, r3, r9
 8000b1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b24:	fb00 f108 	mul.w	r1, r0, r8
 8000b28:	b2a4      	uxth	r4, r4
 8000b2a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2e:	42a1      	cmp	r1, r4
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0x8e>
 8000b32:	192c      	adds	r4, r5, r4
 8000b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b38:	f080 8107 	bcs.w	8000d4a <__udivmoddi4+0x292>
 8000b3c:	42a1      	cmp	r1, r4
 8000b3e:	f240 8104 	bls.w	8000d4a <__udivmoddi4+0x292>
 8000b42:	3802      	subs	r0, #2
 8000b44:	442c      	add	r4, r5
 8000b46:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4a:	2700      	movs	r7, #0
 8000b4c:	1a64      	subs	r4, r4, r1
 8000b4e:	b11e      	cbz	r6, 8000b58 <__udivmoddi4+0xa0>
 8000b50:	2300      	movs	r3, #0
 8000b52:	40d4      	lsrs	r4, r2
 8000b54:	e9c6 4300 	strd	r4, r3, [r6]
 8000b58:	4639      	mov	r1, r7
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0xbe>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f000 80ec 	beq.w	8000d40 <__udivmoddi4+0x288>
 8000b68:	2700      	movs	r7, #0
 8000b6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000b6e:	4638      	mov	r0, r7
 8000b70:	4639      	mov	r1, r7
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f783 	clz	r7, r3
 8000b7a:	2f00      	cmp	r7, #0
 8000b7c:	d148      	bne.n	8000c10 <__udivmoddi4+0x158>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xd0>
 8000b82:	4282      	cmp	r2, r0
 8000b84:	f200 80fb 	bhi.w	8000d7e <__udivmoddi4+0x2c6>
 8000b88:	1a84      	subs	r4, r0, r2
 8000b8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	469c      	mov	ip, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d0e0      	beq.n	8000b58 <__udivmoddi4+0xa0>
 8000b96:	e9c6 4c00 	strd	r4, ip, [r6]
 8000b9a:	e7dd      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000b9c:	b902      	cbnz	r2, 8000ba0 <__udivmoddi4+0xe8>
 8000b9e:	deff      	udf	#255	; 0xff
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	f040 808f 	bne.w	8000cc8 <__udivmoddi4+0x210>
 8000baa:	2701      	movs	r7, #1
 8000bac:	1b49      	subs	r1, r1, r5
 8000bae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bb2:	fa1f f985 	uxth.w	r9, r5
 8000bb6:	fbb1 fef8 	udiv	lr, r1, r8
 8000bba:	fb08 111e 	mls	r1, r8, lr, r1
 8000bbe:	fb09 f00e 	mul.w	r0, r9, lr
 8000bc2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000bc6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d907      	bls.n	8000bde <__udivmoddi4+0x126>
 8000bce:	18eb      	adds	r3, r5, r3
 8000bd0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000bd4:	d202      	bcs.n	8000bdc <__udivmoddi4+0x124>
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	f200 80cd 	bhi.w	8000d76 <__udivmoddi4+0x2be>
 8000bdc:	468e      	mov	lr, r1
 8000bde:	1a1b      	subs	r3, r3, r0
 8000be0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be4:	fb08 3310 	mls	r3, r8, r0, r3
 8000be8:	fb09 f900 	mul.w	r9, r9, r0
 8000bec:	b2a4      	uxth	r4, r4
 8000bee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf2:	45a1      	cmp	r9, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x14e>
 8000bf6:	192c      	adds	r4, r5, r4
 8000bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfc:	d202      	bcs.n	8000c04 <__udivmoddi4+0x14c>
 8000bfe:	45a1      	cmp	r9, r4
 8000c00:	f200 80b6 	bhi.w	8000d70 <__udivmoddi4+0x2b8>
 8000c04:	4618      	mov	r0, r3
 8000c06:	eba4 0409 	sub.w	r4, r4, r9
 8000c0a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c0e:	e79e      	b.n	8000b4e <__udivmoddi4+0x96>
 8000c10:	f1c7 0520 	rsb	r5, r7, #32
 8000c14:	40bb      	lsls	r3, r7
 8000c16:	fa22 fc05 	lsr.w	ip, r2, r5
 8000c1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1e:	fa21 f405 	lsr.w	r4, r1, r5
 8000c22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c26:	fbb4 f9fe 	udiv	r9, r4, lr
 8000c2a:	fa1f f88c 	uxth.w	r8, ip
 8000c2e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000c32:	fa20 f305 	lsr.w	r3, r0, r5
 8000c36:	40b9      	lsls	r1, r7
 8000c38:	fb09 fa08 	mul.w	sl, r9, r8
 8000c3c:	4319      	orrs	r1, r3
 8000c3e:	0c0b      	lsrs	r3, r1, #16
 8000c40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c44:	45a2      	cmp	sl, r4
 8000c46:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4a:	fa00 f307 	lsl.w	r3, r0, r7
 8000c4e:	d90b      	bls.n	8000c68 <__udivmoddi4+0x1b0>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c58:	f080 8088 	bcs.w	8000d6c <__udivmoddi4+0x2b4>
 8000c5c:	45a2      	cmp	sl, r4
 8000c5e:	f240 8085 	bls.w	8000d6c <__udivmoddi4+0x2b4>
 8000c62:	f1a9 0902 	sub.w	r9, r9, #2
 8000c66:	4464      	add	r4, ip
 8000c68:	eba4 040a 	sub.w	r4, r4, sl
 8000c6c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000c70:	fb0e 4410 	mls	r4, lr, r0, r4
 8000c74:	fb00 fa08 	mul.w	sl, r0, r8
 8000c78:	b289      	uxth	r1, r1
 8000c7a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000c7e:	45a2      	cmp	sl, r4
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x1dc>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8a:	d26b      	bcs.n	8000d64 <__udivmoddi4+0x2ac>
 8000c8c:	45a2      	cmp	sl, r4
 8000c8e:	d969      	bls.n	8000d64 <__udivmoddi4+0x2ac>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4464      	add	r4, ip
 8000c94:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c98:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9c:	eba4 040a 	sub.w	r4, r4, sl
 8000ca0:	454c      	cmp	r4, r9
 8000ca2:	4641      	mov	r1, r8
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	d354      	bcc.n	8000d52 <__udivmoddi4+0x29a>
 8000ca8:	d051      	beq.n	8000d4e <__udivmoddi4+0x296>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d069      	beq.n	8000d82 <__udivmoddi4+0x2ca>
 8000cae:	1a5a      	subs	r2, r3, r1
 8000cb0:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb4:	fa04 f505 	lsl.w	r5, r4, r5
 8000cb8:	fa22 f307 	lsr.w	r3, r2, r7
 8000cbc:	40fc      	lsrs	r4, r7
 8000cbe:	431d      	orrs	r5, r3
 8000cc0:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc4:	2700      	movs	r7, #0
 8000cc6:	e747      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000cc8:	4095      	lsls	r5, r2
 8000cca:	f1c2 0320 	rsb	r3, r2, #32
 8000cce:	fa21 f003 	lsr.w	r0, r1, r3
 8000cd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000cd6:	fbb0 f7f8 	udiv	r7, r0, r8
 8000cda:	fa1f f985 	uxth.w	r9, r5
 8000cde:	fb08 0017 	mls	r0, r8, r7, r0
 8000ce2:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fb07 fc09 	mul.w	ip, r7, r9
 8000cec:	430b      	orrs	r3, r1
 8000cee:	0c19      	lsrs	r1, r3, #16
 8000cf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf4:	458c      	cmp	ip, r1
 8000cf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x254>
 8000cfc:	1869      	adds	r1, r5, r1
 8000cfe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d02:	d231      	bcs.n	8000d68 <__udivmoddi4+0x2b0>
 8000d04:	458c      	cmp	ip, r1
 8000d06:	d92f      	bls.n	8000d68 <__udivmoddi4+0x2b0>
 8000d08:	3f02      	subs	r7, #2
 8000d0a:	4429      	add	r1, r5
 8000d0c:	eba1 010c 	sub.w	r1, r1, ip
 8000d10:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d14:	fb08 1c10 	mls	ip, r8, r0, r1
 8000d18:	fb00 fe09 	mul.w	lr, r0, r9
 8000d1c:	b299      	uxth	r1, r3
 8000d1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d22:	458e      	cmp	lr, r1
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x27e>
 8000d26:	1869      	adds	r1, r5, r1
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	d218      	bcs.n	8000d60 <__udivmoddi4+0x2a8>
 8000d2e:	458e      	cmp	lr, r1
 8000d30:	d916      	bls.n	8000d60 <__udivmoddi4+0x2a8>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4429      	add	r1, r5
 8000d36:	eba1 010e 	sub.w	r1, r1, lr
 8000d3a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d3e:	e73a      	b.n	8000bb6 <__udivmoddi4+0xfe>
 8000d40:	4637      	mov	r7, r6
 8000d42:	4630      	mov	r0, r6
 8000d44:	e708      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000d46:	460f      	mov	r7, r1
 8000d48:	e6e6      	b.n	8000b18 <__udivmoddi4+0x60>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	e6fb      	b.n	8000b46 <__udivmoddi4+0x8e>
 8000d4e:	4543      	cmp	r3, r8
 8000d50:	d2ab      	bcs.n	8000caa <__udivmoddi4+0x1f2>
 8000d52:	ebb8 0102 	subs.w	r1, r8, r2
 8000d56:	eb69 020c 	sbc.w	r2, r9, ip
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	4696      	mov	lr, r2
 8000d5e:	e7a4      	b.n	8000caa <__udivmoddi4+0x1f2>
 8000d60:	4618      	mov	r0, r3
 8000d62:	e7e8      	b.n	8000d36 <__udivmoddi4+0x27e>
 8000d64:	4608      	mov	r0, r1
 8000d66:	e795      	b.n	8000c94 <__udivmoddi4+0x1dc>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e7cf      	b.n	8000d0c <__udivmoddi4+0x254>
 8000d6c:	4681      	mov	r9, r0
 8000d6e:	e77b      	b.n	8000c68 <__udivmoddi4+0x1b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	e747      	b.n	8000c06 <__udivmoddi4+0x14e>
 8000d76:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7a:	442b      	add	r3, r5
 8000d7c:	e72f      	b.n	8000bde <__udivmoddi4+0x126>
 8000d7e:	4638      	mov	r0, r7
 8000d80:	e707      	b.n	8000b92 <__udivmoddi4+0xda>
 8000d82:	4637      	mov	r7, r6
 8000d84:	e6e8      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f000 fc5e 	bl	8001650 <HAL_Init>

  /* USER CODE BEGIN Init */
  /*** LiveLed ***/
  hLiveLed.LedOffFnPtr = &LiveLedOff;
 8000d94:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <main+0x90>)
 8000d96:	4a22      	ldr	r2, [pc, #136]	; (8000e20 <main+0x94>)
 8000d98:	609a      	str	r2, [r3, #8]
  hLiveLed.LedOnFnPtr = &LiveLedOn;
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <main+0x90>)
 8000d9c:	4a21      	ldr	r2, [pc, #132]	; (8000e24 <main+0x98>)
 8000d9e:	605a      	str	r2, [r3, #4]
  hLiveLed.HalfPeriodTimeMs = 500;
 8000da0:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <main+0x90>)
 8000da2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000da6:	601a      	str	r2, [r3, #0]
  LiveLedInit(&hLiveLed);
 8000da8:	481c      	ldr	r0, [pc, #112]	; (8000e1c <main+0x90>)
 8000daa:	f000 fc0a 	bl	80015c2 <LiveLedInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dae:	f000 f84f 	bl	8000e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db2:	f000 f8dd 	bl	8000f70 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000db6:	f000 f8a5 	bl	8000f04 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8000dba:	f005 fc7d 	bl	80066b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  DelayMs(500);
 8000dbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc2:	f000 fbea 	bl	800159a <DelayMs>


  printf(VT100_CLEARSCREEN);
 8000dc6:	4818      	ldr	r0, [pc, #96]	; (8000e28 <main+0x9c>)
 8000dc8:	f006 f9ce 	bl	8007168 <printf>
  printf(VT100_CURSORHOME);
 8000dcc:	4817      	ldr	r0, [pc, #92]	; (8000e2c <main+0xa0>)
 8000dce:	f006 f9cb 	bl	8007168 <printf>
  printf(VT100_ATTR_RESET);
 8000dd2:	4817      	ldr	r0, [pc, #92]	; (8000e30 <main+0xa4>)
 8000dd4:	f006 f9c8 	bl	8007168 <printf>

#ifdef DEBUG
  printf(VT100_ATTR_RED);
 8000dd8:	4816      	ldr	r0, [pc, #88]	; (8000e34 <main+0xa8>)
 8000dda:	f006 f9c5 	bl	8007168 <printf>
    DeviceUsrLog("This is a DEBUG version.");
 8000dde:	4816      	ldr	r0, [pc, #88]	; (8000e38 <main+0xac>)
 8000de0:	f006 f9c2 	bl	8007168 <printf>
 8000de4:	4815      	ldr	r0, [pc, #84]	; (8000e3c <main+0xb0>)
 8000de6:	f006 fa17 	bl	8007218 <puts>
  printf(VT100_ATTR_RESET);
 8000dea:	4811      	ldr	r0, [pc, #68]	; (8000e30 <main+0xa4>)
 8000dec:	f006 f9bc 	bl	8007168 <printf>
#endif

  DeviceUsrLog("Manufacturer:%s, Name:%s, Version:%04X",DEVICE_MNF, DEVICE_NAME, DEVICE_FW);
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <main+0xb4>)
 8000df2:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <main+0xb8>)
 8000df4:	4914      	ldr	r1, [pc, #80]	; (8000e48 <main+0xbc>)
 8000df6:	4815      	ldr	r0, [pc, #84]	; (8000e4c <main+0xc0>)
 8000df8:	f006 f9b6 	bl	8007168 <printf>
 8000dfc:	480f      	ldr	r0, [pc, #60]	; (8000e3c <main+0xb0>)
 8000dfe:	f006 fa0b 	bl	8007218 <puts>

  MaxAsciWakeUp();
 8000e02:	f000 fa11 	bl	8001228 <MaxAsciWakeUp>
  MaxAsciGetModel();
 8000e06:	f000 f9bd 	bl	8001184 <MaxAsciGetModel>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    LiveLedTask(&hLiveLed);
 8000e0a:	4804      	ldr	r0, [pc, #16]	; (8000e1c <main+0x90>)
 8000e0c:	f000 fbf0 	bl	80015f0 <LiveLedTask>
    CDC_Task_FS();
 8000e10:	f005 fd72 	bl	80068f8 <CDC_Task_FS>
    TestVcpTask();
 8000e14:	f000 f950 	bl	80010b8 <TestVcpTask>
    LiveLedTask(&hLiveLed);
 8000e18:	e7f7      	b.n	8000e0a <main+0x7e>
 8000e1a:	bf00      	nop
 8000e1c:	20000db0 	.word	0x20000db0
 8000e20:	08001259 	.word	0x08001259
 8000e24:	08001241 	.word	0x08001241
 8000e28:	0800c610 	.word	0x0800c610
 8000e2c:	0800c618 	.word	0x0800c618
 8000e30:	0800c61c 	.word	0x0800c61c
 8000e34:	0800c624 	.word	0x0800c624
 8000e38:	0800c62c 	.word	0x0800c62c
 8000e3c:	0800c648 	.word	0x0800c648
 8000e40:	00200720 	.word	0x00200720
 8000e44:	0800c64c 	.word	0x0800c64c
 8000e48:	0800c658 	.word	0x0800c658
 8000e4c:	0800c668 	.word	0x0800c668

08000e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b094      	sub	sp, #80	; 0x50
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5a:	2228      	movs	r2, #40	; 0x28
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f006 f979 	bl	8007156 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e80:	2301      	movs	r3, #1
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e92:	2302      	movs	r3, #2
 8000e94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e9c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 fd96 	bl	80029d8 <HAL_RCC_OscConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000eb2:	f000 f9dd 	bl	8001270 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb6:	230f      	movs	r3, #15
 8000eb8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 f800 	bl	8002ed8 <HAL_RCC_ClockConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ede:	f000 f9c7 	bl	8001270 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ee2:	2310      	movs	r3, #16
 8000ee4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 f95d 	bl	80031ac <HAL_RCCEx_PeriphCLKConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ef8:	f000 f9ba 	bl	8001270 <Error_Handler>
  }
}
 8000efc:	bf00      	nop
 8000efe:	3750      	adds	r7, #80	; 0x50
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_SPI2_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <MX_SPI2_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_SPI2_Init+0x64>)
 8000f10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_SPI2_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_SPI2_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_SPI2_Init+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_SPI2_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_SPI2_Init+0x64>)
 8000f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f34:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_SPI2_Init+0x64>)
 8000f38:	2218      	movs	r2, #24
 8000f3a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_SPI2_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_SPI2_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_SPI2_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_SPI2_Init+0x64>)
 8000f50:	220a      	movs	r2, #10
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_SPI2_Init+0x64>)
 8000f56:	f002 f9df 	bl	8003318 <HAL_SPI_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f60:	f000 f986 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000dc4 	.word	0x20000dc4
 8000f6c:	40003800 	.word	0x40003800

08000f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f84:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <MX_GPIO_Init+0x114>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a3e      	ldr	r2, [pc, #248]	; (8001084 <MX_GPIO_Init+0x114>)
 8000f8a:	f043 0310 	orr.w	r3, r3, #16
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b3c      	ldr	r3, [pc, #240]	; (8001084 <MX_GPIO_Init+0x114>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0310 	and.w	r3, r3, #16
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9c:	4b39      	ldr	r3, [pc, #228]	; (8001084 <MX_GPIO_Init+0x114>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a38      	ldr	r2, [pc, #224]	; (8001084 <MX_GPIO_Init+0x114>)
 8000fa2:	f043 0320 	orr.w	r3, r3, #32
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b36      	ldr	r3, [pc, #216]	; (8001084 <MX_GPIO_Init+0x114>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0320 	and.w	r3, r3, #32
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb4:	4b33      	ldr	r3, [pc, #204]	; (8001084 <MX_GPIO_Init+0x114>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a32      	ldr	r2, [pc, #200]	; (8001084 <MX_GPIO_Init+0x114>)
 8000fba:	f043 0308 	orr.w	r3, r3, #8
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b30      	ldr	r3, [pc, #192]	; (8001084 <MX_GPIO_Init+0x114>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <MX_GPIO_Init+0x114>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a2c      	ldr	r2, [pc, #176]	; (8001084 <MX_GPIO_Init+0x114>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <MX_GPIO_Init+0x114>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIVE_LED_GPIO_Port, LIVE_LED_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fea:	4827      	ldr	r0, [pc, #156]	; (8001088 <MX_GPIO_Init+0x118>)
 8000fec:	f000 fdfa 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff6:	4825      	ldr	r0, [pc, #148]	; (800108c <MX_GPIO_Init+0x11c>)
 8000ff8:	f000 fdf4 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX_SHDN_GPIO_Port, MAX_SHDN_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001002:	4823      	ldr	r0, [pc, #140]	; (8001090 <MX_GPIO_Init+0x120>)
 8001004:	f000 fdee 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LIVE_LED_Pin */
  GPIO_InitStruct.Pin = LIVE_LED_Pin;
 8001008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2302      	movs	r3, #2
 8001018:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIVE_LED_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	4619      	mov	r1, r3
 8001020:	4819      	ldr	r0, [pc, #100]	; (8001088 <MX_GPIO_Init+0x118>)
 8001022:	f000 fc85 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_CS_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin;
 8001026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2302      	movs	r3, #2
 8001036:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAX_CS_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	4619      	mov	r1, r3
 800103e:	4813      	ldr	r0, [pc, #76]	; (800108c <MX_GPIO_Init+0x11c>)
 8001040:	f000 fc76 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_INT_Pin */
  GPIO_InitStruct.Pin = MAX_INT_Pin;
 8001044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MAX_INT_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4619      	mov	r1, r3
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_GPIO_Init+0x120>)
 800105a:	f000 fc69 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_SHDN_Pin */
  GPIO_InitStruct.Pin = MAX_SHDN_Pin;
 800105e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2302      	movs	r3, #2
 800106e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAX_SHDN_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <MX_GPIO_Init+0x120>)
 8001078:	f000 fc5a 	bl	8001930 <HAL_GPIO_Init>

}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021000 	.word	0x40021000
 8001088:	40011000 	.word	0x40011000
 800108c:	40010c00 	.word	0x40010c00
 8001090:	40010800 	.word	0x40010800

08001094 <_write>:
//  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 100);
//  return len;
//}

int _write(int file, char *ptr, int len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t*)ptr, len);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4619      	mov	r1, r3
 80010a6:	68b8      	ldr	r0, [r7, #8]
 80010a8:	f005 fc00 	bl	80068ac <CDC_Transmit_FS>
  return len;
 80010ac:	687b      	ldr	r3, [r7, #4]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <TestVcpTask>:

void TestVcpTask(void)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b097      	sub	sp, #92	; 0x5c
 80010bc:	af02      	add	r7, sp, #8
  static int32_t timestamp;
  static uint64_t counter = 0;
  if(HAL_GetTick() - timestamp >= 1000)
 80010be:	f000 fb1f 	bl	8001700 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <TestVcpTask+0xb0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ce:	d346      	bcc.n	800115e <TestVcpTask+0xa6>
  {
    timestamp = HAL_GetTick();
 80010d0:	f000 fb16 	bl	8001700 <HAL_GetTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <TestVcpTask+0xb0>)
 80010da:	601a      	str	r2, [r3, #0]

    char test_sentence[80] = {"Hello World"};
 80010dc:	4a23      	ldr	r2, [pc, #140]	; (800116c <TestVcpTask+0xb4>)
 80010de:	463b      	mov	r3, r7
 80010e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80010e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	2244      	movs	r2, #68	; 0x44
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f006 f831 	bl	8007156 <memset>
    sprintf(test_sentence, "%s %lld\r\n", test_sentence,counter++);
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <TestVcpTask+0xb8>)
 80010f6:	cb18      	ldmia	r3, {r3, r4}
 80010f8:	1c59      	adds	r1, r3, #1
 80010fa:	f144 0200 	adc.w	r2, r4, #0
 80010fe:	481c      	ldr	r0, [pc, #112]	; (8001170 <TestVcpTask+0xb8>)
 8001100:	e9c0 1200 	strd	r1, r2, [r0]
 8001104:	463a      	mov	r2, r7
 8001106:	4638      	mov	r0, r7
 8001108:	e9cd 3400 	strd	r3, r4, [sp]
 800110c:	4919      	ldr	r1, [pc, #100]	; (8001174 <TestVcpTask+0xbc>)
 800110e:	f006 f88b 	bl	8007228 <sprintf>

    strcpy(UsbdUart.TxLine,test_sentence);
 8001112:	463b      	mov	r3, r7
 8001114:	4619      	mov	r1, r3
 8001116:	4818      	ldr	r0, [pc, #96]	; (8001178 <TestVcpTask+0xc0>)
 8001118:	f006 f8a6 	bl	8007268 <strcpy>
    printf(test_sentence);
 800111c:	463b      	mov	r3, r7
 800111e:	4618      	mov	r0, r3
 8001120:	f006 f822 	bl	8007168 <printf>
    UsbdUart.TxCounter++;
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <TestVcpTask+0xc0>)
 8001126:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800112a:	3301      	adds	r3, #1
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <TestVcpTask+0xc0>)
 8001130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if(UsbdUart.RxRequest)
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <TestVcpTask+0xc0>)
 8001136:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00f      	beq.n	800115e <TestVcpTask+0xa6>
    {
      printf("%s\r\n",UsbdUart.RxLine);
 800113e:	490f      	ldr	r1, [pc, #60]	; (800117c <TestVcpTask+0xc4>)
 8001140:	480f      	ldr	r0, [pc, #60]	; (8001180 <TestVcpTask+0xc8>)
 8001142:	f006 f811 	bl	8007168 <printf>
      UsbdUart.RxRequest = 0;
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <TestVcpTask+0xc0>)
 8001148:	2200      	movs	r2, #0
 800114a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
      UsbdUart.TxCounter++;
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <TestVcpTask+0xc0>)
 8001150:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001154:	3301      	adds	r3, #1
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <TestVcpTask+0xc0>)
 800115a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
}
 800115e:	bf00      	nop
 8001160:	3754      	adds	r7, #84	; 0x54
 8001162:	46bd      	mov	sp, r7
 8001164:	bd90      	pop	{r4, r7, pc}
 8001166:	bf00      	nop
 8001168:	20000b44 	.word	0x20000b44
 800116c:	0800c6a4 	.word	0x0800c6a4
 8001170:	20000b48 	.word	0x20000b48
 8001174:	0800c690 	.word	0x0800c690
 8001178:	20001c9c 	.word	0x20001c9c
 800117c:	20001cf4 	.word	0x20001cf4
 8001180:	0800c69c 	.word	0x0800c69c

08001184 <MaxAsciGetModel>:
/* MAX ASCI -----------------------------------------------------------------*/

uint8_t MaxAsciGetModel(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0

  uint8_t modelNumber[] = {0}; /*Defult is 0x84*/
 800118a:	2300      	movs	r3, #0
 800118c:	713b      	strb	r3, [r7, #4]
  MaxAsciReadReg(MAX_ASCI_MODEL, modelNumber, sizeof(modelNumber));
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	2015      	movs	r0, #21
 8001196:	f000 f80d 	bl	80011b4 <MaxAsciReadReg>
  uint8_t versionNumber[] = {0}; /*Defult is 0x12*/
 800119a:	2300      	movs	r3, #0
 800119c:	703b      	strb	r3, [r7, #0]
  MaxAsciReadReg(MAX_ASCI_VERSION, versionNumber, sizeof(versionNumber));
 800119e:	463b      	mov	r3, r7
 80011a0:	2201      	movs	r2, #1
 80011a2:	4619      	mov	r1, r3
 80011a4:	2017      	movs	r0, #23
 80011a6:	f000 f805 	bl	80011b4 <MaxAsciReadReg>


  return 0;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <MaxAsciReadReg>:


uint8_t MaxAsciReadReg(uint8_t regAddr,  uint8_t *readBuffer, uint8_t size)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71bb      	strb	r3, [r7, #6]
  uint8_t status = MAX_ASCI_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]
  uint8_t txBuffer[] = {regAddr};
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	733b      	strb	r3, [r7, #12]

  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d2:	4813      	ldr	r0, [pc, #76]	; (8001220 <MaxAsciReadReg+0x6c>)
 80011d4:	f000 fd06 	bl	8001be4 <HAL_GPIO_WritePin>

  if(HAL_SPI_Transmit(&hspi2, txBuffer, sizeof(txBuffer), 100)!= HAL_OK)
 80011d8:	f107 010c 	add.w	r1, r7, #12
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	2201      	movs	r2, #1
 80011e0:	4810      	ldr	r0, [pc, #64]	; (8001224 <MaxAsciReadReg+0x70>)
 80011e2:	f002 f8fa 	bl	80033da <HAL_SPI_Transmit>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MaxAsciReadReg+0x3c>
  {
    status = MAX_ASCI_IO_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
  }

  if(HAL_SPI_Receive(&hspi2, readBuffer, size, 100)!= HAL_OK)
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	2364      	movs	r3, #100	; 0x64
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	480a      	ldr	r0, [pc, #40]	; (8001224 <MaxAsciReadReg+0x70>)
 80011fa:	f002 fa22 	bl	8003642 <HAL_SPI_Receive>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MaxAsciReadReg+0x54>
  {
      status = MAX_ASCI_IO_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
  }

  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120e:	4804      	ldr	r0, [pc, #16]	; (8001220 <MaxAsciReadReg+0x6c>)
 8001210:	f000 fce8 	bl	8001be4 <HAL_GPIO_WritePin>

  return status;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40010c00 	.word	0x40010c00
 8001224:	20000dc4 	.word	0x20000dc4

08001228 <MaxAsciWakeUp>:

void MaxAsciWakeUp(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(MAX_SHDN_GPIO_Port, MAX_SHDN_Pin, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001232:	4802      	ldr	r0, [pc, #8]	; (800123c <MaxAsciWakeUp+0x14>)
 8001234:	f000 fcd6 	bl	8001be4 <HAL_GPIO_WritePin>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40010800 	.word	0x40010800

08001240 <LiveLedOn>:
  HAL_GPIO_WritePin(MAX_SHDN_GPIO_Port, MAX_SHDN_Pin, GPIO_PIN_SET);
}

/* LEDs ---------------------------------------------------------------------*/
void LiveLedOn(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LIVE_LED_GPIO_Port, LIVE_LED_Pin, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124a:	4802      	ldr	r0, [pc, #8]	; (8001254 <LiveLedOn+0x14>)
 800124c:	f000 fcca 	bl	8001be4 <HAL_GPIO_WritePin>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40011000 	.word	0x40011000

08001258 <LiveLedOff>:

void LiveLedOff(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LIVE_LED_GPIO_Port, LIVE_LED_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001262:	4802      	ldr	r0, [pc, #8]	; (800126c <LiveLedOff+0x14>)
 8001264:	f000 fcbe 	bl	8001be4 <HAL_GPIO_WritePin>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40011000 	.word	0x40011000

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_MspInit+0x5c>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <HAL_MspInit+0x5c>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6193      	str	r3, [r2, #24]
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_MspInit+0x5c>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_MspInit+0x5c>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_MspInit+0x5c>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	61d3      	str	r3, [r2, #28]
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <HAL_MspInit+0x5c>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_MspInit+0x60>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <HAL_MspInit+0x60>)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010000 	.word	0x40010000

080012e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <HAL_SPI_MspInit+0x8c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d131      	bne.n	8001364 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <HAL_SPI_MspInit+0x90>)
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	4a1a      	ldr	r2, [pc, #104]	; (8001370 <HAL_SPI_MspInit+0x90>)
 8001306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130a:	61d3      	str	r3, [r2, #28]
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <HAL_SPI_MspInit+0x90>)
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_SPI_MspInit+0x90>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a14      	ldr	r2, [pc, #80]	; (8001370 <HAL_SPI_MspInit+0x90>)
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_SPI_MspInit+0x90>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001330:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001334:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4619      	mov	r1, r3
 8001344:	480b      	ldr	r0, [pc, #44]	; (8001374 <HAL_SPI_MspInit+0x94>)
 8001346:	f000 faf3 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800134a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800134e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <HAL_SPI_MspInit+0x94>)
 8001360:	f000 fae6 	bl	8001930 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001364:	bf00      	nop
 8001366:	3720      	adds	r7, #32
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40003800 	.word	0x40003800
 8001370:	40021000 	.word	0x40021000
 8001374:	40010c00 	.word	0x40010c00

08001378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <HardFault_Handler+0x4>

0800138a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <MemManage_Handler+0x4>

08001390 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <BusFault_Handler+0x4>

08001396 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <UsageFault_Handler+0x4>

0800139c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c4:	f000 f98a 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80013d2:	f000 fd26 	bl	8001e22 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20001f50 	.word	0x20001f50

080013e0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80013e6:	f000 fd1c 	bl	8001e22 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20001f50 	.word	0x20001f50

080013f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	e00a      	b.n	800141c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001406:	f3af 8000 	nop.w
 800140a:	4601      	mov	r1, r0
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	60ba      	str	r2, [r7, #8]
 8001412:	b2ca      	uxtb	r2, r1
 8001414:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	dbf0      	blt.n	8001406 <_read+0x12>
	}

return len;
 8001424:	687b      	ldr	r3, [r7, #4]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <_close>:
	}
	return len;
}

int _close(int file)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
	return -1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001454:	605a      	str	r2, [r3, #4]
	return 0;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <_isatty>:

int _isatty(int file)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
	return 1;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001476:	b480      	push	{r7}
 8001478:	b085      	sub	sp, #20
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
	return 0;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
	...

08001490 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <_sbrk+0x50>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <_sbrk+0x16>
		heap_end = &end;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <_sbrk+0x50>)
 80014a2:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <_sbrk+0x54>)
 80014a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <_sbrk+0x50>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <_sbrk+0x50>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	466a      	mov	r2, sp
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d907      	bls.n	80014ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014ba:	f005 fdf7 	bl	80070ac <__errno>
 80014be:	4602      	mov	r2, r0
 80014c0:	230c      	movs	r3, #12
 80014c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	e006      	b.n	80014d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <_sbrk+0x50>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a03      	ldr	r2, [pc, #12]	; (80014e0 <_sbrk+0x50>)
 80014d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000b50 	.word	0x20000b50
 80014e4:	200021d0 	.word	0x200021d0

080014e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <SystemInit+0x5c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a14      	ldr	r2, [pc, #80]	; (8001544 <SystemInit+0x5c>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <SystemInit+0x5c>)
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4911      	ldr	r1, [pc, #68]	; (8001544 <SystemInit+0x5c>)
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <SystemInit+0x60>)
 8001500:	4013      	ands	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <SystemInit+0x5c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <SystemInit+0x5c>)
 800150a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800150e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <SystemInit+0x5c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <SystemInit+0x5c>)
 800151a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <SystemInit+0x5c>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4a07      	ldr	r2, [pc, #28]	; (8001544 <SystemInit+0x5c>)
 8001526:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800152a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <SystemInit+0x5c>)
 800152e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001532:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SystemInit+0x64>)
 8001536:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800153a:	609a      	str	r2, [r3, #8]
#endif 
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000
 8001548:	f8ff0000 	.word	0xf8ff0000
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001550:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001552:	e003      	b.n	800155c <LoopCopyDataInit>

08001554 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001556:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001558:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800155a:	3104      	adds	r1, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800155c:	480a      	ldr	r0, [pc, #40]	; (8001588 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001560:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001562:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001564:	d3f6      	bcc.n	8001554 <CopyDataInit>
  ldr r2, =_sbss
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001568:	e002      	b.n	8001570 <LoopFillZerobss>

0800156a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800156c:	f842 3b04 	str.w	r3, [r2], #4

08001570 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001572:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001574:	d3f9      	bcc.n	800156a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001576:	f7ff ffb7 	bl	80014e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800157a:	f005 fd9d 	bl	80070b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800157e:	f7ff fc05 	bl	8000d8c <main>
  bx lr
 8001582:	4770      	bx	lr
  ldr r3, =_sidata
 8001584:	0800ca08 	.word	0x0800ca08
  ldr r0, =_sdata
 8001588:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800158c:	20000b28 	.word	0x20000b28
  ldr r2, =_sbss
 8001590:	20000b28 	.word	0x20000b28
  ldr r3, = _ebss
 8001594:	200021cc 	.word	0x200021cc

08001598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC1_2_IRQHandler>

0800159a <DelayMs>:
/* Delay ---------------------------------------------------------------------*/
/**
  * @brief  DelayMs
  */
void DelayMs(volatile int32_t n)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  unsigned long timetick;
  timetick = HAL_GetTick();
 80015a2:	f000 f8ad 	bl	8001700 <HAL_GetTick>
 80015a6:	60f8      	str	r0, [r7, #12]
  while ((HAL_GetTick() - timetick) < n);
 80015a8:	bf00      	nop
 80015aa:	f000 f8a9 	bl	8001700 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d3f7      	bcc.n	80015aa <DelayMs+0x10>
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <LiveLedInit>:
/* Includes ------------------------------------------------------------------*/
#include "LiveLed.h"

/* Private define ------------------------------------------------------------*/
uint8_t LiveLedInit(LiveLED_HnadleTypeDef *hnd)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  if(!hnd) 
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <LiveLedInit+0x12>
      return LIVELED_FAIL;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e009      	b.n	80015e8 <LiveLedInit+0x26>
  hnd->State = 1;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	741a      	strb	r2, [r3, #16]
  hnd->Timestamp = HAL_GetTick();
 80015da:	f000 f891 	bl	8001700 <HAL_GetTick>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	60da      	str	r2, [r3, #12]
  return LIVELED_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <LiveLedTask>:

uint8_t LiveLedTask(LiveLED_HnadleTypeDef *hnd)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if(!hnd) 
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <LiveLedTask+0x12>
    return LIVELED_FAIL;
 80015fe:	2301      	movs	r3, #1
 8001600:	e021      	b.n	8001646 <LiveLedTask+0x56>

  if(HAL_GetTick() - hnd->Timestamp > hnd->HalfPeriodTimeMs)
 8001602:	f000 f87d 	bl	8001700 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	4293      	cmp	r3, r2
 8001614:	d916      	bls.n	8001644 <LiveLedTask+0x54>
  {
    hnd->Timestamp = HAL_GetTick();
 8001616:	f000 f873 	bl	8001700 <HAL_GetTick>
 800161a:	4603      	mov	r3, r0
 800161c:	461a      	mov	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	60da      	str	r2, [r3, #12]
    if(hnd->State)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7c1b      	ldrb	r3, [r3, #16]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <LiveLedTask+0x48>
    {
      hnd->State = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	741a      	strb	r2, [r3, #16]
      hnd->LedOnFnPtr();
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4798      	blx	r3
 8001636:	e005      	b.n	8001644 <LiveLedTask+0x54>
    }
    else
    {
      hnd->State = 1;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	741a      	strb	r2, [r3, #16]
      hnd->LedOffFnPtr();
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	4798      	blx	r3
    }
  }
  return LIVELED_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_Init+0x28>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_Init+0x28>)
 800165a:	f043 0310 	orr.w	r3, r3, #16
 800165e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 f923 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	2000      	movs	r0, #0
 8001668:	f000 f808 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff fe06 	bl	800127c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40022000 	.word	0x40022000

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x54>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x58>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f93b 	bl	8001916 <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f000 f903 	bl	80018c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_InitTick+0x5c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000008 	.word	0x20000008
 80016d8:	20000004 	.word	0x20000004

080016dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_IncTick+0x1c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_IncTick+0x20>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a03      	ldr	r2, [pc, #12]	; (80016fc <HAL_IncTick+0x20>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	20000008 	.word	0x20000008
 80016fc:	20000e1c 	.word	0x20000e1c

08001700 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b02      	ldr	r3, [pc, #8]	; (8001710 <HAL_GetTick+0x10>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	20000e1c 	.word	0x20000e1c

08001714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800173c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <__NVIC_GetPriorityGrouping+0x18>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	f003 0307 	and.w	r3, r3, #7
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db0b      	blt.n	80017a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	f003 021f 	and.w	r2, r3, #31
 8001790:	4906      	ldr	r1, [pc, #24]	; (80017ac <__NVIC_EnableIRQ+0x34>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	2001      	movs	r0, #1
 800179a:	fa00 f202 	lsl.w	r2, r0, r2
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100

080017b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db0a      	blt.n	80017da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	490c      	ldr	r1, [pc, #48]	; (80017fc <__NVIC_SetPriority+0x4c>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	440b      	add	r3, r1
 80017d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d8:	e00a      	b.n	80017f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4908      	ldr	r1, [pc, #32]	; (8001800 <__NVIC_SetPriority+0x50>)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	3b04      	subs	r3, #4
 80017e8:	0112      	lsls	r2, r2, #4
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	440b      	add	r3, r1
 80017ee:	761a      	strb	r2, [r3, #24]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f1c3 0307 	rsb	r3, r3, #7
 800181e:	2b04      	cmp	r3, #4
 8001820:	bf28      	it	cs
 8001822:	2304      	movcs	r3, #4
 8001824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3304      	adds	r3, #4
 800182a:	2b06      	cmp	r3, #6
 800182c:	d902      	bls.n	8001834 <NVIC_EncodePriority+0x30>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3b03      	subs	r3, #3
 8001832:	e000      	b.n	8001836 <NVIC_EncodePriority+0x32>
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	f04f 32ff 	mov.w	r2, #4294967295
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800184c:	f04f 31ff 	mov.w	r1, #4294967295
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	43d9      	mvns	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	4313      	orrs	r3, r2
         );
}
 800185e:	4618      	mov	r0, r3
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f7ff ff90 	bl	80017b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff2d 	bl	8001714 <__NVIC_SetPriorityGrouping>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d4:	f7ff ff42 	bl	800175c <__NVIC_GetPriorityGrouping>
 80018d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7ff ff90 	bl	8001804 <NVIC_EncodePriority>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff5f 	bl	80017b0 <__NVIC_SetPriority>
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff35 	bl	8001778 <__NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffa2 	bl	8001868 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b08b      	sub	sp, #44	; 0x2c
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001942:	e127      	b.n	8001b94 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001944:	2201      	movs	r2, #1
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	429a      	cmp	r2, r3
 800195e:	f040 8116 	bne.w	8001b8e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b12      	cmp	r3, #18
 8001968:	d034      	beq.n	80019d4 <HAL_GPIO_Init+0xa4>
 800196a:	2b12      	cmp	r3, #18
 800196c:	d80d      	bhi.n	800198a <HAL_GPIO_Init+0x5a>
 800196e:	2b02      	cmp	r3, #2
 8001970:	d02b      	beq.n	80019ca <HAL_GPIO_Init+0x9a>
 8001972:	2b02      	cmp	r3, #2
 8001974:	d804      	bhi.n	8001980 <HAL_GPIO_Init+0x50>
 8001976:	2b00      	cmp	r3, #0
 8001978:	d031      	beq.n	80019de <HAL_GPIO_Init+0xae>
 800197a:	2b01      	cmp	r3, #1
 800197c:	d01c      	beq.n	80019b8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800197e:	e048      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001980:	2b03      	cmp	r3, #3
 8001982:	d043      	beq.n	8001a0c <HAL_GPIO_Init+0xdc>
 8001984:	2b11      	cmp	r3, #17
 8001986:	d01b      	beq.n	80019c0 <HAL_GPIO_Init+0x90>
          break;
 8001988:	e043      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800198a:	4a89      	ldr	r2, [pc, #548]	; (8001bb0 <HAL_GPIO_Init+0x280>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d026      	beq.n	80019de <HAL_GPIO_Init+0xae>
 8001990:	4a87      	ldr	r2, [pc, #540]	; (8001bb0 <HAL_GPIO_Init+0x280>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d806      	bhi.n	80019a4 <HAL_GPIO_Init+0x74>
 8001996:	4a87      	ldr	r2, [pc, #540]	; (8001bb4 <HAL_GPIO_Init+0x284>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d020      	beq.n	80019de <HAL_GPIO_Init+0xae>
 800199c:	4a86      	ldr	r2, [pc, #536]	; (8001bb8 <HAL_GPIO_Init+0x288>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d01d      	beq.n	80019de <HAL_GPIO_Init+0xae>
          break;
 80019a2:	e036      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019a4:	4a85      	ldr	r2, [pc, #532]	; (8001bbc <HAL_GPIO_Init+0x28c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d019      	beq.n	80019de <HAL_GPIO_Init+0xae>
 80019aa:	4a85      	ldr	r2, [pc, #532]	; (8001bc0 <HAL_GPIO_Init+0x290>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d016      	beq.n	80019de <HAL_GPIO_Init+0xae>
 80019b0:	4a84      	ldr	r2, [pc, #528]	; (8001bc4 <HAL_GPIO_Init+0x294>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0xae>
          break;
 80019b6:	e02c      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	623b      	str	r3, [r7, #32]
          break;
 80019be:	e028      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	3304      	adds	r3, #4
 80019c6:	623b      	str	r3, [r7, #32]
          break;
 80019c8:	e023      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	3308      	adds	r3, #8
 80019d0:	623b      	str	r3, [r7, #32]
          break;
 80019d2:	e01e      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	330c      	adds	r3, #12
 80019da:	623b      	str	r3, [r7, #32]
          break;
 80019dc:	e019      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d102      	bne.n	80019ec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019e6:	2304      	movs	r3, #4
 80019e8:	623b      	str	r3, [r7, #32]
          break;
 80019ea:	e012      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d105      	bne.n	8001a00 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f4:	2308      	movs	r3, #8
 80019f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	611a      	str	r2, [r3, #16]
          break;
 80019fe:	e008      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a00:	2308      	movs	r3, #8
 8001a02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	615a      	str	r2, [r3, #20]
          break;
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
          break;
 8001a10:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	2bff      	cmp	r3, #255	; 0xff
 8001a16:	d801      	bhi.n	8001a1c <HAL_GPIO_Init+0xec>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	e001      	b.n	8001a20 <HAL_GPIO_Init+0xf0>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2bff      	cmp	r3, #255	; 0xff
 8001a26:	d802      	bhi.n	8001a2e <HAL_GPIO_Init+0xfe>
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	e002      	b.n	8001a34 <HAL_GPIO_Init+0x104>
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	3b08      	subs	r3, #8
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	401a      	ands	r2, r3
 8001a46:	6a39      	ldr	r1, [r7, #32]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 8096 	beq.w	8001b8e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a62:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <HAL_GPIO_Init+0x298>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	4a58      	ldr	r2, [pc, #352]	; (8001bc8 <HAL_GPIO_Init+0x298>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6193      	str	r3, [r2, #24]
 8001a6e:	4b56      	ldr	r3, [pc, #344]	; (8001bc8 <HAL_GPIO_Init+0x298>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a7a:	4a54      	ldr	r2, [pc, #336]	; (8001bcc <HAL_GPIO_Init+0x29c>)
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a86:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	220f      	movs	r2, #15
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4b      	ldr	r2, [pc, #300]	; (8001bd0 <HAL_GPIO_Init+0x2a0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_GPIO_Init+0x19e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4a      	ldr	r2, [pc, #296]	; (8001bd4 <HAL_GPIO_Init+0x2a4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00d      	beq.n	8001aca <HAL_GPIO_Init+0x19a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a49      	ldr	r2, [pc, #292]	; (8001bd8 <HAL_GPIO_Init+0x2a8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d007      	beq.n	8001ac6 <HAL_GPIO_Init+0x196>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a48      	ldr	r2, [pc, #288]	; (8001bdc <HAL_GPIO_Init+0x2ac>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_GPIO_Init+0x192>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x1a0>
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	e004      	b.n	8001ad0 <HAL_GPIO_Init+0x1a0>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e002      	b.n	8001ad0 <HAL_GPIO_Init+0x1a0>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_GPIO_Init+0x1a0>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad2:	f002 0203 	and.w	r2, r2, #3
 8001ad6:	0092      	lsls	r2, r2, #2
 8001ad8:	4093      	lsls	r3, r2
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ae0:	493a      	ldr	r1, [pc, #232]	; (8001bcc <HAL_GPIO_Init+0x29c>)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001afa:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4938      	ldr	r1, [pc, #224]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]
 8001b06:	e006      	b.n	8001b16 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	4933      	ldr	r1, [pc, #204]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b22:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	492e      	ldr	r1, [pc, #184]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
 8001b2e:	e006      	b.n	8001b3e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	4929      	ldr	r1, [pc, #164]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b4a:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	4924      	ldr	r1, [pc, #144]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
 8001b56:	e006      	b.n	8001b66 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b58:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	491f      	ldr	r1, [pc, #124]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b72:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	491a      	ldr	r1, [pc, #104]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60cb      	str	r3, [r1, #12]
 8001b7e:	e006      	b.n	8001b8e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	4915      	ldr	r1, [pc, #84]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	3301      	adds	r3, #1
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f47f aed0 	bne.w	8001944 <HAL_GPIO_Init+0x14>
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	372c      	adds	r7, #44	; 0x2c
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	10210000 	.word	0x10210000
 8001bb4:	10110000 	.word	0x10110000
 8001bb8:	10120000 	.word	0x10120000
 8001bbc:	10310000 	.word	0x10310000
 8001bc0:	10320000 	.word	0x10320000
 8001bc4:	10220000 	.word	0x10220000
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010000 	.word	0x40010000
 8001bd0:	40010800 	.word	0x40010800
 8001bd4:	40010c00 	.word	0x40010c00
 8001bd8:	40011000 	.word	0x40011000
 8001bdc:	40011400 	.word	0x40011400
 8001be0:	40010400 	.word	0x40010400

08001be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bf4:	787b      	ldrb	r3, [r7, #1]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfa:	887a      	ldrh	r2, [r7, #2]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c00:	e003      	b.n	8001c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	041a      	lsls	r2, r3, #16
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	611a      	str	r2, [r3, #16]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c16:	b08b      	sub	sp, #44	; 0x2c
 8001c18:	af06      	add	r7, sp, #24
 8001c1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0d3      	b.n	8001dce <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d106      	bne.n	8001c40 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f004 ff90 	bl	8006b60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2203      	movs	r2, #3
 8001c44:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 f8a4 	bl	8003d9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	687e      	ldr	r6, [r7, #4]
 8001c5a:	466d      	mov	r5, sp
 8001c5c:	f106 0410 	add.w	r4, r6, #16
 8001c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	602b      	str	r3, [r5, #0]
 8001c68:	1d33      	adds	r3, r6, #4
 8001c6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c6c:	6838      	ldr	r0, [r7, #0]
 8001c6e:	f002 f86d 	bl	8003d4c <USB_CoreInit>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0a4      	b.n	8001dce <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 f8a1 	bl	8003dd2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e035      	b.n	8001d02 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	015b      	lsls	r3, r3, #5
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3329      	adds	r3, #41	; 0x29
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	015b      	lsls	r3, r3, #5
 8001caa:	4413      	add	r3, r2
 8001cac:	3328      	adds	r3, #40	; 0x28
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	b291      	uxth	r1, r2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	015b      	lsls	r3, r3, #5
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3336      	adds	r3, #54	; 0x36
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	015b      	lsls	r3, r3, #5
 8001cca:	4413      	add	r3, r2
 8001ccc:	332b      	adds	r3, #43	; 0x2b
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	015b      	lsls	r3, r3, #5
 8001cd8:	4413      	add	r3, r2
 8001cda:	3338      	adds	r3, #56	; 0x38
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	015b      	lsls	r3, r3, #5
 8001ce6:	4413      	add	r3, r2
 8001ce8:	333c      	adds	r3, #60	; 0x3c
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	015b      	lsls	r3, r3, #5
 8001cf6:	4413      	add	r3, r2
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d3c4      	bcc.n	8001c96 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	e031      	b.n	8001d76 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	015b      	lsls	r3, r3, #5
 8001d18:	4413      	add	r3, r2
 8001d1a:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	015b      	lsls	r3, r3, #5
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	015b      	lsls	r3, r3, #5
 8001d38:	4413      	add	r3, r2
 8001d3a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	015b      	lsls	r3, r3, #5
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	015b      	lsls	r3, r3, #5
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	330a      	adds	r3, #10
 8001d68:	015b      	lsls	r3, r3, #5
 8001d6a:	4413      	add	r3, r2
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	3301      	adds	r3, #1
 8001d74:	73fb      	strb	r3, [r7, #15]
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d3c8      	bcc.n	8001d12 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	687e      	ldr	r6, [r7, #4]
 8001d88:	466d      	mov	r5, sp
 8001d8a:	f106 0410 	add.w	r4, r6, #16
 8001d8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	602b      	str	r3, [r5, #0]
 8001d96:	1d33      	adds	r3, r6, #4
 8001d98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d9a:	6838      	ldr	r0, [r7, #0]
 8001d9c:	f002 f825 	bl	8003dea <USB_DevInit>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2202      	movs	r2, #2
 8001daa:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00d      	b.n	8001dce <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f003 f863 	bl	8004e92 <USB_DevDisconnect>

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dd6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_PCD_Start+0x16>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e016      	b.n	8001e1a <HAL_PCD_Start+0x44>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001df4:	2101      	movs	r1, #1
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f005 f921 	bl	800703e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f003 f83c 	bl	8004e7e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 ffae 	bl	8003d6c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 f839 	bl	8004ea6 <USB_ReadInterrupts>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e3e:	d102      	bne.n	8001e46 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 faf3 	bl	800242c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 f82b 	bl	8004ea6 <USB_ReadInterrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e5a:	d112      	bne.n	8001e82 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e6e:	b292      	uxth	r2, r2
 8001e70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f004 fef0 	bl	8006c5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f8de 	bl	800203e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 f80d 	bl	8004ea6 <USB_ReadInterrupts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e96:	d10b      	bne.n	8001eb0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001eaa:	b292      	uxth	r2, r2
 8001eac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 fff6 	bl	8004ea6 <USB_ReadInterrupts>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec4:	d10b      	bne.n	8001ede <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ed8:	b292      	uxth	r2, r2
 8001eda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 ffdf 	bl	8004ea6 <USB_ReadInterrupts>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef2:	d126      	bne.n	8001f42 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0204 	bic.w	r2, r2, #4
 8001f06:	b292      	uxth	r2, r2
 8001f08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0208 	bic.w	r2, r2, #8
 8001f1e:	b292      	uxth	r2, r2
 8001f20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f004 fed1 	bl	8006ccc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f3c:	b292      	uxth	r2, r2
 8001f3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f002 ffad 	bl	8004ea6 <USB_ReadInterrupts>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f56:	d13d      	bne.n	8001fd4 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0208 	orr.w	r2, r2, #8
 8001f6a:	b292      	uxth	r2, r2
 8001f6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f82:	b292      	uxth	r2, r2
 8001f84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0204 	orr.w	r2, r2, #4
 8001f9a:	b292      	uxth	r2, r2
 8001f9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f002 ff7e 	bl	8004ea6 <USB_ReadInterrupts>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fb4:	d10b      	bne.n	8001fce <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fc8:	b292      	uxth	r2, r2
 8001fca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f004 fe62 	bl	8006c98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f002 ff64 	bl	8004ea6 <USB_ReadInterrupts>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe8:	d10e      	bne.n	8002008 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ffc:	b292      	uxth	r2, r2
 8001ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f004 fe1b 	bl	8006c3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f002 ff4a 	bl	8004ea6 <USB_ReadInterrupts>
 8002012:	4603      	mov	r3, r0
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800201c:	d10b      	bne.n	8002036 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002026:	b29a      	uxth	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002030:	b292      	uxth	r2, r2
 8002032:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_PCD_SetAddress+0x1a>
 8002054:	2302      	movs	r3, #2
 8002056:	e013      	b.n	8002080 <HAL_PCD_SetAddress+0x42>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	78fa      	ldrb	r2, [r7, #3]
 8002064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	78fa      	ldrb	r2, [r7, #3]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f002 fef1 	bl	8004e58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	4608      	mov	r0, r1
 8002092:	4611      	mov	r1, r2
 8002094:	461a      	mov	r2, r3
 8002096:	4603      	mov	r3, r0
 8002098:	70fb      	strb	r3, [r7, #3]
 800209a:	460b      	mov	r3, r1
 800209c:	803b      	strh	r3, [r7, #0]
 800209e:	4613      	mov	r3, r2
 80020a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da0b      	bge.n	80020c6 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	015b      	lsls	r3, r3, #5
 80020b6:	3328      	adds	r3, #40	; 0x28
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4413      	add	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	705a      	strb	r2, [r3, #1]
 80020c4:	e00b      	b.n	80020de <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	015b      	lsls	r3, r3, #5
 80020ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020ea:	883a      	ldrh	r2, [r7, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	78ba      	ldrb	r2, [r7, #2]
 80020f4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	785b      	ldrb	r3, [r3, #1]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b29a      	uxth	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002108:	78bb      	ldrb	r3, [r7, #2]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d102      	bne.n	8002114 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_PCD_EP_Open+0x9a>
 800211e:	2302      	movs	r3, #2
 8002120:	e00e      	b.n	8002140 <HAL_PCD_EP_Open+0xb8>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68f9      	ldr	r1, [r7, #12]
 8002130:	4618      	mov	r0, r3
 8002132:	f001 fe7f 	bl	8003e34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800213e:	7afb      	ldrb	r3, [r7, #11]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002158:	2b00      	cmp	r3, #0
 800215a:	da0b      	bge.n	8002174 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	015b      	lsls	r3, r3, #5
 8002164:	3328      	adds	r3, #40	; 0x28
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	705a      	strb	r2, [r3, #1]
 8002172:	e00b      	b.n	800218c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	015b      	lsls	r3, r3, #5
 800217c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	b2da      	uxtb	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_PCD_EP_Close+0x5e>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e00e      	b.n	80021c4 <HAL_PCD_EP_Close+0x7c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68f9      	ldr	r1, [r7, #12]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f002 f92b 	bl	8004410 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	460b      	mov	r3, r1
 80021da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	015b      	lsls	r3, r3, #5
 80021e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2200      	movs	r2, #0
 80021fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2200      	movs	r2, #0
 8002204:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002206:	7afb      	ldrb	r3, [r7, #11]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	b2da      	uxtb	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002212:	7afb      	ldrb	r3, [r7, #11]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	2b00      	cmp	r3, #0
 800221a:	d106      	bne.n	800222a <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6979      	ldr	r1, [r7, #20]
 8002222:	4618      	mov	r0, r3
 8002224:	f002 fa8a 	bl	800473c <USB_EPStartXfer>
 8002228:	e005      	b.n	8002236 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6979      	ldr	r1, [r7, #20]
 8002230:	4618      	mov	r0, r3
 8002232:	f002 fa83 	bl	800473c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	330a      	adds	r3, #10
 8002256:	015b      	lsls	r3, r3, #5
 8002258:	4413      	add	r3, r2
 800225a:	3304      	adds	r3, #4
 800225c:	681b      	ldr	r3, [r3, #0]
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	460b      	mov	r3, r1
 8002276:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002278:	7afb      	ldrb	r3, [r7, #11]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	015b      	lsls	r3, r3, #5
 8002280:	3328      	adds	r3, #40	; 0x28
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4413      	add	r3, r2
 8002286:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2201      	movs	r2, #1
 800229e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022a0:	7afb      	ldrb	r3, [r7, #11]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022ac:	7afb      	ldrb	r3, [r7, #11]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6979      	ldr	r1, [r7, #20]
 80022bc:	4618      	mov	r0, r3
 80022be:	f002 fa3d 	bl	800473c <USB_EPStartXfer>
 80022c2:	e005      	b.n	80022d0 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6979      	ldr	r1, [r7, #20]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f002 fa36 	bl	800473c <USB_EPStartXfer>
  }

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	f003 0207 	and.w	r2, r3, #7
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d901      	bls.n	80022f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e046      	b.n	8002386 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	da0b      	bge.n	8002318 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	015b      	lsls	r3, r3, #5
 8002308:	3328      	adds	r3, #40	; 0x28
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	705a      	strb	r2, [r3, #1]
 8002316:	e009      	b.n	800232c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	015b      	lsls	r3, r3, #5
 800231c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	b2da      	uxtb	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_PCD_EP_SetStall+0x72>
 8002348:	2302      	movs	r3, #2
 800234a:	e01c      	b.n	8002386 <HAL_PCD_EP_SetStall+0xac>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68f9      	ldr	r1, [r7, #12]
 800235a:	4618      	mov	r0, r3
 800235c:	f002 fca6 	bl	8004cac <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	2b00      	cmp	r3, #0
 8002368:	d108      	bne.n	800237c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002374:	4619      	mov	r1, r3
 8002376:	4610      	mov	r0, r2
 8002378:	f002 fda4 	bl	8004ec4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	f003 020f 	and.w	r2, r3, #15
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d901      	bls.n	80023ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e03a      	b.n	8002422 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	da0b      	bge.n	80023cc <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	015b      	lsls	r3, r3, #5
 80023bc:	3328      	adds	r3, #40	; 0x28
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	705a      	strb	r2, [r3, #1]
 80023ca:	e00b      	b.n	80023e4 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	015b      	lsls	r3, r3, #5
 80023d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4413      	add	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_PCD_EP_ClrStall+0x76>
 8002400:	2302      	movs	r3, #2
 8002402:	e00e      	b.n	8002422 <HAL_PCD_EP_ClrStall+0x94>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	4618      	mov	r0, r3
 8002414:	f002 fc8c 	bl	8004d30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002434:	e282      	b.n	800293c <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800243e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002440:	8afb      	ldrh	r3, [r7, #22]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800244a:	7d7b      	ldrb	r3, [r7, #21]
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 8142 	bne.w	80026d6 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002452:	8afb      	ldrh	r3, [r7, #22]
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b00      	cmp	r3, #0
 800245a:	d151      	bne.n	8002500 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246c:	b29c      	uxth	r4, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800247a:	b29b      	uxth	r3, r3
 800247c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3328      	adds	r3, #40	; 0x28
 8002482:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248c:	b29b      	uxth	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	3302      	adds	r3, #2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	695a      	ldr	r2, [r3, #20]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	441a      	add	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024be:	2100      	movs	r1, #0
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f004 fba5 	bl	8006c10 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8234 	beq.w	800293c <PCD_EP_ISR_Handler+0x510>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f040 822f 	bne.w	800293c <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	b292      	uxth	r2, r2
 80024f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024fe:	e21d      	b.n	800293c <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002506:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002510:	8a7b      	ldrh	r3, [r7, #18]
 8002512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002516:	2b00      	cmp	r3, #0
 8002518:	d033      	beq.n	8002582 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	3306      	adds	r3, #6
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	4413      	add	r3, r2
 8002538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002558:	b29b      	uxth	r3, r3
 800255a:	f002 fd02 	bl	8004f62 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	b29a      	uxth	r2, r3
 8002566:	f640 738f 	movw	r3, #3983	; 0xf8f
 800256a:	4013      	ands	r3, r2
 800256c:	b29c      	uxth	r4, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002576:	b292      	uxth	r2, r2
 8002578:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f004 fb1e 	bl	8006bbc <HAL_PCD_SetupStageCallback>
 8002580:	e1dc      	b.n	800293c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002582:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f280 81d8 	bge.w	800293c <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	b29a      	uxth	r2, r3
 8002594:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002598:	4013      	ands	r3, r2
 800259a:	b29c      	uxth	r4, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80025a4:	b292      	uxth	r2, r2
 80025a6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4413      	add	r3, r2
 80025bc:	3306      	adds	r3, #6
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d019      	beq.n	8002610 <PCD_EP_ISR_Handler+0x1e4>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d015      	beq.n	8002610 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6959      	ldr	r1, [r3, #20]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f002 fcb4 	bl	8004f62 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	441a      	add	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002608:	2100      	movs	r1, #0
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f004 fae8 	bl	8006be0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	461c      	mov	r4, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261e:	b29b      	uxth	r3, r3
 8002620:	441c      	add	r4, r3
 8002622:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8002626:	461c      	mov	r4, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10e      	bne.n	800264e <PCD_EP_ISR_Handler+0x222>
 8002630:	8823      	ldrh	r3, [r4, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002638:	b29b      	uxth	r3, r3
 800263a:	8023      	strh	r3, [r4, #0]
 800263c:	8823      	ldrh	r3, [r4, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002648:	b29b      	uxth	r3, r3
 800264a:	8023      	strh	r3, [r4, #0]
 800264c:	e02d      	b.n	80026aa <PCD_EP_ISR_Handler+0x27e>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b3e      	cmp	r3, #62	; 0x3e
 8002654:	d812      	bhi.n	800267c <PCD_EP_ISR_Handler+0x250>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	085b      	lsrs	r3, r3, #1
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <PCD_EP_ISR_Handler+0x244>
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	3301      	adds	r3, #1
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	b29b      	uxth	r3, r3
 8002674:	029b      	lsls	r3, r3, #10
 8002676:	b29b      	uxth	r3, r3
 8002678:	8023      	strh	r3, [r4, #0]
 800267a:	e016      	b.n	80026aa <PCD_EP_ISR_Handler+0x27e>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	095b      	lsrs	r3, r3, #5
 8002682:	61bb      	str	r3, [r7, #24]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <PCD_EP_ISR_Handler+0x26a>
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	3b01      	subs	r3, #1
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	b29b      	uxth	r3, r3
 800269a:	029b      	lsls	r3, r3, #10
 800269c:	b29b      	uxth	r3, r3
 800269e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ba:	b29c      	uxth	r4, r3
 80026bc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80026c0:	b29c      	uxth	r4, r3
 80026c2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80026c6:	b29c      	uxth	r4, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4ba2      	ldr	r3, [pc, #648]	; (8002958 <PCD_EP_ISR_Handler+0x52c>)
 80026ce:	4323      	orrs	r3, r4
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	8013      	strh	r3, [r2, #0]
 80026d4:	e132      	b.n	800293c <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	7d7b      	ldrb	r3, [r7, #21]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f280 80d1 	bge.w	8002892 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	7d7b      	ldrb	r3, [r7, #21]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	b29a      	uxth	r2, r3
 8002700:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002704:	4013      	ands	r3, r2
 8002706:	b29c      	uxth	r4, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	7d7b      	ldrb	r3, [r7, #21]
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002718:	b292      	uxth	r2, r2
 800271a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800271c:	7d7b      	ldrb	r3, [r7, #21]
 800271e:	015b      	lsls	r3, r3, #5
 8002720:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	4413      	add	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	7b1b      	ldrb	r3, [r3, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d121      	bne.n	8002776 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800273a:	b29b      	uxth	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	3306      	adds	r3, #6
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	4413      	add	r3, r2
 8002750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800275a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800275c:	8bfb      	ldrh	r3, [r7, #30]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d072      	beq.n	8002848 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6959      	ldr	r1, [r3, #20]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	88da      	ldrh	r2, [r3, #6]
 800276e:	8bfb      	ldrh	r3, [r7, #30]
 8002770:	f002 fbf7 	bl	8004f62 <USB_ReadPMA>
 8002774:	e068      	b.n	8002848 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d021      	beq.n	80027d4 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002798:	b29b      	uxth	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	3302      	adds	r3, #2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80027ba:	8bfb      	ldrh	r3, [r7, #30]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d02a      	beq.n	8002816 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6959      	ldr	r1, [r3, #20]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	891a      	ldrh	r2, [r3, #8]
 80027cc:	8bfb      	ldrh	r3, [r7, #30]
 80027ce:	f002 fbc8 	bl	8004f62 <USB_ReadPMA>
 80027d2:	e020      	b.n	8002816 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027dc:	b29b      	uxth	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	3306      	adds	r3, #6
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027fc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80027fe:	8bfb      	ldrh	r3, [r7, #30]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6959      	ldr	r1, [r3, #20]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	895a      	ldrh	r2, [r3, #10]
 8002810:	8bfb      	ldrh	r3, [r7, #30]
 8002812:	f002 fba6 	bl	8004f62 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800282c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002830:	b29c      	uxth	r4, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	441a      	add	r2, r3
 8002840:	4b46      	ldr	r3, [pc, #280]	; (800295c <PCD_EP_ISR_Handler+0x530>)
 8002842:	4323      	orrs	r3, r4
 8002844:	b29b      	uxth	r3, r3
 8002846:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	69da      	ldr	r2, [r3, #28]
 800284c:	8bfb      	ldrh	r3, [r7, #30]
 800284e:	441a      	add	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	695a      	ldr	r2, [r3, #20]
 8002858:	8bfb      	ldrh	r3, [r7, #30]
 800285a:	441a      	add	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <PCD_EP_ISR_Handler+0x446>
 8002868:	8bfa      	ldrh	r2, [r7, #30]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	429a      	cmp	r2, r3
 8002870:	d206      	bcs.n	8002880 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	4619      	mov	r1, r3
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f004 f9b1 	bl	8006be0 <HAL_PCD_DataOutStageCallback>
 800287e:	e008      	b.n	8002892 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	7819      	ldrb	r1, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff fc9d 	bl	80021cc <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002892:	8a7b      	ldrh	r3, [r7, #18]
 8002894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002898:	2b00      	cmp	r3, #0
 800289a:	d04f      	beq.n	800293c <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 800289c:	7d7b      	ldrb	r3, [r7, #21]
 800289e:	015b      	lsls	r3, r3, #5
 80028a0:	3328      	adds	r3, #40	; 0x28
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	7d7b      	ldrb	r3, [r7, #21]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c0:	b29c      	uxth	r4, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	7d7b      	ldrb	r3, [r7, #21]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	441a      	add	r2, r3
 80028ce:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80028d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	3302      	adds	r3, #2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	441a      	add	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d106      	bne.n	800292a <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4619      	mov	r1, r3
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f004 f974 	bl	8006c10 <HAL_PCD_DataInStageCallback>
 8002928:	e008      	b.n	800293c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	7819      	ldrb	r1, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fc96 	bl	8002268 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002944:	b29b      	uxth	r3, r3
 8002946:	b21b      	sxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	f6ff ad74 	blt.w	8002436 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3724      	adds	r7, #36	; 0x24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd90      	pop	{r4, r7, pc}
 8002958:	ffff8080 	.word	0xffff8080
 800295c:	ffff80c0 	.word	0xffff80c0

08002960 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	460b      	mov	r3, r1
 800296c:	817b      	strh	r3, [r7, #10]
 800296e:	4613      	mov	r3, r2
 8002970:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002972:	897b      	ldrh	r3, [r7, #10]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800297e:	897b      	ldrh	r3, [r7, #10]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	015b      	lsls	r3, r3, #5
 8002986:	3328      	adds	r3, #40	; 0x28
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4413      	add	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e006      	b.n	800299e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002990:	897b      	ldrh	r3, [r7, #10]
 8002992:	015b      	lsls	r3, r3, #5
 8002994:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4413      	add	r3, r2
 800299c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800299e:	893b      	ldrh	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d107      	bne.n	80029b4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2200      	movs	r2, #0
 80029a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	80da      	strh	r2, [r3, #6]
 80029b2:	e00b      	b.n	80029cc <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2201      	movs	r2, #1
 80029b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e26c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8087 	beq.w	8002b06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029f8:	4b92      	ldr	r3, [pc, #584]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d00c      	beq.n	8002a1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a04:	4b8f      	ldr	r3, [pc, #572]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d112      	bne.n	8002a36 <HAL_RCC_OscConfig+0x5e>
 8002a10:	4b8c      	ldr	r3, [pc, #560]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1c:	d10b      	bne.n	8002a36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1e:	4b89      	ldr	r3, [pc, #548]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d06c      	beq.n	8002b04 <HAL_RCC_OscConfig+0x12c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d168      	bne.n	8002b04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e246      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x76>
 8002a40:	4b80      	ldr	r3, [pc, #512]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a7f      	ldr	r2, [pc, #508]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	e02e      	b.n	8002aac <HAL_RCC_OscConfig+0xd4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x98>
 8002a56:	4b7b      	ldr	r3, [pc, #492]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7a      	ldr	r2, [pc, #488]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b78      	ldr	r3, [pc, #480]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a77      	ldr	r2, [pc, #476]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e01d      	b.n	8002aac <HAL_RCC_OscConfig+0xd4>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCC_OscConfig+0xbc>
 8002a7a:	4b72      	ldr	r3, [pc, #456]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a71      	ldr	r2, [pc, #452]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	4b6f      	ldr	r3, [pc, #444]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6e      	ldr	r2, [pc, #440]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	e00b      	b.n	8002aac <HAL_RCC_OscConfig+0xd4>
 8002a94:	4b6b      	ldr	r3, [pc, #428]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6a      	ldr	r2, [pc, #424]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a67      	ldr	r2, [pc, #412]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aaa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d013      	beq.n	8002adc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fe24 	bl	8001700 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abc:	f7fe fe20 	bl	8001700 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	; 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1fa      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	4b5d      	ldr	r3, [pc, #372]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0xe4>
 8002ada:	e014      	b.n	8002b06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7fe fe10 	bl	8001700 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7fe fe0c 	bl	8001700 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	; 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e1e6      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af6:	4b53      	ldr	r3, [pc, #332]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x10c>
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d063      	beq.n	8002bda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b12:	4b4c      	ldr	r3, [pc, #304]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b1e:	4b49      	ldr	r3, [pc, #292]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d11c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x18c>
 8002b2a:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d116      	bne.n	8002b64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <HAL_RCC_OscConfig+0x176>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e1ba      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4e:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4939      	ldr	r1, [pc, #228]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	e03a      	b.n	8002bda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7fe fdc5 	bl	8001700 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7a:	f7fe fdc1 	bl	8001700 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e19b      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8c:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4927      	ldr	r1, [pc, #156]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
 8002bac:	e015      	b.n	8002bda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fda4 	bl	8001700 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbc:	f7fe fda0 	bl	8001700 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e17a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d03a      	beq.n	8002c5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d019      	beq.n	8002c22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bee:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf4:	f7fe fd84 	bl	8001700 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfc:	f7fe fd80 	bl	8001700 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e15a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f000 faa8 	bl	8003170 <RCC_Delay>
 8002c20:	e01c      	b.n	8002c5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c28:	f7fe fd6a 	bl	8001700 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2e:	e00f      	b.n	8002c50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c30:	f7fe fd66 	bl	8001700 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d908      	bls.n	8002c50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e140      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	42420000 	.word	0x42420000
 8002c4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c50:	4b9e      	ldr	r3, [pc, #632]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1e9      	bne.n	8002c30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80a6 	beq.w	8002db6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6e:	4b97      	ldr	r3, [pc, #604]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10d      	bne.n	8002c96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	4b94      	ldr	r3, [pc, #592]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	4a93      	ldr	r2, [pc, #588]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c84:	61d3      	str	r3, [r2, #28]
 8002c86:	4b91      	ldr	r3, [pc, #580]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c92:	2301      	movs	r3, #1
 8002c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	4b8e      	ldr	r3, [pc, #568]	; (8002ed0 <HAL_RCC_OscConfig+0x4f8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d118      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca2:	4b8b      	ldr	r3, [pc, #556]	; (8002ed0 <HAL_RCC_OscConfig+0x4f8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a8a      	ldr	r2, [pc, #552]	; (8002ed0 <HAL_RCC_OscConfig+0x4f8>)
 8002ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cae:	f7fe fd27 	bl	8001700 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb6:	f7fe fd23 	bl	8001700 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b64      	cmp	r3, #100	; 0x64
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e0fd      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <HAL_RCC_OscConfig+0x4f8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x312>
 8002cdc:	4b7b      	ldr	r3, [pc, #492]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4a7a      	ldr	r2, [pc, #488]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6213      	str	r3, [r2, #32]
 8002ce8:	e02d      	b.n	8002d46 <HAL_RCC_OscConfig+0x36e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x334>
 8002cf2:	4b76      	ldr	r3, [pc, #472]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4a75      	ldr	r2, [pc, #468]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6213      	str	r3, [r2, #32]
 8002cfe:	4b73      	ldr	r3, [pc, #460]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4a72      	ldr	r2, [pc, #456]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	6213      	str	r3, [r2, #32]
 8002d0a:	e01c      	b.n	8002d46 <HAL_RCC_OscConfig+0x36e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b05      	cmp	r3, #5
 8002d12:	d10c      	bne.n	8002d2e <HAL_RCC_OscConfig+0x356>
 8002d14:	4b6d      	ldr	r3, [pc, #436]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	4a6c      	ldr	r2, [pc, #432]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6213      	str	r3, [r2, #32]
 8002d20:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4a69      	ldr	r2, [pc, #420]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6213      	str	r3, [r2, #32]
 8002d2c:	e00b      	b.n	8002d46 <HAL_RCC_OscConfig+0x36e>
 8002d2e:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a66      	ldr	r2, [pc, #408]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	4b64      	ldr	r3, [pc, #400]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4a63      	ldr	r2, [pc, #396]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d015      	beq.n	8002d7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fcd7 	bl	8001700 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fe fcd3 	bl	8001700 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0ab      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	4b57      	ldr	r3, [pc, #348]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ee      	beq.n	8002d56 <HAL_RCC_OscConfig+0x37e>
 8002d78:	e014      	b.n	8002da4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7a:	f7fe fcc1 	bl	8001700 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fe fcbd 	bl	8001700 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e095      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d98:	4b4c      	ldr	r3, [pc, #304]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ee      	bne.n	8002d82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d105      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002daa:	4b48      	ldr	r3, [pc, #288]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	4a47      	ldr	r2, [pc, #284]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8081 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc0:	4b42      	ldr	r3, [pc, #264]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d061      	beq.n	8002e90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d146      	bne.n	8002e62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd4:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <HAL_RCC_OscConfig+0x4fc>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe fc91 	bl	8001700 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de2:	f7fe fc8d 	bl	8001700 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e067      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f0      	bne.n	8002de2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e08:	d108      	bne.n	8002e1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e0a:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	492d      	ldr	r1, [pc, #180]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a19      	ldr	r1, [r3, #32]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	4927      	ldr	r1, [pc, #156]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e34:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <HAL_RCC_OscConfig+0x4fc>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fc61 	bl	8001700 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e42:	f7fe fc5d 	bl	8001700 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e037      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x46a>
 8002e60:	e02f      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <HAL_RCC_OscConfig+0x4fc>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe fc4a 	bl	8001700 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe fc46 	bl	8001700 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e020      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x498>
 8002e8e:	e018      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e013      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	42420060 	.word	0x42420060

08002ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0d0      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eec:	4b6a      	ldr	r3, [pc, #424]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d910      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b67      	ldr	r3, [pc, #412]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 0207 	bic.w	r2, r3, #7
 8002f02:	4965      	ldr	r1, [pc, #404]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b63      	ldr	r3, [pc, #396]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0b8      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f34:	4b59      	ldr	r3, [pc, #356]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a58      	ldr	r2, [pc, #352]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f4c:	4b53      	ldr	r3, [pc, #332]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4a52      	ldr	r2, [pc, #328]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f58:	4b50      	ldr	r3, [pc, #320]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	494d      	ldr	r1, [pc, #308]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d040      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b47      	ldr	r3, [pc, #284]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d115      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e07f      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f96:	4b41      	ldr	r3, [pc, #260]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e073      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa6:	4b3d      	ldr	r3, [pc, #244]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e06b      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f023 0203 	bic.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4936      	ldr	r1, [pc, #216]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc8:	f7fe fb9a 	bl	8001700 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd0:	f7fe fb96 	bl	8001700 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e053      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe6:	4b2d      	ldr	r3, [pc, #180]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 020c 	and.w	r2, r3, #12
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d1eb      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b27      	ldr	r3, [pc, #156]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d210      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 0207 	bic.w	r2, r3, #7
 800300e:	4922      	ldr	r1, [pc, #136]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e032      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003034:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4916      	ldr	r1, [pc, #88]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	490e      	ldr	r1, [pc, #56]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	4313      	orrs	r3, r2
 8003064:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003066:	f000 f821 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 800306a:	4601      	mov	r1, r0
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003078:	5cd3      	ldrb	r3, [r2, r3]
 800307a:	fa21 f303 	lsr.w	r3, r1, r3
 800307e:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe faf8 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40022000 	.word	0x40022000
 800309c:	40021000 	.word	0x40021000
 80030a0:	0800c750 	.word	0x0800c750
 80030a4:	20000000 	.word	0x20000000
 80030a8:	20000004 	.word	0x20000004

080030ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ac:	b490      	push	{r4, r7}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030b2:	4b2a      	ldr	r3, [pc, #168]	; (800315c <HAL_RCC_GetSysClockFreq+0xb0>)
 80030b4:	1d3c      	adds	r4, r7, #4
 80030b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030bc:	4b28      	ldr	r3, [pc, #160]	; (8003160 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	2300      	movs	r3, #0
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030d6:	4b23      	ldr	r3, [pc, #140]	; (8003164 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d002      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x40>
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d003      	beq.n	80030f2 <HAL_RCC_GetSysClockFreq+0x46>
 80030ea:	e02d      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030ec:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030ee:	623b      	str	r3, [r7, #32]
      break;
 80030f0:	e02d      	b.n	800314e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	0c9b      	lsrs	r3, r3, #18
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030fe:	4413      	add	r3, r2
 8003100:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003104:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003110:	4b14      	ldr	r3, [pc, #80]	; (8003164 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	0c5b      	lsrs	r3, r3, #17
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800311e:	4413      	add	r3, r2
 8003120:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003124:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <HAL_RCC_GetSysClockFreq+0xbc>)
 800312a:	fb02 f203 	mul.w	r2, r2, r3
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
 8003136:	e004      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	4a0c      	ldr	r2, [pc, #48]	; (800316c <HAL_RCC_GetSysClockFreq+0xc0>)
 800313c:	fb02 f303 	mul.w	r3, r2, r3
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	623b      	str	r3, [r7, #32]
      break;
 8003146:	e002      	b.n	800314e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003148:	4b07      	ldr	r3, [pc, #28]	; (8003168 <HAL_RCC_GetSysClockFreq+0xbc>)
 800314a:	623b      	str	r3, [r7, #32]
      break;
 800314c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314e:	6a3b      	ldr	r3, [r7, #32]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3728      	adds	r7, #40	; 0x28
 8003154:	46bd      	mov	sp, r7
 8003156:	bc90      	pop	{r4, r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	0800c6f4 	.word	0x0800c6f4
 8003160:	0800c704 	.word	0x0800c704
 8003164:	40021000 	.word	0x40021000
 8003168:	007a1200 	.word	0x007a1200
 800316c:	003d0900 	.word	0x003d0900

08003170 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <RCC_Delay+0x34>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <RCC_Delay+0x38>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	0a5b      	lsrs	r3, r3, #9
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	fb02 f303 	mul.w	r3, r2, r3
 800318a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800318c:	bf00      	nop
  }
  while (Delay --);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1e5a      	subs	r2, r3, #1
 8003192:	60fa      	str	r2, [r7, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1f9      	bne.n	800318c <RCC_Delay+0x1c>
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000000 	.word	0x20000000
 80031a8:	10624dd3 	.word	0x10624dd3

080031ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d07d      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80031c8:	2300      	movs	r3, #0
 80031ca:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031cc:	4b4f      	ldr	r3, [pc, #316]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10d      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d8:	4b4c      	ldr	r3, [pc, #304]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	4a4b      	ldr	r2, [pc, #300]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e2:	61d3      	str	r3, [r2, #28]
 80031e4:	4b49      	ldr	r3, [pc, #292]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f0:	2301      	movs	r3, #1
 80031f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	4b46      	ldr	r3, [pc, #280]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d118      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003200:	4b43      	ldr	r3, [pc, #268]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a42      	ldr	r2, [pc, #264]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320c:	f7fe fa78 	bl	8001700 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	e008      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003214:	f7fe fa74 	bl	8001700 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e06d      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003226:	4b3a      	ldr	r3, [pc, #232]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003232:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d02e      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	429a      	cmp	r2, r3
 800324e:	d027      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003250:	4b2e      	ldr	r3, [pc, #184]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003258:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800325a:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800325c:	2201      	movs	r2, #1
 800325e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003260:	4b2c      	ldr	r3, [pc, #176]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003266:	4a29      	ldr	r2, [pc, #164]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d014      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003276:	f7fe fa43 	bl	8001700 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327c:	e00a      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fe fa3f 	bl	8001700 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e036      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003294:	4b1d      	ldr	r3, [pc, #116]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0ee      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a0:	4b1a      	ldr	r3, [pc, #104]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4917      	ldr	r1, [pc, #92]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d105      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b8:	4b14      	ldr	r3, [pc, #80]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	4a13      	ldr	r2, [pc, #76]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032d0:	4b0e      	ldr	r3, [pc, #56]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	490b      	ldr	r1, [pc, #44]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d008      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032ee:	4b07      	ldr	r3, [pc, #28]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	4904      	ldr	r1, [pc, #16]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
 8003310:	40007000 	.word	0x40007000
 8003314:	42420440 	.word	0x42420440

08003318 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e053      	b.n	80033d2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d106      	bne.n	800334a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7fd ffcb 	bl	80012e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003360:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	ea42 0103 	orr.w	r1, r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	0c1a      	lsrs	r2, r3, #16
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f002 0204 	and.w	r2, r2, #4
 80033b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69da      	ldr	r2, [r3, #28]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b088      	sub	sp, #32
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	4613      	mov	r3, r2
 80033e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_SPI_Transmit+0x22>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e11e      	b.n	800363a <HAL_SPI_Transmit+0x260>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003404:	f7fe f97c 	bl	8001700 <HAL_GetTick>
 8003408:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b01      	cmp	r3, #1
 8003418:	d002      	beq.n	8003420 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800341a:	2302      	movs	r3, #2
 800341c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800341e:	e103      	b.n	8003628 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_SPI_Transmit+0x52>
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003430:	e0fa      	b.n	8003628 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2203      	movs	r2, #3
 8003436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	88fa      	ldrh	r2, [r7, #6]
 800344a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	88fa      	ldrh	r2, [r7, #6]
 8003450:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003478:	d107      	bne.n	800348a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003488:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	d007      	beq.n	80034a8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b0:	d14b      	bne.n	800354a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_SPI_Transmit+0xe6>
 80034ba:	8afb      	ldrh	r3, [r7, #22]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d13e      	bne.n	800353e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	881a      	ldrh	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	1c9a      	adds	r2, r3, #2
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034e4:	e02b      	b.n	800353e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d112      	bne.n	800351a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	881a      	ldrh	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	1c9a      	adds	r2, r3, #2
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	86da      	strh	r2, [r3, #54]	; 0x36
 8003518:	e011      	b.n	800353e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800351a:	f7fe f8f1 	bl	8001700 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d803      	bhi.n	8003532 <HAL_SPI_Transmit+0x158>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d102      	bne.n	8003538 <HAL_SPI_Transmit+0x15e>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800353c:	e074      	b.n	8003628 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003542:	b29b      	uxth	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1ce      	bne.n	80034e6 <HAL_SPI_Transmit+0x10c>
 8003548:	e04c      	b.n	80035e4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <HAL_SPI_Transmit+0x17e>
 8003552:	8afb      	ldrh	r3, [r7, #22]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d140      	bne.n	80035da <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	330c      	adds	r3, #12
 8003562:	7812      	ldrb	r2, [r2, #0]
 8003564:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800357e:	e02c      	b.n	80035da <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b02      	cmp	r3, #2
 800358c:	d113      	bne.n	80035b6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	330c      	adds	r3, #12
 8003598:	7812      	ldrb	r2, [r2, #0]
 800359a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80035b4:	e011      	b.n	80035da <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035b6:	f7fe f8a3 	bl	8001700 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d803      	bhi.n	80035ce <HAL_SPI_Transmit+0x1f4>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d102      	bne.n	80035d4 <HAL_SPI_Transmit+0x1fa>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d102      	bne.n	80035da <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035d8:	e026      	b.n	8003628 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1cd      	bne.n	8003580 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	6839      	ldr	r1, [r7, #0]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fb91 	bl	8003d10 <SPI_EndRxTxTransaction>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10a      	bne.n	8003618 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	77fb      	strb	r3, [r7, #31]
 8003624:	e000      	b.n	8003628 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003626:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003638:	7ffb      	ldrb	r3, [r7, #31]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b088      	sub	sp, #32
 8003646:	af02      	add	r7, sp, #8
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	603b      	str	r3, [r7, #0]
 800364e:	4613      	mov	r3, r2
 8003650:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800365e:	d112      	bne.n	8003686 <HAL_SPI_Receive+0x44>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10e      	bne.n	8003686 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2204      	movs	r2, #4
 800366c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003670:	88fa      	ldrh	r2, [r7, #6]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	4613      	mov	r3, r2
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f8e9 	bl	8003854 <HAL_SPI_TransmitReceive>
 8003682:	4603      	mov	r3, r0
 8003684:	e0e2      	b.n	800384c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_SPI_Receive+0x52>
 8003690:	2302      	movs	r3, #2
 8003692:	e0db      	b.n	800384c <HAL_SPI_Receive+0x20a>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800369c:	f7fe f830 	bl	8001700 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d002      	beq.n	80036b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
 80036b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036b2:	e0c2      	b.n	800383a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_SPI_Receive+0x7e>
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036c4:	e0b9      	b.n	800383a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2204      	movs	r2, #4
 80036ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	88fa      	ldrh	r2, [r7, #6]
 80036de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	88fa      	ldrh	r2, [r7, #6]
 80036e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370c:	d107      	bne.n	800371e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800371c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b40      	cmp	r3, #64	; 0x40
 800372a:	d007      	beq.n	800373c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800373a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d162      	bne.n	800380a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003744:	e02e      	b.n	80037a4 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b01      	cmp	r3, #1
 8003752:	d115      	bne.n	8003780 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f103 020c 	add.w	r2, r3, #12
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	7812      	ldrb	r2, [r2, #0]
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800377e:	e011      	b.n	80037a4 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003780:	f7fd ffbe 	bl	8001700 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d803      	bhi.n	8003798 <HAL_SPI_Receive+0x156>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003796:	d102      	bne.n	800379e <HAL_SPI_Receive+0x15c>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d102      	bne.n	80037a4 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80037a2:	e04a      	b.n	800383a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1cb      	bne.n	8003746 <HAL_SPI_Receive+0x104>
 80037ae:	e031      	b.n	8003814 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d113      	bne.n	80037e6 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	b292      	uxth	r2, r2
 80037ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	1c9a      	adds	r2, r3, #2
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037e4:	e011      	b.n	800380a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037e6:	f7fd ff8b 	bl	8001700 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d803      	bhi.n	80037fe <HAL_SPI_Receive+0x1bc>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d102      	bne.n	8003804 <HAL_SPI_Receive+0x1c2>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d102      	bne.n	800380a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003808:	e017      	b.n	800383a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1cd      	bne.n	80037b0 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	6839      	ldr	r1, [r7, #0]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fa27 	bl	8003c6c <SPI_EndRxTransaction>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
 8003836:	e000      	b.n	800383a <HAL_SPI_Receive+0x1f8>
  }

error :
 8003838:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800384a:	7dfb      	ldrb	r3, [r7, #23]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08c      	sub	sp, #48	; 0x30
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003862:	2301      	movs	r3, #1
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_SPI_TransmitReceive+0x26>
 8003876:	2302      	movs	r3, #2
 8003878:	e18a      	b.n	8003b90 <HAL_SPI_TransmitReceive+0x33c>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003882:	f7fd ff3d 	bl	8001700 <HAL_GetTick>
 8003886:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800388e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003898:	887b      	ldrh	r3, [r7, #2]
 800389a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800389c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d00f      	beq.n	80038c4 <HAL_SPI_TransmitReceive+0x70>
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038aa:	d107      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d103      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x68>
 80038b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d003      	beq.n	80038c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
 80038be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038c2:	e15b      	b.n	8003b7c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d005      	beq.n	80038d6 <HAL_SPI_TransmitReceive+0x82>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <HAL_SPI_TransmitReceive+0x82>
 80038d0:	887b      	ldrh	r3, [r7, #2]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038dc:	e14e      	b.n	8003b7c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d003      	beq.n	80038f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2205      	movs	r2, #5
 80038ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	887a      	ldrh	r2, [r7, #2]
 8003902:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	887a      	ldrh	r2, [r7, #2]
 8003908:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	887a      	ldrh	r2, [r7, #2]
 8003914:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	887a      	ldrh	r2, [r7, #2]
 800391a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d007      	beq.n	8003946 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003944:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394e:	d178      	bne.n	8003a42 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_SPI_TransmitReceive+0x10a>
 8003958:	8b7b      	ldrh	r3, [r7, #26]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d166      	bne.n	8003a2c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	881a      	ldrh	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	1c9a      	adds	r2, r3, #2
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003982:	e053      	b.n	8003a2c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b02      	cmp	r3, #2
 8003990:	d11b      	bne.n	80039ca <HAL_SPI_TransmitReceive+0x176>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d016      	beq.n	80039ca <HAL_SPI_TransmitReceive+0x176>
 800399c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d113      	bne.n	80039ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	881a      	ldrh	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	1c9a      	adds	r2, r3, #2
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d119      	bne.n	8003a0c <HAL_SPI_TransmitReceive+0x1b8>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d014      	beq.n	8003a0c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	b292      	uxth	r2, r2
 80039ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	1c9a      	adds	r2, r3, #2
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a0c:	f7fd fe78 	bl	8001700 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d807      	bhi.n	8003a2c <HAL_SPI_TransmitReceive+0x1d8>
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d003      	beq.n	8003a2c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a2a:	e0a7      	b.n	8003b7c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1a6      	bne.n	8003984 <HAL_SPI_TransmitReceive+0x130>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1a1      	bne.n	8003984 <HAL_SPI_TransmitReceive+0x130>
 8003a40:	e07c      	b.n	8003b3c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_SPI_TransmitReceive+0x1fc>
 8003a4a:	8b7b      	ldrh	r3, [r7, #26]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d16b      	bne.n	8003b28 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	7812      	ldrb	r2, [r2, #0]
 8003a5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a76:	e057      	b.n	8003b28 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d11c      	bne.n	8003ac0 <HAL_SPI_TransmitReceive+0x26c>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d017      	beq.n	8003ac0 <HAL_SPI_TransmitReceive+0x26c>
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d114      	bne.n	8003ac0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	7812      	ldrb	r2, [r2, #0]
 8003aa2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d119      	bne.n	8003b02 <HAL_SPI_TransmitReceive+0x2ae>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d014      	beq.n	8003b02 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003afe:	2301      	movs	r3, #1
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b02:	f7fd fdfd 	bl	8001700 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d803      	bhi.n	8003b1a <HAL_SPI_TransmitReceive+0x2c6>
 8003b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d102      	bne.n	8003b20 <HAL_SPI_TransmitReceive+0x2cc>
 8003b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d103      	bne.n	8003b28 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b26:	e029      	b.n	8003b7c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1a2      	bne.n	8003a78 <HAL_SPI_TransmitReceive+0x224>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d19d      	bne.n	8003a78 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f8e5 	bl	8003d10 <SPI_EndRxTxTransaction>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d006      	beq.n	8003b5a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b58:	e010      	b.n	8003b7c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10b      	bne.n	8003b7a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	e000      	b.n	8003b7c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003b7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3730      	adds	r7, #48	; 0x30
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ba8:	e04c      	b.n	8003c44 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb0:	d048      	beq.n	8003c44 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003bb2:	f7fd fda5 	bl	8001700 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d902      	bls.n	8003bc8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d13d      	bne.n	8003c44 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be0:	d111      	bne.n	8003c06 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bea:	d004      	beq.n	8003bf6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf4:	d107      	bne.n	8003c06 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c0e:	d10f      	bne.n	8003c30 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e00f      	b.n	8003c64 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d1a3      	bne.n	8003baa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af02      	add	r7, sp, #8
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c80:	d111      	bne.n	8003ca6 <SPI_EndRxTransaction+0x3a>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8a:	d004      	beq.n	8003c96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c94:	d107      	bne.n	8003ca6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cae:	d117      	bne.n	8003ce0 <SPI_EndRxTransaction+0x74>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb8:	d112      	bne.n	8003ce0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f7ff ff67 	bl	8003b98 <SPI_WaitFlagStateUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01a      	beq.n	8003d06 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd4:	f043 0220 	orr.w	r2, r3, #32
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e013      	b.n	8003d08 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2180      	movs	r1, #128	; 0x80
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f7ff ff54 	bl	8003b98 <SPI_WaitFlagStateUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfa:	f043 0220 	orr.w	r2, r3, #32
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e000      	b.n	8003d08 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	2180      	movs	r1, #128	; 0x80
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff ff36 	bl	8003b98 <SPI_WaitFlagStateUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d007      	beq.n	8003d42 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e000      	b.n	8003d44 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	f107 0014 	add.w	r0, r7, #20
 8003d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	b004      	add	sp, #16
 8003d6a:	4770      	bx	lr

08003d6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d74:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d78:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	89fb      	ldrh	r3, [r7, #14]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr

08003d9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003da2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003da6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	b21a      	sxth	r2, r3
 8003db2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	b21b      	sxth	r3, r3
 8003dba:	4013      	ands	r3, r2
 8003dbc:	b21b      	sxth	r3, r3
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr

08003dea <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003dea:	b084      	sub	sp, #16
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	f107 0014 	add.w	r0, r7, #20
 8003df8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff ffa5 	bl	8003d6c <USB_EnableGlobalInt>

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e2e:	b004      	add	sp, #16
 8003e30:	4770      	bx	lr
	...

08003e34 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e34:	b490      	push	{r4, r7}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e58:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	78db      	ldrb	r3, [r3, #3]
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d819      	bhi.n	8003e96 <USB_ActivateEndpoint+0x62>
 8003e62:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <USB_ActivateEndpoint+0x34>)
 8003e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e68:	08003e79 	.word	0x08003e79
 8003e6c:	08003e8d 	.word	0x08003e8d
 8003e70:	08003e9d 	.word	0x08003e9d
 8003e74:	08003e83 	.word	0x08003e83
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003e78:	89bb      	ldrh	r3, [r7, #12]
 8003e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e7e:	81bb      	strh	r3, [r7, #12]
      break;
 8003e80:	e00d      	b.n	8003e9e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003e82:	89bb      	ldrh	r3, [r7, #12]
 8003e84:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003e88:	81bb      	strh	r3, [r7, #12]
      break;
 8003e8a:	e008      	b.n	8003e9e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003e8c:	89bb      	ldrh	r3, [r7, #12]
 8003e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e92:	81bb      	strh	r3, [r7, #12]
      break;
 8003e94:	e003      	b.n	8003e9e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	73fb      	strb	r3, [r7, #15]
      break;
 8003e9a:	e000      	b.n	8003e9e <USB_ActivateEndpoint+0x6a>
      break;
 8003e9c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	441a      	add	r2, r3
 8003ea8:	89bb      	ldrh	r3, [r7, #12]
 8003eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	4313      	orrs	r3, r2
 8003ede:	b29c      	uxth	r4, r3
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	441a      	add	r2, r3
 8003eea:	4b8a      	ldr	r3, [pc, #552]	; (8004114 <USB_ActivateEndpoint+0x2e0>)
 8003eec:	4323      	orrs	r3, r4
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	7b1b      	ldrb	r3, [r3, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f040 8112 	bne.w	8004120 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	785b      	ldrb	r3, [r3, #1]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d067      	beq.n	8003fd4 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f04:	687c      	ldr	r4, [r7, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	441c      	add	r4, r3
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	4423      	add	r3, r4
 8003f18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f1c:	461c      	mov	r4, r3
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	88db      	ldrh	r3, [r3, #6]
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	b29c      	uxth	r4, r3
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d014      	beq.n	8003f6e <USB_ActivateEndpoint+0x13a>
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5a:	b29c      	uxth	r4, r3
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	441a      	add	r2, r3
 8003f66:	4b6c      	ldr	r3, [pc, #432]	; (8004118 <USB_ActivateEndpoint+0x2e4>)
 8003f68:	4323      	orrs	r3, r4
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	78db      	ldrb	r3, [r3, #3]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d018      	beq.n	8003fa8 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f8c:	b29c      	uxth	r4, r3
 8003f8e:	f084 0320 	eor.w	r3, r4, #32
 8003f92:	b29c      	uxth	r4, r3
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	441a      	add	r2, r3
 8003f9e:	4b5d      	ldr	r3, [pc, #372]	; (8004114 <USB_ActivateEndpoint+0x2e0>)
 8003fa0:	4323      	orrs	r3, r4
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	8013      	strh	r3, [r2, #0]
 8003fa6:	e22b      	b.n	8004400 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fbe:	b29c      	uxth	r4, r3
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	441a      	add	r2, r3
 8003fca:	4b52      	ldr	r3, [pc, #328]	; (8004114 <USB_ActivateEndpoint+0x2e0>)
 8003fcc:	4323      	orrs	r3, r4
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	8013      	strh	r3, [r2, #0]
 8003fd2:	e215      	b.n	8004400 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003fd4:	687c      	ldr	r4, [r7, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	441c      	add	r4, r3
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	4423      	add	r3, r4
 8003fe8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003fec:	461c      	mov	r4, r3
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	88db      	ldrh	r3, [r3, #6]
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003ffc:	687c      	ldr	r4, [r7, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004004:	b29b      	uxth	r3, r3
 8004006:	441c      	add	r4, r3
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	4423      	add	r3, r4
 8004010:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004014:	461c      	mov	r4, r3
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10e      	bne.n	800403c <USB_ActivateEndpoint+0x208>
 800401e:	8823      	ldrh	r3, [r4, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004026:	b29b      	uxth	r3, r3
 8004028:	8023      	strh	r3, [r4, #0]
 800402a:	8823      	ldrh	r3, [r4, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004036:	b29b      	uxth	r3, r3
 8004038:	8023      	strh	r3, [r4, #0]
 800403a:	e02d      	b.n	8004098 <USB_ActivateEndpoint+0x264>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b3e      	cmp	r3, #62	; 0x3e
 8004042:	d812      	bhi.n	800406a <USB_ActivateEndpoint+0x236>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	085b      	lsrs	r3, r3, #1
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <USB_ActivateEndpoint+0x22a>
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	3301      	adds	r3, #1
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	b29b      	uxth	r3, r3
 8004062:	029b      	lsls	r3, r3, #10
 8004064:	b29b      	uxth	r3, r3
 8004066:	8023      	strh	r3, [r4, #0]
 8004068:	e016      	b.n	8004098 <USB_ActivateEndpoint+0x264>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	2b00      	cmp	r3, #0
 800407c:	d102      	bne.n	8004084 <USB_ActivateEndpoint+0x250>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	3b01      	subs	r3, #1
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	b29b      	uxth	r3, r3
 8004088:	029b      	lsls	r3, r3, #10
 800408a:	b29b      	uxth	r3, r3
 800408c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004094:	b29b      	uxth	r3, r3
 8004096:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b29c      	uxth	r4, r3
 80040a6:	4623      	mov	r3, r4
 80040a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d014      	beq.n	80040da <USB_ActivateEndpoint+0x2a6>
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c6:	b29c      	uxth	r4, r3
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	441a      	add	r2, r3
 80040d2:	4b12      	ldr	r3, [pc, #72]	; (800411c <USB_ActivateEndpoint+0x2e8>)
 80040d4:	4323      	orrs	r3, r4
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f0:	b29c      	uxth	r4, r3
 80040f2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80040f6:	b29c      	uxth	r4, r3
 80040f8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80040fc:	b29c      	uxth	r4, r3
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	441a      	add	r2, r3
 8004108:	4b02      	ldr	r3, [pc, #8]	; (8004114 <USB_ActivateEndpoint+0x2e0>)
 800410a:	4323      	orrs	r3, r4
 800410c:	b29b      	uxth	r3, r3
 800410e:	8013      	strh	r3, [r2, #0]
 8004110:	e176      	b.n	8004400 <USB_ActivateEndpoint+0x5cc>
 8004112:	bf00      	nop
 8004114:	ffff8080 	.word	0xffff8080
 8004118:	ffff80c0 	.word	0xffff80c0
 800411c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	b29b      	uxth	r3, r3
 800412e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004136:	b29c      	uxth	r4, r3
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	441a      	add	r2, r3
 8004142:	4b96      	ldr	r3, [pc, #600]	; (800439c <USB_ActivateEndpoint+0x568>)
 8004144:	4323      	orrs	r3, r4
 8004146:	b29b      	uxth	r3, r3
 8004148:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800414a:	687c      	ldr	r4, [r7, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004152:	b29b      	uxth	r3, r3
 8004154:	441c      	add	r4, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	4423      	add	r3, r4
 800415e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004162:	461c      	mov	r4, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	891b      	ldrh	r3, [r3, #8]
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	b29b      	uxth	r3, r3
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	b29b      	uxth	r3, r3
 8004170:	8023      	strh	r3, [r4, #0]
 8004172:	687c      	ldr	r4, [r7, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800417a:	b29b      	uxth	r3, r3
 800417c:	441c      	add	r4, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	4423      	add	r3, r4
 8004186:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800418a:	461c      	mov	r4, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	895b      	ldrh	r3, [r3, #10]
 8004190:	085b      	lsrs	r3, r3, #1
 8004192:	b29b      	uxth	r3, r3
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	b29b      	uxth	r3, r3
 8004198:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	785b      	ldrb	r3, [r3, #1]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f040 8088 	bne.w	80042b4 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	b29c      	uxth	r4, r3
 80041b2:	4623      	mov	r3, r4
 80041b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d014      	beq.n	80041e6 <USB_ActivateEndpoint+0x3b2>
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d2:	b29c      	uxth	r4, r3
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	441a      	add	r2, r3
 80041de:	4b70      	ldr	r3, [pc, #448]	; (80043a0 <USB_ActivateEndpoint+0x56c>)
 80041e0:	4323      	orrs	r3, r4
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b29c      	uxth	r4, r3
 80041f4:	4623      	mov	r3, r4
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d014      	beq.n	8004228 <USB_ActivateEndpoint+0x3f4>
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004214:	b29c      	uxth	r4, r3
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	4b60      	ldr	r3, [pc, #384]	; (80043a4 <USB_ActivateEndpoint+0x570>)
 8004222:	4323      	orrs	r3, r4
 8004224:	b29b      	uxth	r3, r3
 8004226:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	b29c      	uxth	r4, r3
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	4b56      	ldr	r3, [pc, #344]	; (80043a4 <USB_ActivateEndpoint+0x570>)
 800424c:	4323      	orrs	r3, r4
 800424e:	b29b      	uxth	r3, r3
 8004250:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004268:	b29c      	uxth	r4, r3
 800426a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800426e:	b29c      	uxth	r4, r3
 8004270:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004274:	b29c      	uxth	r4, r3
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	441a      	add	r2, r3
 8004280:	4b49      	ldr	r3, [pc, #292]	; (80043a8 <USB_ActivateEndpoint+0x574>)
 8004282:	4323      	orrs	r3, r4
 8004284:	b29b      	uxth	r3, r3
 8004286:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	b29b      	uxth	r3, r3
 8004296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429e:	b29c      	uxth	r4, r3
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	441a      	add	r2, r3
 80042aa:	4b3f      	ldr	r3, [pc, #252]	; (80043a8 <USB_ActivateEndpoint+0x574>)
 80042ac:	4323      	orrs	r3, r4
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	8013      	strh	r3, [r2, #0]
 80042b2:	e0a5      	b.n	8004400 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b29c      	uxth	r4, r3
 80042c2:	4623      	mov	r3, r4
 80042c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d014      	beq.n	80042f6 <USB_ActivateEndpoint+0x4c2>
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e2:	b29c      	uxth	r4, r3
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	441a      	add	r2, r3
 80042ee:	4b2c      	ldr	r3, [pc, #176]	; (80043a0 <USB_ActivateEndpoint+0x56c>)
 80042f0:	4323      	orrs	r3, r4
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b29c      	uxth	r4, r3
 8004304:	4623      	mov	r3, r4
 8004306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d014      	beq.n	8004338 <USB_ActivateEndpoint+0x504>
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	b29b      	uxth	r3, r3
 800431c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004324:	b29c      	uxth	r4, r3
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	441a      	add	r2, r3
 8004330:	4b1c      	ldr	r3, [pc, #112]	; (80043a4 <USB_ActivateEndpoint+0x570>)
 8004332:	4323      	orrs	r3, r4
 8004334:	b29b      	uxth	r3, r3
 8004336:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	b29c      	uxth	r4, r3
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	441a      	add	r2, r3
 800435a:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <USB_ActivateEndpoint+0x56c>)
 800435c:	4323      	orrs	r3, r4
 800435e:	b29b      	uxth	r3, r3
 8004360:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	78db      	ldrb	r3, [r3, #3]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d020      	beq.n	80043ac <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	b29b      	uxth	r3, r3
 8004378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800437c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004380:	b29c      	uxth	r4, r3
 8004382:	f084 0320 	eor.w	r3, r4, #32
 8004386:	b29c      	uxth	r4, r3
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	441a      	add	r2, r3
 8004392:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <USB_ActivateEndpoint+0x574>)
 8004394:	4323      	orrs	r3, r4
 8004396:	b29b      	uxth	r3, r3
 8004398:	8013      	strh	r3, [r2, #0]
 800439a:	e01c      	b.n	80043d6 <USB_ActivateEndpoint+0x5a2>
 800439c:	ffff8180 	.word	0xffff8180
 80043a0:	ffffc080 	.word	0xffffc080
 80043a4:	ffff80c0 	.word	0xffff80c0
 80043a8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c2:	b29c      	uxth	r4, r3
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	441a      	add	r2, r3
 80043ce:	4b0f      	ldr	r3, [pc, #60]	; (800440c <USB_ActivateEndpoint+0x5d8>)
 80043d0:	4323      	orrs	r3, r4
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ec:	b29c      	uxth	r4, r3
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	441a      	add	r2, r3
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <USB_ActivateEndpoint+0x5d8>)
 80043fa:	4323      	orrs	r3, r4
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004400:	7bfb      	ldrb	r3, [r7, #15]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bc90      	pop	{r4, r7}
 800440a:	4770      	bx	lr
 800440c:	ffff8080 	.word	0xffff8080

08004410 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004410:	b490      	push	{r4, r7}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	7b1b      	ldrb	r3, [r3, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d171      	bne.n	8004506 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	785b      	ldrb	r3, [r3, #1]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d036      	beq.n	8004498 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	b29c      	uxth	r4, r3
 8004438:	4623      	mov	r3, r4
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d014      	beq.n	800446c <USB_DeactivateEndpoint+0x5c>
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b29b      	uxth	r3, r3
 8004450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004458:	b29c      	uxth	r4, r3
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	441a      	add	r2, r3
 8004464:	4b6b      	ldr	r3, [pc, #428]	; (8004614 <USB_DeactivateEndpoint+0x204>)
 8004466:	4323      	orrs	r3, r4
 8004468:	b29b      	uxth	r3, r3
 800446a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800447e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004482:	b29c      	uxth	r4, r3
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	441a      	add	r2, r3
 800448e:	4b62      	ldr	r3, [pc, #392]	; (8004618 <USB_DeactivateEndpoint+0x208>)
 8004490:	4323      	orrs	r3, r4
 8004492:	b29b      	uxth	r3, r3
 8004494:	8013      	strh	r3, [r2, #0]
 8004496:	e144      	b.n	8004722 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29c      	uxth	r4, r3
 80044a6:	4623      	mov	r3, r4
 80044a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d014      	beq.n	80044da <USB_DeactivateEndpoint+0xca>
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c6:	b29c      	uxth	r4, r3
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	441a      	add	r2, r3
 80044d2:	4b52      	ldr	r3, [pc, #328]	; (800461c <USB_DeactivateEndpoint+0x20c>)
 80044d4:	4323      	orrs	r3, r4
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f0:	b29c      	uxth	r4, r3
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	441a      	add	r2, r3
 80044fc:	4b46      	ldr	r3, [pc, #280]	; (8004618 <USB_DeactivateEndpoint+0x208>)
 80044fe:	4323      	orrs	r3, r4
 8004500:	b29b      	uxth	r3, r3
 8004502:	8013      	strh	r3, [r2, #0]
 8004504:	e10d      	b.n	8004722 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	785b      	ldrb	r3, [r3, #1]
 800450a:	2b00      	cmp	r3, #0
 800450c:	f040 8088 	bne.w	8004620 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	b29c      	uxth	r4, r3
 800451e:	4623      	mov	r3, r4
 8004520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d014      	beq.n	8004552 <USB_DeactivateEndpoint+0x142>
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	b29b      	uxth	r3, r3
 8004536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453e:	b29c      	uxth	r4, r3
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	441a      	add	r2, r3
 800454a:	4b34      	ldr	r3, [pc, #208]	; (800461c <USB_DeactivateEndpoint+0x20c>)
 800454c:	4323      	orrs	r3, r4
 800454e:	b29b      	uxth	r3, r3
 8004550:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	b29c      	uxth	r4, r3
 8004560:	4623      	mov	r3, r4
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b00      	cmp	r3, #0
 8004568:	d014      	beq.n	8004594 <USB_DeactivateEndpoint+0x184>
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004580:	b29c      	uxth	r4, r3
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	441a      	add	r2, r3
 800458c:	4b21      	ldr	r3, [pc, #132]	; (8004614 <USB_DeactivateEndpoint+0x204>)
 800458e:	4323      	orrs	r3, r4
 8004590:	b29b      	uxth	r3, r3
 8004592:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045aa:	b29c      	uxth	r4, r3
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	4b17      	ldr	r3, [pc, #92]	; (8004614 <USB_DeactivateEndpoint+0x204>)
 80045b8:	4323      	orrs	r3, r4
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d4:	b29c      	uxth	r4, r3
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	441a      	add	r2, r3
 80045e0:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <USB_DeactivateEndpoint+0x208>)
 80045e2:	4323      	orrs	r3, r4
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045fe:	b29c      	uxth	r4, r3
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	441a      	add	r2, r3
 800460a:	4b03      	ldr	r3, [pc, #12]	; (8004618 <USB_DeactivateEndpoint+0x208>)
 800460c:	4323      	orrs	r3, r4
 800460e:	b29b      	uxth	r3, r3
 8004610:	8013      	strh	r3, [r2, #0]
 8004612:	e086      	b.n	8004722 <USB_DeactivateEndpoint+0x312>
 8004614:	ffff80c0 	.word	0xffff80c0
 8004618:	ffff8080 	.word	0xffff8080
 800461c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b29c      	uxth	r4, r3
 800462e:	4623      	mov	r3, r4
 8004630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d014      	beq.n	8004662 <USB_DeactivateEndpoint+0x252>
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	b29b      	uxth	r3, r3
 8004646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464e:	b29c      	uxth	r4, r3
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	441a      	add	r2, r3
 800465a:	4b35      	ldr	r3, [pc, #212]	; (8004730 <USB_DeactivateEndpoint+0x320>)
 800465c:	4323      	orrs	r3, r4
 800465e:	b29b      	uxth	r3, r3
 8004660:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29c      	uxth	r4, r3
 8004670:	4623      	mov	r3, r4
 8004672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004676:	2b00      	cmp	r3, #0
 8004678:	d014      	beq.n	80046a4 <USB_DeactivateEndpoint+0x294>
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004690:	b29c      	uxth	r4, r3
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	441a      	add	r2, r3
 800469c:	4b25      	ldr	r3, [pc, #148]	; (8004734 <USB_DeactivateEndpoint+0x324>)
 800469e:	4323      	orrs	r3, r4
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	b29c      	uxth	r4, r3
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	441a      	add	r2, r3
 80046c6:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <USB_DeactivateEndpoint+0x320>)
 80046c8:	4323      	orrs	r3, r4
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e4:	b29c      	uxth	r4, r3
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	441a      	add	r2, r3
 80046f0:	4b11      	ldr	r3, [pc, #68]	; (8004738 <USB_DeactivateEndpoint+0x328>)
 80046f2:	4323      	orrs	r3, r4
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	b29c      	uxth	r4, r3
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	441a      	add	r2, r3
 800471a:	4b07      	ldr	r3, [pc, #28]	; (8004738 <USB_DeactivateEndpoint+0x328>)
 800471c:	4323      	orrs	r3, r4
 800471e:	b29b      	uxth	r3, r3
 8004720:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bc90      	pop	{r4, r7}
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	ffffc080 	.word	0xffffc080
 8004734:	ffff80c0 	.word	0xffff80c0
 8004738:	ffff8080 	.word	0xffff8080

0800473c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800473c:	b590      	push	{r4, r7, lr}
 800473e:	b08d      	sub	sp, #52	; 0x34
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	785b      	ldrb	r3, [r3, #1]
 800474a:	2b01      	cmp	r3, #1
 800474c:	f040 8160 	bne.w	8004a10 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	699a      	ldr	r2, [r3, #24]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	429a      	cmp	r2, r3
 800475a:	d909      	bls.n	8004770 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	1ad2      	subs	r2, r2, r3
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	619a      	str	r2, [r3, #24]
 800476e:	e005      	b.n	800477c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2200      	movs	r2, #0
 800477a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	7b1b      	ldrb	r3, [r3, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d119      	bne.n	80047b8 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	6959      	ldr	r1, [r3, #20]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	88da      	ldrh	r2, [r3, #6]
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	b29b      	uxth	r3, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fba2 	bl	8004eda <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004796:	687c      	ldr	r4, [r7, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800479e:	b29b      	uxth	r3, r3
 80047a0:	441c      	add	r4, r3
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	4423      	add	r3, r4
 80047aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047ae:	461c      	mov	r4, r3
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	8023      	strh	r3, [r4, #0]
 80047b6:	e10f      	b.n	80049d8 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d065      	beq.n	800489a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80047ce:	687c      	ldr	r4, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	785b      	ldrb	r3, [r3, #1]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d148      	bne.n	800486a <USB_EPStartXfer+0x12e>
 80047d8:	687c      	ldr	r4, [r7, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	441c      	add	r4, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	4423      	add	r3, r4
 80047ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047f0:	461c      	mov	r4, r3
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10e      	bne.n	8004816 <USB_EPStartXfer+0xda>
 80047f8:	8823      	ldrh	r3, [r4, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004800:	b29b      	uxth	r3, r3
 8004802:	8023      	strh	r3, [r4, #0]
 8004804:	8823      	ldrh	r3, [r4, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800480c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004810:	b29b      	uxth	r3, r3
 8004812:	8023      	strh	r3, [r4, #0]
 8004814:	e03d      	b.n	8004892 <USB_EPStartXfer+0x156>
 8004816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004818:	2b3e      	cmp	r3, #62	; 0x3e
 800481a:	d810      	bhi.n	800483e <USB_EPStartXfer+0x102>
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481e:	085b      	lsrs	r3, r3, #1
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <USB_EPStartXfer+0xf6>
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	3301      	adds	r3, #1
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	b29b      	uxth	r3, r3
 8004836:	029b      	lsls	r3, r3, #10
 8004838:	b29b      	uxth	r3, r3
 800483a:	8023      	strh	r3, [r4, #0]
 800483c:	e029      	b.n	8004892 <USB_EPStartXfer+0x156>
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	2b00      	cmp	r3, #0
 800484c:	d102      	bne.n	8004854 <USB_EPStartXfer+0x118>
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	3b01      	subs	r3, #1
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	b29b      	uxth	r3, r3
 8004858:	029b      	lsls	r3, r3, #10
 800485a:	b29b      	uxth	r3, r3
 800485c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004864:	b29b      	uxth	r3, r3
 8004866:	8023      	strh	r3, [r4, #0]
 8004868:	e013      	b.n	8004892 <USB_EPStartXfer+0x156>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	785b      	ldrb	r3, [r3, #1]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d10f      	bne.n	8004892 <USB_EPStartXfer+0x156>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004878:	b29b      	uxth	r3, r3
 800487a:	441c      	add	r4, r3
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	4423      	add	r3, r4
 8004884:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	895b      	ldrh	r3, [r3, #10]
 8004896:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004898:	e063      	b.n	8004962 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	785b      	ldrb	r3, [r3, #1]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d148      	bne.n	8004934 <USB_EPStartXfer+0x1f8>
 80048a2:	687c      	ldr	r4, [r7, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	441c      	add	r4, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	4423      	add	r3, r4
 80048b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048ba:	461c      	mov	r4, r3
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10e      	bne.n	80048e0 <USB_EPStartXfer+0x1a4>
 80048c2:	8823      	ldrh	r3, [r4, #0]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	8023      	strh	r3, [r4, #0]
 80048ce:	8823      	ldrh	r3, [r4, #0]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048da:	b29b      	uxth	r3, r3
 80048dc:	8023      	strh	r3, [r4, #0]
 80048de:	e03d      	b.n	800495c <USB_EPStartXfer+0x220>
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	2b3e      	cmp	r3, #62	; 0x3e
 80048e4:	d810      	bhi.n	8004908 <USB_EPStartXfer+0x1cc>
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	085b      	lsrs	r3, r3, #1
 80048ea:	623b      	str	r3, [r7, #32]
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <USB_EPStartXfer+0x1c0>
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	3301      	adds	r3, #1
 80048fa:	623b      	str	r3, [r7, #32]
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	029b      	lsls	r3, r3, #10
 8004902:	b29b      	uxth	r3, r3
 8004904:	8023      	strh	r3, [r4, #0]
 8004906:	e029      	b.n	800495c <USB_EPStartXfer+0x220>
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	623b      	str	r3, [r7, #32]
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	2b00      	cmp	r3, #0
 8004916:	d102      	bne.n	800491e <USB_EPStartXfer+0x1e2>
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	3b01      	subs	r3, #1
 800491c:	623b      	str	r3, [r7, #32]
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	b29b      	uxth	r3, r3
 8004922:	029b      	lsls	r3, r3, #10
 8004924:	b29b      	uxth	r3, r3
 8004926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800492a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800492e:	b29b      	uxth	r3, r3
 8004930:	8023      	strh	r3, [r4, #0]
 8004932:	e013      	b.n	800495c <USB_EPStartXfer+0x220>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	785b      	ldrb	r3, [r3, #1]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d10f      	bne.n	800495c <USB_EPStartXfer+0x220>
 800493c:	687c      	ldr	r4, [r7, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004944:	b29b      	uxth	r3, r3
 8004946:	441c      	add	r4, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	4423      	add	r3, r4
 8004950:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004954:	461c      	mov	r4, r3
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	b29b      	uxth	r3, r3
 800495a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	891b      	ldrh	r3, [r3, #8]
 8004960:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6959      	ldr	r1, [r3, #20]
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	b29b      	uxth	r3, r3
 800496a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fab4 	bl	8004eda <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d115      	bne.n	80049a6 <USB_EPStartXfer+0x26a>
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	b29b      	uxth	r3, r3
 8004988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004990:	b29c      	uxth	r4, r3
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	441a      	add	r2, r3
 800499c:	4b9a      	ldr	r3, [pc, #616]	; (8004c08 <USB_EPStartXfer+0x4cc>)
 800499e:	4323      	orrs	r3, r4
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	8013      	strh	r3, [r2, #0]
 80049a4:	e018      	b.n	80049d8 <USB_EPStartXfer+0x29c>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	785b      	ldrb	r3, [r3, #1]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d114      	bne.n	80049d8 <USB_EPStartXfer+0x29c>
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c4:	b29c      	uxth	r4, r3
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	441a      	add	r2, r3
 80049d0:	4b8e      	ldr	r3, [pc, #568]	; (8004c0c <USB_EPStartXfer+0x4d0>)
 80049d2:	4323      	orrs	r3, r4
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ee:	b29c      	uxth	r4, r3
 80049f0:	f084 0310 	eor.w	r3, r4, #16
 80049f4:	b29c      	uxth	r4, r3
 80049f6:	f084 0320 	eor.w	r3, r4, #32
 80049fa:	b29c      	uxth	r4, r3
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	441a      	add	r2, r3
 8004a06:	4b82      	ldr	r3, [pc, #520]	; (8004c10 <USB_EPStartXfer+0x4d4>)
 8004a08:	4323      	orrs	r3, r4
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	8013      	strh	r3, [r2, #0]
 8004a0e:	e146      	b.n	8004c9e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	699a      	ldr	r2, [r3, #24]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d909      	bls.n	8004a30 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	1ad2      	subs	r2, r2, r3
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	619a      	str	r2, [r3, #24]
 8004a2e:	e005      	b.n	8004a3c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	7b1b      	ldrb	r3, [r3, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d148      	bne.n	8004ad6 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004a44:	687c      	ldr	r4, [r7, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	441c      	add	r4, r3
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	4423      	add	r3, r4
 8004a58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a5c:	461c      	mov	r4, r3
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10e      	bne.n	8004a82 <USB_EPStartXfer+0x346>
 8004a64:	8823      	ldrh	r3, [r4, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	8023      	strh	r3, [r4, #0]
 8004a70:	8823      	ldrh	r3, [r4, #0]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	8023      	strh	r3, [r4, #0]
 8004a80:	e0f2      	b.n	8004c68 <USB_EPStartXfer+0x52c>
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	2b3e      	cmp	r3, #62	; 0x3e
 8004a86:	d810      	bhi.n	8004aaa <USB_EPStartXfer+0x36e>
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	61fb      	str	r3, [r7, #28]
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <USB_EPStartXfer+0x362>
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	61fb      	str	r3, [r7, #28]
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	029b      	lsls	r3, r3, #10
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	8023      	strh	r3, [r4, #0]
 8004aa8:	e0de      	b.n	8004c68 <USB_EPStartXfer+0x52c>
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	61fb      	str	r3, [r7, #28]
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <USB_EPStartXfer+0x384>
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	029b      	lsls	r3, r3, #10
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	8023      	strh	r3, [r4, #0]
 8004ad4:	e0c8      	b.n	8004c68 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	785b      	ldrb	r3, [r3, #1]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d148      	bne.n	8004b70 <USB_EPStartXfer+0x434>
 8004ade:	687c      	ldr	r4, [r7, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	441c      	add	r4, r3
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	4423      	add	r3, r4
 8004af2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004af6:	461c      	mov	r4, r3
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10e      	bne.n	8004b1c <USB_EPStartXfer+0x3e0>
 8004afe:	8823      	ldrh	r3, [r4, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	8023      	strh	r3, [r4, #0]
 8004b0a:	8823      	ldrh	r3, [r4, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	8023      	strh	r3, [r4, #0]
 8004b1a:	e03d      	b.n	8004b98 <USB_EPStartXfer+0x45c>
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b20:	d810      	bhi.n	8004b44 <USB_EPStartXfer+0x408>
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	61bb      	str	r3, [r7, #24]
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <USB_EPStartXfer+0x3fc>
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	3301      	adds	r3, #1
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	029b      	lsls	r3, r3, #10
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	8023      	strh	r3, [r4, #0]
 8004b42:	e029      	b.n	8004b98 <USB_EPStartXfer+0x45c>
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	61bb      	str	r3, [r7, #24]
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	f003 031f 	and.w	r3, r3, #31
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d102      	bne.n	8004b5a <USB_EPStartXfer+0x41e>
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	029b      	lsls	r3, r3, #10
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	8023      	strh	r3, [r4, #0]
 8004b6e:	e013      	b.n	8004b98 <USB_EPStartXfer+0x45c>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d10f      	bne.n	8004b98 <USB_EPStartXfer+0x45c>
 8004b78:	687c      	ldr	r4, [r7, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	441c      	add	r4, r3
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	4423      	add	r3, r4
 8004b8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b90:	461c      	mov	r4, r3
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	8023      	strh	r3, [r4, #0]
 8004b98:	687c      	ldr	r4, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	785b      	ldrb	r3, [r3, #1]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d14e      	bne.n	8004c40 <USB_EPStartXfer+0x504>
 8004ba2:	687c      	ldr	r4, [r7, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	441c      	add	r4, r3
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	4423      	add	r3, r4
 8004bb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bba:	461c      	mov	r4, r3
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10e      	bne.n	8004be0 <USB_EPStartXfer+0x4a4>
 8004bc2:	8823      	ldrh	r3, [r4, #0]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	8023      	strh	r3, [r4, #0]
 8004bce:	8823      	ldrh	r3, [r4, #0]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	8023      	strh	r3, [r4, #0]
 8004bde:	e043      	b.n	8004c68 <USB_EPStartXfer+0x52c>
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	2b3e      	cmp	r3, #62	; 0x3e
 8004be4:	d816      	bhi.n	8004c14 <USB_EPStartXfer+0x4d8>
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	085b      	lsrs	r3, r3, #1
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <USB_EPStartXfer+0x4c0>
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	029b      	lsls	r3, r3, #10
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	8023      	strh	r3, [r4, #0]
 8004c06:	e02f      	b.n	8004c68 <USB_EPStartXfer+0x52c>
 8004c08:	ffff80c0 	.word	0xffff80c0
 8004c0c:	ffffc080 	.word	0xffffc080
 8004c10:	ffff8080 	.word	0xffff8080
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d102      	bne.n	8004c2a <USB_EPStartXfer+0x4ee>
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	029b      	lsls	r3, r3, #10
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	8023      	strh	r3, [r4, #0]
 8004c3e:	e013      	b.n	8004c68 <USB_EPStartXfer+0x52c>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	785b      	ldrb	r3, [r3, #1]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d10f      	bne.n	8004c68 <USB_EPStartXfer+0x52c>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	441c      	add	r4, r3
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	4423      	add	r3, r4
 8004c5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7e:	b29c      	uxth	r4, r3
 8004c80:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004c84:	b29c      	uxth	r4, r3
 8004c86:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004c8a:	b29c      	uxth	r4, r3
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	441a      	add	r2, r3
 8004c96:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <USB_EPStartXfer+0x56c>)
 8004c98:	4323      	orrs	r3, r4
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3734      	adds	r7, #52	; 0x34
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd90      	pop	{r4, r7, pc}
 8004ca8:	ffff8080 	.word	0xffff8080

08004cac <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cac:	b490      	push	{r4, r7}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	785b      	ldrb	r3, [r3, #1]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d018      	beq.n	8004cf0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd4:	b29c      	uxth	r4, r3
 8004cd6:	f084 0310 	eor.w	r3, r4, #16
 8004cda:	b29c      	uxth	r4, r3
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	441a      	add	r2, r3
 8004ce6:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <USB_EPSetStall+0x80>)
 8004ce8:	4323      	orrs	r3, r4
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	8013      	strh	r3, [r2, #0]
 8004cee:	e017      	b.n	8004d20 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d06:	b29c      	uxth	r4, r3
 8004d08:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004d0c:	b29c      	uxth	r4, r3
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	441a      	add	r2, r3
 8004d18:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <USB_EPSetStall+0x80>)
 8004d1a:	4323      	orrs	r3, r4
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc90      	pop	{r4, r7}
 8004d2a:	4770      	bx	lr
 8004d2c:	ffff8080 	.word	0xffff8080

08004d30 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d30:	b490      	push	{r4, r7}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	7b1b      	ldrb	r3, [r3, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d17d      	bne.n	8004e3e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	785b      	ldrb	r3, [r3, #1]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d03d      	beq.n	8004dc6 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29c      	uxth	r4, r3
 8004d58:	4623      	mov	r3, r4
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d014      	beq.n	8004d8c <USB_EPClearStall+0x5c>
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d78:	b29c      	uxth	r4, r3
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	441a      	add	r2, r3
 8004d84:	4b31      	ldr	r3, [pc, #196]	; (8004e4c <USB_EPClearStall+0x11c>)
 8004d86:	4323      	orrs	r3, r4
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	78db      	ldrb	r3, [r3, #3]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d054      	beq.n	8004e3e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004daa:	b29c      	uxth	r4, r3
 8004dac:	f084 0320 	eor.w	r3, r4, #32
 8004db0:	b29c      	uxth	r4, r3
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	441a      	add	r2, r3
 8004dbc:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <USB_EPClearStall+0x120>)
 8004dbe:	4323      	orrs	r3, r4
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	8013      	strh	r3, [r2, #0]
 8004dc4:	e03b      	b.n	8004e3e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29c      	uxth	r4, r3
 8004dd4:	4623      	mov	r3, r4
 8004dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d014      	beq.n	8004e08 <USB_EPClearStall+0xd8>
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df4:	b29c      	uxth	r4, r3
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	441a      	add	r2, r3
 8004e00:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <USB_EPClearStall+0x124>)
 8004e02:	4323      	orrs	r3, r4
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	b29c      	uxth	r4, r3
 8004e20:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004e24:	b29c      	uxth	r4, r3
 8004e26:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004e2a:	b29c      	uxth	r4, r3
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	441a      	add	r2, r3
 8004e36:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <USB_EPClearStall+0x120>)
 8004e38:	4323      	orrs	r3, r4
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc90      	pop	{r4, r7}
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	ffff80c0 	.word	0xffff80c0
 8004e50:	ffff8080 	.word	0xffff8080
 8004e54:	ffffc080 	.word	0xffffc080

08004e58 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004e64:	78fb      	ldrb	r3, [r7, #3]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d103      	bne.n	8004e72 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2280      	movs	r2, #128	; 0x80
 8004e6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr

08004e7e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr

08004e92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b085      	sub	sp, #20
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr

08004ec4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc80      	pop	{r7}
 8004ed8:	4770      	bx	lr

08004eda <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b08d      	sub	sp, #52	; 0x34
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	460b      	mov	r3, r1
 8004eea:	80fb      	strh	r3, [r7, #6]
 8004eec:	4613      	mov	r3, r2
 8004eee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004ef0:	88bb      	ldrh	r3, [r7, #4]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f00:	88fb      	ldrh	r3, [r7, #6]
 8004f02:	005a      	lsls	r2, r3, #1
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f0c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f12:	e01e      	b.n	8004f52 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	3302      	adds	r3, #2
 8004f3e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	3302      	adds	r3, #2
 8004f44:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	3301      	adds	r3, #1
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1dd      	bne.n	8004f14 <USB_WritePMA+0x3a>
  }
}
 8004f58:	bf00      	nop
 8004f5a:	3734      	adds	r7, #52	; 0x34
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr

08004f62 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b08b      	sub	sp, #44	; 0x2c
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	60f8      	str	r0, [r7, #12]
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	461a      	mov	r2, r3
 8004f70:	460b      	mov	r3, r1
 8004f72:	80fb      	strh	r3, [r7, #6]
 8004f74:	4613      	mov	r3, r2
 8004f76:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004f78:	88bb      	ldrh	r3, [r7, #4]
 8004f7a:	085b      	lsrs	r3, r3, #1
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	005a      	lsls	r2, r3, #1
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f94:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
 8004f9a:	e01b      	b.n	8004fd4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	3302      	adds	r3, #2
 8004fa8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	0a1b      	lsrs	r3, r3, #8
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	3302      	adds	r3, #2
 8004fcc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1e0      	bne.n	8004f9c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004fda:	88bb      	ldrh	r3, [r7, #4]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d007      	beq.n	8004ff6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	701a      	strb	r2, [r3, #0]
  }
}
 8004ff6:	bf00      	nop
 8004ff8:	372c      	adds	r7, #44	; 0x2c
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr

08005000 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	7c1b      	ldrb	r3, [r3, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d115      	bne.n	8005044 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800501c:	2202      	movs	r2, #2
 800501e:	2181      	movs	r1, #129	; 0x81
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f001 fed6 	bl	8006dd2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800502c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005030:	2202      	movs	r2, #2
 8005032:	2101      	movs	r1, #1
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f001 fecc 	bl	8006dd2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005042:	e012      	b.n	800506a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005044:	2340      	movs	r3, #64	; 0x40
 8005046:	2202      	movs	r2, #2
 8005048:	2181      	movs	r1, #129	; 0x81
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f001 fec1 	bl	8006dd2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005056:	2340      	movs	r3, #64	; 0x40
 8005058:	2202      	movs	r2, #2
 800505a:	2101      	movs	r1, #1
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f001 feb8 	bl	8006dd2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800506a:	2308      	movs	r3, #8
 800506c:	2203      	movs	r2, #3
 800506e:	2182      	movs	r1, #130	; 0x82
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f001 feae 	bl	8006dd2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800507c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005080:	f001 ffc8 	bl	8007014 <USBD_static_malloc>
 8005084:	4602      	mov	r2, r0
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d102      	bne.n	800509c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005096:	2301      	movs	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
 800509a:	e026      	b.n	80050ea <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050a2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	7c1b      	ldrb	r3, [r3, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050d0:	2101      	movs	r1, #1
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f001 ff67 	bl	8006fa6 <USBD_LL_PrepareReceive>
 80050d8:	e007      	b.n	80050ea <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050e0:	2340      	movs	r3, #64	; 0x40
 80050e2:	2101      	movs	r1, #1
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f001 ff5e 	bl	8006fa6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	460b      	mov	r3, r1
 80050fe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005104:	2181      	movs	r1, #129	; 0x81
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f001 fe89 	bl	8006e1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005112:	2101      	movs	r1, #1
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f001 fe82 	bl	8006e1e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005122:	2182      	movs	r1, #130	; 0x82
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f001 fe7a 	bl	8006e1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00e      	beq.n	8005158 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800514a:	4618      	mov	r0, r3
 800514c:	f001 ff6e 	bl	800702c <USBD_static_free>
    pdev->pClassData = NULL;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b086      	sub	sp, #24
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005172:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005188:	2b00      	cmp	r3, #0
 800518a:	d039      	beq.n	8005200 <USBD_CDC_Setup+0x9e>
 800518c:	2b20      	cmp	r3, #32
 800518e:	d17c      	bne.n	800528a <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	88db      	ldrh	r3, [r3, #6]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d029      	beq.n	80051ec <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	b25b      	sxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	da11      	bge.n	80051c6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80051ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	88d2      	ldrh	r2, [r2, #6]
 80051b4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80051b6:	6939      	ldr	r1, [r7, #16]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	88db      	ldrh	r3, [r3, #6]
 80051bc:	461a      	mov	r2, r3
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f001 f9f6 	bl	80065b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80051c4:	e068      	b.n	8005298 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	785a      	ldrb	r2, [r3, #1]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	88db      	ldrh	r3, [r3, #6]
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80051dc:	6939      	ldr	r1, [r7, #16]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	88db      	ldrh	r3, [r3, #6]
 80051e2:	461a      	mov	r2, r3
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f001 fa11 	bl	800660c <USBD_CtlPrepareRx>
      break;
 80051ea:	e055      	b.n	8005298 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	7850      	ldrb	r0, [r2, #1]
 80051f8:	2200      	movs	r2, #0
 80051fa:	6839      	ldr	r1, [r7, #0]
 80051fc:	4798      	blx	r3
      break;
 80051fe:	e04b      	b.n	8005298 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	2b0a      	cmp	r3, #10
 8005206:	d017      	beq.n	8005238 <USBD_CDC_Setup+0xd6>
 8005208:	2b0b      	cmp	r3, #11
 800520a:	d029      	beq.n	8005260 <USBD_CDC_Setup+0xfe>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d133      	bne.n	8005278 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005216:	2b03      	cmp	r3, #3
 8005218:	d107      	bne.n	800522a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800521a:	f107 030c 	add.w	r3, r7, #12
 800521e:	2202      	movs	r2, #2
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f001 f9c4 	bl	80065b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005228:	e02e      	b.n	8005288 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800522a:	6839      	ldr	r1, [r7, #0]
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f001 f955 	bl	80064dc <USBD_CtlError>
            ret = USBD_FAIL;
 8005232:	2302      	movs	r3, #2
 8005234:	75fb      	strb	r3, [r7, #23]
          break;
 8005236:	e027      	b.n	8005288 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800523e:	2b03      	cmp	r3, #3
 8005240:	d107      	bne.n	8005252 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005242:	f107 030f 	add.w	r3, r7, #15
 8005246:	2201      	movs	r2, #1
 8005248:	4619      	mov	r1, r3
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f001 f9b0 	bl	80065b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005250:	e01a      	b.n	8005288 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f001 f941 	bl	80064dc <USBD_CtlError>
            ret = USBD_FAIL;
 800525a:	2302      	movs	r3, #2
 800525c:	75fb      	strb	r3, [r7, #23]
          break;
 800525e:	e013      	b.n	8005288 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005266:	2b03      	cmp	r3, #3
 8005268:	d00d      	beq.n	8005286 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800526a:	6839      	ldr	r1, [r7, #0]
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f001 f935 	bl	80064dc <USBD_CtlError>
            ret = USBD_FAIL;
 8005272:	2302      	movs	r3, #2
 8005274:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005276:	e006      	b.n	8005286 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 f92e 	bl	80064dc <USBD_CtlError>
          ret = USBD_FAIL;
 8005280:	2302      	movs	r3, #2
 8005282:	75fb      	strb	r3, [r7, #23]
          break;
 8005284:	e000      	b.n	8005288 <USBD_CDC_Setup+0x126>
          break;
 8005286:	bf00      	nop
      }
      break;
 8005288:	e006      	b.n	8005298 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800528a:	6839      	ldr	r1, [r7, #0]
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f001 f925 	bl	80064dc <USBD_CtlError>
      ret = USBD_FAIL;
 8005292:	2302      	movs	r3, #2
 8005294:	75fb      	strb	r3, [r7, #23]
      break;
 8005296:	bf00      	nop
  }

  return ret;
 8005298:	7dfb      	ldrb	r3, [r7, #23]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b084      	sub	sp, #16
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	460b      	mov	r3, r1
 80052ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052b4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052bc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d037      	beq.n	8005338 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80052c8:	78fa      	ldrb	r2, [r7, #3]
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	331c      	adds	r3, #28
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d026      	beq.n	800532c <USBD_CDC_DataIn+0x8a>
 80052de:	78fa      	ldrb	r2, [r7, #3]
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	331c      	adds	r3, #28
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	78fa      	ldrb	r2, [r7, #3]
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	0152      	lsls	r2, r2, #5
 80052f6:	440a      	add	r2, r1
 80052f8:	3238      	adds	r2, #56	; 0x38
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005300:	fb02 f201 	mul.w	r2, r2, r1
 8005304:	1a9b      	subs	r3, r3, r2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d110      	bne.n	800532c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800530a:	78fa      	ldrb	r2, [r7, #3]
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	440b      	add	r3, r1
 8005318:	331c      	adds	r3, #28
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800531e:	78f9      	ldrb	r1, [r7, #3]
 8005320:	2300      	movs	r3, #0
 8005322:	2200      	movs	r2, #0
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f001 fe1b 	bl	8006f60 <USBD_LL_Transmit>
 800532a:	e003      	b.n	8005334 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	e000      	b.n	800533a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8005338:	2302      	movs	r3, #2
  }
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	460b      	mov	r3, r1
 800534c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005354:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	4619      	mov	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f001 fe46 	bl	8006fec <USBD_LL_GetRxDataSize>
 8005360:	4602      	mov	r2, r0
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00d      	beq.n	800538e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005386:	4611      	mov	r1, r2
 8005388:	4798      	blx	r3

    return USBD_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	e000      	b.n	8005390 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800538e:	2302      	movs	r3, #2
  }
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053a6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d015      	beq.n	80053de <USBD_CDC_EP0_RxReady+0x46>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80053b8:	2bff      	cmp	r3, #255	; 0xff
 80053ba:	d010      	beq.n	80053de <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80053ca:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80053d2:	b292      	uxth	r2, r2
 80053d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	22ff      	movs	r2, #255	; 0xff
 80053da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2243      	movs	r2, #67	; 0x43
 80053f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80053f6:	4b03      	ldr	r3, [pc, #12]	; (8005404 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	20000094 	.word	0x20000094

08005408 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2243      	movs	r2, #67	; 0x43
 8005414:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005416:	4b03      	ldr	r3, [pc, #12]	; (8005424 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000050 	.word	0x20000050

08005428 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2243      	movs	r2, #67	; 0x43
 8005434:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005436:	4b03      	ldr	r3, [pc, #12]	; (8005444 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	200000d8 	.word	0x200000d8

08005448 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	220a      	movs	r2, #10
 8005454:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005456:	4b03      	ldr	r3, [pc, #12]	; (8005464 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	2000000c 	.word	0x2000000c

08005468 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005472:	2302      	movs	r3, #2
 8005474:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005488:	7bfb      	ldrb	r3, [r7, #15]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr

08005494 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	4613      	mov	r3, r2
 80054a0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054a8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80054b2:	88fa      	ldrh	r2, [r7, #6]
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	371c      	adds	r7, #28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr

080054c6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b085      	sub	sp, #20
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054d6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bc80      	pop	{r7}
 80054ea:	4770      	bx	lr

080054ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d01c      	beq.n	8005540 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800550c:	2b00      	cmp	r3, #0
 800550e:	d115      	bne.n	800553c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2201      	movs	r2, #1
 8005514:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800552e:	b29b      	uxth	r3, r3
 8005530:	2181      	movs	r1, #129	; 0x81
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f001 fd14 	bl	8006f60 <USBD_LL_Transmit>

      return USBD_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	e002      	b.n	8005542 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005540:	2302      	movs	r3, #2
  }
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005558:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005560:	2b00      	cmp	r3, #0
 8005562:	d017      	beq.n	8005594 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	7c1b      	ldrb	r3, [r3, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d109      	bne.n	8005580 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005576:	2101      	movs	r1, #1
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f001 fd14 	bl	8006fa6 <USBD_LL_PrepareReceive>
 800557e:	e007      	b.n	8005590 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005586:	2340      	movs	r3, #64	; 0x40
 8005588:	2101      	movs	r1, #1
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f001 fd0b 	bl	8006fa6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	e000      	b.n	8005596 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005594:	2302      	movs	r3, #2
  }
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	4613      	mov	r3, r2
 80055aa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80055b2:	2302      	movs	r3, #2
 80055b4:	e01a      	b.n	80055ec <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	79fa      	ldrb	r2, [r7, #7]
 80055e2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f001 fb7f 	bl	8006ce8 <USBD_LL_Init>

  return USBD_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d006      	beq.n	8005616 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	73fb      	strb	r3, [r7, #15]
 8005614:	e001      	b.n	800561a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005616:	2302      	movs	r3, #2
 8005618:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800561a:	7bfb      	ldrb	r3, [r7, #15]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr

08005626 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b082      	sub	sp, #8
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f001 fbb4 	bl	8006d9c <USBD_LL_Start>

  return USBD_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr

08005652 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	460b      	mov	r3, r1
 800565c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800565e:	2302      	movs	r3, #2
 8005660:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00c      	beq.n	8005686 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	78fa      	ldrb	r2, [r7, #3]
 8005676:	4611      	mov	r1, r2
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4798      	blx	r3
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005686:	7bfb      	ldrb	r3, [r7, #15]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	78fa      	ldrb	r2, [r7, #3]
 80056a6:	4611      	mov	r1, r2
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	4798      	blx	r3

  return USBD_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fecb 	bl	8006464 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80056dc:	461a      	mov	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80056ea:	f003 031f 	and.w	r3, r3, #31
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d00c      	beq.n	800570c <USBD_LL_SetupStage+0x56>
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d302      	bcc.n	80056fc <USBD_LL_SetupStage+0x46>
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d010      	beq.n	800571c <USBD_LL_SetupStage+0x66>
 80056fa:	e017      	b.n	800572c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f9cb 	bl	8005aa0 <USBD_StdDevReq>
      break;
 800570a:	e01a      	b.n	8005742 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fa2d 	bl	8005b74 <USBD_StdItfReq>
      break;
 800571a:	e012      	b.n	8005742 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005722:	4619      	mov	r1, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fa6b 	bl	8005c00 <USBD_StdEPReq>
      break;
 800572a:	e00a      	b.n	8005742 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005732:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005736:	b2db      	uxtb	r3, r3
 8005738:	4619      	mov	r1, r3
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f001 fb8e 	bl	8006e5c <USBD_LL_StallEP>
      break;
 8005740:	bf00      	nop
  }

  return USBD_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	460b      	mov	r3, r1
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800575a:	7afb      	ldrb	r3, [r7, #11]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d14b      	bne.n	80057f8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005766:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800576e:	2b03      	cmp	r3, #3
 8005770:	d134      	bne.n	80057dc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	429a      	cmp	r2, r3
 800577c:	d919      	bls.n	80057b2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	1ad2      	subs	r2, r2, r3
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005794:	429a      	cmp	r2, r3
 8005796:	d203      	bcs.n	80057a0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800579c:	b29b      	uxth	r3, r3
 800579e:	e002      	b.n	80057a6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	461a      	mov	r2, r3
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 ff4c 	bl	8006648 <USBD_CtlContinueRx>
 80057b0:	e038      	b.n	8005824 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d105      	bne.n	80057d4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 ff49 	bl	800666c <USBD_CtlSendStatus>
 80057da:	e023      	b.n	8005824 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	d11e      	bne.n	8005824 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80057ee:	2100      	movs	r1, #0
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f001 fb33 	bl	8006e5c <USBD_LL_StallEP>
 80057f6:	e015      	b.n	8005824 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00d      	beq.n	8005820 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800580a:	2b03      	cmp	r3, #3
 800580c:	d108      	bne.n	8005820 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	7afa      	ldrb	r2, [r7, #11]
 8005818:	4611      	mov	r1, r2
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	4798      	blx	r3
 800581e:	e001      	b.n	8005824 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005820:	2302      	movs	r3, #2
 8005822:	e000      	b.n	8005826 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b086      	sub	sp, #24
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	460b      	mov	r3, r1
 8005838:	607a      	str	r2, [r7, #4]
 800583a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800583c:	7afb      	ldrb	r3, [r7, #11]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d17f      	bne.n	8005942 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	3314      	adds	r3, #20
 8005846:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800584e:	2b02      	cmp	r3, #2
 8005850:	d15c      	bne.n	800590c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	429a      	cmp	r2, r3
 800585c:	d915      	bls.n	800588a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	1ad2      	subs	r2, r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	b29b      	uxth	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 feb6 	bl	80065e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800587c:	2300      	movs	r3, #0
 800587e:	2200      	movs	r2, #0
 8005880:	2100      	movs	r1, #0
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f001 fb8f 	bl	8006fa6 <USBD_LL_PrepareReceive>
 8005888:	e04e      	b.n	8005928 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	6912      	ldr	r2, [r2, #16]
 8005892:	fbb3 f1f2 	udiv	r1, r3, r2
 8005896:	fb02 f201 	mul.w	r2, r2, r1
 800589a:	1a9b      	subs	r3, r3, r2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d11c      	bne.n	80058da <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d316      	bcc.n	80058da <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d20f      	bcs.n	80058da <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80058ba:	2200      	movs	r2, #0
 80058bc:	2100      	movs	r1, #0
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 fe92 	bl	80065e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058cc:	2300      	movs	r3, #0
 80058ce:	2200      	movs	r2, #0
 80058d0:	2100      	movs	r1, #0
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f001 fb67 	bl	8006fa6 <USBD_LL_PrepareReceive>
 80058d8:	e026      	b.n	8005928 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d105      	bne.n	80058fc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80058fc:	2180      	movs	r1, #128	; 0x80
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f001 faac 	bl	8006e5c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 fec4 	bl	8006692 <USBD_CtlReceiveStatus>
 800590a:	e00d      	b.n	8005928 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005912:	2b04      	cmp	r3, #4
 8005914:	d004      	beq.n	8005920 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800591c:	2b00      	cmp	r3, #0
 800591e:	d103      	bne.n	8005928 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005920:	2180      	movs	r1, #128	; 0x80
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f001 fa9a 	bl	8006e5c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800592e:	2b01      	cmp	r3, #1
 8005930:	d11d      	bne.n	800596e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7ff fe83 	bl	800563e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005940:	e015      	b.n	800596e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00d      	beq.n	800596a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005954:	2b03      	cmp	r3, #3
 8005956:	d108      	bne.n	800596a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	7afa      	ldrb	r2, [r7, #11]
 8005962:	4611      	mov	r1, r2
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	4798      	blx	r3
 8005968:	e001      	b.n	800596e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800596a:	2302      	movs	r3, #2
 800596c:	e000      	b.n	8005970 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005980:	2340      	movs	r3, #64	; 0x40
 8005982:	2200      	movs	r2, #0
 8005984:	2100      	movs	r1, #0
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f001 fa23 	bl	8006dd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2240      	movs	r2, #64	; 0x40
 8005998:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800599c:	2340      	movs	r3, #64	; 0x40
 800599e:	2200      	movs	r2, #0
 80059a0:	2180      	movs	r1, #128	; 0x80
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 fa15 	bl	8006dd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2240      	movs	r2, #64	; 0x40
 80059b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d009      	beq.n	80059f0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6852      	ldr	r2, [r2, #4]
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	4611      	mov	r1, r2
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	4798      	blx	r3
  }

  return USBD_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	460b      	mov	r3, r1
 8005a04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	78fa      	ldrb	r2, [r7, #3]
 8005a0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc80      	pop	{r7}
 8005a16:	4770      	bx	lr

08005a18 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2204      	movs	r2, #4
 8005a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr

08005a40 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d105      	bne.n	8005a5e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr

08005a6a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b082      	sub	sp, #8
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d10b      	bne.n	8005a94 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d005      	beq.n	8005a94 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d004      	beq.n	8005ac4 <USBD_StdDevReq+0x24>
 8005aba:	2b40      	cmp	r3, #64	; 0x40
 8005abc:	d002      	beq.n	8005ac4 <USBD_StdDevReq+0x24>
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d008      	beq.n	8005ad4 <USBD_StdDevReq+0x34>
 8005ac2:	e04c      	b.n	8005b5e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	4798      	blx	r3
      break;
 8005ad2:	e049      	b.n	8005b68 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	785b      	ldrb	r3, [r3, #1]
 8005ad8:	2b09      	cmp	r3, #9
 8005ada:	d83a      	bhi.n	8005b52 <USBD_StdDevReq+0xb2>
 8005adc:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <USBD_StdDevReq+0x44>)
 8005ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae2:	bf00      	nop
 8005ae4:	08005b35 	.word	0x08005b35
 8005ae8:	08005b49 	.word	0x08005b49
 8005aec:	08005b53 	.word	0x08005b53
 8005af0:	08005b3f 	.word	0x08005b3f
 8005af4:	08005b53 	.word	0x08005b53
 8005af8:	08005b17 	.word	0x08005b17
 8005afc:	08005b0d 	.word	0x08005b0d
 8005b00:	08005b53 	.word	0x08005b53
 8005b04:	08005b2b 	.word	0x08005b2b
 8005b08:	08005b21 	.word	0x08005b21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f9d4 	bl	8005ebc <USBD_GetDescriptor>
          break;
 8005b14:	e022      	b.n	8005b5c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fb37 	bl	800618c <USBD_SetAddress>
          break;
 8005b1e:	e01d      	b.n	8005b5c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fb74 	bl	8006210 <USBD_SetConfig>
          break;
 8005b28:	e018      	b.n	8005b5c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005b2a:	6839      	ldr	r1, [r7, #0]
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fbfd 	bl	800632c <USBD_GetConfig>
          break;
 8005b32:	e013      	b.n	8005b5c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fc2c 	bl	8006394 <USBD_GetStatus>
          break;
 8005b3c:	e00e      	b.n	8005b5c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fc5a 	bl	80063fa <USBD_SetFeature>
          break;
 8005b46:	e009      	b.n	8005b5c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fc69 	bl	8006422 <USBD_ClrFeature>
          break;
 8005b50:	e004      	b.n	8005b5c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005b52:	6839      	ldr	r1, [r7, #0]
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fcc1 	bl	80064dc <USBD_CtlError>
          break;
 8005b5a:	bf00      	nop
      }
      break;
 8005b5c:	e004      	b.n	8005b68 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005b5e:	6839      	ldr	r1, [r7, #0]
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fcbb 	bl	80064dc <USBD_CtlError>
      break;
 8005b66:	bf00      	nop
  }

  return ret;
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop

08005b74 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b8a:	2b20      	cmp	r3, #32
 8005b8c:	d003      	beq.n	8005b96 <USBD_StdItfReq+0x22>
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d001      	beq.n	8005b96 <USBD_StdItfReq+0x22>
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d12a      	bne.n	8005bec <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d81d      	bhi.n	8005bde <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	889b      	ldrh	r3, [r3, #4]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d813      	bhi.n	8005bd4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	6839      	ldr	r1, [r7, #0]
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	4798      	blx	r3
 8005bba:	4603      	mov	r3, r0
 8005bbc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	88db      	ldrh	r3, [r3, #6]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d110      	bne.n	8005be8 <USBD_StdItfReq+0x74>
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10d      	bne.n	8005be8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fd4d 	bl	800666c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005bd2:	e009      	b.n	8005be8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005bd4:	6839      	ldr	r1, [r7, #0]
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fc80 	bl	80064dc <USBD_CtlError>
          break;
 8005bdc:	e004      	b.n	8005be8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005bde:	6839      	ldr	r1, [r7, #0]
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fc7b 	bl	80064dc <USBD_CtlError>
          break;
 8005be6:	e000      	b.n	8005bea <USBD_StdItfReq+0x76>
          break;
 8005be8:	bf00      	nop
      }
      break;
 8005bea:	e004      	b.n	8005bf6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fc74 	bl	80064dc <USBD_CtlError>
      break;
 8005bf4:	bf00      	nop
  }

  return USBD_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	889b      	ldrh	r3, [r3, #4]
 8005c12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d004      	beq.n	8005c2a <USBD_StdEPReq+0x2a>
 8005c20:	2b40      	cmp	r3, #64	; 0x40
 8005c22:	d002      	beq.n	8005c2a <USBD_StdEPReq+0x2a>
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d008      	beq.n	8005c3a <USBD_StdEPReq+0x3a>
 8005c28:	e13d      	b.n	8005ea6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	4798      	blx	r3
      break;
 8005c38:	e13a      	b.n	8005eb0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d10a      	bne.n	8005c5c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	4798      	blx	r3
 8005c54:	4603      	mov	r3, r0
 8005c56:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
 8005c5a:	e12a      	b.n	8005eb2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	785b      	ldrb	r3, [r3, #1]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d03e      	beq.n	8005ce2 <USBD_StdEPReq+0xe2>
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d002      	beq.n	8005c6e <USBD_StdEPReq+0x6e>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d070      	beq.n	8005d4e <USBD_StdEPReq+0x14e>
 8005c6c:	e115      	b.n	8005e9a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d002      	beq.n	8005c7e <USBD_StdEPReq+0x7e>
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d015      	beq.n	8005ca8 <USBD_StdEPReq+0xa8>
 8005c7c:	e02b      	b.n	8005cd6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c7e:	7bbb      	ldrb	r3, [r7, #14]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00c      	beq.n	8005c9e <USBD_StdEPReq+0x9e>
 8005c84:	7bbb      	ldrb	r3, [r7, #14]
 8005c86:	2b80      	cmp	r3, #128	; 0x80
 8005c88:	d009      	beq.n	8005c9e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005c8a:	7bbb      	ldrb	r3, [r7, #14]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f001 f8e4 	bl	8006e5c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005c94:	2180      	movs	r1, #128	; 0x80
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f001 f8e0 	bl	8006e5c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c9c:	e020      	b.n	8005ce0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fc1b 	bl	80064dc <USBD_CtlError>
              break;
 8005ca6:	e01b      	b.n	8005ce0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	885b      	ldrh	r3, [r3, #2]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10e      	bne.n	8005cce <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005cb0:	7bbb      	ldrb	r3, [r7, #14]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00b      	beq.n	8005cce <USBD_StdEPReq+0xce>
 8005cb6:	7bbb      	ldrb	r3, [r7, #14]
 8005cb8:	2b80      	cmp	r3, #128	; 0x80
 8005cba:	d008      	beq.n	8005cce <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	88db      	ldrh	r3, [r3, #6]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d104      	bne.n	8005cce <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005cc4:	7bbb      	ldrb	r3, [r7, #14]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 f8c7 	bl	8006e5c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fccc 	bl	800666c <USBD_CtlSendStatus>

              break;
 8005cd4:	e004      	b.n	8005ce0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fbff 	bl	80064dc <USBD_CtlError>
              break;
 8005cde:	bf00      	nop
          }
          break;
 8005ce0:	e0e0      	b.n	8005ea4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d002      	beq.n	8005cf2 <USBD_StdEPReq+0xf2>
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d015      	beq.n	8005d1c <USBD_StdEPReq+0x11c>
 8005cf0:	e026      	b.n	8005d40 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cf2:	7bbb      	ldrb	r3, [r7, #14]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00c      	beq.n	8005d12 <USBD_StdEPReq+0x112>
 8005cf8:	7bbb      	ldrb	r3, [r7, #14]
 8005cfa:	2b80      	cmp	r3, #128	; 0x80
 8005cfc:	d009      	beq.n	8005d12 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005cfe:	7bbb      	ldrb	r3, [r7, #14]
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 f8aa 	bl	8006e5c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005d08:	2180      	movs	r1, #128	; 0x80
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f001 f8a6 	bl	8006e5c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d10:	e01c      	b.n	8005d4c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fbe1 	bl	80064dc <USBD_CtlError>
              break;
 8005d1a:	e017      	b.n	8005d4c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	885b      	ldrh	r3, [r3, #2]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d112      	bne.n	8005d4a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005d24:	7bbb      	ldrb	r3, [r7, #14]
 8005d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d004      	beq.n	8005d38 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005d2e:	7bbb      	ldrb	r3, [r7, #14]
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f001 f8b1 	bl	8006e9a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fc97 	bl	800666c <USBD_CtlSendStatus>
              }
              break;
 8005d3e:	e004      	b.n	8005d4a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005d40:	6839      	ldr	r1, [r7, #0]
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fbca 	bl	80064dc <USBD_CtlError>
              break;
 8005d48:	e000      	b.n	8005d4c <USBD_StdEPReq+0x14c>
              break;
 8005d4a:	bf00      	nop
          }
          break;
 8005d4c:	e0aa      	b.n	8005ea4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d002      	beq.n	8005d5e <USBD_StdEPReq+0x15e>
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d032      	beq.n	8005dc2 <USBD_StdEPReq+0x1c2>
 8005d5c:	e097      	b.n	8005e8e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d5e:	7bbb      	ldrb	r3, [r7, #14]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <USBD_StdEPReq+0x174>
 8005d64:	7bbb      	ldrb	r3, [r7, #14]
 8005d66:	2b80      	cmp	r3, #128	; 0x80
 8005d68:	d004      	beq.n	8005d74 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fbb5 	bl	80064dc <USBD_CtlError>
                break;
 8005d72:	e091      	b.n	8005e98 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	da0b      	bge.n	8005d94 <USBD_StdEPReq+0x194>
 8005d7c:	7bbb      	ldrb	r3, [r7, #14]
 8005d7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d82:	4613      	mov	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	3310      	adds	r3, #16
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	4413      	add	r3, r2
 8005d90:	3304      	adds	r3, #4
 8005d92:	e00b      	b.n	8005dac <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d94:	7bbb      	ldrb	r3, [r7, #14]
 8005d96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	4413      	add	r3, r2
 8005daa:	3304      	adds	r3, #4
 8005dac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2202      	movs	r2, #2
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fbf8 	bl	80065b0 <USBD_CtlSendData>
              break;
 8005dc0:	e06a      	b.n	8005e98 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005dc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	da11      	bge.n	8005dee <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005dca:	7bbb      	ldrb	r3, [r7, #14]
 8005dcc:	f003 020f 	and.w	r2, r3, #15
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	440b      	add	r3, r1
 8005ddc:	3318      	adds	r3, #24
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d117      	bne.n	8005e14 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005de4:	6839      	ldr	r1, [r7, #0]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fb78 	bl	80064dc <USBD_CtlError>
                  break;
 8005dec:	e054      	b.n	8005e98 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005dee:	7bbb      	ldrb	r3, [r7, #14]
 8005df0:	f003 020f 	and.w	r2, r3, #15
 8005df4:	6879      	ldr	r1, [r7, #4]
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	440b      	add	r3, r1
 8005e00:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d104      	bne.n	8005e14 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fb65 	bl	80064dc <USBD_CtlError>
                  break;
 8005e12:	e041      	b.n	8005e98 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	da0b      	bge.n	8005e34 <USBD_StdEPReq+0x234>
 8005e1c:	7bbb      	ldrb	r3, [r7, #14]
 8005e1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	3310      	adds	r3, #16
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	4413      	add	r3, r2
 8005e30:	3304      	adds	r3, #4
 8005e32:	e00b      	b.n	8005e4c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e34:	7bbb      	ldrb	r3, [r7, #14]
 8005e36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	4413      	add	r3, r2
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e4e:	7bbb      	ldrb	r3, [r7, #14]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <USBD_StdEPReq+0x25a>
 8005e54:	7bbb      	ldrb	r3, [r7, #14]
 8005e56:	2b80      	cmp	r3, #128	; 0x80
 8005e58:	d103      	bne.n	8005e62 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	e00e      	b.n	8005e80 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005e62:	7bbb      	ldrb	r3, [r7, #14]
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f001 f836 	bl	8006ed8 <USBD_LL_IsStallEP>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2201      	movs	r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e002      	b.n	8005e80 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2202      	movs	r2, #2
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fb92 	bl	80065b0 <USBD_CtlSendData>
              break;
 8005e8c:	e004      	b.n	8005e98 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005e8e:	6839      	ldr	r1, [r7, #0]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fb23 	bl	80064dc <USBD_CtlError>
              break;
 8005e96:	bf00      	nop
          }
          break;
 8005e98:	e004      	b.n	8005ea4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fb1d 	bl	80064dc <USBD_CtlError>
          break;
 8005ea2:	bf00      	nop
      }
      break;
 8005ea4:	e004      	b.n	8005eb0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fb17 	bl	80064dc <USBD_CtlError>
      break;
 8005eae:	bf00      	nop
  }

  return ret;
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	885b      	ldrh	r3, [r3, #2]
 8005ed6:	0a1b      	lsrs	r3, r3, #8
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	3b01      	subs	r3, #1
 8005edc:	2b06      	cmp	r3, #6
 8005ede:	f200 8128 	bhi.w	8006132 <USBD_GetDescriptor+0x276>
 8005ee2:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <USBD_GetDescriptor+0x2c>)
 8005ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee8:	08005f05 	.word	0x08005f05
 8005eec:	08005f1d 	.word	0x08005f1d
 8005ef0:	08005f5d 	.word	0x08005f5d
 8005ef4:	08006133 	.word	0x08006133
 8005ef8:	08006133 	.word	0x08006133
 8005efc:	080060d3 	.word	0x080060d3
 8005f00:	080060ff 	.word	0x080060ff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	7c12      	ldrb	r2, [r2, #16]
 8005f10:	f107 0108 	add.w	r1, r7, #8
 8005f14:	4610      	mov	r0, r2
 8005f16:	4798      	blx	r3
 8005f18:	60f8      	str	r0, [r7, #12]
      break;
 8005f1a:	e112      	b.n	8006142 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	7c1b      	ldrb	r3, [r3, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10d      	bne.n	8005f40 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2c:	f107 0208 	add.w	r2, r7, #8
 8005f30:	4610      	mov	r0, r2
 8005f32:	4798      	blx	r3
 8005f34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005f3e:	e100      	b.n	8006142 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	f107 0208 	add.w	r2, r7, #8
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4798      	blx	r3
 8005f50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3301      	adds	r3, #1
 8005f56:	2202      	movs	r2, #2
 8005f58:	701a      	strb	r2, [r3, #0]
      break;
 8005f5a:	e0f2      	b.n	8006142 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	885b      	ldrh	r3, [r3, #2]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b05      	cmp	r3, #5
 8005f64:	f200 80ac 	bhi.w	80060c0 <USBD_GetDescriptor+0x204>
 8005f68:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <USBD_GetDescriptor+0xb4>)
 8005f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6e:	bf00      	nop
 8005f70:	08005f89 	.word	0x08005f89
 8005f74:	08005fbd 	.word	0x08005fbd
 8005f78:	08005ff1 	.word	0x08005ff1
 8005f7c:	08006025 	.word	0x08006025
 8005f80:	08006059 	.word	0x08006059
 8005f84:	0800608d 	.word	0x0800608d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00b      	beq.n	8005fac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	7c12      	ldrb	r2, [r2, #16]
 8005fa0:	f107 0108 	add.w	r1, r7, #8
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	4798      	blx	r3
 8005fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005faa:	e091      	b.n	80060d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fa94 	bl	80064dc <USBD_CtlError>
            err++;
 8005fb4:	7afb      	ldrb	r3, [r7, #11]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8005fba:	e089      	b.n	80060d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00b      	beq.n	8005fe0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	7c12      	ldrb	r2, [r2, #16]
 8005fd4:	f107 0108 	add.w	r1, r7, #8
 8005fd8:	4610      	mov	r0, r2
 8005fda:	4798      	blx	r3
 8005fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fde:	e077      	b.n	80060d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fa7a 	bl	80064dc <USBD_CtlError>
            err++;
 8005fe8:	7afb      	ldrb	r3, [r7, #11]
 8005fea:	3301      	adds	r3, #1
 8005fec:	72fb      	strb	r3, [r7, #11]
          break;
 8005fee:	e06f      	b.n	80060d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00b      	beq.n	8006014 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	7c12      	ldrb	r2, [r2, #16]
 8006008:	f107 0108 	add.w	r1, r7, #8
 800600c:	4610      	mov	r0, r2
 800600e:	4798      	blx	r3
 8006010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006012:	e05d      	b.n	80060d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fa60 	bl	80064dc <USBD_CtlError>
            err++;
 800601c:	7afb      	ldrb	r3, [r7, #11]
 800601e:	3301      	adds	r3, #1
 8006020:	72fb      	strb	r3, [r7, #11]
          break;
 8006022:	e055      	b.n	80060d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00b      	beq.n	8006048 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	7c12      	ldrb	r2, [r2, #16]
 800603c:	f107 0108 	add.w	r1, r7, #8
 8006040:	4610      	mov	r0, r2
 8006042:	4798      	blx	r3
 8006044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006046:	e043      	b.n	80060d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa46 	bl	80064dc <USBD_CtlError>
            err++;
 8006050:	7afb      	ldrb	r3, [r7, #11]
 8006052:	3301      	adds	r3, #1
 8006054:	72fb      	strb	r3, [r7, #11]
          break;
 8006056:	e03b      	b.n	80060d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	7c12      	ldrb	r2, [r2, #16]
 8006070:	f107 0108 	add.w	r1, r7, #8
 8006074:	4610      	mov	r0, r2
 8006076:	4798      	blx	r3
 8006078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800607a:	e029      	b.n	80060d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fa2c 	bl	80064dc <USBD_CtlError>
            err++;
 8006084:	7afb      	ldrb	r3, [r7, #11]
 8006086:	3301      	adds	r3, #1
 8006088:	72fb      	strb	r3, [r7, #11]
          break;
 800608a:	e021      	b.n	80060d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00b      	beq.n	80060b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	7c12      	ldrb	r2, [r2, #16]
 80060a4:	f107 0108 	add.w	r1, r7, #8
 80060a8:	4610      	mov	r0, r2
 80060aa:	4798      	blx	r3
 80060ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060ae:	e00f      	b.n	80060d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fa12 	bl	80064dc <USBD_CtlError>
            err++;
 80060b8:	7afb      	ldrb	r3, [r7, #11]
 80060ba:	3301      	adds	r3, #1
 80060bc:	72fb      	strb	r3, [r7, #11]
          break;
 80060be:	e007      	b.n	80060d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fa0a 	bl	80064dc <USBD_CtlError>
          err++;
 80060c8:	7afb      	ldrb	r3, [r7, #11]
 80060ca:	3301      	adds	r3, #1
 80060cc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80060ce:	e038      	b.n	8006142 <USBD_GetDescriptor+0x286>
 80060d0:	e037      	b.n	8006142 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	7c1b      	ldrb	r3, [r3, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d109      	bne.n	80060ee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e2:	f107 0208 	add.w	r2, r7, #8
 80060e6:	4610      	mov	r0, r2
 80060e8:	4798      	blx	r3
 80060ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060ec:	e029      	b.n	8006142 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f9f3 	bl	80064dc <USBD_CtlError>
        err++;
 80060f6:	7afb      	ldrb	r3, [r7, #11]
 80060f8:	3301      	adds	r3, #1
 80060fa:	72fb      	strb	r3, [r7, #11]
      break;
 80060fc:	e021      	b.n	8006142 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	7c1b      	ldrb	r3, [r3, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10d      	bne.n	8006122 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800610c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610e:	f107 0208 	add.w	r2, r7, #8
 8006112:	4610      	mov	r0, r2
 8006114:	4798      	blx	r3
 8006116:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3301      	adds	r3, #1
 800611c:	2207      	movs	r2, #7
 800611e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006120:	e00f      	b.n	8006142 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f9d9 	bl	80064dc <USBD_CtlError>
        err++;
 800612a:	7afb      	ldrb	r3, [r7, #11]
 800612c:	3301      	adds	r3, #1
 800612e:	72fb      	strb	r3, [r7, #11]
      break;
 8006130:	e007      	b.n	8006142 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f9d1 	bl	80064dc <USBD_CtlError>
      err++;
 800613a:	7afb      	ldrb	r3, [r7, #11]
 800613c:	3301      	adds	r3, #1
 800613e:	72fb      	strb	r3, [r7, #11]
      break;
 8006140:	bf00      	nop
  }

  if (err != 0U)
 8006142:	7afb      	ldrb	r3, [r7, #11]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d11c      	bne.n	8006182 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006148:	893b      	ldrh	r3, [r7, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d011      	beq.n	8006172 <USBD_GetDescriptor+0x2b6>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	88db      	ldrh	r3, [r3, #6]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00d      	beq.n	8006172 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	88da      	ldrh	r2, [r3, #6]
 800615a:	893b      	ldrh	r3, [r7, #8]
 800615c:	4293      	cmp	r3, r2
 800615e:	bf28      	it	cs
 8006160:	4613      	movcs	r3, r2
 8006162:	b29b      	uxth	r3, r3
 8006164:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006166:	893b      	ldrh	r3, [r7, #8]
 8006168:	461a      	mov	r2, r3
 800616a:	68f9      	ldr	r1, [r7, #12]
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fa1f 	bl	80065b0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	88db      	ldrh	r3, [r3, #6]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d104      	bne.n	8006184 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fa76 	bl	800666c <USBD_CtlSendStatus>
 8006180:	e000      	b.n	8006184 <USBD_GetDescriptor+0x2c8>
    return;
 8006182:	bf00      	nop
    }
  }
}
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop

0800618c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	889b      	ldrh	r3, [r3, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d130      	bne.n	8006200 <USBD_SetAddress+0x74>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	88db      	ldrh	r3, [r3, #6]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d12c      	bne.n	8006200 <USBD_SetAddress+0x74>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	885b      	ldrh	r3, [r3, #2]
 80061aa:	2b7f      	cmp	r3, #127	; 0x7f
 80061ac:	d828      	bhi.n	8006200 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	885b      	ldrh	r3, [r3, #2]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d104      	bne.n	80061ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f988 	bl	80064dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061cc:	e01c      	b.n	8006208 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	7bfa      	ldrb	r2, [r7, #15]
 80061d2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fea1 	bl	8006f22 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fa43 	bl	800666c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d004      	beq.n	80061f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f4:	e008      	b.n	8006208 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061fe:	e003      	b.n	8006208 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f96a 	bl	80064dc <USBD_CtlError>
  }
}
 8006208:	bf00      	nop
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	885b      	ldrh	r3, [r3, #2]
 800621e:	b2da      	uxtb	r2, r3
 8006220:	4b41      	ldr	r3, [pc, #260]	; (8006328 <USBD_SetConfig+0x118>)
 8006222:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006224:	4b40      	ldr	r3, [pc, #256]	; (8006328 <USBD_SetConfig+0x118>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d904      	bls.n	8006236 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f954 	bl	80064dc <USBD_CtlError>
 8006234:	e075      	b.n	8006322 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800623c:	2b02      	cmp	r3, #2
 800623e:	d002      	beq.n	8006246 <USBD_SetConfig+0x36>
 8006240:	2b03      	cmp	r3, #3
 8006242:	d023      	beq.n	800628c <USBD_SetConfig+0x7c>
 8006244:	e062      	b.n	800630c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006246:	4b38      	ldr	r3, [pc, #224]	; (8006328 <USBD_SetConfig+0x118>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d01a      	beq.n	8006284 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800624e:	4b36      	ldr	r3, [pc, #216]	; (8006328 <USBD_SetConfig+0x118>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2203      	movs	r2, #3
 800625c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006260:	4b31      	ldr	r3, [pc, #196]	; (8006328 <USBD_SetConfig+0x118>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff f9f3 	bl	8005652 <USBD_SetClassConfig>
 800626c:	4603      	mov	r3, r0
 800626e:	2b02      	cmp	r3, #2
 8006270:	d104      	bne.n	800627c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f931 	bl	80064dc <USBD_CtlError>
            return;
 800627a:	e052      	b.n	8006322 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f9f5 	bl	800666c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006282:	e04e      	b.n	8006322 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f9f1 	bl	800666c <USBD_CtlSendStatus>
        break;
 800628a:	e04a      	b.n	8006322 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800628c:	4b26      	ldr	r3, [pc, #152]	; (8006328 <USBD_SetConfig+0x118>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d112      	bne.n	80062ba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800629c:	4b22      	ldr	r3, [pc, #136]	; (8006328 <USBD_SetConfig+0x118>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80062a6:	4b20      	ldr	r3, [pc, #128]	; (8006328 <USBD_SetConfig+0x118>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff f9ef 	bl	8005690 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f9da 	bl	800666c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80062b8:	e033      	b.n	8006322 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80062ba:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <USBD_SetConfig+0x118>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d01d      	beq.n	8006304 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff f9dd 	bl	8005690 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80062d6:	4b14      	ldr	r3, [pc, #80]	; (8006328 <USBD_SetConfig+0x118>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80062e0:	4b11      	ldr	r3, [pc, #68]	; (8006328 <USBD_SetConfig+0x118>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff f9b3 	bl	8005652 <USBD_SetClassConfig>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d104      	bne.n	80062fc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f8f1 	bl	80064dc <USBD_CtlError>
            return;
 80062fa:	e012      	b.n	8006322 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f9b5 	bl	800666c <USBD_CtlSendStatus>
        break;
 8006302:	e00e      	b.n	8006322 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f9b1 	bl	800666c <USBD_CtlSendStatus>
        break;
 800630a:	e00a      	b.n	8006322 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800630c:	6839      	ldr	r1, [r7, #0]
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f8e4 	bl	80064dc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006314:	4b04      	ldr	r3, [pc, #16]	; (8006328 <USBD_SetConfig+0x118>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff f9b8 	bl	8005690 <USBD_ClrClassConfig>
        break;
 8006320:	bf00      	nop
    }
  }
}
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20000b54 	.word	0x20000b54

0800632c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	88db      	ldrh	r3, [r3, #6]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d004      	beq.n	8006348 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f8cb 	bl	80064dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006346:	e021      	b.n	800638c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800634e:	2b01      	cmp	r3, #1
 8006350:	db17      	blt.n	8006382 <USBD_GetConfig+0x56>
 8006352:	2b02      	cmp	r3, #2
 8006354:	dd02      	ble.n	800635c <USBD_GetConfig+0x30>
 8006356:	2b03      	cmp	r3, #3
 8006358:	d00b      	beq.n	8006372 <USBD_GetConfig+0x46>
 800635a:	e012      	b.n	8006382 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3308      	adds	r3, #8
 8006366:	2201      	movs	r2, #1
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f920 	bl	80065b0 <USBD_CtlSendData>
        break;
 8006370:	e00c      	b.n	800638c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3304      	adds	r3, #4
 8006376:	2201      	movs	r2, #1
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f918 	bl	80065b0 <USBD_CtlSendData>
        break;
 8006380:	e004      	b.n	800638c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f8a9 	bl	80064dc <USBD_CtlError>
        break;
 800638a:	bf00      	nop
}
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a4:	3b01      	subs	r3, #1
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d81e      	bhi.n	80063e8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	88db      	ldrh	r3, [r3, #6]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d004      	beq.n	80063bc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f891 	bl	80064dc <USBD_CtlError>
        break;
 80063ba:	e01a      	b.n	80063f2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f043 0202 	orr.w	r2, r3, #2
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	330c      	adds	r3, #12
 80063dc:	2202      	movs	r2, #2
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f8e5 	bl	80065b0 <USBD_CtlSendData>
      break;
 80063e6:	e004      	b.n	80063f2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f876 	bl	80064dc <USBD_CtlError>
      break;
 80063f0:	bf00      	nop
  }
}
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b082      	sub	sp, #8
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	885b      	ldrh	r3, [r3, #2]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d106      	bne.n	800641a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f929 	bl	800666c <USBD_CtlSendStatus>
  }
}
 800641a:	bf00      	nop
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006432:	3b01      	subs	r3, #1
 8006434:	2b02      	cmp	r3, #2
 8006436:	d80b      	bhi.n	8006450 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	885b      	ldrh	r3, [r3, #2]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d10c      	bne.n	800645a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f90f 	bl	800666c <USBD_CtlSendStatus>
      }
      break;
 800644e:	e004      	b.n	800645a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f842 	bl	80064dc <USBD_CtlError>
      break;
 8006458:	e000      	b.n	800645c <USBD_ClrFeature+0x3a>
      break;
 800645a:	bf00      	nop
  }
}
 800645c:	bf00      	nop
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781a      	ldrb	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	785a      	ldrb	r2, [r3, #1]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	3302      	adds	r3, #2
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	b29a      	uxth	r2, r3
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	3303      	adds	r3, #3
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	b29b      	uxth	r3, r3
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	b29b      	uxth	r3, r3
 8006492:	4413      	add	r3, r2
 8006494:	b29a      	uxth	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	3304      	adds	r3, #4
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	3305      	adds	r3, #5
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	021b      	lsls	r3, r3, #8
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	4413      	add	r3, r2
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	3306      	adds	r3, #6
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	b29a      	uxth	r2, r3
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	3307      	adds	r3, #7
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	021b      	lsls	r3, r3, #8
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	4413      	add	r3, r2
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	80da      	strh	r2, [r3, #6]

}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr

080064dc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80064e6:	2180      	movs	r1, #128	; 0x80
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fcb7 	bl	8006e5c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80064ee:	2100      	movs	r1, #0
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fcb3 	bl	8006e5c <USBD_LL_StallEP>
}
 80064f6:	bf00      	nop
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b086      	sub	sp, #24
 8006502:	af00      	add	r7, sp, #0
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d032      	beq.n	800657a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 f834 	bl	8006582 <USBD_GetLen>
 800651a:	4603      	mov	r3, r0
 800651c:	3301      	adds	r3, #1
 800651e:	b29b      	uxth	r3, r3
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006528:	7dfb      	ldrb	r3, [r7, #23]
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	75fa      	strb	r2, [r7, #23]
 800652e:	461a      	mov	r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4413      	add	r3, r2
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	7812      	ldrb	r2, [r2, #0]
 8006538:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800653a:	7dfb      	ldrb	r3, [r7, #23]
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	75fa      	strb	r2, [r7, #23]
 8006540:	461a      	mov	r2, r3
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	4413      	add	r3, r2
 8006546:	2203      	movs	r2, #3
 8006548:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800654a:	e012      	b.n	8006572 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	60fa      	str	r2, [r7, #12]
 8006552:	7dfa      	ldrb	r2, [r7, #23]
 8006554:	1c51      	adds	r1, r2, #1
 8006556:	75f9      	strb	r1, [r7, #23]
 8006558:	4611      	mov	r1, r2
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	440a      	add	r2, r1
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006562:	7dfb      	ldrb	r3, [r7, #23]
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	75fa      	strb	r2, [r7, #23]
 8006568:	461a      	mov	r2, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	4413      	add	r3, r2
 800656e:	2200      	movs	r2, #0
 8006570:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e8      	bne.n	800654c <USBD_GetString+0x4e>
    }
  }
}
 800657a:	bf00      	nop
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006582:	b480      	push	{r7}
 8006584:	b085      	sub	sp, #20
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800658e:	e005      	b.n	800659c <USBD_GetLen+0x1a>
  {
    len++;
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	3301      	adds	r3, #1
 8006594:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3301      	adds	r3, #1
 800659a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1f5      	bne.n	8006590 <USBD_GetLen+0xe>
  }

  return len;
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bc80      	pop	{r7}
 80065ae:	4770      	bx	lr

080065b0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2202      	movs	r2, #2
 80065c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80065c6:	88fa      	ldrh	r2, [r7, #6]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80065cc:	88fa      	ldrh	r2, [r7, #6]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	2100      	movs	r1, #0
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 fcc1 	bl	8006f60 <USBD_LL_Transmit>

  return USBD_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	4613      	mov	r3, r2
 80065f4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065f6:	88fb      	ldrh	r3, [r7, #6]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	2100      	movs	r1, #0
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 fcaf 	bl	8006f60 <USBD_LL_Transmit>

  return USBD_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	4613      	mov	r3, r2
 8006618:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2203      	movs	r2, #3
 800661e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006622:	88fa      	ldrh	r2, [r7, #6]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800662a:	88fa      	ldrh	r2, [r7, #6]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006632:	88fb      	ldrh	r3, [r7, #6]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	2100      	movs	r1, #0
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 fcb4 	bl	8006fa6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006656:	88fb      	ldrh	r3, [r7, #6]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	2100      	movs	r1, #0
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fca2 	bl	8006fa6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2204      	movs	r2, #4
 8006678:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800667c:	2300      	movs	r3, #0
 800667e:	2200      	movs	r2, #0
 8006680:	2100      	movs	r1, #0
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fc6c 	bl	8006f60 <USBD_LL_Transmit>

  return USBD_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b082      	sub	sp, #8
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2205      	movs	r2, #5
 800669e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066a2:	2300      	movs	r3, #0
 80066a4:	2200      	movs	r2, #0
 80066a6:	2100      	movs	r1, #0
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fc7c 	bl	8006fa6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80066bc:	2200      	movs	r2, #0
 80066be:	4912      	ldr	r1, [pc, #72]	; (8006708 <MX_USB_DEVICE_Init+0x50>)
 80066c0:	4812      	ldr	r0, [pc, #72]	; (800670c <MX_USB_DEVICE_Init+0x54>)
 80066c2:	f7fe ff6c 	bl	800559e <USBD_Init>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80066cc:	f7fa fdd0 	bl	8001270 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80066d0:	490f      	ldr	r1, [pc, #60]	; (8006710 <MX_USB_DEVICE_Init+0x58>)
 80066d2:	480e      	ldr	r0, [pc, #56]	; (800670c <MX_USB_DEVICE_Init+0x54>)
 80066d4:	f7fe ff8e 	bl	80055f4 <USBD_RegisterClass>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80066de:	f7fa fdc7 	bl	8001270 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80066e2:	490c      	ldr	r1, [pc, #48]	; (8006714 <MX_USB_DEVICE_Init+0x5c>)
 80066e4:	4809      	ldr	r0, [pc, #36]	; (800670c <MX_USB_DEVICE_Init+0x54>)
 80066e6:	f7fe febf 	bl	8005468 <USBD_CDC_RegisterInterface>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80066f0:	f7fa fdbe 	bl	8001270 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80066f4:	4805      	ldr	r0, [pc, #20]	; (800670c <MX_USB_DEVICE_Init+0x54>)
 80066f6:	f7fe ff96 	bl	8005626 <USBD_Start>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006700:	f7fa fdb6 	bl	8001270 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006704:	bf00      	nop
 8006706:	bd80      	pop	{r7, pc}
 8006708:	2000012c 	.word	0x2000012c
 800670c:	20000e20 	.word	0x20000e20
 8006710:	20000018 	.word	0x20000018
 8006714:	2000011c 	.word	0x2000011c

08006718 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800671c:	2200      	movs	r2, #0
 800671e:	4905      	ldr	r1, [pc, #20]	; (8006734 <CDC_Init_FS+0x1c>)
 8006720:	4805      	ldr	r0, [pc, #20]	; (8006738 <CDC_Init_FS+0x20>)
 8006722:	f7fe feb7 	bl	8005494 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006726:	4905      	ldr	r1, [pc, #20]	; (800673c <CDC_Init_FS+0x24>)
 8006728:	4803      	ldr	r0, [pc, #12]	; (8006738 <CDC_Init_FS+0x20>)
 800672a:	f7fe fecc 	bl	80054c6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800672e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006730:	4618      	mov	r0, r3
 8006732:	bd80      	pop	{r7, pc}
 8006734:	200014cc 	.word	0x200014cc
 8006738:	20000e20 	.word	0x20000e20
 800673c:	200010e4 	.word	0x200010e4

08006740 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006740:	b480      	push	{r7}
 8006742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006744:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006746:	4618      	mov	r0, r3
 8006748:	46bd      	mov	sp, r7
 800674a:	bc80      	pop	{r7}
 800674c:	4770      	bx	lr
	...

08006750 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	6039      	str	r1, [r7, #0]
 800675a:	71fb      	strb	r3, [r7, #7]
 800675c:	4613      	mov	r3, r2
 800675e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006760:	79fb      	ldrb	r3, [r7, #7]
 8006762:	2b23      	cmp	r3, #35	; 0x23
 8006764:	d84a      	bhi.n	80067fc <CDC_Control_FS+0xac>
 8006766:	a201      	add	r2, pc, #4	; (adr r2, 800676c <CDC_Control_FS+0x1c>)
 8006768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676c:	080067fd 	.word	0x080067fd
 8006770:	080067fd 	.word	0x080067fd
 8006774:	080067fd 	.word	0x080067fd
 8006778:	080067fd 	.word	0x080067fd
 800677c:	080067fd 	.word	0x080067fd
 8006780:	080067fd 	.word	0x080067fd
 8006784:	080067fd 	.word	0x080067fd
 8006788:	080067fd 	.word	0x080067fd
 800678c:	080067fd 	.word	0x080067fd
 8006790:	080067fd 	.word	0x080067fd
 8006794:	080067fd 	.word	0x080067fd
 8006798:	080067fd 	.word	0x080067fd
 800679c:	080067fd 	.word	0x080067fd
 80067a0:	080067fd 	.word	0x080067fd
 80067a4:	080067fd 	.word	0x080067fd
 80067a8:	080067fd 	.word	0x080067fd
 80067ac:	080067fd 	.word	0x080067fd
 80067b0:	080067fd 	.word	0x080067fd
 80067b4:	080067fd 	.word	0x080067fd
 80067b8:	080067fd 	.word	0x080067fd
 80067bc:	080067fd 	.word	0x080067fd
 80067c0:	080067fd 	.word	0x080067fd
 80067c4:	080067fd 	.word	0x080067fd
 80067c8:	080067fd 	.word	0x080067fd
 80067cc:	080067fd 	.word	0x080067fd
 80067d0:	080067fd 	.word	0x080067fd
 80067d4:	080067fd 	.word	0x080067fd
 80067d8:	080067fd 	.word	0x080067fd
 80067dc:	080067fd 	.word	0x080067fd
 80067e0:	080067fd 	.word	0x080067fd
 80067e4:	080067fd 	.word	0x080067fd
 80067e8:	080067fd 	.word	0x080067fd
 80067ec:	080067fd 	.word	0x080067fd
 80067f0:	080067fd 	.word	0x080067fd
 80067f4:	080067fd 	.word	0x080067fd
 80067f8:	080067fd 	.word	0x080067fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80067fc:	bf00      	nop
  }

  return (USBD_OK);
 80067fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	bc80      	pop	{r7}
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop

0800680c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if(RxBuffPtr > APP_RX_DATA_SIZE)
 8006816:	4b21      	ldr	r3, [pc, #132]	; (800689c <CDC_Receive_FS+0x90>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800681e:	d902      	bls.n	8006826 <CDC_Receive_FS+0x1a>
    RxBuffPtr = 0;
 8006820:	4b1e      	ldr	r3, [pc, #120]	; (800689c <CDC_Receive_FS+0x90>)
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]

  memcpy(RxBuffer + RxBuffPtr, Buf, *Len);
 8006826:	4b1d      	ldr	r3, [pc, #116]	; (800689c <CDC_Receive_FS+0x90>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a1d      	ldr	r2, [pc, #116]	; (80068a0 <CDC_Receive_FS+0x94>)
 800682c:	1898      	adds	r0, r3, r2
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	f000 fc83 	bl	8007140 <memcpy>
  RxBuffPtr += *Len;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	4b17      	ldr	r3, [pc, #92]	; (800689c <CDC_Receive_FS+0x90>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4413      	add	r3, r2
 8006844:	4a15      	ldr	r2, [pc, #84]	; (800689c <CDC_Receive_FS+0x90>)
 8006846:	6013      	str	r3, [r2, #0]

  char c= 0;
 8006848:	2300      	movs	r3, #0
 800684a:	72fb      	strb	r3, [r7, #11]
  for(int i = 0; i < *Len; i++)
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	e00d      	b.n	800686e <CDC_Receive_FS+0x62>
  {
    c = Buf[i];
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	4413      	add	r3, r2
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	72fb      	strb	r3, [r7, #11]
    if(c == CDC_TERM_CHAR)
 800685c:	7afb      	ldrb	r3, [r7, #11]
 800685e:	2b0a      	cmp	r3, #10
 8006860:	d102      	bne.n	8006868 <CDC_Receive_FS+0x5c>
      DataReceivedFlag = 1;
 8006862:	4b10      	ldr	r3, [pc, #64]	; (80068a4 <CDC_Receive_FS+0x98>)
 8006864:	2201      	movs	r2, #1
 8006866:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < *Len; i++)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3301      	adds	r3, #1
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	429a      	cmp	r2, r3
 8006876:	d8ec      	bhi.n	8006852 <CDC_Receive_FS+0x46>
  }

  if(!DataReceivedFlag)
 8006878:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <CDC_Receive_FS+0x98>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <CDC_Receive_FS+0x84>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	4808      	ldr	r0, [pc, #32]	; (80068a8 <CDC_Receive_FS+0x9c>)
 8006886:	f7fe fe1e 	bl	80054c6 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800688a:	4807      	ldr	r0, [pc, #28]	; (80068a8 <CDC_Receive_FS+0x9c>)
 800688c:	f7fe fe5d 	bl	800554a <USBD_CDC_ReceivePacket>
  }
  return (USBD_OK);
 8006890:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000b58 	.word	0x20000b58
 80068a0:	200018b4 	.word	0x200018b4
 80068a4:	20000b55 	.word	0x20000b55
 80068a8:	20000e20 	.word	0x20000e20

080068ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80068bc:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <CDC_Transmit_FS+0x48>)
 80068be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e00b      	b.n	80068ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80068d2:	887b      	ldrh	r3, [r7, #2]
 80068d4:	461a      	mov	r2, r3
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	4806      	ldr	r0, [pc, #24]	; (80068f4 <CDC_Transmit_FS+0x48>)
 80068da:	f7fe fddb 	bl	8005494 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80068de:	4805      	ldr	r0, [pc, #20]	; (80068f4 <CDC_Transmit_FS+0x48>)
 80068e0:	f7fe fe04 	bl	80054ec <USBD_CDC_TransmitPacket>
 80068e4:	4603      	mov	r3, r0
 80068e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20000e20 	.word	0x20000e20

080068f8 <CDC_Task_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Task_FS(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
  if(UsbdUart.DataReceivedFlag)
 80068fc:	4b0d      	ldr	r3, [pc, #52]	; (8006934 <CDC_Task_FS+0x3c>)
 80068fe:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d014      	beq.n	8006930 <CDC_Task_FS+0x38>
  {
    UsbdUart.RxCounter++;
 8006906:	4b0b      	ldr	r3, [pc, #44]	; (8006934 <CDC_Task_FS+0x3c>)
 8006908:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800690c:	3301      	adds	r3, #1
 800690e:	b2da      	uxtb	r2, r3
 8006910:	4b08      	ldr	r3, [pc, #32]	; (8006934 <CDC_Task_FS+0x3c>)
 8006912:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
    UsbdUart.DataReceivedFlag = 0;
 8006916:	4b07      	ldr	r3, [pc, #28]	; (8006934 <CDC_Task_FS+0x3c>)
 8006918:	2200      	movs	r2, #0
 800691a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    USBD_CDC_DataRecivedCallback((char*)RxBuffer);
 800691e:	4806      	ldr	r0, [pc, #24]	; (8006938 <CDC_Task_FS+0x40>)
 8006920:	f3af 8000 	nop.w
    RxBuffPtr = 0;
 8006924:	4b05      	ldr	r3, [pc, #20]	; (800693c <CDC_Task_FS+0x44>)
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800692a:	4805      	ldr	r0, [pc, #20]	; (8006940 <CDC_Task_FS+0x48>)
 800692c:	f7fe fe0d 	bl	800554a <USBD_CDC_ReceivePacket>
  }
}
 8006930:	bf00      	nop
 8006932:	bd80      	pop	{r7, pc}
 8006934:	20001c9c 	.word	0x20001c9c
 8006938:	200018b4 	.word	0x200018b4
 800693c:	20000b58 	.word	0x20000b58
 8006940:	20000e20 	.word	0x20000e20

08006944 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	4603      	mov	r3, r0
 800694c:	6039      	str	r1, [r7, #0]
 800694e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2212      	movs	r2, #18
 8006954:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006956:	4b03      	ldr	r3, [pc, #12]	; (8006964 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	20000148 	.word	0x20000148

08006968 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	6039      	str	r1, [r7, #0]
 8006972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2204      	movs	r2, #4
 8006978:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800697a:	4b03      	ldr	r3, [pc, #12]	; (8006988 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	bc80      	pop	{r7}
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	2000015c 	.word	0x2000015c

0800698c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	4603      	mov	r3, r0
 8006994:	6039      	str	r1, [r7, #0]
 8006996:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d105      	bne.n	80069aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	4907      	ldr	r1, [pc, #28]	; (80069c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80069a2:	4808      	ldr	r0, [pc, #32]	; (80069c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80069a4:	f7ff fdab 	bl	80064fe <USBD_GetString>
 80069a8:	e004      	b.n	80069b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	4904      	ldr	r1, [pc, #16]	; (80069c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80069ae:	4805      	ldr	r0, [pc, #20]	; (80069c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80069b0:	f7ff fda5 	bl	80064fe <USBD_GetString>
  }
  return USBD_StrDesc;
 80069b4:	4b02      	ldr	r3, [pc, #8]	; (80069c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20001d50 	.word	0x20001d50
 80069c4:	0800c708 	.word	0x0800c708

080069c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	4603      	mov	r3, r0
 80069d0:	6039      	str	r1, [r7, #0]
 80069d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	4904      	ldr	r1, [pc, #16]	; (80069e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80069d8:	4804      	ldr	r0, [pc, #16]	; (80069ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80069da:	f7ff fd90 	bl	80064fe <USBD_GetString>
  return USBD_StrDesc;
 80069de:	4b02      	ldr	r3, [pc, #8]	; (80069e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	20001d50 	.word	0x20001d50
 80069ec:	0800c720 	.word	0x0800c720

080069f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	4603      	mov	r3, r0
 80069f8:	6039      	str	r1, [r7, #0]
 80069fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	221a      	movs	r2, #26
 8006a00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006a02:	f000 f843 	bl	8006a8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006a06:	4b02      	ldr	r3, [pc, #8]	; (8006a10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20000160 	.word	0x20000160

08006a14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	6039      	str	r1, [r7, #0]
 8006a1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006a20:	79fb      	ldrb	r3, [r7, #7]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d105      	bne.n	8006a32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	4907      	ldr	r1, [pc, #28]	; (8006a48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006a2a:	4808      	ldr	r0, [pc, #32]	; (8006a4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006a2c:	f7ff fd67 	bl	80064fe <USBD_GetString>
 8006a30:	e004      	b.n	8006a3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	4904      	ldr	r1, [pc, #16]	; (8006a48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006a36:	4805      	ldr	r0, [pc, #20]	; (8006a4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006a38:	f7ff fd61 	bl	80064fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a3c:	4b02      	ldr	r3, [pc, #8]	; (8006a48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20001d50 	.word	0x20001d50
 8006a4c:	0800c734 	.word	0x0800c734

08006a50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	6039      	str	r1, [r7, #0]
 8006a5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a5c:	79fb      	ldrb	r3, [r7, #7]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d105      	bne.n	8006a6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	4907      	ldr	r1, [pc, #28]	; (8006a84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a66:	4808      	ldr	r0, [pc, #32]	; (8006a88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a68:	f7ff fd49 	bl	80064fe <USBD_GetString>
 8006a6c:	e004      	b.n	8006a78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	4904      	ldr	r1, [pc, #16]	; (8006a84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a72:	4805      	ldr	r0, [pc, #20]	; (8006a88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a74:	f7ff fd43 	bl	80064fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a78:	4b02      	ldr	r3, [pc, #8]	; (8006a84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20001d50 	.word	0x20001d50
 8006a88:	0800c740 	.word	0x0800c740

08006a8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a92:	4b0f      	ldr	r3, [pc, #60]	; (8006ad0 <Get_SerialNum+0x44>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a98:	4b0e      	ldr	r3, [pc, #56]	; (8006ad4 <Get_SerialNum+0x48>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006a9e:	4b0e      	ldr	r3, [pc, #56]	; (8006ad8 <Get_SerialNum+0x4c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d009      	beq.n	8006ac6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006ab2:	2208      	movs	r2, #8
 8006ab4:	4909      	ldr	r1, [pc, #36]	; (8006adc <Get_SerialNum+0x50>)
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 f814 	bl	8006ae4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006abc:	2204      	movs	r2, #4
 8006abe:	4908      	ldr	r1, [pc, #32]	; (8006ae0 <Get_SerialNum+0x54>)
 8006ac0:	68b8      	ldr	r0, [r7, #8]
 8006ac2:	f000 f80f 	bl	8006ae4 <IntToUnicode>
  }
}
 8006ac6:	bf00      	nop
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	1ffff7e8 	.word	0x1ffff7e8
 8006ad4:	1ffff7ec 	.word	0x1ffff7ec
 8006ad8:	1ffff7f0 	.word	0x1ffff7f0
 8006adc:	20000162 	.word	0x20000162
 8006ae0:	20000172 	.word	0x20000172

08006ae4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	4613      	mov	r3, r2
 8006af0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006af6:	2300      	movs	r3, #0
 8006af8:	75fb      	strb	r3, [r7, #23]
 8006afa:	e027      	b.n	8006b4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	0f1b      	lsrs	r3, r3, #28
 8006b00:	2b09      	cmp	r3, #9
 8006b02:	d80b      	bhi.n	8006b1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	0f1b      	lsrs	r3, r3, #28
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	4619      	mov	r1, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	440b      	add	r3, r1
 8006b14:	3230      	adds	r2, #48	; 0x30
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	e00a      	b.n	8006b32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	0f1b      	lsrs	r3, r3, #28
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4619      	mov	r1, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	440b      	add	r3, r1
 8006b2c:	3237      	adds	r2, #55	; 0x37
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	011b      	lsls	r3, r3, #4
 8006b36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006b38:	7dfb      	ldrb	r3, [r7, #23]
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	4413      	add	r3, r2
 8006b42:	2200      	movs	r2, #0
 8006b44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006b46:	7dfb      	ldrb	r3, [r7, #23]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	75fb      	strb	r3, [r7, #23]
 8006b4c:	7dfa      	ldrb	r2, [r7, #23]
 8006b4e:	79fb      	ldrb	r3, [r7, #7]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d3d3      	bcc.n	8006afc <IntToUnicode+0x18>
  }
}
 8006b54:	bf00      	nop
 8006b56:	371c      	adds	r7, #28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr
	...

08006b60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a11      	ldr	r2, [pc, #68]	; (8006bb4 <HAL_PCD_MspInit+0x54>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d11b      	bne.n	8006baa <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006b72:	4b11      	ldr	r3, [pc, #68]	; (8006bb8 <HAL_PCD_MspInit+0x58>)
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	4a10      	ldr	r2, [pc, #64]	; (8006bb8 <HAL_PCD_MspInit+0x58>)
 8006b78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b7c:	61d3      	str	r3, [r2, #28]
 8006b7e:	4b0e      	ldr	r3, [pc, #56]	; (8006bb8 <HAL_PCD_MspInit+0x58>)
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	2013      	movs	r0, #19
 8006b90:	f7fa fe97 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8006b94:	2013      	movs	r0, #19
 8006b96:	f7fa feb0 	bl	80018fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	2014      	movs	r0, #20
 8006ba0:	f7fa fe8f 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006ba4:	2014      	movs	r0, #20
 8006ba6:	f7fa fea8 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006baa:	bf00      	nop
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	40005c00 	.word	0x40005c00
 8006bb8:	40021000 	.word	0x40021000

08006bbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4610      	mov	r0, r2
 8006bd4:	f7fe fd6f 	bl	80056b6 <USBD_LL_SetupStage>
}
 8006bd8:	bf00      	nop
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006bf2:	78fb      	ldrb	r3, [r7, #3]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	015b      	lsls	r3, r3, #5
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	4619      	mov	r1, r3
 8006c04:	f7fe fda2 	bl	800574c <USBD_LL_DataOutStage>
}
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006c22:	78fb      	ldrb	r3, [r7, #3]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	015b      	lsls	r3, r3, #5
 8006c28:	4413      	add	r3, r2
 8006c2a:	333c      	adds	r3, #60	; 0x3c
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	78fb      	ldrb	r3, [r7, #3]
 8006c30:	4619      	mov	r1, r3
 8006c32:	f7fe fdfc 	bl	800582e <USBD_LL_DataInStage>
}
 8006c36:	bf00      	nop
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b082      	sub	sp, #8
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7fe ff0c 	bl	8005a6a <USBD_LL_SOF>
}
 8006c52:	bf00      	nop
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006c62:	2301      	movs	r3, #1
 8006c64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d001      	beq.n	8006c72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006c6e:	f7fa faff 	bl	8001270 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c78:	7bfa      	ldrb	r2, [r7, #15]
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe febc 	bl	80059fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7fe fe75 	bl	8005978 <USBD_LL_Reset>
}
 8006c8e:	bf00      	nop
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe feb6 	bl	8005a18 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d005      	beq.n	8006cc0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006cb4:	4b04      	ldr	r3, [pc, #16]	; (8006cc8 <HAL_PCD_SuspendCallback+0x30>)
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	4a03      	ldr	r2, [pc, #12]	; (8006cc8 <HAL_PCD_SuspendCallback+0x30>)
 8006cba:	f043 0306 	orr.w	r3, r3, #6
 8006cbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	e000ed00 	.word	0xe000ed00

08006ccc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fe feb0 	bl	8005a40 <USBD_LL_Resume>
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006cf0:	4a28      	ldr	r2, [pc, #160]	; (8006d94 <USBD_LL_Init+0xac>)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a26      	ldr	r2, [pc, #152]	; (8006d94 <USBD_LL_Init+0xac>)
 8006cfc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006d00:	4b24      	ldr	r3, [pc, #144]	; (8006d94 <USBD_LL_Init+0xac>)
 8006d02:	4a25      	ldr	r2, [pc, #148]	; (8006d98 <USBD_LL_Init+0xb0>)
 8006d04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006d06:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <USBD_LL_Init+0xac>)
 8006d08:	2208      	movs	r2, #8
 8006d0a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006d0c:	4b21      	ldr	r3, [pc, #132]	; (8006d94 <USBD_LL_Init+0xac>)
 8006d0e:	2202      	movs	r2, #2
 8006d10:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006d12:	4b20      	ldr	r3, [pc, #128]	; (8006d94 <USBD_LL_Init+0xac>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006d18:	4b1e      	ldr	r3, [pc, #120]	; (8006d94 <USBD_LL_Init+0xac>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006d1e:	4b1d      	ldr	r3, [pc, #116]	; (8006d94 <USBD_LL_Init+0xac>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006d24:	481b      	ldr	r0, [pc, #108]	; (8006d94 <USBD_LL_Init+0xac>)
 8006d26:	f7fa ff75 	bl	8001c14 <HAL_PCD_Init>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006d30:	f7fa fa9e 	bl	8001270 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d3a:	2318      	movs	r3, #24
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2100      	movs	r1, #0
 8006d40:	f7fb fe0e 	bl	8002960 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d4a:	2358      	movs	r3, #88	; 0x58
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2180      	movs	r1, #128	; 0x80
 8006d50:	f7fb fe06 	bl	8002960 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d5a:	23c0      	movs	r3, #192	; 0xc0
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2181      	movs	r1, #129	; 0x81
 8006d60:	f7fb fdfe 	bl	8002960 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d6a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006d6e:	2200      	movs	r2, #0
 8006d70:	2101      	movs	r1, #1
 8006d72:	f7fb fdf5 	bl	8002960 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d80:	2200      	movs	r2, #0
 8006d82:	2182      	movs	r1, #130	; 0x82
 8006d84:	f7fb fdec 	bl	8002960 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20001f50 	.word	0x20001f50
 8006d98:	40005c00 	.word	0x40005c00

08006d9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fb f80f 	bl	8001dd6 <HAL_PCD_Start>
 8006db8:	4603      	mov	r3, r0
 8006dba:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 f948 	bl	8007054 <USBD_Get_USB_Status>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	4608      	mov	r0, r1
 8006ddc:	4611      	mov	r1, r2
 8006dde:	461a      	mov	r2, r3
 8006de0:	4603      	mov	r3, r0
 8006de2:	70fb      	strb	r3, [r7, #3]
 8006de4:	460b      	mov	r3, r1
 8006de6:	70bb      	strb	r3, [r7, #2]
 8006de8:	4613      	mov	r3, r2
 8006dea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006dfa:	78bb      	ldrb	r3, [r7, #2]
 8006dfc:	883a      	ldrh	r2, [r7, #0]
 8006dfe:	78f9      	ldrb	r1, [r7, #3]
 8006e00:	f7fb f942 	bl	8002088 <HAL_PCD_EP_Open>
 8006e04:	4603      	mov	r3, r0
 8006e06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 f922 	bl	8007054 <USBD_Get_USB_Status>
 8006e10:	4603      	mov	r3, r0
 8006e12:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006e14:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b084      	sub	sp, #16
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e38:	78fa      	ldrb	r2, [r7, #3]
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fb f983 	bl	8002148 <HAL_PCD_EP_Close>
 8006e42:	4603      	mov	r3, r0
 8006e44:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 f903 	bl	8007054 <USBD_Get_USB_Status>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e76:	78fa      	ldrb	r2, [r7, #3]
 8006e78:	4611      	mov	r1, r2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fb fa2d 	bl	80022da <HAL_PCD_EP_SetStall>
 8006e80:	4603      	mov	r3, r0
 8006e82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 f8e4 	bl	8007054 <USBD_Get_USB_Status>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006e90:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eb4:	78fa      	ldrb	r2, [r7, #3]
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fb fa68 	bl	800238e <HAL_PCD_EP_ClrStall>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 f8c5 	bl	8007054 <USBD_Get_USB_Status>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006ece:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eea:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	da08      	bge.n	8006f06 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006ef4:	78fb      	ldrb	r3, [r7, #3]
 8006ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	015b      	lsls	r3, r3, #5
 8006efe:	4413      	add	r3, r2
 8006f00:	332a      	adds	r3, #42	; 0x2a
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	e008      	b.n	8006f18 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006f06:	78fb      	ldrb	r3, [r7, #3]
 8006f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	015b      	lsls	r3, r3, #5
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006f16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr

08006f22 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f3c:	78fa      	ldrb	r2, [r7, #3]
 8006f3e:	4611      	mov	r1, r2
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fb f87c 	bl	800203e <HAL_PCD_SetAddress>
 8006f46:	4603      	mov	r3, r0
 8006f48:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 f881 	bl	8007054 <USBD_Get_USB_Status>
 8006f52:	4603      	mov	r3, r0
 8006f54:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	607a      	str	r2, [r7, #4]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	72fb      	strb	r3, [r7, #11]
 8006f70:	4613      	mov	r3, r2
 8006f72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f82:	893b      	ldrh	r3, [r7, #8]
 8006f84:	7af9      	ldrb	r1, [r7, #11]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	f7fb f96e 	bl	8002268 <HAL_PCD_EP_Transmit>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 f85e 	bl	8007054 <USBD_Get_USB_Status>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006f9c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3718      	adds	r7, #24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b086      	sub	sp, #24
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	72fb      	strb	r3, [r7, #11]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006fc8:	893b      	ldrh	r3, [r7, #8]
 8006fca:	7af9      	ldrb	r1, [r7, #11]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	f7fb f8fd 	bl	80021cc <HAL_PCD_EP_Receive>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 f83b 	bl	8007054 <USBD_Get_USB_Status>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8006fe2:	7dbb      	ldrb	r3, [r7, #22]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3718      	adds	r7, #24
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ffe:	78fa      	ldrb	r2, [r7, #3]
 8007000:	4611      	mov	r1, r2
 8007002:	4618      	mov	r0, r3
 8007004:	f7fb f91c 	bl	8002240 <HAL_PCD_EP_GetRxCount>
 8007008:	4603      	mov	r3, r0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800701c:	4b02      	ldr	r3, [pc, #8]	; (8007028 <USBD_static_malloc+0x14>)
}
 800701e:	4618      	mov	r0, r3
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	bc80      	pop	{r7}
 8007026:	4770      	bx	lr
 8007028:	20000b5c 	.word	0x20000b5c

0800702c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]

}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	bc80      	pop	{r7}
 800703c:	4770      	bx	lr

0800703e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr

08007054 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	2b03      	cmp	r3, #3
 8007066:	d817      	bhi.n	8007098 <USBD_Get_USB_Status+0x44>
 8007068:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <USBD_Get_USB_Status+0x1c>)
 800706a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706e:	bf00      	nop
 8007070:	08007081 	.word	0x08007081
 8007074:	08007087 	.word	0x08007087
 8007078:	0800708d 	.word	0x0800708d
 800707c:	08007093 	.word	0x08007093
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	73fb      	strb	r3, [r7, #15]
    break;
 8007084:	e00b      	b.n	800709e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007086:	2302      	movs	r3, #2
 8007088:	73fb      	strb	r3, [r7, #15]
    break;
 800708a:	e008      	b.n	800709e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800708c:	2301      	movs	r3, #1
 800708e:	73fb      	strb	r3, [r7, #15]
    break;
 8007090:	e005      	b.n	800709e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007092:	2302      	movs	r3, #2
 8007094:	73fb      	strb	r3, [r7, #15]
    break;
 8007096:	e002      	b.n	800709e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007098:	2302      	movs	r3, #2
 800709a:	73fb      	strb	r3, [r7, #15]
    break;
 800709c:	bf00      	nop
  }
  return usb_status;
 800709e:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bc80      	pop	{r7}
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop

080070ac <__errno>:
 80070ac:	4b01      	ldr	r3, [pc, #4]	; (80070b4 <__errno+0x8>)
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	2000017c 	.word	0x2000017c

080070b8 <__libc_init_array>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	2500      	movs	r5, #0
 80070bc:	4e0c      	ldr	r6, [pc, #48]	; (80070f0 <__libc_init_array+0x38>)
 80070be:	4c0d      	ldr	r4, [pc, #52]	; (80070f4 <__libc_init_array+0x3c>)
 80070c0:	1ba4      	subs	r4, r4, r6
 80070c2:	10a4      	asrs	r4, r4, #2
 80070c4:	42a5      	cmp	r5, r4
 80070c6:	d109      	bne.n	80070dc <__libc_init_array+0x24>
 80070c8:	f005 fa96 	bl	800c5f8 <_init>
 80070cc:	2500      	movs	r5, #0
 80070ce:	4e0a      	ldr	r6, [pc, #40]	; (80070f8 <__libc_init_array+0x40>)
 80070d0:	4c0a      	ldr	r4, [pc, #40]	; (80070fc <__libc_init_array+0x44>)
 80070d2:	1ba4      	subs	r4, r4, r6
 80070d4:	10a4      	asrs	r4, r4, #2
 80070d6:	42a5      	cmp	r5, r4
 80070d8:	d105      	bne.n	80070e6 <__libc_init_array+0x2e>
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070e0:	4798      	blx	r3
 80070e2:	3501      	adds	r5, #1
 80070e4:	e7ee      	b.n	80070c4 <__libc_init_array+0xc>
 80070e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070ea:	4798      	blx	r3
 80070ec:	3501      	adds	r5, #1
 80070ee:	e7f2      	b.n	80070d6 <__libc_init_array+0x1e>
 80070f0:	0800c9fc 	.word	0x0800c9fc
 80070f4:	0800c9fc 	.word	0x0800c9fc
 80070f8:	0800c9fc 	.word	0x0800c9fc
 80070fc:	0800ca04 	.word	0x0800ca04

08007100 <__locale_mb_cur_max>:
 8007100:	4b04      	ldr	r3, [pc, #16]	; (8007114 <__locale_mb_cur_max+0x14>)
 8007102:	4a05      	ldr	r2, [pc, #20]	; (8007118 <__locale_mb_cur_max+0x18>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007108:	2b00      	cmp	r3, #0
 800710a:	bf08      	it	eq
 800710c:	4613      	moveq	r3, r2
 800710e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8007112:	4770      	bx	lr
 8007114:	2000017c 	.word	0x2000017c
 8007118:	200005a8 	.word	0x200005a8

0800711c <__ascii_mbtowc>:
 800711c:	b082      	sub	sp, #8
 800711e:	b901      	cbnz	r1, 8007122 <__ascii_mbtowc+0x6>
 8007120:	a901      	add	r1, sp, #4
 8007122:	b142      	cbz	r2, 8007136 <__ascii_mbtowc+0x1a>
 8007124:	b14b      	cbz	r3, 800713a <__ascii_mbtowc+0x1e>
 8007126:	7813      	ldrb	r3, [r2, #0]
 8007128:	600b      	str	r3, [r1, #0]
 800712a:	7812      	ldrb	r2, [r2, #0]
 800712c:	1c10      	adds	r0, r2, #0
 800712e:	bf18      	it	ne
 8007130:	2001      	movne	r0, #1
 8007132:	b002      	add	sp, #8
 8007134:	4770      	bx	lr
 8007136:	4610      	mov	r0, r2
 8007138:	e7fb      	b.n	8007132 <__ascii_mbtowc+0x16>
 800713a:	f06f 0001 	mvn.w	r0, #1
 800713e:	e7f8      	b.n	8007132 <__ascii_mbtowc+0x16>

08007140 <memcpy>:
 8007140:	b510      	push	{r4, lr}
 8007142:	1e43      	subs	r3, r0, #1
 8007144:	440a      	add	r2, r1
 8007146:	4291      	cmp	r1, r2
 8007148:	d100      	bne.n	800714c <memcpy+0xc>
 800714a:	bd10      	pop	{r4, pc}
 800714c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007150:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007154:	e7f7      	b.n	8007146 <memcpy+0x6>

08007156 <memset>:
 8007156:	4603      	mov	r3, r0
 8007158:	4402      	add	r2, r0
 800715a:	4293      	cmp	r3, r2
 800715c:	d100      	bne.n	8007160 <memset+0xa>
 800715e:	4770      	bx	lr
 8007160:	f803 1b01 	strb.w	r1, [r3], #1
 8007164:	e7f9      	b.n	800715a <memset+0x4>
	...

08007168 <printf>:
 8007168:	b40f      	push	{r0, r1, r2, r3}
 800716a:	b507      	push	{r0, r1, r2, lr}
 800716c:	4906      	ldr	r1, [pc, #24]	; (8007188 <printf+0x20>)
 800716e:	ab04      	add	r3, sp, #16
 8007170:	6808      	ldr	r0, [r1, #0]
 8007172:	f853 2b04 	ldr.w	r2, [r3], #4
 8007176:	6881      	ldr	r1, [r0, #8]
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	f001 fa8b 	bl	8008694 <_vfprintf_r>
 800717e:	b003      	add	sp, #12
 8007180:	f85d eb04 	ldr.w	lr, [sp], #4
 8007184:	b004      	add	sp, #16
 8007186:	4770      	bx	lr
 8007188:	2000017c 	.word	0x2000017c

0800718c <_puts_r>:
 800718c:	b530      	push	{r4, r5, lr}
 800718e:	4605      	mov	r5, r0
 8007190:	b089      	sub	sp, #36	; 0x24
 8007192:	4608      	mov	r0, r1
 8007194:	460c      	mov	r4, r1
 8007196:	f7f8 ffdb 	bl	8000150 <strlen>
 800719a:	4b1e      	ldr	r3, [pc, #120]	; (8007214 <_puts_r+0x88>)
 800719c:	e9cd 4004 	strd	r4, r0, [sp, #16]
 80071a0:	9306      	str	r3, [sp, #24]
 80071a2:	2301      	movs	r3, #1
 80071a4:	4418      	add	r0, r3
 80071a6:	9307      	str	r3, [sp, #28]
 80071a8:	ab04      	add	r3, sp, #16
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	2302      	movs	r3, #2
 80071ae:	9302      	str	r3, [sp, #8]
 80071b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80071b2:	9003      	str	r0, [sp, #12]
 80071b4:	68ac      	ldr	r4, [r5, #8]
 80071b6:	b913      	cbnz	r3, 80071be <_puts_r+0x32>
 80071b8:	4628      	mov	r0, r5
 80071ba:	f003 fcb1 	bl	800ab20 <__sinit>
 80071be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071c0:	07db      	lsls	r3, r3, #31
 80071c2:	d405      	bmi.n	80071d0 <_puts_r+0x44>
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	0598      	lsls	r0, r3, #22
 80071c8:	d402      	bmi.n	80071d0 <_puts_r+0x44>
 80071ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071cc:	f003 ff70 	bl	800b0b0 <__retarget_lock_acquire_recursive>
 80071d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071d4:	0499      	lsls	r1, r3, #18
 80071d6:	d406      	bmi.n	80071e6 <_puts_r+0x5a>
 80071d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80071dc:	81a3      	strh	r3, [r4, #12]
 80071de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071e4:	6663      	str	r3, [r4, #100]	; 0x64
 80071e6:	4628      	mov	r0, r5
 80071e8:	aa01      	add	r2, sp, #4
 80071ea:	4621      	mov	r1, r4
 80071ec:	f003 fde4 	bl	800adb8 <__sfvwrite_r>
 80071f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071f2:	2800      	cmp	r0, #0
 80071f4:	bf0c      	ite	eq
 80071f6:	250a      	moveq	r5, #10
 80071f8:	f04f 35ff 	movne.w	r5, #4294967295
 80071fc:	07da      	lsls	r2, r3, #31
 80071fe:	d405      	bmi.n	800720c <_puts_r+0x80>
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	059b      	lsls	r3, r3, #22
 8007204:	d402      	bmi.n	800720c <_puts_r+0x80>
 8007206:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007208:	f003 ff53 	bl	800b0b2 <__retarget_lock_release_recursive>
 800720c:	4628      	mov	r0, r5
 800720e:	b009      	add	sp, #36	; 0x24
 8007210:	bd30      	pop	{r4, r5, pc}
 8007212:	bf00      	nop
 8007214:	0800c76e 	.word	0x0800c76e

08007218 <puts>:
 8007218:	4b02      	ldr	r3, [pc, #8]	; (8007224 <puts+0xc>)
 800721a:	4601      	mov	r1, r0
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	f7ff bfb5 	b.w	800718c <_puts_r>
 8007222:	bf00      	nop
 8007224:	2000017c 	.word	0x2000017c

08007228 <sprintf>:
 8007228:	b40e      	push	{r1, r2, r3}
 800722a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800722e:	b500      	push	{lr}
 8007230:	b09c      	sub	sp, #112	; 0x70
 8007232:	ab1d      	add	r3, sp, #116	; 0x74
 8007234:	9002      	str	r0, [sp, #8]
 8007236:	9006      	str	r0, [sp, #24]
 8007238:	9107      	str	r1, [sp, #28]
 800723a:	9104      	str	r1, [sp, #16]
 800723c:	4808      	ldr	r0, [pc, #32]	; (8007260 <sprintf+0x38>)
 800723e:	4909      	ldr	r1, [pc, #36]	; (8007264 <sprintf+0x3c>)
 8007240:	f853 2b04 	ldr.w	r2, [r3], #4
 8007244:	9105      	str	r1, [sp, #20]
 8007246:	6800      	ldr	r0, [r0, #0]
 8007248:	a902      	add	r1, sp, #8
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	f000 f814 	bl	8007278 <_svfprintf_r>
 8007250:	2200      	movs	r2, #0
 8007252:	9b02      	ldr	r3, [sp, #8]
 8007254:	701a      	strb	r2, [r3, #0]
 8007256:	b01c      	add	sp, #112	; 0x70
 8007258:	f85d eb04 	ldr.w	lr, [sp], #4
 800725c:	b003      	add	sp, #12
 800725e:	4770      	bx	lr
 8007260:	2000017c 	.word	0x2000017c
 8007264:	ffff0208 	.word	0xffff0208

08007268 <strcpy>:
 8007268:	4603      	mov	r3, r0
 800726a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800726e:	f803 2b01 	strb.w	r2, [r3], #1
 8007272:	2a00      	cmp	r2, #0
 8007274:	d1f9      	bne.n	800726a <strcpy+0x2>
 8007276:	4770      	bx	lr

08007278 <_svfprintf_r>:
 8007278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727c:	b0d5      	sub	sp, #340	; 0x154
 800727e:	4689      	mov	r9, r1
 8007280:	4693      	mov	fp, r2
 8007282:	461e      	mov	r6, r3
 8007284:	9007      	str	r0, [sp, #28]
 8007286:	f003 ff03 	bl	800b090 <_localeconv_r>
 800728a:	6803      	ldr	r3, [r0, #0]
 800728c:	4618      	mov	r0, r3
 800728e:	931a      	str	r3, [sp, #104]	; 0x68
 8007290:	f7f8 ff5e 	bl	8000150 <strlen>
 8007294:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007298:	900f      	str	r0, [sp, #60]	; 0x3c
 800729a:	0618      	lsls	r0, r3, #24
 800729c:	d518      	bpl.n	80072d0 <_svfprintf_r+0x58>
 800729e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072a2:	b9ab      	cbnz	r3, 80072d0 <_svfprintf_r+0x58>
 80072a4:	2140      	movs	r1, #64	; 0x40
 80072a6:	9807      	ldr	r0, [sp, #28]
 80072a8:	f003 ff70 	bl	800b18c <_malloc_r>
 80072ac:	f8c9 0000 	str.w	r0, [r9]
 80072b0:	f8c9 0010 	str.w	r0, [r9, #16]
 80072b4:	b948      	cbnz	r0, 80072ca <_svfprintf_r+0x52>
 80072b6:	230c      	movs	r3, #12
 80072b8:	9a07      	ldr	r2, [sp, #28]
 80072ba:	6013      	str	r3, [r2, #0]
 80072bc:	f04f 33ff 	mov.w	r3, #4294967295
 80072c0:	9310      	str	r3, [sp, #64]	; 0x40
 80072c2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80072c4:	b055      	add	sp, #340	; 0x154
 80072c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ca:	2340      	movs	r3, #64	; 0x40
 80072cc:	f8c9 3014 	str.w	r3, [r9, #20]
 80072d0:	2300      	movs	r3, #0
 80072d2:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 80072d6:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 80072da:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 80072de:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 80072e2:	ac2b      	add	r4, sp, #172	; 0xac
 80072e4:	9428      	str	r4, [sp, #160]	; 0xa0
 80072e6:	9308      	str	r3, [sp, #32]
 80072e8:	930d      	str	r3, [sp, #52]	; 0x34
 80072ea:	9316      	str	r3, [sp, #88]	; 0x58
 80072ec:	931d      	str	r3, [sp, #116]	; 0x74
 80072ee:	9310      	str	r3, [sp, #64]	; 0x40
 80072f0:	465d      	mov	r5, fp
 80072f2:	462b      	mov	r3, r5
 80072f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072f8:	b112      	cbz	r2, 8007300 <_svfprintf_r+0x88>
 80072fa:	2a25      	cmp	r2, #37	; 0x25
 80072fc:	f040 80e4 	bne.w	80074c8 <_svfprintf_r+0x250>
 8007300:	ebb5 070b 	subs.w	r7, r5, fp
 8007304:	d00e      	beq.n	8007324 <_svfprintf_r+0xac>
 8007306:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007308:	e9c4 b700 	strd	fp, r7, [r4]
 800730c:	443b      	add	r3, r7
 800730e:	932a      	str	r3, [sp, #168]	; 0xa8
 8007310:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007312:	3301      	adds	r3, #1
 8007314:	2b07      	cmp	r3, #7
 8007316:	9329      	str	r3, [sp, #164]	; 0xa4
 8007318:	f300 80d8 	bgt.w	80074cc <_svfprintf_r+0x254>
 800731c:	3408      	adds	r4, #8
 800731e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007320:	443b      	add	r3, r7
 8007322:	9310      	str	r3, [sp, #64]	; 0x40
 8007324:	782b      	ldrb	r3, [r5, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	f001 81a4 	beq.w	8008674 <_svfprintf_r+0x13fc>
 800732c:	1c6b      	adds	r3, r5, #1
 800732e:	930e      	str	r3, [sp, #56]	; 0x38
 8007330:	2300      	movs	r3, #0
 8007332:	f04f 35ff 	mov.w	r5, #4294967295
 8007336:	469a      	mov	sl, r3
 8007338:	270a      	movs	r7, #10
 800733a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 800733e:	9311      	str	r3, [sp, #68]	; 0x44
 8007340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	930a      	str	r3, [sp, #40]	; 0x28
 8007346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007348:	3301      	adds	r3, #1
 800734a:	930e      	str	r3, [sp, #56]	; 0x38
 800734c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800734e:	3b20      	subs	r3, #32
 8007350:	2b5a      	cmp	r3, #90	; 0x5a
 8007352:	f200 8614 	bhi.w	8007f7e <_svfprintf_r+0xd06>
 8007356:	a201      	add	r2, pc, #4	; (adr r2, 800735c <_svfprintf_r+0xe4>)
 8007358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735c:	0800755f 	.word	0x0800755f
 8007360:	08007f7f 	.word	0x08007f7f
 8007364:	08007f7f 	.word	0x08007f7f
 8007368:	08007571 	.word	0x08007571
 800736c:	08007f7f 	.word	0x08007f7f
 8007370:	08007f7f 	.word	0x08007f7f
 8007374:	08007f7f 	.word	0x08007f7f
 8007378:	08007525 	.word	0x08007525
 800737c:	08007f7f 	.word	0x08007f7f
 8007380:	08007f7f 	.word	0x08007f7f
 8007384:	08007577 	.word	0x08007577
 8007388:	0800758d 	.word	0x0800758d
 800738c:	08007f7f 	.word	0x08007f7f
 8007390:	08007587 	.word	0x08007587
 8007394:	08007591 	.word	0x08007591
 8007398:	08007f7f 	.word	0x08007f7f
 800739c:	080075c3 	.word	0x080075c3
 80073a0:	080075c9 	.word	0x080075c9
 80073a4:	080075c9 	.word	0x080075c9
 80073a8:	080075c9 	.word	0x080075c9
 80073ac:	080075c9 	.word	0x080075c9
 80073b0:	080075c9 	.word	0x080075c9
 80073b4:	080075c9 	.word	0x080075c9
 80073b8:	080075c9 	.word	0x080075c9
 80073bc:	080075c9 	.word	0x080075c9
 80073c0:	080075c9 	.word	0x080075c9
 80073c4:	08007f7f 	.word	0x08007f7f
 80073c8:	08007f7f 	.word	0x08007f7f
 80073cc:	08007f7f 	.word	0x08007f7f
 80073d0:	08007f7f 	.word	0x08007f7f
 80073d4:	08007f7f 	.word	0x08007f7f
 80073d8:	08007f7f 	.word	0x08007f7f
 80073dc:	08007f7f 	.word	0x08007f7f
 80073e0:	080076b7 	.word	0x080076b7
 80073e4:	08007f7f 	.word	0x08007f7f
 80073e8:	08007623 	.word	0x08007623
 80073ec:	08007645 	.word	0x08007645
 80073f0:	080076b7 	.word	0x080076b7
 80073f4:	080076b7 	.word	0x080076b7
 80073f8:	080076b7 	.word	0x080076b7
 80073fc:	08007f7f 	.word	0x08007f7f
 8007400:	08007f7f 	.word	0x08007f7f
 8007404:	08007f7f 	.word	0x08007f7f
 8007408:	08007f7f 	.word	0x08007f7f
 800740c:	080075e9 	.word	0x080075e9
 8007410:	08007f7f 	.word	0x08007f7f
 8007414:	08007f7f 	.word	0x08007f7f
 8007418:	08007b85 	.word	0x08007b85
 800741c:	08007f7f 	.word	0x08007f7f
 8007420:	08007f7f 	.word	0x08007f7f
 8007424:	08007f7f 	.word	0x08007f7f
 8007428:	08007c11 	.word	0x08007c11
 800742c:	08007f7f 	.word	0x08007f7f
 8007430:	08007ded 	.word	0x08007ded
 8007434:	08007f7f 	.word	0x08007f7f
 8007438:	08007f7f 	.word	0x08007f7f
 800743c:	080074e5 	.word	0x080074e5
 8007440:	08007f7f 	.word	0x08007f7f
 8007444:	08007f7f 	.word	0x08007f7f
 8007448:	08007f7f 	.word	0x08007f7f
 800744c:	08007f7f 	.word	0x08007f7f
 8007450:	08007f7f 	.word	0x08007f7f
 8007454:	08007f7f 	.word	0x08007f7f
 8007458:	08007f7f 	.word	0x08007f7f
 800745c:	08007f7f 	.word	0x08007f7f
 8007460:	080076b7 	.word	0x080076b7
 8007464:	08007f7f 	.word	0x08007f7f
 8007468:	08007623 	.word	0x08007623
 800746c:	08007649 	.word	0x08007649
 8007470:	080076b7 	.word	0x080076b7
 8007474:	080076b7 	.word	0x080076b7
 8007478:	080076b7 	.word	0x080076b7
 800747c:	080075ef 	.word	0x080075ef
 8007480:	08007649 	.word	0x08007649
 8007484:	08007617 	.word	0x08007617
 8007488:	08007f7f 	.word	0x08007f7f
 800748c:	08007609 	.word	0x08007609
 8007490:	08007f7f 	.word	0x08007f7f
 8007494:	08007b3f 	.word	0x08007b3f
 8007498:	08007b89 	.word	0x08007b89
 800749c:	08007bf1 	.word	0x08007bf1
 80074a0:	08007617 	.word	0x08007617
 80074a4:	08007f7f 	.word	0x08007f7f
 80074a8:	08007c11 	.word	0x08007c11
 80074ac:	08007341 	.word	0x08007341
 80074b0:	08007df1 	.word	0x08007df1
 80074b4:	08007f7f 	.word	0x08007f7f
 80074b8:	08007f7f 	.word	0x08007f7f
 80074bc:	08007e2f 	.word	0x08007e2f
 80074c0:	08007f7f 	.word	0x08007f7f
 80074c4:	08007341 	.word	0x08007341
 80074c8:	461d      	mov	r5, r3
 80074ca:	e712      	b.n	80072f2 <_svfprintf_r+0x7a>
 80074cc:	aa28      	add	r2, sp, #160	; 0xa0
 80074ce:	4649      	mov	r1, r9
 80074d0:	9807      	ldr	r0, [sp, #28]
 80074d2:	f004 fdbd 	bl	800c050 <__ssprint_r>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f040 8157 	bne.w	800778a <_svfprintf_r+0x512>
 80074dc:	ac2b      	add	r4, sp, #172	; 0xac
 80074de:	e71e      	b.n	800731e <_svfprintf_r+0xa6>
 80074e0:	461e      	mov	r6, r3
 80074e2:	e72d      	b.n	8007340 <_svfprintf_r+0xc8>
 80074e4:	4bad      	ldr	r3, [pc, #692]	; (800779c <_svfprintf_r+0x524>)
 80074e6:	f01a 0f20 	tst.w	sl, #32
 80074ea:	931c      	str	r3, [sp, #112]	; 0x70
 80074ec:	f000 84a2 	beq.w	8007e34 <_svfprintf_r+0xbbc>
 80074f0:	3607      	adds	r6, #7
 80074f2:	f026 0607 	bic.w	r6, r6, #7
 80074f6:	f106 0308 	add.w	r3, r6, #8
 80074fa:	930c      	str	r3, [sp, #48]	; 0x30
 80074fc:	e9d6 6700 	ldrd	r6, r7, [r6]
 8007500:	f01a 0f01 	tst.w	sl, #1
 8007504:	d00a      	beq.n	800751c <_svfprintf_r+0x2a4>
 8007506:	ea56 0307 	orrs.w	r3, r6, r7
 800750a:	d007      	beq.n	800751c <_svfprintf_r+0x2a4>
 800750c:	2330      	movs	r3, #48	; 0x30
 800750e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8007512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007514:	f04a 0a02 	orr.w	sl, sl, #2
 8007518:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 800751c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8007520:	2302      	movs	r3, #2
 8007522:	e33f      	b.n	8007ba4 <_svfprintf_r+0x92c>
 8007524:	9807      	ldr	r0, [sp, #28]
 8007526:	f003 fdb3 	bl	800b090 <_localeconv_r>
 800752a:	6843      	ldr	r3, [r0, #4]
 800752c:	4618      	mov	r0, r3
 800752e:	931d      	str	r3, [sp, #116]	; 0x74
 8007530:	f7f8 fe0e 	bl	8000150 <strlen>
 8007534:	9016      	str	r0, [sp, #88]	; 0x58
 8007536:	9807      	ldr	r0, [sp, #28]
 8007538:	f003 fdaa 	bl	800b090 <_localeconv_r>
 800753c:	6883      	ldr	r3, [r0, #8]
 800753e:	930d      	str	r3, [sp, #52]	; 0x34
 8007540:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007542:	2b00      	cmp	r3, #0
 8007544:	f43f aefc 	beq.w	8007340 <_svfprintf_r+0xc8>
 8007548:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800754a:	2b00      	cmp	r3, #0
 800754c:	f43f aef8 	beq.w	8007340 <_svfprintf_r+0xc8>
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	f43f aef4 	beq.w	8007340 <_svfprintf_r+0xc8>
 8007558:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800755c:	e6f0      	b.n	8007340 <_svfprintf_r+0xc8>
 800755e:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8007562:	2b00      	cmp	r3, #0
 8007564:	f47f aeec 	bne.w	8007340 <_svfprintf_r+0xc8>
 8007568:	2320      	movs	r3, #32
 800756a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 800756e:	e6e7      	b.n	8007340 <_svfprintf_r+0xc8>
 8007570:	f04a 0a01 	orr.w	sl, sl, #1
 8007574:	e6e4      	b.n	8007340 <_svfprintf_r+0xc8>
 8007576:	6832      	ldr	r2, [r6, #0]
 8007578:	1d33      	adds	r3, r6, #4
 800757a:	2a00      	cmp	r2, #0
 800757c:	9211      	str	r2, [sp, #68]	; 0x44
 800757e:	daaf      	bge.n	80074e0 <_svfprintf_r+0x268>
 8007580:	461e      	mov	r6, r3
 8007582:	4252      	negs	r2, r2
 8007584:	9211      	str	r2, [sp, #68]	; 0x44
 8007586:	f04a 0a04 	orr.w	sl, sl, #4
 800758a:	e6d9      	b.n	8007340 <_svfprintf_r+0xc8>
 800758c:	232b      	movs	r3, #43	; 0x2b
 800758e:	e7ec      	b.n	800756a <_svfprintf_r+0x2f2>
 8007590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007594:	7812      	ldrb	r2, [r2, #0]
 8007596:	3301      	adds	r3, #1
 8007598:	2a2a      	cmp	r2, #42	; 0x2a
 800759a:	920a      	str	r2, [sp, #40]	; 0x28
 800759c:	d10f      	bne.n	80075be <_svfprintf_r+0x346>
 800759e:	6835      	ldr	r5, [r6, #0]
 80075a0:	930e      	str	r3, [sp, #56]	; 0x38
 80075a2:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80075a6:	3604      	adds	r6, #4
 80075a8:	e6ca      	b.n	8007340 <_svfprintf_r+0xc8>
 80075aa:	fb07 2505 	mla	r5, r7, r5, r2
 80075ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075b2:	920a      	str	r2, [sp, #40]	; 0x28
 80075b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075b6:	3a30      	subs	r2, #48	; 0x30
 80075b8:	2a09      	cmp	r2, #9
 80075ba:	d9f6      	bls.n	80075aa <_svfprintf_r+0x332>
 80075bc:	e6c5      	b.n	800734a <_svfprintf_r+0xd2>
 80075be:	2500      	movs	r5, #0
 80075c0:	e7f8      	b.n	80075b4 <_svfprintf_r+0x33c>
 80075c2:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80075c6:	e6bb      	b.n	8007340 <_svfprintf_r+0xc8>
 80075c8:	2200      	movs	r2, #0
 80075ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075cc:	9211      	str	r2, [sp, #68]	; 0x44
 80075ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80075d2:	3a30      	subs	r2, #48	; 0x30
 80075d4:	fb07 2201 	mla	r2, r7, r1, r2
 80075d8:	9211      	str	r2, [sp, #68]	; 0x44
 80075da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075de:	920a      	str	r2, [sp, #40]	; 0x28
 80075e0:	3a30      	subs	r2, #48	; 0x30
 80075e2:	2a09      	cmp	r2, #9
 80075e4:	d9f3      	bls.n	80075ce <_svfprintf_r+0x356>
 80075e6:	e6b0      	b.n	800734a <_svfprintf_r+0xd2>
 80075e8:	f04a 0a08 	orr.w	sl, sl, #8
 80075ec:	e6a8      	b.n	8007340 <_svfprintf_r+0xc8>
 80075ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	2b68      	cmp	r3, #104	; 0x68
 80075f4:	bf01      	itttt	eq
 80075f6:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 80075f8:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 80075fc:	3301      	addeq	r3, #1
 80075fe:	930e      	streq	r3, [sp, #56]	; 0x38
 8007600:	bf18      	it	ne
 8007602:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8007606:	e69b      	b.n	8007340 <_svfprintf_r+0xc8>
 8007608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2b6c      	cmp	r3, #108	; 0x6c
 800760e:	d105      	bne.n	800761c <_svfprintf_r+0x3a4>
 8007610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007612:	3301      	adds	r3, #1
 8007614:	930e      	str	r3, [sp, #56]	; 0x38
 8007616:	f04a 0a20 	orr.w	sl, sl, #32
 800761a:	e691      	b.n	8007340 <_svfprintf_r+0xc8>
 800761c:	f04a 0a10 	orr.w	sl, sl, #16
 8007620:	e68e      	b.n	8007340 <_svfprintf_r+0xc8>
 8007622:	2000      	movs	r0, #0
 8007624:	1d33      	adds	r3, r6, #4
 8007626:	930c      	str	r3, [sp, #48]	; 0x30
 8007628:	6833      	ldr	r3, [r6, #0]
 800762a:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 800762e:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8007632:	4680      	mov	r8, r0
 8007634:	2501      	movs	r5, #1
 8007636:	9012      	str	r0, [sp, #72]	; 0x48
 8007638:	4607      	mov	r7, r0
 800763a:	900b      	str	r0, [sp, #44]	; 0x2c
 800763c:	4606      	mov	r6, r0
 800763e:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 8007642:	e2fe      	b.n	8007c42 <_svfprintf_r+0x9ca>
 8007644:	f04a 0a10 	orr.w	sl, sl, #16
 8007648:	f01a 0f20 	tst.w	sl, #32
 800764c:	d020      	beq.n	8007690 <_svfprintf_r+0x418>
 800764e:	3607      	adds	r6, #7
 8007650:	f026 0607 	bic.w	r6, r6, #7
 8007654:	f106 0308 	add.w	r3, r6, #8
 8007658:	930c      	str	r3, [sp, #48]	; 0x30
 800765a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800765e:	2e00      	cmp	r6, #0
 8007660:	f177 0300 	sbcs.w	r3, r7, #0
 8007664:	da05      	bge.n	8007672 <_svfprintf_r+0x3fa>
 8007666:	232d      	movs	r3, #45	; 0x2d
 8007668:	4276      	negs	r6, r6
 800766a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800766e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8007672:	1c6b      	adds	r3, r5, #1
 8007674:	f040 83f1 	bne.w	8007e5a <_svfprintf_r+0xbe2>
 8007678:	2f00      	cmp	r7, #0
 800767a:	bf08      	it	eq
 800767c:	2e0a      	cmpeq	r6, #10
 800767e:	f080 8423 	bcs.w	8007ec8 <_svfprintf_r+0xc50>
 8007682:	3630      	adds	r6, #48	; 0x30
 8007684:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 8007688:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 800768c:	f000 bc08 	b.w	8007ea0 <_svfprintf_r+0xc28>
 8007690:	1d33      	adds	r3, r6, #4
 8007692:	f01a 0f10 	tst.w	sl, #16
 8007696:	930c      	str	r3, [sp, #48]	; 0x30
 8007698:	d002      	beq.n	80076a0 <_svfprintf_r+0x428>
 800769a:	6836      	ldr	r6, [r6, #0]
 800769c:	17f7      	asrs	r7, r6, #31
 800769e:	e7de      	b.n	800765e <_svfprintf_r+0x3e6>
 80076a0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80076a4:	6836      	ldr	r6, [r6, #0]
 80076a6:	d001      	beq.n	80076ac <_svfprintf_r+0x434>
 80076a8:	b236      	sxth	r6, r6
 80076aa:	e7f7      	b.n	800769c <_svfprintf_r+0x424>
 80076ac:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80076b0:	bf18      	it	ne
 80076b2:	b276      	sxtbne	r6, r6
 80076b4:	e7f2      	b.n	800769c <_svfprintf_r+0x424>
 80076b6:	3607      	adds	r6, #7
 80076b8:	f026 0607 	bic.w	r6, r6, #7
 80076bc:	f106 0308 	add.w	r3, r6, #8
 80076c0:	930c      	str	r3, [sp, #48]	; 0x30
 80076c2:	6833      	ldr	r3, [r6, #0]
 80076c4:	f04f 32ff 	mov.w	r2, #4294967295
 80076c8:	9314      	str	r3, [sp, #80]	; 0x50
 80076ca:	6873      	ldr	r3, [r6, #4]
 80076cc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80076ce:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80076d2:	9313      	str	r3, [sp, #76]	; 0x4c
 80076d4:	4638      	mov	r0, r7
 80076d6:	4b32      	ldr	r3, [pc, #200]	; (80077a0 <_svfprintf_r+0x528>)
 80076d8:	4631      	mov	r1, r6
 80076da:	f7f9 f997 	bl	8000a0c <__aeabi_dcmpun>
 80076de:	bb00      	cbnz	r0, 8007722 <_svfprintf_r+0x4aa>
 80076e0:	f04f 32ff 	mov.w	r2, #4294967295
 80076e4:	4b2e      	ldr	r3, [pc, #184]	; (80077a0 <_svfprintf_r+0x528>)
 80076e6:	4638      	mov	r0, r7
 80076e8:	4631      	mov	r1, r6
 80076ea:	f7f9 f971 	bl	80009d0 <__aeabi_dcmple>
 80076ee:	b9c0      	cbnz	r0, 8007722 <_svfprintf_r+0x4aa>
 80076f0:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80076f4:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 80076f8:	f7f9 f960 	bl	80009bc <__aeabi_dcmplt>
 80076fc:	b110      	cbz	r0, 8007704 <_svfprintf_r+0x48c>
 80076fe:	232d      	movs	r3, #45	; 0x2d
 8007700:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8007704:	4a27      	ldr	r2, [pc, #156]	; (80077a4 <_svfprintf_r+0x52c>)
 8007706:	4b28      	ldr	r3, [pc, #160]	; (80077a8 <_svfprintf_r+0x530>)
 8007708:	990a      	ldr	r1, [sp, #40]	; 0x28
 800770a:	f04f 0800 	mov.w	r8, #0
 800770e:	2947      	cmp	r1, #71	; 0x47
 8007710:	bfcc      	ite	gt
 8007712:	4693      	movgt	fp, r2
 8007714:	469b      	movle	fp, r3
 8007716:	2503      	movs	r5, #3
 8007718:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800771c:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8007720:	e3c4      	b.n	8007eac <_svfprintf_r+0xc34>
 8007722:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8007726:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 800772a:	f7f9 f96f 	bl	8000a0c <__aeabi_dcmpun>
 800772e:	4680      	mov	r8, r0
 8007730:	b140      	cbz	r0, 8007744 <_svfprintf_r+0x4cc>
 8007732:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007734:	4a1d      	ldr	r2, [pc, #116]	; (80077ac <_svfprintf_r+0x534>)
 8007736:	2b00      	cmp	r3, #0
 8007738:	bfbc      	itt	lt
 800773a:	232d      	movlt	r3, #45	; 0x2d
 800773c:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
 8007740:	4b1b      	ldr	r3, [pc, #108]	; (80077b0 <_svfprintf_r+0x538>)
 8007742:	e7e1      	b.n	8007708 <_svfprintf_r+0x490>
 8007744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007746:	f023 0320 	bic.w	r3, r3, #32
 800774a:	2b41      	cmp	r3, #65	; 0x41
 800774c:	930b      	str	r3, [sp, #44]	; 0x2c
 800774e:	d131      	bne.n	80077b4 <_svfprintf_r+0x53c>
 8007750:	2330      	movs	r3, #48	; 0x30
 8007752:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8007756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007758:	f04a 0a02 	orr.w	sl, sl, #2
 800775c:	2b61      	cmp	r3, #97	; 0x61
 800775e:	bf14      	ite	ne
 8007760:	2358      	movne	r3, #88	; 0x58
 8007762:	2378      	moveq	r3, #120	; 0x78
 8007764:	2d63      	cmp	r5, #99	; 0x63
 8007766:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 800776a:	f340 8111 	ble.w	8007990 <_svfprintf_r+0x718>
 800776e:	1c69      	adds	r1, r5, #1
 8007770:	9807      	ldr	r0, [sp, #28]
 8007772:	f003 fd0b 	bl	800b18c <_malloc_r>
 8007776:	4683      	mov	fp, r0
 8007778:	2800      	cmp	r0, #0
 800777a:	f040 810c 	bne.w	8007996 <_svfprintf_r+0x71e>
 800777e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007786:	f8a9 300c 	strh.w	r3, [r9, #12]
 800778a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800778e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007792:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007794:	bf18      	it	ne
 8007796:	f04f 33ff 	movne.w	r3, #4294967295
 800779a:	e591      	b.n	80072c0 <_svfprintf_r+0x48>
 800779c:	0800c791 	.word	0x0800c791
 80077a0:	7fefffff 	.word	0x7fefffff
 80077a4:	0800c774 	.word	0x0800c774
 80077a8:	0800c770 	.word	0x0800c770
 80077ac:	0800c77c 	.word	0x0800c77c
 80077b0:	0800c778 	.word	0x0800c778
 80077b4:	1c69      	adds	r1, r5, #1
 80077b6:	f000 80f0 	beq.w	800799a <_svfprintf_r+0x722>
 80077ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077bc:	2b47      	cmp	r3, #71	; 0x47
 80077be:	d102      	bne.n	80077c6 <_svfprintf_r+0x54e>
 80077c0:	2d00      	cmp	r5, #0
 80077c2:	f000 80ec 	beq.w	800799e <_svfprintf_r+0x726>
 80077c6:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 80077ca:	9315      	str	r3, [sp, #84]	; 0x54
 80077cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077ce:	1e1e      	subs	r6, r3, #0
 80077d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077d2:	9308      	str	r3, [sp, #32]
 80077d4:	bfb7      	itett	lt
 80077d6:	4633      	movlt	r3, r6
 80077d8:	2300      	movge	r3, #0
 80077da:	f103 4600 	addlt.w	r6, r3, #2147483648	; 0x80000000
 80077de:	232d      	movlt	r3, #45	; 0x2d
 80077e0:	9319      	str	r3, [sp, #100]	; 0x64
 80077e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077e4:	2b41      	cmp	r3, #65	; 0x41
 80077e6:	f040 80eb 	bne.w	80079c0 <_svfprintf_r+0x748>
 80077ea:	aa22      	add	r2, sp, #136	; 0x88
 80077ec:	9808      	ldr	r0, [sp, #32]
 80077ee:	4631      	mov	r1, r6
 80077f0:	f004 fb94 	bl	800bf1c <frexp>
 80077f4:	2200      	movs	r2, #0
 80077f6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80077fa:	f7f8 fe6d 	bl	80004d8 <__aeabi_dmul>
 80077fe:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007802:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007806:	f7f9 f8cf 	bl	80009a8 <__aeabi_dcmpeq>
 800780a:	b108      	cbz	r0, 8007810 <_svfprintf_r+0x598>
 800780c:	2301      	movs	r3, #1
 800780e:	9322      	str	r3, [sp, #136]	; 0x88
 8007810:	4fac      	ldr	r7, [pc, #688]	; (8007ac4 <_svfprintf_r+0x84c>)
 8007812:	4bad      	ldr	r3, [pc, #692]	; (8007ac8 <_svfprintf_r+0x850>)
 8007814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007816:	465e      	mov	r6, fp
 8007818:	2a61      	cmp	r2, #97	; 0x61
 800781a:	bf08      	it	eq
 800781c:	461f      	moveq	r7, r3
 800781e:	9712      	str	r7, [sp, #72]	; 0x48
 8007820:	1e6f      	subs	r7, r5, #1
 8007822:	2200      	movs	r2, #0
 8007824:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007828:	4ba8      	ldr	r3, [pc, #672]	; (8007acc <_svfprintf_r+0x854>)
 800782a:	f7f8 fe55 	bl	80004d8 <__aeabi_dmul>
 800782e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007832:	f7f9 f901 	bl	8000a38 <__aeabi_d2iz>
 8007836:	901e      	str	r0, [sp, #120]	; 0x78
 8007838:	f7f8 fde4 	bl	8000404 <__aeabi_i2d>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007844:	f7f8 fc90 	bl	8000168 <__aeabi_dsub>
 8007848:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800784a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800784c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007850:	5c9b      	ldrb	r3, [r3, r2]
 8007852:	1c7a      	adds	r2, r7, #1
 8007854:	f806 3b01 	strb.w	r3, [r6], #1
 8007858:	971f      	str	r7, [sp, #124]	; 0x7c
 800785a:	d006      	beq.n	800786a <_svfprintf_r+0x5f2>
 800785c:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007860:	3f01      	subs	r7, #1
 8007862:	f7f9 f8a1 	bl	80009a8 <__aeabi_dcmpeq>
 8007866:	2800      	cmp	r0, #0
 8007868:	d0db      	beq.n	8007822 <_svfprintf_r+0x5aa>
 800786a:	2200      	movs	r2, #0
 800786c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007870:	4b97      	ldr	r3, [pc, #604]	; (8007ad0 <_svfprintf_r+0x858>)
 8007872:	f7f9 f8c1 	bl	80009f8 <__aeabi_dcmpgt>
 8007876:	b960      	cbnz	r0, 8007892 <_svfprintf_r+0x61a>
 8007878:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800787c:	2200      	movs	r2, #0
 800787e:	4b94      	ldr	r3, [pc, #592]	; (8007ad0 <_svfprintf_r+0x858>)
 8007880:	f7f9 f892 	bl	80009a8 <__aeabi_dcmpeq>
 8007884:	2800      	cmp	r0, #0
 8007886:	f000 8096 	beq.w	80079b6 <_svfprintf_r+0x73e>
 800788a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800788c:	07db      	lsls	r3, r3, #31
 800788e:	f140 8092 	bpl.w	80079b6 <_svfprintf_r+0x73e>
 8007892:	2030      	movs	r0, #48	; 0x30
 8007894:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007896:	9626      	str	r6, [sp, #152]	; 0x98
 8007898:	7bd9      	ldrb	r1, [r3, #15]
 800789a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800789c:	1e53      	subs	r3, r2, #1
 800789e:	9326      	str	r3, [sp, #152]	; 0x98
 80078a0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80078a4:	428b      	cmp	r3, r1
 80078a6:	d07d      	beq.n	80079a4 <_svfprintf_r+0x72c>
 80078a8:	2b39      	cmp	r3, #57	; 0x39
 80078aa:	bf0b      	itete	eq
 80078ac:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 80078ae:	3301      	addne	r3, #1
 80078b0:	7a9b      	ldrbeq	r3, [r3, #10]
 80078b2:	b2db      	uxtbne	r3, r3
 80078b4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80078b8:	4633      	mov	r3, r6
 80078ba:	eba3 030b 	sub.w	r3, r3, fp
 80078be:	9308      	str	r3, [sp, #32]
 80078c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078c2:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80078c4:	2b47      	cmp	r3, #71	; 0x47
 80078c6:	f040 80c7 	bne.w	8007a58 <_svfprintf_r+0x7e0>
 80078ca:	1cf7      	adds	r7, r6, #3
 80078cc:	db02      	blt.n	80078d4 <_svfprintf_r+0x65c>
 80078ce:	42b5      	cmp	r5, r6
 80078d0:	f280 80ed 	bge.w	8007aae <_svfprintf_r+0x836>
 80078d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d6:	3b02      	subs	r3, #2
 80078d8:	930a      	str	r3, [sp, #40]	; 0x28
 80078da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078dc:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 80078e0:	f021 0120 	bic.w	r1, r1, #32
 80078e4:	2941      	cmp	r1, #65	; 0x41
 80078e6:	bf08      	it	eq
 80078e8:	320f      	addeq	r2, #15
 80078ea:	f106 33ff 	add.w	r3, r6, #4294967295
 80078ee:	bf06      	itte	eq
 80078f0:	b2d2      	uxtbeq	r2, r2
 80078f2:	2101      	moveq	r1, #1
 80078f4:	2100      	movne	r1, #0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 80078fc:	bfb4      	ite	lt
 80078fe:	222d      	movlt	r2, #45	; 0x2d
 8007900:	222b      	movge	r2, #43	; 0x2b
 8007902:	9322      	str	r3, [sp, #136]	; 0x88
 8007904:	bfb8      	it	lt
 8007906:	f1c6 0301 	rsblt	r3, r6, #1
 800790a:	2b09      	cmp	r3, #9
 800790c:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8007910:	f340 80b9 	ble.w	8007a86 <_svfprintf_r+0x80e>
 8007914:	250a      	movs	r5, #10
 8007916:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 800791a:	fb93 f0f5 	sdiv	r0, r3, r5
 800791e:	fb05 3310 	mls	r3, r5, r0, r3
 8007922:	2809      	cmp	r0, #9
 8007924:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8007928:	f802 3c01 	strb.w	r3, [r2, #-1]
 800792c:	f102 31ff 	add.w	r1, r2, #4294967295
 8007930:	4603      	mov	r3, r0
 8007932:	f300 80a1 	bgt.w	8007a78 <_svfprintf_r+0x800>
 8007936:	3330      	adds	r3, #48	; 0x30
 8007938:	f801 3c01 	strb.w	r3, [r1, #-1]
 800793c:	3a02      	subs	r2, #2
 800793e:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 8007942:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8007946:	4282      	cmp	r2, r0
 8007948:	4619      	mov	r1, r3
 800794a:	f0c0 8097 	bcc.w	8007a7c <_svfprintf_r+0x804>
 800794e:	9a08      	ldr	r2, [sp, #32]
 8007950:	ab24      	add	r3, sp, #144	; 0x90
 8007952:	1acb      	subs	r3, r1, r3
 8007954:	2a01      	cmp	r2, #1
 8007956:	931b      	str	r3, [sp, #108]	; 0x6c
 8007958:	eb03 0502 	add.w	r5, r3, r2
 800795c:	dc02      	bgt.n	8007964 <_svfprintf_r+0x6ec>
 800795e:	f01a 0f01 	tst.w	sl, #1
 8007962:	d001      	beq.n	8007968 <_svfprintf_r+0x6f0>
 8007964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007966:	441d      	add	r5, r3
 8007968:	2700      	movs	r7, #0
 800796a:	463e      	mov	r6, r7
 800796c:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8007970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007974:	9315      	str	r3, [sp, #84]	; 0x54
 8007976:	970b      	str	r7, [sp, #44]	; 0x2c
 8007978:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 830b 	beq.w	8007f96 <_svfprintf_r+0xd1e>
 8007980:	232d      	movs	r3, #45	; 0x2d
 8007982:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8007986:	2300      	movs	r3, #0
 8007988:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 800798c:	9312      	str	r3, [sp, #72]	; 0x48
 800798e:	e158      	b.n	8007c42 <_svfprintf_r+0x9ca>
 8007990:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 8007994:	e717      	b.n	80077c6 <_svfprintf_r+0x54e>
 8007996:	4680      	mov	r8, r0
 8007998:	e715      	b.n	80077c6 <_svfprintf_r+0x54e>
 800799a:	2506      	movs	r5, #6
 800799c:	e713      	b.n	80077c6 <_svfprintf_r+0x54e>
 800799e:	46a8      	mov	r8, r5
 80079a0:	2501      	movs	r5, #1
 80079a2:	e710      	b.n	80077c6 <_svfprintf_r+0x54e>
 80079a4:	f802 0c01 	strb.w	r0, [r2, #-1]
 80079a8:	e777      	b.n	800789a <_svfprintf_r+0x622>
 80079aa:	f803 1b01 	strb.w	r1, [r3], #1
 80079ae:	1af2      	subs	r2, r6, r3
 80079b0:	2a00      	cmp	r2, #0
 80079b2:	dafa      	bge.n	80079aa <_svfprintf_r+0x732>
 80079b4:	e781      	b.n	80078ba <_svfprintf_r+0x642>
 80079b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80079b8:	4633      	mov	r3, r6
 80079ba:	2130      	movs	r1, #48	; 0x30
 80079bc:	4416      	add	r6, r2
 80079be:	e7f6      	b.n	80079ae <_svfprintf_r+0x736>
 80079c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c2:	2b46      	cmp	r3, #70	; 0x46
 80079c4:	d004      	beq.n	80079d0 <_svfprintf_r+0x758>
 80079c6:	2b45      	cmp	r3, #69	; 0x45
 80079c8:	d140      	bne.n	8007a4c <_svfprintf_r+0x7d4>
 80079ca:	1c6f      	adds	r7, r5, #1
 80079cc:	2302      	movs	r3, #2
 80079ce:	e001      	b.n	80079d4 <_svfprintf_r+0x75c>
 80079d0:	462f      	mov	r7, r5
 80079d2:	2303      	movs	r3, #3
 80079d4:	aa26      	add	r2, sp, #152	; 0x98
 80079d6:	9204      	str	r2, [sp, #16]
 80079d8:	aa23      	add	r2, sp, #140	; 0x8c
 80079da:	9203      	str	r2, [sp, #12]
 80079dc:	aa22      	add	r2, sp, #136	; 0x88
 80079de:	e9cd 7201 	strd	r7, r2, [sp, #4]
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	9a08      	ldr	r2, [sp, #32]
 80079e6:	4633      	mov	r3, r6
 80079e8:	9807      	ldr	r0, [sp, #28]
 80079ea:	f002 f9fd 	bl	8009de8 <_dtoa_r>
 80079ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079f0:	4683      	mov	fp, r0
 80079f2:	2b47      	cmp	r3, #71	; 0x47
 80079f4:	d102      	bne.n	80079fc <_svfprintf_r+0x784>
 80079f6:	f01a 0f01 	tst.w	sl, #1
 80079fa:	d02b      	beq.n	8007a54 <_svfprintf_r+0x7dc>
 80079fc:	eb0b 0307 	add.w	r3, fp, r7
 8007a00:	9312      	str	r3, [sp, #72]	; 0x48
 8007a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a04:	2b46      	cmp	r3, #70	; 0x46
 8007a06:	d111      	bne.n	8007a2c <_svfprintf_r+0x7b4>
 8007a08:	f89b 3000 	ldrb.w	r3, [fp]
 8007a0c:	2b30      	cmp	r3, #48	; 0x30
 8007a0e:	d109      	bne.n	8007a24 <_svfprintf_r+0x7ac>
 8007a10:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007a14:	9808      	ldr	r0, [sp, #32]
 8007a16:	4631      	mov	r1, r6
 8007a18:	f7f8 ffc6 	bl	80009a8 <__aeabi_dcmpeq>
 8007a1c:	b910      	cbnz	r0, 8007a24 <_svfprintf_r+0x7ac>
 8007a1e:	f1c7 0701 	rsb	r7, r7, #1
 8007a22:	9722      	str	r7, [sp, #136]	; 0x88
 8007a24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a28:	441a      	add	r2, r3
 8007a2a:	9212      	str	r2, [sp, #72]	; 0x48
 8007a2c:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007a30:	9808      	ldr	r0, [sp, #32]
 8007a32:	4631      	mov	r1, r6
 8007a34:	f7f8 ffb8 	bl	80009a8 <__aeabi_dcmpeq>
 8007a38:	b950      	cbnz	r0, 8007a50 <_svfprintf_r+0x7d8>
 8007a3a:	2230      	movs	r2, #48	; 0x30
 8007a3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a3e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007a40:	4299      	cmp	r1, r3
 8007a42:	d907      	bls.n	8007a54 <_svfprintf_r+0x7dc>
 8007a44:	1c59      	adds	r1, r3, #1
 8007a46:	9126      	str	r1, [sp, #152]	; 0x98
 8007a48:	701a      	strb	r2, [r3, #0]
 8007a4a:	e7f7      	b.n	8007a3c <_svfprintf_r+0x7c4>
 8007a4c:	462f      	mov	r7, r5
 8007a4e:	e7bd      	b.n	80079cc <_svfprintf_r+0x754>
 8007a50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a52:	9326      	str	r3, [sp, #152]	; 0x98
 8007a54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a56:	e730      	b.n	80078ba <_svfprintf_r+0x642>
 8007a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a5a:	2b46      	cmp	r3, #70	; 0x46
 8007a5c:	f47f af3d 	bne.w	80078da <_svfprintf_r+0x662>
 8007a60:	2e00      	cmp	r6, #0
 8007a62:	dd1d      	ble.n	8007aa0 <_svfprintf_r+0x828>
 8007a64:	b915      	cbnz	r5, 8007a6c <_svfprintf_r+0x7f4>
 8007a66:	f01a 0f01 	tst.w	sl, #1
 8007a6a:	d03d      	beq.n	8007ae8 <_svfprintf_r+0x870>
 8007a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a6e:	18f3      	adds	r3, r6, r3
 8007a70:	441d      	add	r5, r3
 8007a72:	2366      	movs	r3, #102	; 0x66
 8007a74:	930a      	str	r3, [sp, #40]	; 0x28
 8007a76:	e03c      	b.n	8007af2 <_svfprintf_r+0x87a>
 8007a78:	460a      	mov	r2, r1
 8007a7a:	e74e      	b.n	800791a <_svfprintf_r+0x6a2>
 8007a7c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007a80:	f803 1b01 	strb.w	r1, [r3], #1
 8007a84:	e75f      	b.n	8007946 <_svfprintf_r+0x6ce>
 8007a86:	b941      	cbnz	r1, 8007a9a <_svfprintf_r+0x822>
 8007a88:	2230      	movs	r2, #48	; 0x30
 8007a8a:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 8007a8e:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 8007a92:	3330      	adds	r3, #48	; 0x30
 8007a94:	1c51      	adds	r1, r2, #1
 8007a96:	7013      	strb	r3, [r2, #0]
 8007a98:	e759      	b.n	800794e <_svfprintf_r+0x6d6>
 8007a9a:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 8007a9e:	e7f8      	b.n	8007a92 <_svfprintf_r+0x81a>
 8007aa0:	b915      	cbnz	r5, 8007aa8 <_svfprintf_r+0x830>
 8007aa2:	f01a 0f01 	tst.w	sl, #1
 8007aa6:	d021      	beq.n	8007aec <_svfprintf_r+0x874>
 8007aa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aaa:	3301      	adds	r3, #1
 8007aac:	e7e0      	b.n	8007a70 <_svfprintf_r+0x7f8>
 8007aae:	9b08      	ldr	r3, [sp, #32]
 8007ab0:	42b3      	cmp	r3, r6
 8007ab2:	dc0f      	bgt.n	8007ad4 <_svfprintf_r+0x85c>
 8007ab4:	f01a 0f01 	tst.w	sl, #1
 8007ab8:	d02e      	beq.n	8007b18 <_svfprintf_r+0x8a0>
 8007aba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007abc:	18f5      	adds	r5, r6, r3
 8007abe:	2367      	movs	r3, #103	; 0x67
 8007ac0:	e7d8      	b.n	8007a74 <_svfprintf_r+0x7fc>
 8007ac2:	bf00      	nop
 8007ac4:	0800c791 	.word	0x0800c791
 8007ac8:	0800c780 	.word	0x0800c780
 8007acc:	40300000 	.word	0x40300000
 8007ad0:	3fe00000 	.word	0x3fe00000
 8007ad4:	9b08      	ldr	r3, [sp, #32]
 8007ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ad8:	2e00      	cmp	r6, #0
 8007ada:	eb03 0502 	add.w	r5, r3, r2
 8007ade:	dcee      	bgt.n	8007abe <_svfprintf_r+0x846>
 8007ae0:	f1c6 0301 	rsb	r3, r6, #1
 8007ae4:	441d      	add	r5, r3
 8007ae6:	e7ea      	b.n	8007abe <_svfprintf_r+0x846>
 8007ae8:	4635      	mov	r5, r6
 8007aea:	e7c2      	b.n	8007a72 <_svfprintf_r+0x7fa>
 8007aec:	2366      	movs	r3, #102	; 0x66
 8007aee:	2501      	movs	r5, #1
 8007af0:	930a      	str	r3, [sp, #40]	; 0x28
 8007af2:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8007af6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007af8:	d01f      	beq.n	8007b3a <_svfprintf_r+0x8c2>
 8007afa:	2700      	movs	r7, #0
 8007afc:	2e00      	cmp	r6, #0
 8007afe:	970b      	str	r7, [sp, #44]	; 0x2c
 8007b00:	f77f af3a 	ble.w	8007978 <_svfprintf_r+0x700>
 8007b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	2bff      	cmp	r3, #255	; 0xff
 8007b0a:	d107      	bne.n	8007b1c <_svfprintf_r+0x8a4>
 8007b0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007b10:	443b      	add	r3, r7
 8007b12:	fb02 5503 	mla	r5, r2, r3, r5
 8007b16:	e72f      	b.n	8007978 <_svfprintf_r+0x700>
 8007b18:	4635      	mov	r5, r6
 8007b1a:	e7d0      	b.n	8007abe <_svfprintf_r+0x846>
 8007b1c:	42b3      	cmp	r3, r6
 8007b1e:	daf5      	bge.n	8007b0c <_svfprintf_r+0x894>
 8007b20:	1af6      	subs	r6, r6, r3
 8007b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b24:	785b      	ldrb	r3, [r3, #1]
 8007b26:	b133      	cbz	r3, 8007b36 <_svfprintf_r+0x8be>
 8007b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b30:	3301      	adds	r3, #1
 8007b32:	930d      	str	r3, [sp, #52]	; 0x34
 8007b34:	e7e6      	b.n	8007b04 <_svfprintf_r+0x88c>
 8007b36:	3701      	adds	r7, #1
 8007b38:	e7e4      	b.n	8007b04 <_svfprintf_r+0x88c>
 8007b3a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007b3c:	e71c      	b.n	8007978 <_svfprintf_r+0x700>
 8007b3e:	4632      	mov	r2, r6
 8007b40:	f852 3b04 	ldr.w	r3, [r2], #4
 8007b44:	f01a 0f20 	tst.w	sl, #32
 8007b48:	920c      	str	r2, [sp, #48]	; 0x30
 8007b4a:	d009      	beq.n	8007b60 <_svfprintf_r+0x8e8>
 8007b4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b4e:	4610      	mov	r0, r2
 8007b50:	17d1      	asrs	r1, r2, #31
 8007b52:	e9c3 0100 	strd	r0, r1, [r3]
 8007b56:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007b58:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8007b5c:	f7ff bbc8 	b.w	80072f0 <_svfprintf_r+0x78>
 8007b60:	f01a 0f10 	tst.w	sl, #16
 8007b64:	d002      	beq.n	8007b6c <_svfprintf_r+0x8f4>
 8007b66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	e7f4      	b.n	8007b56 <_svfprintf_r+0x8de>
 8007b6c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007b70:	d002      	beq.n	8007b78 <_svfprintf_r+0x900>
 8007b72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b74:	801a      	strh	r2, [r3, #0]
 8007b76:	e7ee      	b.n	8007b56 <_svfprintf_r+0x8de>
 8007b78:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007b7c:	d0f3      	beq.n	8007b66 <_svfprintf_r+0x8ee>
 8007b7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b80:	701a      	strb	r2, [r3, #0]
 8007b82:	e7e8      	b.n	8007b56 <_svfprintf_r+0x8de>
 8007b84:	f04a 0a10 	orr.w	sl, sl, #16
 8007b88:	f01a 0f20 	tst.w	sl, #32
 8007b8c:	d01e      	beq.n	8007bcc <_svfprintf_r+0x954>
 8007b8e:	3607      	adds	r6, #7
 8007b90:	f026 0607 	bic.w	r6, r6, #7
 8007b94:	f106 0308 	add.w	r3, r6, #8
 8007b98:	930c      	str	r3, [sp, #48]	; 0x30
 8007b9a:	e9d6 6700 	ldrd	r6, r7, [r6]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	1c69      	adds	r1, r5, #1
 8007ba8:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8007bac:	f000 8158 	beq.w	8007e60 <_svfprintf_r+0xbe8>
 8007bb0:	4652      	mov	r2, sl
 8007bb2:	ea56 0107 	orrs.w	r1, r6, r7
 8007bb6:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8007bba:	f040 8151 	bne.w	8007e60 <_svfprintf_r+0xbe8>
 8007bbe:	2d00      	cmp	r5, #0
 8007bc0:	f000 81d3 	beq.w	8007f6a <_svfprintf_r+0xcf2>
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	f040 814e 	bne.w	8007e66 <_svfprintf_r+0xbee>
 8007bca:	e55a      	b.n	8007682 <_svfprintf_r+0x40a>
 8007bcc:	1d33      	adds	r3, r6, #4
 8007bce:	f01a 0f10 	tst.w	sl, #16
 8007bd2:	930c      	str	r3, [sp, #48]	; 0x30
 8007bd4:	d001      	beq.n	8007bda <_svfprintf_r+0x962>
 8007bd6:	6836      	ldr	r6, [r6, #0]
 8007bd8:	e003      	b.n	8007be2 <_svfprintf_r+0x96a>
 8007bda:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007bde:	d002      	beq.n	8007be6 <_svfprintf_r+0x96e>
 8007be0:	8836      	ldrh	r6, [r6, #0]
 8007be2:	2700      	movs	r7, #0
 8007be4:	e7db      	b.n	8007b9e <_svfprintf_r+0x926>
 8007be6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007bea:	d0f4      	beq.n	8007bd6 <_svfprintf_r+0x95e>
 8007bec:	7836      	ldrb	r6, [r6, #0]
 8007bee:	e7f8      	b.n	8007be2 <_svfprintf_r+0x96a>
 8007bf0:	1d33      	adds	r3, r6, #4
 8007bf2:	930c      	str	r3, [sp, #48]	; 0x30
 8007bf4:	f647 0330 	movw	r3, #30768	; 0x7830
 8007bf8:	2278      	movs	r2, #120	; 0x78
 8007bfa:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 8007bfe:	4baf      	ldr	r3, [pc, #700]	; (8007ebc <_svfprintf_r+0xc44>)
 8007c00:	6836      	ldr	r6, [r6, #0]
 8007c02:	931c      	str	r3, [sp, #112]	; 0x70
 8007c04:	2700      	movs	r7, #0
 8007c06:	f04a 0a02 	orr.w	sl, sl, #2
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	920a      	str	r2, [sp, #40]	; 0x28
 8007c0e:	e7c9      	b.n	8007ba4 <_svfprintf_r+0x92c>
 8007c10:	1d33      	adds	r3, r6, #4
 8007c12:	f8d6 b000 	ldr.w	fp, [r6]
 8007c16:	2600      	movs	r6, #0
 8007c18:	1c68      	adds	r0, r5, #1
 8007c1a:	930c      	str	r3, [sp, #48]	; 0x30
 8007c1c:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 8007c20:	f000 80de 	beq.w	8007de0 <_svfprintf_r+0xb68>
 8007c24:	462a      	mov	r2, r5
 8007c26:	4631      	mov	r1, r6
 8007c28:	4658      	mov	r0, fp
 8007c2a:	f003 fce5 	bl	800b5f8 <memchr>
 8007c2e:	4680      	mov	r8, r0
 8007c30:	2800      	cmp	r0, #0
 8007c32:	f43f ad73 	beq.w	800771c <_svfprintf_r+0x4a4>
 8007c36:	46b0      	mov	r8, r6
 8007c38:	4637      	mov	r7, r6
 8007c3a:	eba0 050b 	sub.w	r5, r0, fp
 8007c3e:	9612      	str	r6, [sp, #72]	; 0x48
 8007c40:	960b      	str	r6, [sp, #44]	; 0x2c
 8007c42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c44:	42ab      	cmp	r3, r5
 8007c46:	bfb8      	it	lt
 8007c48:	462b      	movlt	r3, r5
 8007c4a:	9315      	str	r3, [sp, #84]	; 0x54
 8007c4c:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8007c50:	b113      	cbz	r3, 8007c58 <_svfprintf_r+0x9e0>
 8007c52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c54:	3301      	adds	r3, #1
 8007c56:	9315      	str	r3, [sp, #84]	; 0x54
 8007c58:	f01a 0302 	ands.w	r3, sl, #2
 8007c5c:	931e      	str	r3, [sp, #120]	; 0x78
 8007c5e:	bf1e      	ittt	ne
 8007c60:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 8007c62:	3302      	addne	r3, #2
 8007c64:	9315      	strne	r3, [sp, #84]	; 0x54
 8007c66:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8007c6a:	931f      	str	r3, [sp, #124]	; 0x7c
 8007c6c:	d121      	bne.n	8007cb2 <_svfprintf_r+0xa3a>
 8007c6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c70:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007c72:	1a9b      	subs	r3, r3, r2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	9319      	str	r3, [sp, #100]	; 0x64
 8007c78:	dd1b      	ble.n	8007cb2 <_svfprintf_r+0xa3a>
 8007c7a:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8007c7e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007c80:	3201      	adds	r2, #1
 8007c82:	2810      	cmp	r0, #16
 8007c84:	488e      	ldr	r0, [pc, #568]	; (8007ec0 <_svfprintf_r+0xc48>)
 8007c86:	f104 0108 	add.w	r1, r4, #8
 8007c8a:	6020      	str	r0, [r4, #0]
 8007c8c:	f300 8187 	bgt.w	8007f9e <_svfprintf_r+0xd26>
 8007c90:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007c92:	2a07      	cmp	r2, #7
 8007c94:	4403      	add	r3, r0
 8007c96:	6060      	str	r0, [r4, #4]
 8007c98:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007c9c:	f340 8194 	ble.w	8007fc8 <_svfprintf_r+0xd50>
 8007ca0:	aa28      	add	r2, sp, #160	; 0xa0
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	9807      	ldr	r0, [sp, #28]
 8007ca6:	f004 f9d3 	bl	800c050 <__ssprint_r>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	f040 84c0 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8007cb0:	ac2b      	add	r4, sp, #172	; 0xac
 8007cb2:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8007cb6:	b173      	cbz	r3, 8007cd6 <_svfprintf_r+0xa5e>
 8007cb8:	f10d 0383 	add.w	r3, sp, #131	; 0x83
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	6063      	str	r3, [r4, #4]
 8007cc2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	932a      	str	r3, [sp, #168]	; 0xa8
 8007cc8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007cca:	3301      	adds	r3, #1
 8007ccc:	2b07      	cmp	r3, #7
 8007cce:	9329      	str	r3, [sp, #164]	; 0xa4
 8007cd0:	f300 817c 	bgt.w	8007fcc <_svfprintf_r+0xd54>
 8007cd4:	3408      	adds	r4, #8
 8007cd6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007cd8:	b16b      	cbz	r3, 8007cf6 <_svfprintf_r+0xa7e>
 8007cda:	ab21      	add	r3, sp, #132	; 0x84
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	2302      	movs	r3, #2
 8007ce0:	6063      	str	r3, [r4, #4]
 8007ce2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007ce4:	3302      	adds	r3, #2
 8007ce6:	932a      	str	r3, [sp, #168]	; 0xa8
 8007ce8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007cea:	3301      	adds	r3, #1
 8007cec:	2b07      	cmp	r3, #7
 8007cee:	9329      	str	r3, [sp, #164]	; 0xa4
 8007cf0:	f300 8176 	bgt.w	8007fe0 <_svfprintf_r+0xd68>
 8007cf4:	3408      	adds	r4, #8
 8007cf6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007cf8:	2b80      	cmp	r3, #128	; 0x80
 8007cfa:	d121      	bne.n	8007d40 <_svfprintf_r+0xac8>
 8007cfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cfe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d00:	1a9b      	subs	r3, r3, r2
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	9319      	str	r3, [sp, #100]	; 0x64
 8007d06:	dd1b      	ble.n	8007d40 <_svfprintf_r+0xac8>
 8007d08:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8007d0c:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007d0e:	3201      	adds	r2, #1
 8007d10:	2810      	cmp	r0, #16
 8007d12:	486c      	ldr	r0, [pc, #432]	; (8007ec4 <_svfprintf_r+0xc4c>)
 8007d14:	f104 0108 	add.w	r1, r4, #8
 8007d18:	6020      	str	r0, [r4, #0]
 8007d1a:	f300 816b 	bgt.w	8007ff4 <_svfprintf_r+0xd7c>
 8007d1e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007d20:	2a07      	cmp	r2, #7
 8007d22:	4403      	add	r3, r0
 8007d24:	6060      	str	r0, [r4, #4]
 8007d26:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007d2a:	f340 8178 	ble.w	800801e <_svfprintf_r+0xda6>
 8007d2e:	aa28      	add	r2, sp, #160	; 0xa0
 8007d30:	4649      	mov	r1, r9
 8007d32:	9807      	ldr	r0, [sp, #28]
 8007d34:	f004 f98c 	bl	800c050 <__ssprint_r>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	f040 8479 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8007d3e:	ac2b      	add	r4, sp, #172	; 0xac
 8007d40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d42:	1b5b      	subs	r3, r3, r5
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	9312      	str	r3, [sp, #72]	; 0x48
 8007d48:	dd1b      	ble.n	8007d82 <_svfprintf_r+0xb0a>
 8007d4a:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8007d4e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d50:	3201      	adds	r2, #1
 8007d52:	2810      	cmp	r0, #16
 8007d54:	485b      	ldr	r0, [pc, #364]	; (8007ec4 <_svfprintf_r+0xc4c>)
 8007d56:	f104 0108 	add.w	r1, r4, #8
 8007d5a:	6020      	str	r0, [r4, #0]
 8007d5c:	f300 8161 	bgt.w	8008022 <_svfprintf_r+0xdaa>
 8007d60:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d62:	2a07      	cmp	r2, #7
 8007d64:	4403      	add	r3, r0
 8007d66:	6060      	str	r0, [r4, #4]
 8007d68:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007d6c:	f340 816e 	ble.w	800804c <_svfprintf_r+0xdd4>
 8007d70:	aa28      	add	r2, sp, #160	; 0xa0
 8007d72:	4649      	mov	r1, r9
 8007d74:	9807      	ldr	r0, [sp, #28]
 8007d76:	f004 f96b 	bl	800c050 <__ssprint_r>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	f040 8458 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8007d80:	ac2b      	add	r4, sp, #172	; 0xac
 8007d82:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007d84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007d88:	9312      	str	r3, [sp, #72]	; 0x48
 8007d8a:	f040 8161 	bne.w	8008050 <_svfprintf_r+0xdd8>
 8007d8e:	e9c4 b500 	strd	fp, r5, [r4]
 8007d92:	441d      	add	r5, r3
 8007d94:	952a      	str	r5, [sp, #168]	; 0xa8
 8007d96:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007d98:	3301      	adds	r3, #1
 8007d9a:	2b07      	cmp	r3, #7
 8007d9c:	9329      	str	r3, [sp, #164]	; 0xa4
 8007d9e:	f300 819d 	bgt.w	80080dc <_svfprintf_r+0xe64>
 8007da2:	3408      	adds	r4, #8
 8007da4:	f01a 0f04 	tst.w	sl, #4
 8007da8:	f040 8424 	bne.w	80085f4 <_svfprintf_r+0x137c>
 8007dac:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8007db0:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007db2:	428a      	cmp	r2, r1
 8007db4:	bfac      	ite	ge
 8007db6:	189b      	addge	r3, r3, r2
 8007db8:	185b      	addlt	r3, r3, r1
 8007dba:	9310      	str	r3, [sp, #64]	; 0x40
 8007dbc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007dbe:	b13b      	cbz	r3, 8007dd0 <_svfprintf_r+0xb58>
 8007dc0:	aa28      	add	r2, sp, #160	; 0xa0
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	9807      	ldr	r0, [sp, #28]
 8007dc6:	f004 f943 	bl	800c050 <__ssprint_r>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	f040 8430 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	9329      	str	r3, [sp, #164]	; 0xa4
 8007dd4:	f1b8 0f00 	cmp.w	r8, #0
 8007dd8:	f040 8446 	bne.w	8008668 <_svfprintf_r+0x13f0>
 8007ddc:	ac2b      	add	r4, sp, #172	; 0xac
 8007dde:	e6ba      	b.n	8007b56 <_svfprintf_r+0x8de>
 8007de0:	4658      	mov	r0, fp
 8007de2:	f7f8 f9b5 	bl	8000150 <strlen>
 8007de6:	46b0      	mov	r8, r6
 8007de8:	4605      	mov	r5, r0
 8007dea:	e497      	b.n	800771c <_svfprintf_r+0x4a4>
 8007dec:	f04a 0a10 	orr.w	sl, sl, #16
 8007df0:	f01a 0f20 	tst.w	sl, #32
 8007df4:	d009      	beq.n	8007e0a <_svfprintf_r+0xb92>
 8007df6:	3607      	adds	r6, #7
 8007df8:	f026 0607 	bic.w	r6, r6, #7
 8007dfc:	f106 0308 	add.w	r3, r6, #8
 8007e00:	930c      	str	r3, [sp, #48]	; 0x30
 8007e02:	e9d6 6700 	ldrd	r6, r7, [r6]
 8007e06:	2301      	movs	r3, #1
 8007e08:	e6cc      	b.n	8007ba4 <_svfprintf_r+0x92c>
 8007e0a:	1d33      	adds	r3, r6, #4
 8007e0c:	f01a 0f10 	tst.w	sl, #16
 8007e10:	930c      	str	r3, [sp, #48]	; 0x30
 8007e12:	d001      	beq.n	8007e18 <_svfprintf_r+0xba0>
 8007e14:	6836      	ldr	r6, [r6, #0]
 8007e16:	e003      	b.n	8007e20 <_svfprintf_r+0xba8>
 8007e18:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007e1c:	d002      	beq.n	8007e24 <_svfprintf_r+0xbac>
 8007e1e:	8836      	ldrh	r6, [r6, #0]
 8007e20:	2700      	movs	r7, #0
 8007e22:	e7f0      	b.n	8007e06 <_svfprintf_r+0xb8e>
 8007e24:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007e28:	d0f4      	beq.n	8007e14 <_svfprintf_r+0xb9c>
 8007e2a:	7836      	ldrb	r6, [r6, #0]
 8007e2c:	e7f8      	b.n	8007e20 <_svfprintf_r+0xba8>
 8007e2e:	4b23      	ldr	r3, [pc, #140]	; (8007ebc <_svfprintf_r+0xc44>)
 8007e30:	f7ff bb59 	b.w	80074e6 <_svfprintf_r+0x26e>
 8007e34:	1d33      	adds	r3, r6, #4
 8007e36:	f01a 0f10 	tst.w	sl, #16
 8007e3a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e3c:	d001      	beq.n	8007e42 <_svfprintf_r+0xbca>
 8007e3e:	6836      	ldr	r6, [r6, #0]
 8007e40:	e003      	b.n	8007e4a <_svfprintf_r+0xbd2>
 8007e42:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007e46:	d003      	beq.n	8007e50 <_svfprintf_r+0xbd8>
 8007e48:	8836      	ldrh	r6, [r6, #0]
 8007e4a:	2700      	movs	r7, #0
 8007e4c:	f7ff bb58 	b.w	8007500 <_svfprintf_r+0x288>
 8007e50:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007e54:	d0f3      	beq.n	8007e3e <_svfprintf_r+0xbc6>
 8007e56:	7836      	ldrb	r6, [r6, #0]
 8007e58:	e7f7      	b.n	8007e4a <_svfprintf_r+0xbd2>
 8007e5a:	4652      	mov	r2, sl
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e6a8      	b.n	8007bb2 <_svfprintf_r+0x93a>
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	f43f ac09 	beq.w	8007678 <_svfprintf_r+0x400>
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d06d      	beq.n	8007f46 <_svfprintf_r+0xcce>
 8007e6a:	ab54      	add	r3, sp, #336	; 0x150
 8007e6c:	08f1      	lsrs	r1, r6, #3
 8007e6e:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8007e72:	08f8      	lsrs	r0, r7, #3
 8007e74:	f006 0207 	and.w	r2, r6, #7
 8007e78:	4607      	mov	r7, r0
 8007e7a:	460e      	mov	r6, r1
 8007e7c:	3230      	adds	r2, #48	; 0x30
 8007e7e:	ea56 0107 	orrs.w	r1, r6, r7
 8007e82:	f103 3bff 	add.w	fp, r3, #4294967295
 8007e86:	f803 2c01 	strb.w	r2, [r3, #-1]
 8007e8a:	d114      	bne.n	8007eb6 <_svfprintf_r+0xc3e>
 8007e8c:	f01a 0f01 	tst.w	sl, #1
 8007e90:	d006      	beq.n	8007ea0 <_svfprintf_r+0xc28>
 8007e92:	2a30      	cmp	r2, #48	; 0x30
 8007e94:	d004      	beq.n	8007ea0 <_svfprintf_r+0xc28>
 8007e96:	2230      	movs	r2, #48	; 0x30
 8007e98:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8007e9c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007ea0:	f04f 0800 	mov.w	r8, #0
 8007ea4:	ab54      	add	r3, sp, #336	; 0x150
 8007ea6:	9512      	str	r5, [sp, #72]	; 0x48
 8007ea8:	eba3 050b 	sub.w	r5, r3, fp
 8007eac:	4647      	mov	r7, r8
 8007eae:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8007eb2:	4646      	mov	r6, r8
 8007eb4:	e6c5      	b.n	8007c42 <_svfprintf_r+0x9ca>
 8007eb6:	465b      	mov	r3, fp
 8007eb8:	e7d8      	b.n	8007e6c <_svfprintf_r+0xbf4>
 8007eba:	bf00      	nop
 8007ebc:	0800c780 	.word	0x0800c780
 8007ec0:	0800c7a4 	.word	0x0800c7a4
 8007ec4:	0800c7b4 	.word	0x0800c7b4
 8007ec8:	2300      	movs	r3, #0
 8007eca:	9308      	str	r3, [sp, #32]
 8007ecc:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8007ed0:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 8007ed4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ed6:	220a      	movs	r2, #10
 8007ed8:	2300      	movs	r3, #0
 8007eda:	4630      	mov	r0, r6
 8007edc:	4639      	mov	r1, r7
 8007ede:	f7f8 fdd3 	bl	8000a88 <__aeabi_uldivmod>
 8007ee2:	9b08      	ldr	r3, [sp, #32]
 8007ee4:	3230      	adds	r2, #48	; 0x30
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	9308      	str	r3, [sp, #32]
 8007eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eec:	f108 3bff 	add.w	fp, r8, #4294967295
 8007ef0:	f808 2c01 	strb.w	r2, [r8, #-1]
 8007ef4:	b1d3      	cbz	r3, 8007f2c <_svfprintf_r+0xcb4>
 8007ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ef8:	9a08      	ldr	r2, [sp, #32]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d115      	bne.n	8007f2c <_svfprintf_r+0xcb4>
 8007f00:	2aff      	cmp	r2, #255	; 0xff
 8007f02:	d013      	beq.n	8007f2c <_svfprintf_r+0xcb4>
 8007f04:	2f00      	cmp	r7, #0
 8007f06:	bf08      	it	eq
 8007f08:	2e0a      	cmpeq	r6, #10
 8007f0a:	d30f      	bcc.n	8007f2c <_svfprintf_r+0xcb4>
 8007f0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f0e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8007f10:	ebab 0b03 	sub.w	fp, fp, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	4658      	mov	r0, fp
 8007f18:	f004 f885 	bl	800c026 <strncpy>
 8007f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f1e:	785b      	ldrb	r3, [r3, #1]
 8007f20:	b11b      	cbz	r3, 8007f2a <_svfprintf_r+0xcb2>
 8007f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f24:	3301      	adds	r3, #1
 8007f26:	930d      	str	r3, [sp, #52]	; 0x34
 8007f28:	2300      	movs	r3, #0
 8007f2a:	9308      	str	r3, [sp, #32]
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	4630      	mov	r0, r6
 8007f30:	4639      	mov	r1, r7
 8007f32:	220a      	movs	r2, #10
 8007f34:	f7f8 fda8 	bl	8000a88 <__aeabi_uldivmod>
 8007f38:	4606      	mov	r6, r0
 8007f3a:	460f      	mov	r7, r1
 8007f3c:	ea56 0307 	orrs.w	r3, r6, r7
 8007f40:	d0ae      	beq.n	8007ea0 <_svfprintf_r+0xc28>
 8007f42:	46d8      	mov	r8, fp
 8007f44:	e7c7      	b.n	8007ed6 <_svfprintf_r+0xc5e>
 8007f46:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 8007f4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f4c:	f006 030f 	and.w	r3, r6, #15
 8007f50:	5cd3      	ldrb	r3, [r2, r3]
 8007f52:	093a      	lsrs	r2, r7, #4
 8007f54:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8007f58:	0933      	lsrs	r3, r6, #4
 8007f5a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8007f5e:	461e      	mov	r6, r3
 8007f60:	4617      	mov	r7, r2
 8007f62:	ea56 0307 	orrs.w	r3, r6, r7
 8007f66:	d1f0      	bne.n	8007f4a <_svfprintf_r+0xcd2>
 8007f68:	e79a      	b.n	8007ea0 <_svfprintf_r+0xc28>
 8007f6a:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d196      	bne.n	8007ea0 <_svfprintf_r+0xc28>
 8007f72:	07d2      	lsls	r2, r2, #31
 8007f74:	bf44      	itt	mi
 8007f76:	2330      	movmi	r3, #48	; 0x30
 8007f78:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8007f7c:	e790      	b.n	8007ea0 <_svfprintf_r+0xc28>
 8007f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 8377 	beq.w	8008674 <_svfprintf_r+0x13fc>
 8007f86:	2000      	movs	r0, #0
 8007f88:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8007f8c:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8007f90:	960c      	str	r6, [sp, #48]	; 0x30
 8007f92:	f7ff bb4e 	b.w	8007632 <_svfprintf_r+0x3ba>
 8007f96:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8007f9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f9c:	e4f6      	b.n	800798c <_svfprintf_r+0x714>
 8007f9e:	2010      	movs	r0, #16
 8007fa0:	2a07      	cmp	r2, #7
 8007fa2:	4403      	add	r3, r0
 8007fa4:	6060      	str	r0, [r4, #4]
 8007fa6:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007faa:	dd08      	ble.n	8007fbe <_svfprintf_r+0xd46>
 8007fac:	aa28      	add	r2, sp, #160	; 0xa0
 8007fae:	4649      	mov	r1, r9
 8007fb0:	9807      	ldr	r0, [sp, #28]
 8007fb2:	f004 f84d 	bl	800c050 <__ssprint_r>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	f040 833a 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8007fbc:	a92b      	add	r1, sp, #172	; 0xac
 8007fbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	3b10      	subs	r3, #16
 8007fc4:	9319      	str	r3, [sp, #100]	; 0x64
 8007fc6:	e658      	b.n	8007c7a <_svfprintf_r+0xa02>
 8007fc8:	460c      	mov	r4, r1
 8007fca:	e672      	b.n	8007cb2 <_svfprintf_r+0xa3a>
 8007fcc:	aa28      	add	r2, sp, #160	; 0xa0
 8007fce:	4649      	mov	r1, r9
 8007fd0:	9807      	ldr	r0, [sp, #28]
 8007fd2:	f004 f83d 	bl	800c050 <__ssprint_r>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	f040 832a 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8007fdc:	ac2b      	add	r4, sp, #172	; 0xac
 8007fde:	e67a      	b.n	8007cd6 <_svfprintf_r+0xa5e>
 8007fe0:	aa28      	add	r2, sp, #160	; 0xa0
 8007fe2:	4649      	mov	r1, r9
 8007fe4:	9807      	ldr	r0, [sp, #28]
 8007fe6:	f004 f833 	bl	800c050 <__ssprint_r>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	f040 8320 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8007ff0:	ac2b      	add	r4, sp, #172	; 0xac
 8007ff2:	e680      	b.n	8007cf6 <_svfprintf_r+0xa7e>
 8007ff4:	2010      	movs	r0, #16
 8007ff6:	2a07      	cmp	r2, #7
 8007ff8:	4403      	add	r3, r0
 8007ffa:	6060      	str	r0, [r4, #4]
 8007ffc:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008000:	dd08      	ble.n	8008014 <_svfprintf_r+0xd9c>
 8008002:	aa28      	add	r2, sp, #160	; 0xa0
 8008004:	4649      	mov	r1, r9
 8008006:	9807      	ldr	r0, [sp, #28]
 8008008:	f004 f822 	bl	800c050 <__ssprint_r>
 800800c:	2800      	cmp	r0, #0
 800800e:	f040 830f 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8008012:	a92b      	add	r1, sp, #172	; 0xac
 8008014:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008016:	460c      	mov	r4, r1
 8008018:	3b10      	subs	r3, #16
 800801a:	9319      	str	r3, [sp, #100]	; 0x64
 800801c:	e674      	b.n	8007d08 <_svfprintf_r+0xa90>
 800801e:	460c      	mov	r4, r1
 8008020:	e68e      	b.n	8007d40 <_svfprintf_r+0xac8>
 8008022:	2010      	movs	r0, #16
 8008024:	2a07      	cmp	r2, #7
 8008026:	4403      	add	r3, r0
 8008028:	6060      	str	r0, [r4, #4]
 800802a:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 800802e:	dd08      	ble.n	8008042 <_svfprintf_r+0xdca>
 8008030:	aa28      	add	r2, sp, #160	; 0xa0
 8008032:	4649      	mov	r1, r9
 8008034:	9807      	ldr	r0, [sp, #28]
 8008036:	f004 f80b 	bl	800c050 <__ssprint_r>
 800803a:	2800      	cmp	r0, #0
 800803c:	f040 82f8 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8008040:	a92b      	add	r1, sp, #172	; 0xac
 8008042:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008044:	460c      	mov	r4, r1
 8008046:	3b10      	subs	r3, #16
 8008048:	9312      	str	r3, [sp, #72]	; 0x48
 800804a:	e67e      	b.n	8007d4a <_svfprintf_r+0xad2>
 800804c:	460c      	mov	r4, r1
 800804e:	e698      	b.n	8007d82 <_svfprintf_r+0xb0a>
 8008050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008052:	2b65      	cmp	r3, #101	; 0x65
 8008054:	f340 8234 	ble.w	80084c0 <_svfprintf_r+0x1248>
 8008058:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 800805c:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8008060:	f7f8 fca2 	bl	80009a8 <__aeabi_dcmpeq>
 8008064:	2800      	cmp	r0, #0
 8008066:	d069      	beq.n	800813c <_svfprintf_r+0xec4>
 8008068:	4b6e      	ldr	r3, [pc, #440]	; (8008224 <_svfprintf_r+0xfac>)
 800806a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	2301      	movs	r3, #1
 8008070:	441d      	add	r5, r3
 8008072:	6063      	str	r3, [r4, #4]
 8008074:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008076:	952a      	str	r5, [sp, #168]	; 0xa8
 8008078:	3301      	adds	r3, #1
 800807a:	2b07      	cmp	r3, #7
 800807c:	9329      	str	r3, [sp, #164]	; 0xa4
 800807e:	dc37      	bgt.n	80080f0 <_svfprintf_r+0xe78>
 8008080:	3408      	adds	r4, #8
 8008082:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008084:	9a08      	ldr	r2, [sp, #32]
 8008086:	4293      	cmp	r3, r2
 8008088:	db03      	blt.n	8008092 <_svfprintf_r+0xe1a>
 800808a:	f01a 0f01 	tst.w	sl, #1
 800808e:	f43f ae89 	beq.w	8007da4 <_svfprintf_r+0xb2c>
 8008092:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008094:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008096:	6023      	str	r3, [r4, #0]
 8008098:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800809a:	6063      	str	r3, [r4, #4]
 800809c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800809e:	4413      	add	r3, r2
 80080a0:	932a      	str	r3, [sp, #168]	; 0xa8
 80080a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80080a4:	3301      	adds	r3, #1
 80080a6:	2b07      	cmp	r3, #7
 80080a8:	9329      	str	r3, [sp, #164]	; 0xa4
 80080aa:	dc2b      	bgt.n	8008104 <_svfprintf_r+0xe8c>
 80080ac:	3408      	adds	r4, #8
 80080ae:	9b08      	ldr	r3, [sp, #32]
 80080b0:	1e5d      	subs	r5, r3, #1
 80080b2:	2d00      	cmp	r5, #0
 80080b4:	f77f ae76 	ble.w	8007da4 <_svfprintf_r+0xb2c>
 80080b8:	2710      	movs	r7, #16
 80080ba:	4e5b      	ldr	r6, [pc, #364]	; (8008228 <_svfprintf_r+0xfb0>)
 80080bc:	2d10      	cmp	r5, #16
 80080be:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80080c2:	f104 0108 	add.w	r1, r4, #8
 80080c6:	f103 0301 	add.w	r3, r3, #1
 80080ca:	6026      	str	r6, [r4, #0]
 80080cc:	dc24      	bgt.n	8008118 <_svfprintf_r+0xea0>
 80080ce:	6065      	str	r5, [r4, #4]
 80080d0:	2b07      	cmp	r3, #7
 80080d2:	4415      	add	r5, r2
 80080d4:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80080d8:	f340 8289 	ble.w	80085ee <_svfprintf_r+0x1376>
 80080dc:	aa28      	add	r2, sp, #160	; 0xa0
 80080de:	4649      	mov	r1, r9
 80080e0:	9807      	ldr	r0, [sp, #28]
 80080e2:	f003 ffb5 	bl	800c050 <__ssprint_r>
 80080e6:	2800      	cmp	r0, #0
 80080e8:	f040 82a2 	bne.w	8008630 <_svfprintf_r+0x13b8>
 80080ec:	ac2b      	add	r4, sp, #172	; 0xac
 80080ee:	e659      	b.n	8007da4 <_svfprintf_r+0xb2c>
 80080f0:	aa28      	add	r2, sp, #160	; 0xa0
 80080f2:	4649      	mov	r1, r9
 80080f4:	9807      	ldr	r0, [sp, #28]
 80080f6:	f003 ffab 	bl	800c050 <__ssprint_r>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	f040 8298 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8008100:	ac2b      	add	r4, sp, #172	; 0xac
 8008102:	e7be      	b.n	8008082 <_svfprintf_r+0xe0a>
 8008104:	aa28      	add	r2, sp, #160	; 0xa0
 8008106:	4649      	mov	r1, r9
 8008108:	9807      	ldr	r0, [sp, #28]
 800810a:	f003 ffa1 	bl	800c050 <__ssprint_r>
 800810e:	2800      	cmp	r0, #0
 8008110:	f040 828e 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8008114:	ac2b      	add	r4, sp, #172	; 0xac
 8008116:	e7ca      	b.n	80080ae <_svfprintf_r+0xe36>
 8008118:	3210      	adds	r2, #16
 800811a:	2b07      	cmp	r3, #7
 800811c:	6067      	str	r7, [r4, #4]
 800811e:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8008122:	dd08      	ble.n	8008136 <_svfprintf_r+0xebe>
 8008124:	aa28      	add	r2, sp, #160	; 0xa0
 8008126:	4649      	mov	r1, r9
 8008128:	9807      	ldr	r0, [sp, #28]
 800812a:	f003 ff91 	bl	800c050 <__ssprint_r>
 800812e:	2800      	cmp	r0, #0
 8008130:	f040 827e 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8008134:	a92b      	add	r1, sp, #172	; 0xac
 8008136:	3d10      	subs	r5, #16
 8008138:	460c      	mov	r4, r1
 800813a:	e7bf      	b.n	80080bc <_svfprintf_r+0xe44>
 800813c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800813e:	2b00      	cmp	r3, #0
 8008140:	dc74      	bgt.n	800822c <_svfprintf_r+0xfb4>
 8008142:	4b38      	ldr	r3, [pc, #224]	; (8008224 <_svfprintf_r+0xfac>)
 8008144:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8008146:	6023      	str	r3, [r4, #0]
 8008148:	2301      	movs	r3, #1
 800814a:	441d      	add	r5, r3
 800814c:	6063      	str	r3, [r4, #4]
 800814e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008150:	952a      	str	r5, [sp, #168]	; 0xa8
 8008152:	3301      	adds	r3, #1
 8008154:	2b07      	cmp	r3, #7
 8008156:	9329      	str	r3, [sp, #164]	; 0xa4
 8008158:	dc3e      	bgt.n	80081d8 <_svfprintf_r+0xf60>
 800815a:	3408      	adds	r4, #8
 800815c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800815e:	b92b      	cbnz	r3, 800816c <_svfprintf_r+0xef4>
 8008160:	9b08      	ldr	r3, [sp, #32]
 8008162:	b91b      	cbnz	r3, 800816c <_svfprintf_r+0xef4>
 8008164:	f01a 0f01 	tst.w	sl, #1
 8008168:	f43f ae1c 	beq.w	8007da4 <_svfprintf_r+0xb2c>
 800816c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800816e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008174:	6063      	str	r3, [r4, #4]
 8008176:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008178:	4413      	add	r3, r2
 800817a:	932a      	str	r3, [sp, #168]	; 0xa8
 800817c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800817e:	3301      	adds	r3, #1
 8008180:	2b07      	cmp	r3, #7
 8008182:	9329      	str	r3, [sp, #164]	; 0xa4
 8008184:	dc32      	bgt.n	80081ec <_svfprintf_r+0xf74>
 8008186:	3408      	adds	r4, #8
 8008188:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800818a:	2d00      	cmp	r5, #0
 800818c:	da1b      	bge.n	80081c6 <_svfprintf_r+0xf4e>
 800818e:	4623      	mov	r3, r4
 8008190:	2710      	movs	r7, #16
 8008192:	4e25      	ldr	r6, [pc, #148]	; (8008228 <_svfprintf_r+0xfb0>)
 8008194:	426d      	negs	r5, r5
 8008196:	2d10      	cmp	r5, #16
 8008198:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 800819c:	f104 0408 	add.w	r4, r4, #8
 80081a0:	f102 0201 	add.w	r2, r2, #1
 80081a4:	601e      	str	r6, [r3, #0]
 80081a6:	dc2b      	bgt.n	8008200 <_svfprintf_r+0xf88>
 80081a8:	605d      	str	r5, [r3, #4]
 80081aa:	2a07      	cmp	r2, #7
 80081ac:	440d      	add	r5, r1
 80081ae:	e9cd 2529 	strd	r2, r5, [sp, #164]	; 0xa4
 80081b2:	dd08      	ble.n	80081c6 <_svfprintf_r+0xf4e>
 80081b4:	aa28      	add	r2, sp, #160	; 0xa0
 80081b6:	4649      	mov	r1, r9
 80081b8:	9807      	ldr	r0, [sp, #28]
 80081ba:	f003 ff49 	bl	800c050 <__ssprint_r>
 80081be:	2800      	cmp	r0, #0
 80081c0:	f040 8236 	bne.w	8008630 <_svfprintf_r+0x13b8>
 80081c4:	ac2b      	add	r4, sp, #172	; 0xac
 80081c6:	9b08      	ldr	r3, [sp, #32]
 80081c8:	9a08      	ldr	r2, [sp, #32]
 80081ca:	6063      	str	r3, [r4, #4]
 80081cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80081ce:	f8c4 b000 	str.w	fp, [r4]
 80081d2:	4413      	add	r3, r2
 80081d4:	932a      	str	r3, [sp, #168]	; 0xa8
 80081d6:	e5de      	b.n	8007d96 <_svfprintf_r+0xb1e>
 80081d8:	aa28      	add	r2, sp, #160	; 0xa0
 80081da:	4649      	mov	r1, r9
 80081dc:	9807      	ldr	r0, [sp, #28]
 80081de:	f003 ff37 	bl	800c050 <__ssprint_r>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	f040 8224 	bne.w	8008630 <_svfprintf_r+0x13b8>
 80081e8:	ac2b      	add	r4, sp, #172	; 0xac
 80081ea:	e7b7      	b.n	800815c <_svfprintf_r+0xee4>
 80081ec:	aa28      	add	r2, sp, #160	; 0xa0
 80081ee:	4649      	mov	r1, r9
 80081f0:	9807      	ldr	r0, [sp, #28]
 80081f2:	f003 ff2d 	bl	800c050 <__ssprint_r>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	f040 821a 	bne.w	8008630 <_svfprintf_r+0x13b8>
 80081fc:	ac2b      	add	r4, sp, #172	; 0xac
 80081fe:	e7c3      	b.n	8008188 <_svfprintf_r+0xf10>
 8008200:	3110      	adds	r1, #16
 8008202:	2a07      	cmp	r2, #7
 8008204:	605f      	str	r7, [r3, #4]
 8008206:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 800820a:	dd08      	ble.n	800821e <_svfprintf_r+0xfa6>
 800820c:	aa28      	add	r2, sp, #160	; 0xa0
 800820e:	4649      	mov	r1, r9
 8008210:	9807      	ldr	r0, [sp, #28]
 8008212:	f003 ff1d 	bl	800c050 <__ssprint_r>
 8008216:	2800      	cmp	r0, #0
 8008218:	f040 820a 	bne.w	8008630 <_svfprintf_r+0x13b8>
 800821c:	ac2b      	add	r4, sp, #172	; 0xac
 800821e:	3d10      	subs	r5, #16
 8008220:	4623      	mov	r3, r4
 8008222:	e7b8      	b.n	8008196 <_svfprintf_r+0xf1e>
 8008224:	0800c7a2 	.word	0x0800c7a2
 8008228:	0800c7b4 	.word	0x0800c7b4
 800822c:	9b08      	ldr	r3, [sp, #32]
 800822e:	42b3      	cmp	r3, r6
 8008230:	bfa8      	it	ge
 8008232:	4633      	movge	r3, r6
 8008234:	2b00      	cmp	r3, #0
 8008236:	461d      	mov	r5, r3
 8008238:	dd0b      	ble.n	8008252 <_svfprintf_r+0xfda>
 800823a:	e9c4 b300 	strd	fp, r3, [r4]
 800823e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008240:	442b      	add	r3, r5
 8008242:	932a      	str	r3, [sp, #168]	; 0xa8
 8008244:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008246:	3301      	adds	r3, #1
 8008248:	2b07      	cmp	r3, #7
 800824a:	9329      	str	r3, [sp, #164]	; 0xa4
 800824c:	f300 8086 	bgt.w	800835c <_svfprintf_r+0x10e4>
 8008250:	3408      	adds	r4, #8
 8008252:	2d00      	cmp	r5, #0
 8008254:	bfb4      	ite	lt
 8008256:	4635      	movlt	r5, r6
 8008258:	1b75      	subge	r5, r6, r5
 800825a:	2d00      	cmp	r5, #0
 800825c:	dd19      	ble.n	8008292 <_svfprintf_r+0x101a>
 800825e:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8008262:	4896      	ldr	r0, [pc, #600]	; (80084bc <_svfprintf_r+0x1244>)
 8008264:	2d10      	cmp	r5, #16
 8008266:	f103 0301 	add.w	r3, r3, #1
 800826a:	f104 0108 	add.w	r1, r4, #8
 800826e:	6020      	str	r0, [r4, #0]
 8008270:	dc7e      	bgt.n	8008370 <_svfprintf_r+0x10f8>
 8008272:	6065      	str	r5, [r4, #4]
 8008274:	2b07      	cmp	r3, #7
 8008276:	4415      	add	r5, r2
 8008278:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 800827c:	f340 808b 	ble.w	8008396 <_svfprintf_r+0x111e>
 8008280:	aa28      	add	r2, sp, #160	; 0xa0
 8008282:	4649      	mov	r1, r9
 8008284:	9807      	ldr	r0, [sp, #28]
 8008286:	f003 fee3 	bl	800c050 <__ssprint_r>
 800828a:	2800      	cmp	r0, #0
 800828c:	f040 81d0 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8008290:	ac2b      	add	r4, sp, #172	; 0xac
 8008292:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8008296:	445e      	add	r6, fp
 8008298:	d009      	beq.n	80082ae <_svfprintf_r+0x1036>
 800829a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d17c      	bne.n	800839a <_svfprintf_r+0x1122>
 80082a0:	2f00      	cmp	r7, #0
 80082a2:	d17c      	bne.n	800839e <_svfprintf_r+0x1126>
 80082a4:	9b08      	ldr	r3, [sp, #32]
 80082a6:	445b      	add	r3, fp
 80082a8:	429e      	cmp	r6, r3
 80082aa:	bf28      	it	cs
 80082ac:	461e      	movcs	r6, r3
 80082ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082b0:	9a08      	ldr	r2, [sp, #32]
 80082b2:	4293      	cmp	r3, r2
 80082b4:	db02      	blt.n	80082bc <_svfprintf_r+0x1044>
 80082b6:	f01a 0f01 	tst.w	sl, #1
 80082ba:	d00e      	beq.n	80082da <_svfprintf_r+0x1062>
 80082bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80082be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082c4:	6063      	str	r3, [r4, #4]
 80082c6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80082c8:	4413      	add	r3, r2
 80082ca:	932a      	str	r3, [sp, #168]	; 0xa8
 80082cc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80082ce:	3301      	adds	r3, #1
 80082d0:	2b07      	cmp	r3, #7
 80082d2:	9329      	str	r3, [sp, #164]	; 0xa4
 80082d4:	f300 80dd 	bgt.w	8008492 <_svfprintf_r+0x121a>
 80082d8:	3408      	adds	r4, #8
 80082da:	9b08      	ldr	r3, [sp, #32]
 80082dc:	9a08      	ldr	r2, [sp, #32]
 80082de:	eb0b 0503 	add.w	r5, fp, r3
 80082e2:	1bab      	subs	r3, r5, r6
 80082e4:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80082e6:	1b55      	subs	r5, r2, r5
 80082e8:	429d      	cmp	r5, r3
 80082ea:	bfa8      	it	ge
 80082ec:	461d      	movge	r5, r3
 80082ee:	2d00      	cmp	r5, #0
 80082f0:	dd0b      	ble.n	800830a <_svfprintf_r+0x1092>
 80082f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80082f4:	e9c4 6500 	strd	r6, r5, [r4]
 80082f8:	442b      	add	r3, r5
 80082fa:	932a      	str	r3, [sp, #168]	; 0xa8
 80082fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80082fe:	3301      	adds	r3, #1
 8008300:	2b07      	cmp	r3, #7
 8008302:	9329      	str	r3, [sp, #164]	; 0xa4
 8008304:	f300 80cf 	bgt.w	80084a6 <_svfprintf_r+0x122e>
 8008308:	3408      	adds	r4, #8
 800830a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800830c:	9a08      	ldr	r2, [sp, #32]
 800830e:	2d00      	cmp	r5, #0
 8008310:	eba2 0303 	sub.w	r3, r2, r3
 8008314:	bfb4      	ite	lt
 8008316:	461d      	movlt	r5, r3
 8008318:	1b5d      	subge	r5, r3, r5
 800831a:	2d00      	cmp	r5, #0
 800831c:	f77f ad42 	ble.w	8007da4 <_svfprintf_r+0xb2c>
 8008320:	2710      	movs	r7, #16
 8008322:	4e66      	ldr	r6, [pc, #408]	; (80084bc <_svfprintf_r+0x1244>)
 8008324:	2d10      	cmp	r5, #16
 8008326:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800832a:	f104 0108 	add.w	r1, r4, #8
 800832e:	f103 0301 	add.w	r3, r3, #1
 8008332:	6026      	str	r6, [r4, #0]
 8008334:	f77f aecb 	ble.w	80080ce <_svfprintf_r+0xe56>
 8008338:	3210      	adds	r2, #16
 800833a:	2b07      	cmp	r3, #7
 800833c:	6067      	str	r7, [r4, #4]
 800833e:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8008342:	dd08      	ble.n	8008356 <_svfprintf_r+0x10de>
 8008344:	aa28      	add	r2, sp, #160	; 0xa0
 8008346:	4649      	mov	r1, r9
 8008348:	9807      	ldr	r0, [sp, #28]
 800834a:	f003 fe81 	bl	800c050 <__ssprint_r>
 800834e:	2800      	cmp	r0, #0
 8008350:	f040 816e 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8008354:	a92b      	add	r1, sp, #172	; 0xac
 8008356:	3d10      	subs	r5, #16
 8008358:	460c      	mov	r4, r1
 800835a:	e7e3      	b.n	8008324 <_svfprintf_r+0x10ac>
 800835c:	aa28      	add	r2, sp, #160	; 0xa0
 800835e:	4649      	mov	r1, r9
 8008360:	9807      	ldr	r0, [sp, #28]
 8008362:	f003 fe75 	bl	800c050 <__ssprint_r>
 8008366:	2800      	cmp	r0, #0
 8008368:	f040 8162 	bne.w	8008630 <_svfprintf_r+0x13b8>
 800836c:	ac2b      	add	r4, sp, #172	; 0xac
 800836e:	e770      	b.n	8008252 <_svfprintf_r+0xfda>
 8008370:	2010      	movs	r0, #16
 8008372:	2b07      	cmp	r3, #7
 8008374:	4402      	add	r2, r0
 8008376:	6060      	str	r0, [r4, #4]
 8008378:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 800837c:	dd08      	ble.n	8008390 <_svfprintf_r+0x1118>
 800837e:	aa28      	add	r2, sp, #160	; 0xa0
 8008380:	4649      	mov	r1, r9
 8008382:	9807      	ldr	r0, [sp, #28]
 8008384:	f003 fe64 	bl	800c050 <__ssprint_r>
 8008388:	2800      	cmp	r0, #0
 800838a:	f040 8151 	bne.w	8008630 <_svfprintf_r+0x13b8>
 800838e:	a92b      	add	r1, sp, #172	; 0xac
 8008390:	3d10      	subs	r5, #16
 8008392:	460c      	mov	r4, r1
 8008394:	e763      	b.n	800825e <_svfprintf_r+0xfe6>
 8008396:	460c      	mov	r4, r1
 8008398:	e77b      	b.n	8008292 <_svfprintf_r+0x101a>
 800839a:	2f00      	cmp	r7, #0
 800839c:	d049      	beq.n	8008432 <_svfprintf_r+0x11ba>
 800839e:	3f01      	subs	r7, #1
 80083a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80083a8:	6063      	str	r3, [r4, #4]
 80083aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80083ac:	4413      	add	r3, r2
 80083ae:	932a      	str	r3, [sp, #168]	; 0xa8
 80083b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80083b2:	3301      	adds	r3, #1
 80083b4:	2b07      	cmp	r3, #7
 80083b6:	9329      	str	r3, [sp, #164]	; 0xa4
 80083b8:	dc42      	bgt.n	8008440 <_svfprintf_r+0x11c8>
 80083ba:	3408      	adds	r4, #8
 80083bc:	9b08      	ldr	r3, [sp, #32]
 80083be:	445b      	add	r3, fp
 80083c0:	1b9a      	subs	r2, r3, r6
 80083c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	4293      	cmp	r3, r2
 80083c8:	bfa8      	it	ge
 80083ca:	4613      	movge	r3, r2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	461d      	mov	r5, r3
 80083d0:	dd0a      	ble.n	80083e8 <_svfprintf_r+0x1170>
 80083d2:	e9c4 6300 	strd	r6, r3, [r4]
 80083d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80083d8:	442b      	add	r3, r5
 80083da:	932a      	str	r3, [sp, #168]	; 0xa8
 80083dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80083de:	3301      	adds	r3, #1
 80083e0:	2b07      	cmp	r3, #7
 80083e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80083e4:	dc36      	bgt.n	8008454 <_svfprintf_r+0x11dc>
 80083e6:	3408      	adds	r4, #8
 80083e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083ea:	2d00      	cmp	r5, #0
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	bfb4      	ite	lt
 80083f0:	461d      	movlt	r5, r3
 80083f2:	1b5d      	subge	r5, r3, r5
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	dd18      	ble.n	800842a <_svfprintf_r+0x11b2>
 80083f8:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 80083fc:	482f      	ldr	r0, [pc, #188]	; (80084bc <_svfprintf_r+0x1244>)
 80083fe:	2d10      	cmp	r5, #16
 8008400:	f102 0201 	add.w	r2, r2, #1
 8008404:	f104 0108 	add.w	r1, r4, #8
 8008408:	6020      	str	r0, [r4, #0]
 800840a:	dc2d      	bgt.n	8008468 <_svfprintf_r+0x11f0>
 800840c:	442b      	add	r3, r5
 800840e:	2a07      	cmp	r2, #7
 8008410:	6065      	str	r5, [r4, #4]
 8008412:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008416:	dd3a      	ble.n	800848e <_svfprintf_r+0x1216>
 8008418:	aa28      	add	r2, sp, #160	; 0xa0
 800841a:	4649      	mov	r1, r9
 800841c:	9807      	ldr	r0, [sp, #28]
 800841e:	f003 fe17 	bl	800c050 <__ssprint_r>
 8008422:	2800      	cmp	r0, #0
 8008424:	f040 8104 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8008428:	ac2b      	add	r4, sp, #172	; 0xac
 800842a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	441e      	add	r6, r3
 8008430:	e733      	b.n	800829a <_svfprintf_r+0x1022>
 8008432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008434:	3b01      	subs	r3, #1
 8008436:	930d      	str	r3, [sp, #52]	; 0x34
 8008438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800843a:	3b01      	subs	r3, #1
 800843c:	930b      	str	r3, [sp, #44]	; 0x2c
 800843e:	e7af      	b.n	80083a0 <_svfprintf_r+0x1128>
 8008440:	aa28      	add	r2, sp, #160	; 0xa0
 8008442:	4649      	mov	r1, r9
 8008444:	9807      	ldr	r0, [sp, #28]
 8008446:	f003 fe03 	bl	800c050 <__ssprint_r>
 800844a:	2800      	cmp	r0, #0
 800844c:	f040 80f0 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8008450:	ac2b      	add	r4, sp, #172	; 0xac
 8008452:	e7b3      	b.n	80083bc <_svfprintf_r+0x1144>
 8008454:	aa28      	add	r2, sp, #160	; 0xa0
 8008456:	4649      	mov	r1, r9
 8008458:	9807      	ldr	r0, [sp, #28]
 800845a:	f003 fdf9 	bl	800c050 <__ssprint_r>
 800845e:	2800      	cmp	r0, #0
 8008460:	f040 80e6 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8008464:	ac2b      	add	r4, sp, #172	; 0xac
 8008466:	e7bf      	b.n	80083e8 <_svfprintf_r+0x1170>
 8008468:	2010      	movs	r0, #16
 800846a:	2a07      	cmp	r2, #7
 800846c:	4403      	add	r3, r0
 800846e:	6060      	str	r0, [r4, #4]
 8008470:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008474:	dd08      	ble.n	8008488 <_svfprintf_r+0x1210>
 8008476:	aa28      	add	r2, sp, #160	; 0xa0
 8008478:	4649      	mov	r1, r9
 800847a:	9807      	ldr	r0, [sp, #28]
 800847c:	f003 fde8 	bl	800c050 <__ssprint_r>
 8008480:	2800      	cmp	r0, #0
 8008482:	f040 80d5 	bne.w	8008630 <_svfprintf_r+0x13b8>
 8008486:	a92b      	add	r1, sp, #172	; 0xac
 8008488:	3d10      	subs	r5, #16
 800848a:	460c      	mov	r4, r1
 800848c:	e7b4      	b.n	80083f8 <_svfprintf_r+0x1180>
 800848e:	460c      	mov	r4, r1
 8008490:	e7cb      	b.n	800842a <_svfprintf_r+0x11b2>
 8008492:	aa28      	add	r2, sp, #160	; 0xa0
 8008494:	4649      	mov	r1, r9
 8008496:	9807      	ldr	r0, [sp, #28]
 8008498:	f003 fdda 	bl	800c050 <__ssprint_r>
 800849c:	2800      	cmp	r0, #0
 800849e:	f040 80c7 	bne.w	8008630 <_svfprintf_r+0x13b8>
 80084a2:	ac2b      	add	r4, sp, #172	; 0xac
 80084a4:	e719      	b.n	80082da <_svfprintf_r+0x1062>
 80084a6:	aa28      	add	r2, sp, #160	; 0xa0
 80084a8:	4649      	mov	r1, r9
 80084aa:	9807      	ldr	r0, [sp, #28]
 80084ac:	f003 fdd0 	bl	800c050 <__ssprint_r>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	f040 80bd 	bne.w	8008630 <_svfprintf_r+0x13b8>
 80084b6:	ac2b      	add	r4, sp, #172	; 0xac
 80084b8:	e727      	b.n	800830a <_svfprintf_r+0x1092>
 80084ba:	bf00      	nop
 80084bc:	0800c7b4 	.word	0x0800c7b4
 80084c0:	9a08      	ldr	r2, [sp, #32]
 80084c2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80084c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80084c6:	2a01      	cmp	r2, #1
 80084c8:	f105 0501 	add.w	r5, r5, #1
 80084cc:	f103 0301 	add.w	r3, r3, #1
 80084d0:	f104 0608 	add.w	r6, r4, #8
 80084d4:	dc02      	bgt.n	80084dc <_svfprintf_r+0x1264>
 80084d6:	f01a 0f01 	tst.w	sl, #1
 80084da:	d07d      	beq.n	80085d8 <_svfprintf_r+0x1360>
 80084dc:	2201      	movs	r2, #1
 80084de:	2b07      	cmp	r3, #7
 80084e0:	f8c4 b000 	str.w	fp, [r4]
 80084e4:	6062      	str	r2, [r4, #4]
 80084e6:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80084ea:	dd08      	ble.n	80084fe <_svfprintf_r+0x1286>
 80084ec:	aa28      	add	r2, sp, #160	; 0xa0
 80084ee:	4649      	mov	r1, r9
 80084f0:	9807      	ldr	r0, [sp, #28]
 80084f2:	f003 fdad 	bl	800c050 <__ssprint_r>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	f040 809a 	bne.w	8008630 <_svfprintf_r+0x13b8>
 80084fc:	ae2b      	add	r6, sp, #172	; 0xac
 80084fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008500:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008502:	6033      	str	r3, [r6, #0]
 8008504:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008506:	6073      	str	r3, [r6, #4]
 8008508:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800850a:	4413      	add	r3, r2
 800850c:	932a      	str	r3, [sp, #168]	; 0xa8
 800850e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008510:	3301      	adds	r3, #1
 8008512:	2b07      	cmp	r3, #7
 8008514:	9329      	str	r3, [sp, #164]	; 0xa4
 8008516:	dc31      	bgt.n	800857c <_svfprintf_r+0x1304>
 8008518:	3608      	adds	r6, #8
 800851a:	9b08      	ldr	r3, [sp, #32]
 800851c:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8008520:	1e5c      	subs	r4, r3, #1
 8008522:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008526:	f7f8 fa3f 	bl	80009a8 <__aeabi_dcmpeq>
 800852a:	2800      	cmp	r0, #0
 800852c:	d12f      	bne.n	800858e <_svfprintf_r+0x1316>
 800852e:	f10b 0301 	add.w	r3, fp, #1
 8008532:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008534:	e9c6 3400 	strd	r3, r4, [r6]
 8008538:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800853a:	9908      	ldr	r1, [sp, #32]
 800853c:	3201      	adds	r2, #1
 800853e:	3b01      	subs	r3, #1
 8008540:	440b      	add	r3, r1
 8008542:	2a07      	cmp	r2, #7
 8008544:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008548:	dd4f      	ble.n	80085ea <_svfprintf_r+0x1372>
 800854a:	aa28      	add	r2, sp, #160	; 0xa0
 800854c:	4649      	mov	r1, r9
 800854e:	9807      	ldr	r0, [sp, #28]
 8008550:	f003 fd7e 	bl	800c050 <__ssprint_r>
 8008554:	2800      	cmp	r0, #0
 8008556:	d16b      	bne.n	8008630 <_svfprintf_r+0x13b8>
 8008558:	ae2b      	add	r6, sp, #172	; 0xac
 800855a:	ab24      	add	r3, sp, #144	; 0x90
 800855c:	6033      	str	r3, [r6, #0]
 800855e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008560:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008562:	6073      	str	r3, [r6, #4]
 8008564:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008566:	4413      	add	r3, r2
 8008568:	932a      	str	r3, [sp, #168]	; 0xa8
 800856a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800856c:	3301      	adds	r3, #1
 800856e:	2b07      	cmp	r3, #7
 8008570:	9329      	str	r3, [sp, #164]	; 0xa4
 8008572:	f73f adb3 	bgt.w	80080dc <_svfprintf_r+0xe64>
 8008576:	f106 0408 	add.w	r4, r6, #8
 800857a:	e413      	b.n	8007da4 <_svfprintf_r+0xb2c>
 800857c:	aa28      	add	r2, sp, #160	; 0xa0
 800857e:	4649      	mov	r1, r9
 8008580:	9807      	ldr	r0, [sp, #28]
 8008582:	f003 fd65 	bl	800c050 <__ssprint_r>
 8008586:	2800      	cmp	r0, #0
 8008588:	d152      	bne.n	8008630 <_svfprintf_r+0x13b8>
 800858a:	ae2b      	add	r6, sp, #172	; 0xac
 800858c:	e7c5      	b.n	800851a <_svfprintf_r+0x12a2>
 800858e:	2c00      	cmp	r4, #0
 8008590:	dde3      	ble.n	800855a <_svfprintf_r+0x12e2>
 8008592:	2710      	movs	r7, #16
 8008594:	4d3d      	ldr	r5, [pc, #244]	; (800868c <_svfprintf_r+0x1414>)
 8008596:	2c10      	cmp	r4, #16
 8008598:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800859c:	f106 0108 	add.w	r1, r6, #8
 80085a0:	f103 0301 	add.w	r3, r3, #1
 80085a4:	6035      	str	r5, [r6, #0]
 80085a6:	dc07      	bgt.n	80085b8 <_svfprintf_r+0x1340>
 80085a8:	6074      	str	r4, [r6, #4]
 80085aa:	2b07      	cmp	r3, #7
 80085ac:	4414      	add	r4, r2
 80085ae:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 80085b2:	dcca      	bgt.n	800854a <_svfprintf_r+0x12d2>
 80085b4:	460e      	mov	r6, r1
 80085b6:	e7d0      	b.n	800855a <_svfprintf_r+0x12e2>
 80085b8:	3210      	adds	r2, #16
 80085ba:	2b07      	cmp	r3, #7
 80085bc:	6077      	str	r7, [r6, #4]
 80085be:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80085c2:	dd06      	ble.n	80085d2 <_svfprintf_r+0x135a>
 80085c4:	aa28      	add	r2, sp, #160	; 0xa0
 80085c6:	4649      	mov	r1, r9
 80085c8:	9807      	ldr	r0, [sp, #28]
 80085ca:	f003 fd41 	bl	800c050 <__ssprint_r>
 80085ce:	bb78      	cbnz	r0, 8008630 <_svfprintf_r+0x13b8>
 80085d0:	a92b      	add	r1, sp, #172	; 0xac
 80085d2:	3c10      	subs	r4, #16
 80085d4:	460e      	mov	r6, r1
 80085d6:	e7de      	b.n	8008596 <_svfprintf_r+0x131e>
 80085d8:	2201      	movs	r2, #1
 80085da:	2b07      	cmp	r3, #7
 80085dc:	f8c4 b000 	str.w	fp, [r4]
 80085e0:	6062      	str	r2, [r4, #4]
 80085e2:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80085e6:	ddb8      	ble.n	800855a <_svfprintf_r+0x12e2>
 80085e8:	e7af      	b.n	800854a <_svfprintf_r+0x12d2>
 80085ea:	3608      	adds	r6, #8
 80085ec:	e7b5      	b.n	800855a <_svfprintf_r+0x12e2>
 80085ee:	460c      	mov	r4, r1
 80085f0:	f7ff bbd8 	b.w	8007da4 <_svfprintf_r+0xb2c>
 80085f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085f8:	1a9d      	subs	r5, r3, r2
 80085fa:	2d00      	cmp	r5, #0
 80085fc:	f77f abd6 	ble.w	8007dac <_svfprintf_r+0xb34>
 8008600:	2710      	movs	r7, #16
 8008602:	4e23      	ldr	r6, [pc, #140]	; (8008690 <_svfprintf_r+0x1418>)
 8008604:	2d10      	cmp	r5, #16
 8008606:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800860a:	6026      	str	r6, [r4, #0]
 800860c:	f103 0301 	add.w	r3, r3, #1
 8008610:	dc18      	bgt.n	8008644 <_svfprintf_r+0x13cc>
 8008612:	6065      	str	r5, [r4, #4]
 8008614:	2b07      	cmp	r3, #7
 8008616:	4415      	add	r5, r2
 8008618:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 800861c:	f77f abc6 	ble.w	8007dac <_svfprintf_r+0xb34>
 8008620:	aa28      	add	r2, sp, #160	; 0xa0
 8008622:	4649      	mov	r1, r9
 8008624:	9807      	ldr	r0, [sp, #28]
 8008626:	f003 fd13 	bl	800c050 <__ssprint_r>
 800862a:	2800      	cmp	r0, #0
 800862c:	f43f abbe 	beq.w	8007dac <_svfprintf_r+0xb34>
 8008630:	f1b8 0f00 	cmp.w	r8, #0
 8008634:	f43f a8a9 	beq.w	800778a <_svfprintf_r+0x512>
 8008638:	4641      	mov	r1, r8
 800863a:	9807      	ldr	r0, [sp, #28]
 800863c:	f002 fb00 	bl	800ac40 <_free_r>
 8008640:	f7ff b8a3 	b.w	800778a <_svfprintf_r+0x512>
 8008644:	3210      	adds	r2, #16
 8008646:	2b07      	cmp	r3, #7
 8008648:	6067      	str	r7, [r4, #4]
 800864a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 800864e:	dc02      	bgt.n	8008656 <_svfprintf_r+0x13de>
 8008650:	3408      	adds	r4, #8
 8008652:	3d10      	subs	r5, #16
 8008654:	e7d6      	b.n	8008604 <_svfprintf_r+0x138c>
 8008656:	aa28      	add	r2, sp, #160	; 0xa0
 8008658:	4649      	mov	r1, r9
 800865a:	9807      	ldr	r0, [sp, #28]
 800865c:	f003 fcf8 	bl	800c050 <__ssprint_r>
 8008660:	2800      	cmp	r0, #0
 8008662:	d1e5      	bne.n	8008630 <_svfprintf_r+0x13b8>
 8008664:	ac2b      	add	r4, sp, #172	; 0xac
 8008666:	e7f4      	b.n	8008652 <_svfprintf_r+0x13da>
 8008668:	4641      	mov	r1, r8
 800866a:	9807      	ldr	r0, [sp, #28]
 800866c:	f002 fae8 	bl	800ac40 <_free_r>
 8008670:	f7ff bbb4 	b.w	8007ddc <_svfprintf_r+0xb64>
 8008674:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008676:	2b00      	cmp	r3, #0
 8008678:	f43f a887 	beq.w	800778a <_svfprintf_r+0x512>
 800867c:	aa28      	add	r2, sp, #160	; 0xa0
 800867e:	4649      	mov	r1, r9
 8008680:	9807      	ldr	r0, [sp, #28]
 8008682:	f003 fce5 	bl	800c050 <__ssprint_r>
 8008686:	f7ff b880 	b.w	800778a <_svfprintf_r+0x512>
 800868a:	bf00      	nop
 800868c:	0800c7b4 	.word	0x0800c7b4
 8008690:	0800c7a4 	.word	0x0800c7a4

08008694 <_vfprintf_r>:
 8008694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008698:	b0d5      	sub	sp, #340	; 0x154
 800869a:	4689      	mov	r9, r1
 800869c:	9207      	str	r2, [sp, #28]
 800869e:	461c      	mov	r4, r3
 80086a0:	461e      	mov	r6, r3
 80086a2:	4683      	mov	fp, r0
 80086a4:	f002 fcf4 	bl	800b090 <_localeconv_r>
 80086a8:	6803      	ldr	r3, [r0, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	931a      	str	r3, [sp, #104]	; 0x68
 80086ae:	f7f7 fd4f 	bl	8000150 <strlen>
 80086b2:	900f      	str	r0, [sp, #60]	; 0x3c
 80086b4:	f1bb 0f00 	cmp.w	fp, #0
 80086b8:	d005      	beq.n	80086c6 <_vfprintf_r+0x32>
 80086ba:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 80086be:	b913      	cbnz	r3, 80086c6 <_vfprintf_r+0x32>
 80086c0:	4658      	mov	r0, fp
 80086c2:	f002 fa2d 	bl	800ab20 <__sinit>
 80086c6:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80086ca:	07d8      	lsls	r0, r3, #31
 80086cc:	d407      	bmi.n	80086de <_vfprintf_r+0x4a>
 80086ce:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80086d2:	0599      	lsls	r1, r3, #22
 80086d4:	d403      	bmi.n	80086de <_vfprintf_r+0x4a>
 80086d6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80086da:	f002 fce9 	bl	800b0b0 <__retarget_lock_acquire_recursive>
 80086de:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 80086e2:	049a      	lsls	r2, r3, #18
 80086e4:	d409      	bmi.n	80086fa <_vfprintf_r+0x66>
 80086e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80086ea:	f8a9 300c 	strh.w	r3, [r9, #12]
 80086ee:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80086f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086f6:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 80086fa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80086fe:	071f      	lsls	r7, r3, #28
 8008700:	d502      	bpl.n	8008708 <_vfprintf_r+0x74>
 8008702:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008706:	b9a3      	cbnz	r3, 8008732 <_vfprintf_r+0x9e>
 8008708:	4649      	mov	r1, r9
 800870a:	4658      	mov	r0, fp
 800870c:	f001 fa74 	bl	8009bf8 <__swsetup_r>
 8008710:	b178      	cbz	r0, 8008732 <_vfprintf_r+0x9e>
 8008712:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8008716:	07dd      	lsls	r5, r3, #31
 8008718:	d407      	bmi.n	800872a <_vfprintf_r+0x96>
 800871a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800871e:	059c      	lsls	r4, r3, #22
 8008720:	d403      	bmi.n	800872a <_vfprintf_r+0x96>
 8008722:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8008726:	f002 fcc4 	bl	800b0b2 <__retarget_lock_release_recursive>
 800872a:	f04f 33ff 	mov.w	r3, #4294967295
 800872e:	9310      	str	r3, [sp, #64]	; 0x40
 8008730:	e01a      	b.n	8008768 <_vfprintf_r+0xd4>
 8008732:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008736:	f003 021a 	and.w	r2, r3, #26
 800873a:	2a0a      	cmp	r2, #10
 800873c:	d118      	bne.n	8008770 <_vfprintf_r+0xdc>
 800873e:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 8008742:	2a00      	cmp	r2, #0
 8008744:	db14      	blt.n	8008770 <_vfprintf_r+0xdc>
 8008746:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 800874a:	07d0      	lsls	r0, r2, #31
 800874c:	d405      	bmi.n	800875a <_vfprintf_r+0xc6>
 800874e:	0599      	lsls	r1, r3, #22
 8008750:	d403      	bmi.n	800875a <_vfprintf_r+0xc6>
 8008752:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8008756:	f002 fcac 	bl	800b0b2 <__retarget_lock_release_recursive>
 800875a:	4623      	mov	r3, r4
 800875c:	9a07      	ldr	r2, [sp, #28]
 800875e:	4649      	mov	r1, r9
 8008760:	4658      	mov	r0, fp
 8008762:	f001 f9fb 	bl	8009b5c <__sbprintf>
 8008766:	9010      	str	r0, [sp, #64]	; 0x40
 8008768:	9810      	ldr	r0, [sp, #64]	; 0x40
 800876a:	b055      	add	sp, #340	; 0x154
 800876c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008770:	2300      	movs	r3, #0
 8008772:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8008776:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 800877a:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 800877e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8008782:	ac2b      	add	r4, sp, #172	; 0xac
 8008784:	9428      	str	r4, [sp, #160]	; 0xa0
 8008786:	9308      	str	r3, [sp, #32]
 8008788:	930c      	str	r3, [sp, #48]	; 0x30
 800878a:	9316      	str	r3, [sp, #88]	; 0x58
 800878c:	931d      	str	r3, [sp, #116]	; 0x74
 800878e:	9310      	str	r3, [sp, #64]	; 0x40
 8008790:	9d07      	ldr	r5, [sp, #28]
 8008792:	462b      	mov	r3, r5
 8008794:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008798:	b112      	cbz	r2, 80087a0 <_vfprintf_r+0x10c>
 800879a:	2a25      	cmp	r2, #37	; 0x25
 800879c:	f040 80e4 	bne.w	8008968 <_vfprintf_r+0x2d4>
 80087a0:	9b07      	ldr	r3, [sp, #28]
 80087a2:	1aef      	subs	r7, r5, r3
 80087a4:	d00e      	beq.n	80087c4 <_vfprintf_r+0x130>
 80087a6:	e9c4 3700 	strd	r3, r7, [r4]
 80087aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80087ac:	443b      	add	r3, r7
 80087ae:	932a      	str	r3, [sp, #168]	; 0xa8
 80087b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80087b2:	3301      	adds	r3, #1
 80087b4:	2b07      	cmp	r3, #7
 80087b6:	9329      	str	r3, [sp, #164]	; 0xa4
 80087b8:	f300 80d8 	bgt.w	800896c <_vfprintf_r+0x2d8>
 80087bc:	3408      	adds	r4, #8
 80087be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087c0:	443b      	add	r3, r7
 80087c2:	9310      	str	r3, [sp, #64]	; 0x40
 80087c4:	782b      	ldrb	r3, [r5, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f001 81b5 	beq.w	8009b36 <_vfprintf_r+0x14a2>
 80087cc:	1c6b      	adds	r3, r5, #1
 80087ce:	930e      	str	r3, [sp, #56]	; 0x38
 80087d0:	2300      	movs	r3, #0
 80087d2:	f04f 35ff 	mov.w	r5, #4294967295
 80087d6:	469a      	mov	sl, r3
 80087d8:	270a      	movs	r7, #10
 80087da:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80087de:	9311      	str	r3, [sp, #68]	; 0x44
 80087e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	930a      	str	r3, [sp, #40]	; 0x28
 80087e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087e8:	3301      	adds	r3, #1
 80087ea:	930e      	str	r3, [sp, #56]	; 0x38
 80087ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ee:	3b20      	subs	r3, #32
 80087f0:	2b5a      	cmp	r3, #90	; 0x5a
 80087f2:	f200 8627 	bhi.w	8009444 <_vfprintf_r+0xdb0>
 80087f6:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <_vfprintf_r+0x168>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	080089ff 	.word	0x080089ff
 8008800:	08009445 	.word	0x08009445
 8008804:	08009445 	.word	0x08009445
 8008808:	08008a11 	.word	0x08008a11
 800880c:	08009445 	.word	0x08009445
 8008810:	08009445 	.word	0x08009445
 8008814:	08009445 	.word	0x08009445
 8008818:	080089c5 	.word	0x080089c5
 800881c:	08009445 	.word	0x08009445
 8008820:	08009445 	.word	0x08009445
 8008824:	08008a17 	.word	0x08008a17
 8008828:	08008a2d 	.word	0x08008a2d
 800882c:	08009445 	.word	0x08009445
 8008830:	08008a27 	.word	0x08008a27
 8008834:	08008a31 	.word	0x08008a31
 8008838:	08009445 	.word	0x08009445
 800883c:	08008a63 	.word	0x08008a63
 8008840:	08008a69 	.word	0x08008a69
 8008844:	08008a69 	.word	0x08008a69
 8008848:	08008a69 	.word	0x08008a69
 800884c:	08008a69 	.word	0x08008a69
 8008850:	08008a69 	.word	0x08008a69
 8008854:	08008a69 	.word	0x08008a69
 8008858:	08008a69 	.word	0x08008a69
 800885c:	08008a69 	.word	0x08008a69
 8008860:	08008a69 	.word	0x08008a69
 8008864:	08009445 	.word	0x08009445
 8008868:	08009445 	.word	0x08009445
 800886c:	08009445 	.word	0x08009445
 8008870:	08009445 	.word	0x08009445
 8008874:	08009445 	.word	0x08009445
 8008878:	08009445 	.word	0x08009445
 800887c:	08009445 	.word	0x08009445
 8008880:	08008b55 	.word	0x08008b55
 8008884:	08009445 	.word	0x08009445
 8008888:	08008ac3 	.word	0x08008ac3
 800888c:	08008ae5 	.word	0x08008ae5
 8008890:	08008b55 	.word	0x08008b55
 8008894:	08008b55 	.word	0x08008b55
 8008898:	08008b55 	.word	0x08008b55
 800889c:	08009445 	.word	0x08009445
 80088a0:	08009445 	.word	0x08009445
 80088a4:	08009445 	.word	0x08009445
 80088a8:	08009445 	.word	0x08009445
 80088ac:	08008a89 	.word	0x08008a89
 80088b0:	08009445 	.word	0x08009445
 80088b4:	08009445 	.word	0x08009445
 80088b8:	08009039 	.word	0x08009039
 80088bc:	08009445 	.word	0x08009445
 80088c0:	08009445 	.word	0x08009445
 80088c4:	08009445 	.word	0x08009445
 80088c8:	080090c5 	.word	0x080090c5
 80088cc:	08009445 	.word	0x08009445
 80088d0:	080092a5 	.word	0x080092a5
 80088d4:	08009445 	.word	0x08009445
 80088d8:	08009445 	.word	0x08009445
 80088dc:	08008985 	.word	0x08008985
 80088e0:	08009445 	.word	0x08009445
 80088e4:	08009445 	.word	0x08009445
 80088e8:	08009445 	.word	0x08009445
 80088ec:	08009445 	.word	0x08009445
 80088f0:	08009445 	.word	0x08009445
 80088f4:	08009445 	.word	0x08009445
 80088f8:	08009445 	.word	0x08009445
 80088fc:	08009445 	.word	0x08009445
 8008900:	08008b55 	.word	0x08008b55
 8008904:	08009445 	.word	0x08009445
 8008908:	08008ac3 	.word	0x08008ac3
 800890c:	08008ae9 	.word	0x08008ae9
 8008910:	08008b55 	.word	0x08008b55
 8008914:	08008b55 	.word	0x08008b55
 8008918:	08008b55 	.word	0x08008b55
 800891c:	08008a8f 	.word	0x08008a8f
 8008920:	08008ae9 	.word	0x08008ae9
 8008924:	08008ab7 	.word	0x08008ab7
 8008928:	08009445 	.word	0x08009445
 800892c:	08008aa9 	.word	0x08008aa9
 8008930:	08009445 	.word	0x08009445
 8008934:	08008ff3 	.word	0x08008ff3
 8008938:	0800903d 	.word	0x0800903d
 800893c:	080090a5 	.word	0x080090a5
 8008940:	08008ab7 	.word	0x08008ab7
 8008944:	08009445 	.word	0x08009445
 8008948:	080090c5 	.word	0x080090c5
 800894c:	080087e1 	.word	0x080087e1
 8008950:	080092a9 	.word	0x080092a9
 8008954:	08009445 	.word	0x08009445
 8008958:	08009445 	.word	0x08009445
 800895c:	080092e7 	.word	0x080092e7
 8008960:	08009445 	.word	0x08009445
 8008964:	080087e1 	.word	0x080087e1
 8008968:	461d      	mov	r5, r3
 800896a:	e712      	b.n	8008792 <_vfprintf_r+0xfe>
 800896c:	aa28      	add	r2, sp, #160	; 0xa0
 800896e:	4649      	mov	r1, r9
 8008970:	4658      	mov	r0, fp
 8008972:	f003 fbf2 	bl	800c15a <__sprint_r>
 8008976:	2800      	cmp	r0, #0
 8008978:	f040 8157 	bne.w	8008c2a <_vfprintf_r+0x596>
 800897c:	ac2b      	add	r4, sp, #172	; 0xac
 800897e:	e71e      	b.n	80087be <_vfprintf_r+0x12a>
 8008980:	461e      	mov	r6, r3
 8008982:	e72d      	b.n	80087e0 <_vfprintf_r+0x14c>
 8008984:	4bb2      	ldr	r3, [pc, #712]	; (8008c50 <_vfprintf_r+0x5bc>)
 8008986:	f01a 0f20 	tst.w	sl, #32
 800898a:	931c      	str	r3, [sp, #112]	; 0x70
 800898c:	f000 84ae 	beq.w	80092ec <_vfprintf_r+0xc58>
 8008990:	3607      	adds	r6, #7
 8008992:	f026 0607 	bic.w	r6, r6, #7
 8008996:	f106 0308 	add.w	r3, r6, #8
 800899a:	930d      	str	r3, [sp, #52]	; 0x34
 800899c:	e9d6 6700 	ldrd	r6, r7, [r6]
 80089a0:	f01a 0f01 	tst.w	sl, #1
 80089a4:	d00a      	beq.n	80089bc <_vfprintf_r+0x328>
 80089a6:	ea56 0307 	orrs.w	r3, r6, r7
 80089aa:	d007      	beq.n	80089bc <_vfprintf_r+0x328>
 80089ac:	2330      	movs	r3, #48	; 0x30
 80089ae:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80089b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b4:	f04a 0a02 	orr.w	sl, sl, #2
 80089b8:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 80089bc:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80089c0:	2302      	movs	r3, #2
 80089c2:	e349      	b.n	8009058 <_vfprintf_r+0x9c4>
 80089c4:	4658      	mov	r0, fp
 80089c6:	f002 fb63 	bl	800b090 <_localeconv_r>
 80089ca:	6843      	ldr	r3, [r0, #4]
 80089cc:	4618      	mov	r0, r3
 80089ce:	931d      	str	r3, [sp, #116]	; 0x74
 80089d0:	f7f7 fbbe 	bl	8000150 <strlen>
 80089d4:	9016      	str	r0, [sp, #88]	; 0x58
 80089d6:	4658      	mov	r0, fp
 80089d8:	f002 fb5a 	bl	800b090 <_localeconv_r>
 80089dc:	6883      	ldr	r3, [r0, #8]
 80089de:	930c      	str	r3, [sp, #48]	; 0x30
 80089e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f43f aefc 	beq.w	80087e0 <_vfprintf_r+0x14c>
 80089e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f43f aef8 	beq.w	80087e0 <_vfprintf_r+0x14c>
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f43f aef4 	beq.w	80087e0 <_vfprintf_r+0x14c>
 80089f8:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80089fc:	e6f0      	b.n	80087e0 <_vfprintf_r+0x14c>
 80089fe:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f47f aeec 	bne.w	80087e0 <_vfprintf_r+0x14c>
 8008a08:	2320      	movs	r3, #32
 8008a0a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8008a0e:	e6e7      	b.n	80087e0 <_vfprintf_r+0x14c>
 8008a10:	f04a 0a01 	orr.w	sl, sl, #1
 8008a14:	e6e4      	b.n	80087e0 <_vfprintf_r+0x14c>
 8008a16:	6832      	ldr	r2, [r6, #0]
 8008a18:	1d33      	adds	r3, r6, #4
 8008a1a:	2a00      	cmp	r2, #0
 8008a1c:	9211      	str	r2, [sp, #68]	; 0x44
 8008a1e:	daaf      	bge.n	8008980 <_vfprintf_r+0x2ec>
 8008a20:	461e      	mov	r6, r3
 8008a22:	4252      	negs	r2, r2
 8008a24:	9211      	str	r2, [sp, #68]	; 0x44
 8008a26:	f04a 0a04 	orr.w	sl, sl, #4
 8008a2a:	e6d9      	b.n	80087e0 <_vfprintf_r+0x14c>
 8008a2c:	232b      	movs	r3, #43	; 0x2b
 8008a2e:	e7ec      	b.n	8008a0a <_vfprintf_r+0x376>
 8008a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a34:	7812      	ldrb	r2, [r2, #0]
 8008a36:	3301      	adds	r3, #1
 8008a38:	2a2a      	cmp	r2, #42	; 0x2a
 8008a3a:	920a      	str	r2, [sp, #40]	; 0x28
 8008a3c:	d10f      	bne.n	8008a5e <_vfprintf_r+0x3ca>
 8008a3e:	6835      	ldr	r5, [r6, #0]
 8008a40:	930e      	str	r3, [sp, #56]	; 0x38
 8008a42:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8008a46:	3604      	adds	r6, #4
 8008a48:	e6ca      	b.n	80087e0 <_vfprintf_r+0x14c>
 8008a4a:	fb07 2505 	mla	r5, r7, r5, r2
 8008a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a52:	920a      	str	r2, [sp, #40]	; 0x28
 8008a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a56:	3a30      	subs	r2, #48	; 0x30
 8008a58:	2a09      	cmp	r2, #9
 8008a5a:	d9f6      	bls.n	8008a4a <_vfprintf_r+0x3b6>
 8008a5c:	e6c5      	b.n	80087ea <_vfprintf_r+0x156>
 8008a5e:	2500      	movs	r5, #0
 8008a60:	e7f8      	b.n	8008a54 <_vfprintf_r+0x3c0>
 8008a62:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8008a66:	e6bb      	b.n	80087e0 <_vfprintf_r+0x14c>
 8008a68:	2200      	movs	r2, #0
 8008a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a6c:	9211      	str	r2, [sp, #68]	; 0x44
 8008a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a70:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008a72:	3a30      	subs	r2, #48	; 0x30
 8008a74:	fb07 2201 	mla	r2, r7, r1, r2
 8008a78:	9211      	str	r2, [sp, #68]	; 0x44
 8008a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a7e:	920a      	str	r2, [sp, #40]	; 0x28
 8008a80:	3a30      	subs	r2, #48	; 0x30
 8008a82:	2a09      	cmp	r2, #9
 8008a84:	d9f3      	bls.n	8008a6e <_vfprintf_r+0x3da>
 8008a86:	e6b0      	b.n	80087ea <_vfprintf_r+0x156>
 8008a88:	f04a 0a08 	orr.w	sl, sl, #8
 8008a8c:	e6a8      	b.n	80087e0 <_vfprintf_r+0x14c>
 8008a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	2b68      	cmp	r3, #104	; 0x68
 8008a94:	bf01      	itttt	eq
 8008a96:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 8008a98:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8008a9c:	3301      	addeq	r3, #1
 8008a9e:	930e      	streq	r3, [sp, #56]	; 0x38
 8008aa0:	bf18      	it	ne
 8008aa2:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8008aa6:	e69b      	b.n	80087e0 <_vfprintf_r+0x14c>
 8008aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b6c      	cmp	r3, #108	; 0x6c
 8008aae:	d105      	bne.n	8008abc <_vfprintf_r+0x428>
 8008ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ab6:	f04a 0a20 	orr.w	sl, sl, #32
 8008aba:	e691      	b.n	80087e0 <_vfprintf_r+0x14c>
 8008abc:	f04a 0a10 	orr.w	sl, sl, #16
 8008ac0:	e68e      	b.n	80087e0 <_vfprintf_r+0x14c>
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	1d33      	adds	r3, r6, #4
 8008ac6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ac8:	6833      	ldr	r3, [r6, #0]
 8008aca:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8008ace:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8008ad2:	ab3b      	add	r3, sp, #236	; 0xec
 8008ad4:	4680      	mov	r8, r0
 8008ad6:	2501      	movs	r5, #1
 8008ad8:	9012      	str	r0, [sp, #72]	; 0x48
 8008ada:	4607      	mov	r7, r0
 8008adc:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ade:	4606      	mov	r6, r0
 8008ae0:	9307      	str	r3, [sp, #28]
 8008ae2:	e308      	b.n	80090f6 <_vfprintf_r+0xa62>
 8008ae4:	f04a 0a10 	orr.w	sl, sl, #16
 8008ae8:	f01a 0f20 	tst.w	sl, #32
 8008aec:	d01f      	beq.n	8008b2e <_vfprintf_r+0x49a>
 8008aee:	3607      	adds	r6, #7
 8008af0:	f026 0607 	bic.w	r6, r6, #7
 8008af4:	f106 0308 	add.w	r3, r6, #8
 8008af8:	930d      	str	r3, [sp, #52]	; 0x34
 8008afa:	e9d6 6700 	ldrd	r6, r7, [r6]
 8008afe:	2e00      	cmp	r6, #0
 8008b00:	f177 0300 	sbcs.w	r3, r7, #0
 8008b04:	da05      	bge.n	8008b12 <_vfprintf_r+0x47e>
 8008b06:	232d      	movs	r3, #45	; 0x2d
 8008b08:	4276      	negs	r6, r6
 8008b0a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8008b0e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8008b12:	1c6b      	adds	r3, r5, #1
 8008b14:	f040 83fd 	bne.w	8009312 <_vfprintf_r+0xc7e>
 8008b18:	2f00      	cmp	r7, #0
 8008b1a:	bf08      	it	eq
 8008b1c:	2e0a      	cmpeq	r6, #10
 8008b1e:	f080 8425 	bcs.w	800936c <_vfprintf_r+0xcd8>
 8008b22:	3630      	adds	r6, #48	; 0x30
 8008b24:	ab54      	add	r3, sp, #336	; 0x150
 8008b26:	f803 6d01 	strb.w	r6, [r3, #-1]!
 8008b2a:	f000 bc15 	b.w	8009358 <_vfprintf_r+0xcc4>
 8008b2e:	1d33      	adds	r3, r6, #4
 8008b30:	f01a 0f10 	tst.w	sl, #16
 8008b34:	930d      	str	r3, [sp, #52]	; 0x34
 8008b36:	d002      	beq.n	8008b3e <_vfprintf_r+0x4aa>
 8008b38:	6836      	ldr	r6, [r6, #0]
 8008b3a:	17f7      	asrs	r7, r6, #31
 8008b3c:	e7df      	b.n	8008afe <_vfprintf_r+0x46a>
 8008b3e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008b42:	6836      	ldr	r6, [r6, #0]
 8008b44:	d001      	beq.n	8008b4a <_vfprintf_r+0x4b6>
 8008b46:	b236      	sxth	r6, r6
 8008b48:	e7f7      	b.n	8008b3a <_vfprintf_r+0x4a6>
 8008b4a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008b4e:	bf18      	it	ne
 8008b50:	b276      	sxtbne	r6, r6
 8008b52:	e7f2      	b.n	8008b3a <_vfprintf_r+0x4a6>
 8008b54:	3607      	adds	r6, #7
 8008b56:	f026 0607 	bic.w	r6, r6, #7
 8008b5a:	f106 0308 	add.w	r3, r6, #8
 8008b5e:	930d      	str	r3, [sp, #52]	; 0x34
 8008b60:	6833      	ldr	r3, [r6, #0]
 8008b62:	f04f 32ff 	mov.w	r2, #4294967295
 8008b66:	9314      	str	r3, [sp, #80]	; 0x50
 8008b68:	6873      	ldr	r3, [r6, #4]
 8008b6a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008b6c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8008b70:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b72:	4638      	mov	r0, r7
 8008b74:	4b37      	ldr	r3, [pc, #220]	; (8008c54 <_vfprintf_r+0x5c0>)
 8008b76:	4631      	mov	r1, r6
 8008b78:	f7f7 ff48 	bl	8000a0c <__aeabi_dcmpun>
 8008b7c:	bb08      	cbnz	r0, 8008bc2 <_vfprintf_r+0x52e>
 8008b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b82:	4b34      	ldr	r3, [pc, #208]	; (8008c54 <_vfprintf_r+0x5c0>)
 8008b84:	4638      	mov	r0, r7
 8008b86:	4631      	mov	r1, r6
 8008b88:	f7f7 ff22 	bl	80009d0 <__aeabi_dcmple>
 8008b8c:	b9c8      	cbnz	r0, 8008bc2 <_vfprintf_r+0x52e>
 8008b8e:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008b92:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8008b96:	f7f7 ff11 	bl	80009bc <__aeabi_dcmplt>
 8008b9a:	b110      	cbz	r0, 8008ba2 <_vfprintf_r+0x50e>
 8008b9c:	232d      	movs	r3, #45	; 0x2d
 8008b9e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8008ba2:	4a2d      	ldr	r2, [pc, #180]	; (8008c58 <_vfprintf_r+0x5c4>)
 8008ba4:	4b2d      	ldr	r3, [pc, #180]	; (8008c5c <_vfprintf_r+0x5c8>)
 8008ba6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ba8:	f04f 0800 	mov.w	r8, #0
 8008bac:	2947      	cmp	r1, #71	; 0x47
 8008bae:	bfd8      	it	le
 8008bb0:	461a      	movle	r2, r3
 8008bb2:	2503      	movs	r5, #3
 8008bb4:	9207      	str	r2, [sp, #28]
 8008bb6:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8008bba:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8008bbe:	f000 bc19 	b.w	80093f4 <_vfprintf_r+0xd60>
 8008bc2:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8008bc6:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8008bca:	f7f7 ff1f 	bl	8000a0c <__aeabi_dcmpun>
 8008bce:	4680      	mov	r8, r0
 8008bd0:	b140      	cbz	r0, 8008be4 <_vfprintf_r+0x550>
 8008bd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bd4:	4a22      	ldr	r2, [pc, #136]	; (8008c60 <_vfprintf_r+0x5cc>)
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	bfbc      	itt	lt
 8008bda:	232d      	movlt	r3, #45	; 0x2d
 8008bdc:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
 8008be0:	4b20      	ldr	r3, [pc, #128]	; (8008c64 <_vfprintf_r+0x5d0>)
 8008be2:	e7e0      	b.n	8008ba6 <_vfprintf_r+0x512>
 8008be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008be6:	f023 0320 	bic.w	r3, r3, #32
 8008bea:	2b41      	cmp	r3, #65	; 0x41
 8008bec:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bee:	d13b      	bne.n	8008c68 <_vfprintf_r+0x5d4>
 8008bf0:	2330      	movs	r3, #48	; 0x30
 8008bf2:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8008bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bf8:	f04a 0a02 	orr.w	sl, sl, #2
 8008bfc:	2b61      	cmp	r3, #97	; 0x61
 8008bfe:	bf14      	ite	ne
 8008c00:	2358      	movne	r3, #88	; 0x58
 8008c02:	2378      	moveq	r3, #120	; 0x78
 8008c04:	2d63      	cmp	r5, #99	; 0x63
 8008c06:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8008c0a:	f340 811b 	ble.w	8008e44 <_vfprintf_r+0x7b0>
 8008c0e:	1c69      	adds	r1, r5, #1
 8008c10:	4658      	mov	r0, fp
 8008c12:	f002 fabb 	bl	800b18c <_malloc_r>
 8008c16:	9007      	str	r0, [sp, #28]
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	f040 8116 	bne.w	8008e4a <_vfprintf_r+0x7b6>
 8008c1e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c26:	f8a9 300c 	strh.w	r3, [r9, #12]
 8008c2a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8008c2e:	07d8      	lsls	r0, r3, #31
 8008c30:	d407      	bmi.n	8008c42 <_vfprintf_r+0x5ae>
 8008c32:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008c36:	0599      	lsls	r1, r3, #22
 8008c38:	d403      	bmi.n	8008c42 <_vfprintf_r+0x5ae>
 8008c3a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8008c3e:	f002 fa38 	bl	800b0b2 <__retarget_lock_release_recursive>
 8008c42:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008c46:	065a      	lsls	r2, r3, #25
 8008c48:	f57f ad8e 	bpl.w	8008768 <_vfprintf_r+0xd4>
 8008c4c:	e56d      	b.n	800872a <_vfprintf_r+0x96>
 8008c4e:	bf00      	nop
 8008c50:	0800c791 	.word	0x0800c791
 8008c54:	7fefffff 	.word	0x7fefffff
 8008c58:	0800c774 	.word	0x0800c774
 8008c5c:	0800c770 	.word	0x0800c770
 8008c60:	0800c77c 	.word	0x0800c77c
 8008c64:	0800c778 	.word	0x0800c778
 8008c68:	1c6a      	adds	r2, r5, #1
 8008c6a:	f000 80f1 	beq.w	8008e50 <_vfprintf_r+0x7bc>
 8008c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c70:	2b47      	cmp	r3, #71	; 0x47
 8008c72:	d102      	bne.n	8008c7a <_vfprintf_r+0x5e6>
 8008c74:	2d00      	cmp	r5, #0
 8008c76:	f000 80ed 	beq.w	8008e54 <_vfprintf_r+0x7c0>
 8008c7a:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8008c7e:	9315      	str	r3, [sp, #84]	; 0x54
 8008c80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c82:	1e1e      	subs	r6, r3, #0
 8008c84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c86:	9308      	str	r3, [sp, #32]
 8008c88:	bfb7      	itett	lt
 8008c8a:	4633      	movlt	r3, r6
 8008c8c:	2300      	movge	r3, #0
 8008c8e:	f103 4600 	addlt.w	r6, r3, #2147483648	; 0x80000000
 8008c92:	232d      	movlt	r3, #45	; 0x2d
 8008c94:	9319      	str	r3, [sp, #100]	; 0x64
 8008c96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c98:	2b41      	cmp	r3, #65	; 0x41
 8008c9a:	f040 80ec 	bne.w	8008e76 <_vfprintf_r+0x7e2>
 8008c9e:	aa22      	add	r2, sp, #136	; 0x88
 8008ca0:	9808      	ldr	r0, [sp, #32]
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	f003 f93a 	bl	800bf1c <frexp>
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008cae:	f7f7 fc13 	bl	80004d8 <__aeabi_dmul>
 8008cb2:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008cb6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008cba:	f7f7 fe75 	bl	80009a8 <__aeabi_dcmpeq>
 8008cbe:	b108      	cbz	r0, 8008cc4 <_vfprintf_r+0x630>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	9322      	str	r3, [sp, #136]	; 0x88
 8008cc4:	4fa7      	ldr	r7, [pc, #668]	; (8008f64 <_vfprintf_r+0x8d0>)
 8008cc6:	4ba8      	ldr	r3, [pc, #672]	; (8008f68 <_vfprintf_r+0x8d4>)
 8008cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cca:	9e07      	ldr	r6, [sp, #28]
 8008ccc:	2a61      	cmp	r2, #97	; 0x61
 8008cce:	bf08      	it	eq
 8008cd0:	461f      	moveq	r7, r3
 8008cd2:	9712      	str	r7, [sp, #72]	; 0x48
 8008cd4:	1e6f      	subs	r7, r5, #1
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008cdc:	4ba3      	ldr	r3, [pc, #652]	; (8008f6c <_vfprintf_r+0x8d8>)
 8008cde:	f7f7 fbfb 	bl	80004d8 <__aeabi_dmul>
 8008ce2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008ce6:	f7f7 fea7 	bl	8000a38 <__aeabi_d2iz>
 8008cea:	901e      	str	r0, [sp, #120]	; 0x78
 8008cec:	f7f7 fb8a 	bl	8000404 <__aeabi_i2d>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008cf8:	f7f7 fa36 	bl	8000168 <__aeabi_dsub>
 8008cfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cfe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008d00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d04:	5c9b      	ldrb	r3, [r3, r2]
 8008d06:	971f      	str	r7, [sp, #124]	; 0x7c
 8008d08:	f806 3b01 	strb.w	r3, [r6], #1
 8008d0c:	1c7b      	adds	r3, r7, #1
 8008d0e:	d006      	beq.n	8008d1e <_vfprintf_r+0x68a>
 8008d10:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008d14:	3f01      	subs	r7, #1
 8008d16:	f7f7 fe47 	bl	80009a8 <__aeabi_dcmpeq>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d0db      	beq.n	8008cd6 <_vfprintf_r+0x642>
 8008d1e:	2200      	movs	r2, #0
 8008d20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d24:	4b92      	ldr	r3, [pc, #584]	; (8008f70 <_vfprintf_r+0x8dc>)
 8008d26:	f7f7 fe67 	bl	80009f8 <__aeabi_dcmpgt>
 8008d2a:	b960      	cbnz	r0, 8008d46 <_vfprintf_r+0x6b2>
 8008d2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d30:	2200      	movs	r2, #0
 8008d32:	4b8f      	ldr	r3, [pc, #572]	; (8008f70 <_vfprintf_r+0x8dc>)
 8008d34:	f7f7 fe38 	bl	80009a8 <__aeabi_dcmpeq>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	f000 8097 	beq.w	8008e6c <_vfprintf_r+0x7d8>
 8008d3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008d40:	07df      	lsls	r7, r3, #31
 8008d42:	f140 8093 	bpl.w	8008e6c <_vfprintf_r+0x7d8>
 8008d46:	2030      	movs	r0, #48	; 0x30
 8008d48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d4a:	9626      	str	r6, [sp, #152]	; 0x98
 8008d4c:	7bd9      	ldrb	r1, [r3, #15]
 8008d4e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008d50:	1e53      	subs	r3, r2, #1
 8008d52:	9326      	str	r3, [sp, #152]	; 0x98
 8008d54:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8008d58:	428b      	cmp	r3, r1
 8008d5a:	d07e      	beq.n	8008e5a <_vfprintf_r+0x7c6>
 8008d5c:	2b39      	cmp	r3, #57	; 0x39
 8008d5e:	bf0b      	itete	eq
 8008d60:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 8008d62:	3301      	addne	r3, #1
 8008d64:	7a9b      	ldrbeq	r3, [r3, #10]
 8008d66:	b2db      	uxtbne	r3, r3
 8008d68:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008d6c:	4633      	mov	r3, r6
 8008d6e:	9a07      	ldr	r2, [sp, #28]
 8008d70:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8008d72:	1a9b      	subs	r3, r3, r2
 8008d74:	9308      	str	r3, [sp, #32]
 8008d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d78:	2b47      	cmp	r3, #71	; 0x47
 8008d7a:	f040 80c8 	bne.w	8008f0e <_vfprintf_r+0x87a>
 8008d7e:	1cf0      	adds	r0, r6, #3
 8008d80:	db02      	blt.n	8008d88 <_vfprintf_r+0x6f4>
 8008d82:	42b5      	cmp	r5, r6
 8008d84:	f280 80f6 	bge.w	8008f74 <_vfprintf_r+0x8e0>
 8008d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d8a:	3b02      	subs	r3, #2
 8008d8c:	930a      	str	r3, [sp, #40]	; 0x28
 8008d8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d90:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8008d94:	f021 0120 	bic.w	r1, r1, #32
 8008d98:	2941      	cmp	r1, #65	; 0x41
 8008d9a:	bf08      	it	eq
 8008d9c:	320f      	addeq	r2, #15
 8008d9e:	f106 33ff 	add.w	r3, r6, #4294967295
 8008da2:	bf06      	itte	eq
 8008da4:	b2d2      	uxtbeq	r2, r2
 8008da6:	2101      	moveq	r1, #1
 8008da8:	2100      	movne	r1, #0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8008db0:	bfb4      	ite	lt
 8008db2:	222d      	movlt	r2, #45	; 0x2d
 8008db4:	222b      	movge	r2, #43	; 0x2b
 8008db6:	9322      	str	r3, [sp, #136]	; 0x88
 8008db8:	bfb8      	it	lt
 8008dba:	f1c6 0301 	rsblt	r3, r6, #1
 8008dbe:	2b09      	cmp	r3, #9
 8008dc0:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8008dc4:	f340 80ba 	ble.w	8008f3c <_vfprintf_r+0x8a8>
 8008dc8:	250a      	movs	r5, #10
 8008dca:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8008dce:	fb93 f0f5 	sdiv	r0, r3, r5
 8008dd2:	fb05 3310 	mls	r3, r5, r0, r3
 8008dd6:	2809      	cmp	r0, #9
 8008dd8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8008ddc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008de0:	f102 31ff 	add.w	r1, r2, #4294967295
 8008de4:	4603      	mov	r3, r0
 8008de6:	f300 80a2 	bgt.w	8008f2e <_vfprintf_r+0x89a>
 8008dea:	3330      	adds	r3, #48	; 0x30
 8008dec:	f801 3c01 	strb.w	r3, [r1, #-1]
 8008df0:	3a02      	subs	r2, #2
 8008df2:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 8008df6:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8008dfa:	4282      	cmp	r2, r0
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	f0c0 8098 	bcc.w	8008f32 <_vfprintf_r+0x89e>
 8008e02:	9a08      	ldr	r2, [sp, #32]
 8008e04:	ab24      	add	r3, sp, #144	; 0x90
 8008e06:	1acb      	subs	r3, r1, r3
 8008e08:	2a01      	cmp	r2, #1
 8008e0a:	931b      	str	r3, [sp, #108]	; 0x6c
 8008e0c:	eb03 0502 	add.w	r5, r3, r2
 8008e10:	dc02      	bgt.n	8008e18 <_vfprintf_r+0x784>
 8008e12:	f01a 0f01 	tst.w	sl, #1
 8008e16:	d001      	beq.n	8008e1c <_vfprintf_r+0x788>
 8008e18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e1a:	441d      	add	r5, r3
 8008e1c:	2700      	movs	r7, #0
 8008e1e:	463e      	mov	r6, r7
 8008e20:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8008e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e28:	9315      	str	r3, [sp, #84]	; 0x54
 8008e2a:	970b      	str	r7, [sp, #44]	; 0x2c
 8008e2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 8314 	beq.w	800945c <_vfprintf_r+0xdc8>
 8008e34:	232d      	movs	r3, #45	; 0x2d
 8008e36:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8008e40:	9312      	str	r3, [sp, #72]	; 0x48
 8008e42:	e158      	b.n	80090f6 <_vfprintf_r+0xa62>
 8008e44:	ab3b      	add	r3, sp, #236	; 0xec
 8008e46:	9307      	str	r3, [sp, #28]
 8008e48:	e717      	b.n	8008c7a <_vfprintf_r+0x5e6>
 8008e4a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8008e4e:	e714      	b.n	8008c7a <_vfprintf_r+0x5e6>
 8008e50:	2506      	movs	r5, #6
 8008e52:	e712      	b.n	8008c7a <_vfprintf_r+0x5e6>
 8008e54:	46a8      	mov	r8, r5
 8008e56:	2501      	movs	r5, #1
 8008e58:	e70f      	b.n	8008c7a <_vfprintf_r+0x5e6>
 8008e5a:	f802 0c01 	strb.w	r0, [r2, #-1]
 8008e5e:	e776      	b.n	8008d4e <_vfprintf_r+0x6ba>
 8008e60:	f803 1b01 	strb.w	r1, [r3], #1
 8008e64:	1af2      	subs	r2, r6, r3
 8008e66:	2a00      	cmp	r2, #0
 8008e68:	dafa      	bge.n	8008e60 <_vfprintf_r+0x7cc>
 8008e6a:	e780      	b.n	8008d6e <_vfprintf_r+0x6da>
 8008e6c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008e6e:	4633      	mov	r3, r6
 8008e70:	2130      	movs	r1, #48	; 0x30
 8008e72:	4416      	add	r6, r2
 8008e74:	e7f6      	b.n	8008e64 <_vfprintf_r+0x7d0>
 8008e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e78:	2b46      	cmp	r3, #70	; 0x46
 8008e7a:	d004      	beq.n	8008e86 <_vfprintf_r+0x7f2>
 8008e7c:	2b45      	cmp	r3, #69	; 0x45
 8008e7e:	d140      	bne.n	8008f02 <_vfprintf_r+0x86e>
 8008e80:	1c6f      	adds	r7, r5, #1
 8008e82:	2302      	movs	r3, #2
 8008e84:	e001      	b.n	8008e8a <_vfprintf_r+0x7f6>
 8008e86:	462f      	mov	r7, r5
 8008e88:	2303      	movs	r3, #3
 8008e8a:	aa26      	add	r2, sp, #152	; 0x98
 8008e8c:	9204      	str	r2, [sp, #16]
 8008e8e:	aa23      	add	r2, sp, #140	; 0x8c
 8008e90:	9203      	str	r2, [sp, #12]
 8008e92:	aa22      	add	r2, sp, #136	; 0x88
 8008e94:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	9a08      	ldr	r2, [sp, #32]
 8008e9c:	4633      	mov	r3, r6
 8008e9e:	4658      	mov	r0, fp
 8008ea0:	f000 ffa2 	bl	8009de8 <_dtoa_r>
 8008ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ea6:	9007      	str	r0, [sp, #28]
 8008ea8:	2b47      	cmp	r3, #71	; 0x47
 8008eaa:	d102      	bne.n	8008eb2 <_vfprintf_r+0x81e>
 8008eac:	f01a 0f01 	tst.w	sl, #1
 8008eb0:	d02b      	beq.n	8008f0a <_vfprintf_r+0x876>
 8008eb2:	9b07      	ldr	r3, [sp, #28]
 8008eb4:	443b      	add	r3, r7
 8008eb6:	9312      	str	r3, [sp, #72]	; 0x48
 8008eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eba:	2b46      	cmp	r3, #70	; 0x46
 8008ebc:	d111      	bne.n	8008ee2 <_vfprintf_r+0x84e>
 8008ebe:	9b07      	ldr	r3, [sp, #28]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	2b30      	cmp	r3, #48	; 0x30
 8008ec4:	d109      	bne.n	8008eda <_vfprintf_r+0x846>
 8008ec6:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008eca:	9808      	ldr	r0, [sp, #32]
 8008ecc:	4631      	mov	r1, r6
 8008ece:	f7f7 fd6b 	bl	80009a8 <__aeabi_dcmpeq>
 8008ed2:	b910      	cbnz	r0, 8008eda <_vfprintf_r+0x846>
 8008ed4:	f1c7 0701 	rsb	r7, r7, #1
 8008ed8:	9722      	str	r7, [sp, #136]	; 0x88
 8008eda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ede:	441a      	add	r2, r3
 8008ee0:	9212      	str	r2, [sp, #72]	; 0x48
 8008ee2:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008ee6:	9808      	ldr	r0, [sp, #32]
 8008ee8:	4631      	mov	r1, r6
 8008eea:	f7f7 fd5d 	bl	80009a8 <__aeabi_dcmpeq>
 8008eee:	b950      	cbnz	r0, 8008f06 <_vfprintf_r+0x872>
 8008ef0:	2230      	movs	r2, #48	; 0x30
 8008ef2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ef4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008ef6:	4299      	cmp	r1, r3
 8008ef8:	d907      	bls.n	8008f0a <_vfprintf_r+0x876>
 8008efa:	1c59      	adds	r1, r3, #1
 8008efc:	9126      	str	r1, [sp, #152]	; 0x98
 8008efe:	701a      	strb	r2, [r3, #0]
 8008f00:	e7f7      	b.n	8008ef2 <_vfprintf_r+0x85e>
 8008f02:	462f      	mov	r7, r5
 8008f04:	e7bd      	b.n	8008e82 <_vfprintf_r+0x7ee>
 8008f06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f08:	9326      	str	r3, [sp, #152]	; 0x98
 8008f0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f0c:	e72f      	b.n	8008d6e <_vfprintf_r+0x6da>
 8008f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f10:	2b46      	cmp	r3, #70	; 0x46
 8008f12:	f47f af3c 	bne.w	8008d8e <_vfprintf_r+0x6fa>
 8008f16:	2e00      	cmp	r6, #0
 8008f18:	dd1d      	ble.n	8008f56 <_vfprintf_r+0x8c2>
 8008f1a:	b915      	cbnz	r5, 8008f22 <_vfprintf_r+0x88e>
 8008f1c:	f01a 0f01 	tst.w	sl, #1
 8008f20:	d03c      	beq.n	8008f9c <_vfprintf_r+0x908>
 8008f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f24:	18f3      	adds	r3, r6, r3
 8008f26:	441d      	add	r5, r3
 8008f28:	2366      	movs	r3, #102	; 0x66
 8008f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f2c:	e03b      	b.n	8008fa6 <_vfprintf_r+0x912>
 8008f2e:	460a      	mov	r2, r1
 8008f30:	e74d      	b.n	8008dce <_vfprintf_r+0x73a>
 8008f32:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008f36:	f803 1b01 	strb.w	r1, [r3], #1
 8008f3a:	e75e      	b.n	8008dfa <_vfprintf_r+0x766>
 8008f3c:	b941      	cbnz	r1, 8008f50 <_vfprintf_r+0x8bc>
 8008f3e:	2230      	movs	r2, #48	; 0x30
 8008f40:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 8008f44:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 8008f48:	3330      	adds	r3, #48	; 0x30
 8008f4a:	1c51      	adds	r1, r2, #1
 8008f4c:	7013      	strb	r3, [r2, #0]
 8008f4e:	e758      	b.n	8008e02 <_vfprintf_r+0x76e>
 8008f50:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 8008f54:	e7f8      	b.n	8008f48 <_vfprintf_r+0x8b4>
 8008f56:	b915      	cbnz	r5, 8008f5e <_vfprintf_r+0x8ca>
 8008f58:	f01a 0f01 	tst.w	sl, #1
 8008f5c:	d020      	beq.n	8008fa0 <_vfprintf_r+0x90c>
 8008f5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f60:	3301      	adds	r3, #1
 8008f62:	e7e0      	b.n	8008f26 <_vfprintf_r+0x892>
 8008f64:	0800c791 	.word	0x0800c791
 8008f68:	0800c780 	.word	0x0800c780
 8008f6c:	40300000 	.word	0x40300000
 8008f70:	3fe00000 	.word	0x3fe00000
 8008f74:	9b08      	ldr	r3, [sp, #32]
 8008f76:	42b3      	cmp	r3, r6
 8008f78:	dc06      	bgt.n	8008f88 <_vfprintf_r+0x8f4>
 8008f7a:	f01a 0f01 	tst.w	sl, #1
 8008f7e:	d025      	beq.n	8008fcc <_vfprintf_r+0x938>
 8008f80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f82:	18f5      	adds	r5, r6, r3
 8008f84:	2367      	movs	r3, #103	; 0x67
 8008f86:	e7d0      	b.n	8008f2a <_vfprintf_r+0x896>
 8008f88:	9b08      	ldr	r3, [sp, #32]
 8008f8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f8c:	2e00      	cmp	r6, #0
 8008f8e:	eb03 0502 	add.w	r5, r3, r2
 8008f92:	dcf7      	bgt.n	8008f84 <_vfprintf_r+0x8f0>
 8008f94:	f1c6 0301 	rsb	r3, r6, #1
 8008f98:	441d      	add	r5, r3
 8008f9a:	e7f3      	b.n	8008f84 <_vfprintf_r+0x8f0>
 8008f9c:	4635      	mov	r5, r6
 8008f9e:	e7c3      	b.n	8008f28 <_vfprintf_r+0x894>
 8008fa0:	2366      	movs	r3, #102	; 0x66
 8008fa2:	2501      	movs	r5, #1
 8008fa4:	930a      	str	r3, [sp, #40]	; 0x28
 8008fa6:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8008faa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fac:	d01f      	beq.n	8008fee <_vfprintf_r+0x95a>
 8008fae:	2700      	movs	r7, #0
 8008fb0:	2e00      	cmp	r6, #0
 8008fb2:	970b      	str	r7, [sp, #44]	; 0x2c
 8008fb4:	f77f af3a 	ble.w	8008e2c <_vfprintf_r+0x798>
 8008fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2bff      	cmp	r3, #255	; 0xff
 8008fbe:	d107      	bne.n	8008fd0 <_vfprintf_r+0x93c>
 8008fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fc2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008fc4:	443b      	add	r3, r7
 8008fc6:	fb02 5503 	mla	r5, r2, r3, r5
 8008fca:	e72f      	b.n	8008e2c <_vfprintf_r+0x798>
 8008fcc:	4635      	mov	r5, r6
 8008fce:	e7d9      	b.n	8008f84 <_vfprintf_r+0x8f0>
 8008fd0:	42b3      	cmp	r3, r6
 8008fd2:	daf5      	bge.n	8008fc0 <_vfprintf_r+0x92c>
 8008fd4:	1af6      	subs	r6, r6, r3
 8008fd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fd8:	785b      	ldrb	r3, [r3, #1]
 8008fda:	b133      	cbz	r3, 8008fea <_vfprintf_r+0x956>
 8008fdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fde:	3301      	adds	r3, #1
 8008fe0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	930c      	str	r3, [sp, #48]	; 0x30
 8008fe8:	e7e6      	b.n	8008fb8 <_vfprintf_r+0x924>
 8008fea:	3701      	adds	r7, #1
 8008fec:	e7e4      	b.n	8008fb8 <_vfprintf_r+0x924>
 8008fee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008ff0:	e71c      	b.n	8008e2c <_vfprintf_r+0x798>
 8008ff2:	4632      	mov	r2, r6
 8008ff4:	f852 3b04 	ldr.w	r3, [r2], #4
 8008ff8:	f01a 0f20 	tst.w	sl, #32
 8008ffc:	920d      	str	r2, [sp, #52]	; 0x34
 8008ffe:	d009      	beq.n	8009014 <_vfprintf_r+0x980>
 8009000:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009002:	4610      	mov	r0, r2
 8009004:	17d1      	asrs	r1, r2, #31
 8009006:	e9c3 0100 	strd	r0, r1, [r3]
 800900a:	e9dd 630d 	ldrd	r6, r3, [sp, #52]	; 0x34
 800900e:	9307      	str	r3, [sp, #28]
 8009010:	f7ff bbbe 	b.w	8008790 <_vfprintf_r+0xfc>
 8009014:	f01a 0f10 	tst.w	sl, #16
 8009018:	d002      	beq.n	8009020 <_vfprintf_r+0x98c>
 800901a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	e7f4      	b.n	800900a <_vfprintf_r+0x976>
 8009020:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009024:	d002      	beq.n	800902c <_vfprintf_r+0x998>
 8009026:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009028:	801a      	strh	r2, [r3, #0]
 800902a:	e7ee      	b.n	800900a <_vfprintf_r+0x976>
 800902c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009030:	d0f3      	beq.n	800901a <_vfprintf_r+0x986>
 8009032:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009034:	701a      	strb	r2, [r3, #0]
 8009036:	e7e8      	b.n	800900a <_vfprintf_r+0x976>
 8009038:	f04a 0a10 	orr.w	sl, sl, #16
 800903c:	f01a 0f20 	tst.w	sl, #32
 8009040:	d01e      	beq.n	8009080 <_vfprintf_r+0x9ec>
 8009042:	3607      	adds	r6, #7
 8009044:	f026 0607 	bic.w	r6, r6, #7
 8009048:	f106 0308 	add.w	r3, r6, #8
 800904c:	930d      	str	r3, [sp, #52]	; 0x34
 800904e:	e9d6 6700 	ldrd	r6, r7, [r6]
 8009052:	2300      	movs	r3, #0
 8009054:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009058:	2200      	movs	r2, #0
 800905a:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 800905e:	1c6a      	adds	r2, r5, #1
 8009060:	f000 815a 	beq.w	8009318 <_vfprintf_r+0xc84>
 8009064:	4652      	mov	r2, sl
 8009066:	ea56 0107 	orrs.w	r1, r6, r7
 800906a:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800906e:	f040 8153 	bne.w	8009318 <_vfprintf_r+0xc84>
 8009072:	2d00      	cmp	r5, #0
 8009074:	f000 81d9 	beq.w	800942a <_vfprintf_r+0xd96>
 8009078:	2b01      	cmp	r3, #1
 800907a:	f040 8150 	bne.w	800931e <_vfprintf_r+0xc8a>
 800907e:	e550      	b.n	8008b22 <_vfprintf_r+0x48e>
 8009080:	1d33      	adds	r3, r6, #4
 8009082:	f01a 0f10 	tst.w	sl, #16
 8009086:	930d      	str	r3, [sp, #52]	; 0x34
 8009088:	d001      	beq.n	800908e <_vfprintf_r+0x9fa>
 800908a:	6836      	ldr	r6, [r6, #0]
 800908c:	e003      	b.n	8009096 <_vfprintf_r+0xa02>
 800908e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009092:	d002      	beq.n	800909a <_vfprintf_r+0xa06>
 8009094:	8836      	ldrh	r6, [r6, #0]
 8009096:	2700      	movs	r7, #0
 8009098:	e7db      	b.n	8009052 <_vfprintf_r+0x9be>
 800909a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800909e:	d0f4      	beq.n	800908a <_vfprintf_r+0x9f6>
 80090a0:	7836      	ldrb	r6, [r6, #0]
 80090a2:	e7f8      	b.n	8009096 <_vfprintf_r+0xa02>
 80090a4:	1d33      	adds	r3, r6, #4
 80090a6:	930d      	str	r3, [sp, #52]	; 0x34
 80090a8:	f647 0330 	movw	r3, #30768	; 0x7830
 80090ac:	2278      	movs	r2, #120	; 0x78
 80090ae:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 80090b2:	4bab      	ldr	r3, [pc, #684]	; (8009360 <_vfprintf_r+0xccc>)
 80090b4:	6836      	ldr	r6, [r6, #0]
 80090b6:	931c      	str	r3, [sp, #112]	; 0x70
 80090b8:	2700      	movs	r7, #0
 80090ba:	f04a 0a02 	orr.w	sl, sl, #2
 80090be:	2302      	movs	r3, #2
 80090c0:	920a      	str	r2, [sp, #40]	; 0x28
 80090c2:	e7c9      	b.n	8009058 <_vfprintf_r+0x9c4>
 80090c4:	1d33      	adds	r3, r6, #4
 80090c6:	930d      	str	r3, [sp, #52]	; 0x34
 80090c8:	6833      	ldr	r3, [r6, #0]
 80090ca:	2600      	movs	r6, #0
 80090cc:	1c69      	adds	r1, r5, #1
 80090ce:	9307      	str	r3, [sp, #28]
 80090d0:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 80090d4:	f000 80e0 	beq.w	8009298 <_vfprintf_r+0xc04>
 80090d8:	462a      	mov	r2, r5
 80090da:	4631      	mov	r1, r6
 80090dc:	4618      	mov	r0, r3
 80090de:	f002 fa8b 	bl	800b5f8 <memchr>
 80090e2:	4680      	mov	r8, r0
 80090e4:	2800      	cmp	r0, #0
 80090e6:	f43f ad68 	beq.w	8008bba <_vfprintf_r+0x526>
 80090ea:	46b0      	mov	r8, r6
 80090ec:	4637      	mov	r7, r6
 80090ee:	9b07      	ldr	r3, [sp, #28]
 80090f0:	9612      	str	r6, [sp, #72]	; 0x48
 80090f2:	1ac5      	subs	r5, r0, r3
 80090f4:	960b      	str	r6, [sp, #44]	; 0x2c
 80090f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090f8:	42ab      	cmp	r3, r5
 80090fa:	bfb8      	it	lt
 80090fc:	462b      	movlt	r3, r5
 80090fe:	9315      	str	r3, [sp, #84]	; 0x54
 8009100:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8009104:	b113      	cbz	r3, 800910c <_vfprintf_r+0xa78>
 8009106:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009108:	3301      	adds	r3, #1
 800910a:	9315      	str	r3, [sp, #84]	; 0x54
 800910c:	f01a 0302 	ands.w	r3, sl, #2
 8009110:	931e      	str	r3, [sp, #120]	; 0x78
 8009112:	bf1e      	ittt	ne
 8009114:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 8009116:	3302      	addne	r3, #2
 8009118:	9315      	strne	r3, [sp, #84]	; 0x54
 800911a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800911e:	931f      	str	r3, [sp, #124]	; 0x7c
 8009120:	d121      	bne.n	8009166 <_vfprintf_r+0xad2>
 8009122:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009124:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009126:	1a9b      	subs	r3, r3, r2
 8009128:	2b00      	cmp	r3, #0
 800912a:	9319      	str	r3, [sp, #100]	; 0x64
 800912c:	dd1b      	ble.n	8009166 <_vfprintf_r+0xad2>
 800912e:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8009132:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009134:	3201      	adds	r2, #1
 8009136:	2810      	cmp	r0, #16
 8009138:	488a      	ldr	r0, [pc, #552]	; (8009364 <_vfprintf_r+0xcd0>)
 800913a:	f104 0108 	add.w	r1, r4, #8
 800913e:	6020      	str	r0, [r4, #0]
 8009140:	f300 8190 	bgt.w	8009464 <_vfprintf_r+0xdd0>
 8009144:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009146:	2a07      	cmp	r2, #7
 8009148:	4403      	add	r3, r0
 800914a:	6060      	str	r0, [r4, #4]
 800914c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8009150:	f340 819d 	ble.w	800948e <_vfprintf_r+0xdfa>
 8009154:	aa28      	add	r2, sp, #160	; 0xa0
 8009156:	4649      	mov	r1, r9
 8009158:	4658      	mov	r0, fp
 800915a:	f002 fffe 	bl	800c15a <__sprint_r>
 800915e:	2800      	cmp	r0, #0
 8009160:	f040 84c7 	bne.w	8009af2 <_vfprintf_r+0x145e>
 8009164:	ac2b      	add	r4, sp, #172	; 0xac
 8009166:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 800916a:	b173      	cbz	r3, 800918a <_vfprintf_r+0xaf6>
 800916c:	f10d 0383 	add.w	r3, sp, #131	; 0x83
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	2301      	movs	r3, #1
 8009174:	6063      	str	r3, [r4, #4]
 8009176:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009178:	3301      	adds	r3, #1
 800917a:	932a      	str	r3, [sp, #168]	; 0xa8
 800917c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800917e:	3301      	adds	r3, #1
 8009180:	2b07      	cmp	r3, #7
 8009182:	9329      	str	r3, [sp, #164]	; 0xa4
 8009184:	f300 8185 	bgt.w	8009492 <_vfprintf_r+0xdfe>
 8009188:	3408      	adds	r4, #8
 800918a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800918c:	b16b      	cbz	r3, 80091aa <_vfprintf_r+0xb16>
 800918e:	ab21      	add	r3, sp, #132	; 0x84
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	2302      	movs	r3, #2
 8009194:	6063      	str	r3, [r4, #4]
 8009196:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009198:	3302      	adds	r3, #2
 800919a:	932a      	str	r3, [sp, #168]	; 0xa8
 800919c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800919e:	3301      	adds	r3, #1
 80091a0:	2b07      	cmp	r3, #7
 80091a2:	9329      	str	r3, [sp, #164]	; 0xa4
 80091a4:	f300 817f 	bgt.w	80094a6 <_vfprintf_r+0xe12>
 80091a8:	3408      	adds	r4, #8
 80091aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80091ac:	2b80      	cmp	r3, #128	; 0x80
 80091ae:	d121      	bne.n	80091f4 <_vfprintf_r+0xb60>
 80091b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80091b4:	1a9b      	subs	r3, r3, r2
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	9319      	str	r3, [sp, #100]	; 0x64
 80091ba:	dd1b      	ble.n	80091f4 <_vfprintf_r+0xb60>
 80091bc:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 80091c0:	9819      	ldr	r0, [sp, #100]	; 0x64
 80091c2:	3201      	adds	r2, #1
 80091c4:	2810      	cmp	r0, #16
 80091c6:	4868      	ldr	r0, [pc, #416]	; (8009368 <_vfprintf_r+0xcd4>)
 80091c8:	f104 0108 	add.w	r1, r4, #8
 80091cc:	6020      	str	r0, [r4, #0]
 80091ce:	f300 8174 	bgt.w	80094ba <_vfprintf_r+0xe26>
 80091d2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80091d4:	2a07      	cmp	r2, #7
 80091d6:	4403      	add	r3, r0
 80091d8:	6060      	str	r0, [r4, #4]
 80091da:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80091de:	f340 8181 	ble.w	80094e4 <_vfprintf_r+0xe50>
 80091e2:	aa28      	add	r2, sp, #160	; 0xa0
 80091e4:	4649      	mov	r1, r9
 80091e6:	4658      	mov	r0, fp
 80091e8:	f002 ffb7 	bl	800c15a <__sprint_r>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	f040 8480 	bne.w	8009af2 <_vfprintf_r+0x145e>
 80091f2:	ac2b      	add	r4, sp, #172	; 0xac
 80091f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091f6:	1b5b      	subs	r3, r3, r5
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	9312      	str	r3, [sp, #72]	; 0x48
 80091fc:	dd1b      	ble.n	8009236 <_vfprintf_r+0xba2>
 80091fe:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8009202:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009204:	3201      	adds	r2, #1
 8009206:	2810      	cmp	r0, #16
 8009208:	4857      	ldr	r0, [pc, #348]	; (8009368 <_vfprintf_r+0xcd4>)
 800920a:	f104 0108 	add.w	r1, r4, #8
 800920e:	6020      	str	r0, [r4, #0]
 8009210:	f300 816a 	bgt.w	80094e8 <_vfprintf_r+0xe54>
 8009214:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009216:	2a07      	cmp	r2, #7
 8009218:	4403      	add	r3, r0
 800921a:	6060      	str	r0, [r4, #4]
 800921c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8009220:	f340 8177 	ble.w	8009512 <_vfprintf_r+0xe7e>
 8009224:	aa28      	add	r2, sp, #160	; 0xa0
 8009226:	4649      	mov	r1, r9
 8009228:	4658      	mov	r0, fp
 800922a:	f002 ff96 	bl	800c15a <__sprint_r>
 800922e:	2800      	cmp	r0, #0
 8009230:	f040 845f 	bne.w	8009af2 <_vfprintf_r+0x145e>
 8009234:	ac2b      	add	r4, sp, #172	; 0xac
 8009236:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009238:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800923c:	9312      	str	r3, [sp, #72]	; 0x48
 800923e:	f040 816a 	bne.w	8009516 <_vfprintf_r+0xe82>
 8009242:	9b07      	ldr	r3, [sp, #28]
 8009244:	e9c4 3500 	strd	r3, r5, [r4]
 8009248:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800924a:	441d      	add	r5, r3
 800924c:	952a      	str	r5, [sp, #168]	; 0xa8
 800924e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009250:	3301      	adds	r3, #1
 8009252:	2b07      	cmp	r3, #7
 8009254:	9329      	str	r3, [sp, #164]	; 0xa4
 8009256:	f300 81a4 	bgt.w	80095a2 <_vfprintf_r+0xf0e>
 800925a:	3408      	adds	r4, #8
 800925c:	f01a 0f04 	tst.w	sl, #4
 8009260:	f040 8429 	bne.w	8009ab6 <_vfprintf_r+0x1422>
 8009264:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8009268:	9915      	ldr	r1, [sp, #84]	; 0x54
 800926a:	428a      	cmp	r2, r1
 800926c:	bfac      	ite	ge
 800926e:	189b      	addge	r3, r3, r2
 8009270:	185b      	addlt	r3, r3, r1
 8009272:	9310      	str	r3, [sp, #64]	; 0x40
 8009274:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009276:	b13b      	cbz	r3, 8009288 <_vfprintf_r+0xbf4>
 8009278:	aa28      	add	r2, sp, #160	; 0xa0
 800927a:	4649      	mov	r1, r9
 800927c:	4658      	mov	r0, fp
 800927e:	f002 ff6c 	bl	800c15a <__sprint_r>
 8009282:	2800      	cmp	r0, #0
 8009284:	f040 8435 	bne.w	8009af2 <_vfprintf_r+0x145e>
 8009288:	2300      	movs	r3, #0
 800928a:	9329      	str	r3, [sp, #164]	; 0xa4
 800928c:	f1b8 0f00 	cmp.w	r8, #0
 8009290:	f040 844b 	bne.w	8009b2a <_vfprintf_r+0x1496>
 8009294:	ac2b      	add	r4, sp, #172	; 0xac
 8009296:	e6b8      	b.n	800900a <_vfprintf_r+0x976>
 8009298:	9807      	ldr	r0, [sp, #28]
 800929a:	f7f6 ff59 	bl	8000150 <strlen>
 800929e:	46b0      	mov	r8, r6
 80092a0:	4605      	mov	r5, r0
 80092a2:	e48a      	b.n	8008bba <_vfprintf_r+0x526>
 80092a4:	f04a 0a10 	orr.w	sl, sl, #16
 80092a8:	f01a 0f20 	tst.w	sl, #32
 80092ac:	d009      	beq.n	80092c2 <_vfprintf_r+0xc2e>
 80092ae:	3607      	adds	r6, #7
 80092b0:	f026 0607 	bic.w	r6, r6, #7
 80092b4:	f106 0308 	add.w	r3, r6, #8
 80092b8:	930d      	str	r3, [sp, #52]	; 0x34
 80092ba:	e9d6 6700 	ldrd	r6, r7, [r6]
 80092be:	2301      	movs	r3, #1
 80092c0:	e6ca      	b.n	8009058 <_vfprintf_r+0x9c4>
 80092c2:	1d33      	adds	r3, r6, #4
 80092c4:	f01a 0f10 	tst.w	sl, #16
 80092c8:	930d      	str	r3, [sp, #52]	; 0x34
 80092ca:	d001      	beq.n	80092d0 <_vfprintf_r+0xc3c>
 80092cc:	6836      	ldr	r6, [r6, #0]
 80092ce:	e003      	b.n	80092d8 <_vfprintf_r+0xc44>
 80092d0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80092d4:	d002      	beq.n	80092dc <_vfprintf_r+0xc48>
 80092d6:	8836      	ldrh	r6, [r6, #0]
 80092d8:	2700      	movs	r7, #0
 80092da:	e7f0      	b.n	80092be <_vfprintf_r+0xc2a>
 80092dc:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80092e0:	d0f4      	beq.n	80092cc <_vfprintf_r+0xc38>
 80092e2:	7836      	ldrb	r6, [r6, #0]
 80092e4:	e7f8      	b.n	80092d8 <_vfprintf_r+0xc44>
 80092e6:	4b1e      	ldr	r3, [pc, #120]	; (8009360 <_vfprintf_r+0xccc>)
 80092e8:	f7ff bb4d 	b.w	8008986 <_vfprintf_r+0x2f2>
 80092ec:	1d33      	adds	r3, r6, #4
 80092ee:	f01a 0f10 	tst.w	sl, #16
 80092f2:	930d      	str	r3, [sp, #52]	; 0x34
 80092f4:	d001      	beq.n	80092fa <_vfprintf_r+0xc66>
 80092f6:	6836      	ldr	r6, [r6, #0]
 80092f8:	e003      	b.n	8009302 <_vfprintf_r+0xc6e>
 80092fa:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80092fe:	d003      	beq.n	8009308 <_vfprintf_r+0xc74>
 8009300:	8836      	ldrh	r6, [r6, #0]
 8009302:	2700      	movs	r7, #0
 8009304:	f7ff bb4c 	b.w	80089a0 <_vfprintf_r+0x30c>
 8009308:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800930c:	d0f3      	beq.n	80092f6 <_vfprintf_r+0xc62>
 800930e:	7836      	ldrb	r6, [r6, #0]
 8009310:	e7f7      	b.n	8009302 <_vfprintf_r+0xc6e>
 8009312:	4652      	mov	r2, sl
 8009314:	2301      	movs	r3, #1
 8009316:	e6a6      	b.n	8009066 <_vfprintf_r+0x9d2>
 8009318:	2b01      	cmp	r3, #1
 800931a:	f43f abfd 	beq.w	8008b18 <_vfprintf_r+0x484>
 800931e:	2b02      	cmp	r3, #2
 8009320:	ab54      	add	r3, sp, #336	; 0x150
 8009322:	d06f      	beq.n	8009404 <_vfprintf_r+0xd70>
 8009324:	08f1      	lsrs	r1, r6, #3
 8009326:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800932a:	1e5a      	subs	r2, r3, #1
 800932c:	08f8      	lsrs	r0, r7, #3
 800932e:	9207      	str	r2, [sp, #28]
 8009330:	4607      	mov	r7, r0
 8009332:	f006 0207 	and.w	r2, r6, #7
 8009336:	460e      	mov	r6, r1
 8009338:	3230      	adds	r2, #48	; 0x30
 800933a:	ea56 0107 	orrs.w	r1, r6, r7
 800933e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009342:	d10b      	bne.n	800935c <_vfprintf_r+0xcc8>
 8009344:	f01a 0f01 	tst.w	sl, #1
 8009348:	d04e      	beq.n	80093e8 <_vfprintf_r+0xd54>
 800934a:	2a30      	cmp	r2, #48	; 0x30
 800934c:	d04c      	beq.n	80093e8 <_vfprintf_r+0xd54>
 800934e:	2230      	movs	r2, #48	; 0x30
 8009350:	9907      	ldr	r1, [sp, #28]
 8009352:	3b02      	subs	r3, #2
 8009354:	f801 2c01 	strb.w	r2, [r1, #-1]
 8009358:	9307      	str	r3, [sp, #28]
 800935a:	e045      	b.n	80093e8 <_vfprintf_r+0xd54>
 800935c:	9b07      	ldr	r3, [sp, #28]
 800935e:	e7e1      	b.n	8009324 <_vfprintf_r+0xc90>
 8009360:	0800c780 	.word	0x0800c780
 8009364:	0800c7c4 	.word	0x0800c7c4
 8009368:	0800c7d4 	.word	0x0800c7d4
 800936c:	2300      	movs	r3, #0
 800936e:	9308      	str	r3, [sp, #32]
 8009370:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8009374:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 8009378:	930b      	str	r3, [sp, #44]	; 0x2c
 800937a:	f108 33ff 	add.w	r3, r8, #4294967295
 800937e:	9307      	str	r3, [sp, #28]
 8009380:	220a      	movs	r2, #10
 8009382:	2300      	movs	r3, #0
 8009384:	4630      	mov	r0, r6
 8009386:	4639      	mov	r1, r7
 8009388:	f7f7 fb7e 	bl	8000a88 <__aeabi_uldivmod>
 800938c:	9b08      	ldr	r3, [sp, #32]
 800938e:	3230      	adds	r2, #48	; 0x30
 8009390:	3301      	adds	r3, #1
 8009392:	9308      	str	r3, [sp, #32]
 8009394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009396:	f808 2c01 	strb.w	r2, [r8, #-1]
 800939a:	b1d3      	cbz	r3, 80093d2 <_vfprintf_r+0xd3e>
 800939c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800939e:	9a08      	ldr	r2, [sp, #32]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d115      	bne.n	80093d2 <_vfprintf_r+0xd3e>
 80093a6:	2aff      	cmp	r2, #255	; 0xff
 80093a8:	d013      	beq.n	80093d2 <_vfprintf_r+0xd3e>
 80093aa:	2f00      	cmp	r7, #0
 80093ac:	bf08      	it	eq
 80093ae:	2e0a      	cmpeq	r6, #10
 80093b0:	d30f      	bcc.n	80093d2 <_vfprintf_r+0xd3e>
 80093b2:	9b07      	ldr	r3, [sp, #28]
 80093b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80093b6:	991d      	ldr	r1, [sp, #116]	; 0x74
 80093b8:	1a9b      	subs	r3, r3, r2
 80093ba:	4618      	mov	r0, r3
 80093bc:	9307      	str	r3, [sp, #28]
 80093be:	f002 fe32 	bl	800c026 <strncpy>
 80093c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093c4:	785b      	ldrb	r3, [r3, #1]
 80093c6:	b11b      	cbz	r3, 80093d0 <_vfprintf_r+0xd3c>
 80093c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093ca:	3301      	adds	r3, #1
 80093cc:	930c      	str	r3, [sp, #48]	; 0x30
 80093ce:	2300      	movs	r3, #0
 80093d0:	9308      	str	r3, [sp, #32]
 80093d2:	2300      	movs	r3, #0
 80093d4:	4630      	mov	r0, r6
 80093d6:	4639      	mov	r1, r7
 80093d8:	220a      	movs	r2, #10
 80093da:	f7f7 fb55 	bl	8000a88 <__aeabi_uldivmod>
 80093de:	4606      	mov	r6, r0
 80093e0:	460f      	mov	r7, r1
 80093e2:	ea56 0307 	orrs.w	r3, r6, r7
 80093e6:	d10a      	bne.n	80093fe <_vfprintf_r+0xd6a>
 80093e8:	f04f 0800 	mov.w	r8, #0
 80093ec:	9a07      	ldr	r2, [sp, #28]
 80093ee:	ab54      	add	r3, sp, #336	; 0x150
 80093f0:	9512      	str	r5, [sp, #72]	; 0x48
 80093f2:	1a9d      	subs	r5, r3, r2
 80093f4:	4647      	mov	r7, r8
 80093f6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80093fa:	4646      	mov	r6, r8
 80093fc:	e67b      	b.n	80090f6 <_vfprintf_r+0xa62>
 80093fe:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8009402:	e7ba      	b.n	800937a <_vfprintf_r+0xce6>
 8009404:	9307      	str	r3, [sp, #28]
 8009406:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009408:	f006 030f 	and.w	r3, r6, #15
 800940c:	5cd3      	ldrb	r3, [r2, r3]
 800940e:	9a07      	ldr	r2, [sp, #28]
 8009410:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8009414:	0933      	lsrs	r3, r6, #4
 8009416:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800941a:	9207      	str	r2, [sp, #28]
 800941c:	093a      	lsrs	r2, r7, #4
 800941e:	461e      	mov	r6, r3
 8009420:	4617      	mov	r7, r2
 8009422:	ea56 0307 	orrs.w	r3, r6, r7
 8009426:	d1ee      	bne.n	8009406 <_vfprintf_r+0xd72>
 8009428:	e7de      	b.n	80093e8 <_vfprintf_r+0xd54>
 800942a:	b94b      	cbnz	r3, 8009440 <_vfprintf_r+0xdac>
 800942c:	ab54      	add	r3, sp, #336	; 0x150
 800942e:	07d6      	lsls	r6, r2, #31
 8009430:	9307      	str	r3, [sp, #28]
 8009432:	d5d9      	bpl.n	80093e8 <_vfprintf_r+0xd54>
 8009434:	2330      	movs	r3, #48	; 0x30
 8009436:	9a07      	ldr	r2, [sp, #28]
 8009438:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800943c:	4613      	mov	r3, r2
 800943e:	e78b      	b.n	8009358 <_vfprintf_r+0xcc4>
 8009440:	ab54      	add	r3, sp, #336	; 0x150
 8009442:	e789      	b.n	8009358 <_vfprintf_r+0xcc4>
 8009444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 8375 	beq.w	8009b36 <_vfprintf_r+0x14a2>
 800944c:	2000      	movs	r0, #0
 800944e:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8009452:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8009456:	960d      	str	r6, [sp, #52]	; 0x34
 8009458:	f7ff bb3b 	b.w	8008ad2 <_vfprintf_r+0x43e>
 800945c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8009460:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009462:	e4ed      	b.n	8008e40 <_vfprintf_r+0x7ac>
 8009464:	2010      	movs	r0, #16
 8009466:	2a07      	cmp	r2, #7
 8009468:	4403      	add	r3, r0
 800946a:	6060      	str	r0, [r4, #4]
 800946c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8009470:	dd08      	ble.n	8009484 <_vfprintf_r+0xdf0>
 8009472:	aa28      	add	r2, sp, #160	; 0xa0
 8009474:	4649      	mov	r1, r9
 8009476:	4658      	mov	r0, fp
 8009478:	f002 fe6f 	bl	800c15a <__sprint_r>
 800947c:	2800      	cmp	r0, #0
 800947e:	f040 8338 	bne.w	8009af2 <_vfprintf_r+0x145e>
 8009482:	a92b      	add	r1, sp, #172	; 0xac
 8009484:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009486:	460c      	mov	r4, r1
 8009488:	3b10      	subs	r3, #16
 800948a:	9319      	str	r3, [sp, #100]	; 0x64
 800948c:	e64f      	b.n	800912e <_vfprintf_r+0xa9a>
 800948e:	460c      	mov	r4, r1
 8009490:	e669      	b.n	8009166 <_vfprintf_r+0xad2>
 8009492:	aa28      	add	r2, sp, #160	; 0xa0
 8009494:	4649      	mov	r1, r9
 8009496:	4658      	mov	r0, fp
 8009498:	f002 fe5f 	bl	800c15a <__sprint_r>
 800949c:	2800      	cmp	r0, #0
 800949e:	f040 8328 	bne.w	8009af2 <_vfprintf_r+0x145e>
 80094a2:	ac2b      	add	r4, sp, #172	; 0xac
 80094a4:	e671      	b.n	800918a <_vfprintf_r+0xaf6>
 80094a6:	aa28      	add	r2, sp, #160	; 0xa0
 80094a8:	4649      	mov	r1, r9
 80094aa:	4658      	mov	r0, fp
 80094ac:	f002 fe55 	bl	800c15a <__sprint_r>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	f040 831e 	bne.w	8009af2 <_vfprintf_r+0x145e>
 80094b6:	ac2b      	add	r4, sp, #172	; 0xac
 80094b8:	e677      	b.n	80091aa <_vfprintf_r+0xb16>
 80094ba:	2010      	movs	r0, #16
 80094bc:	2a07      	cmp	r2, #7
 80094be:	4403      	add	r3, r0
 80094c0:	6060      	str	r0, [r4, #4]
 80094c2:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80094c6:	dd08      	ble.n	80094da <_vfprintf_r+0xe46>
 80094c8:	aa28      	add	r2, sp, #160	; 0xa0
 80094ca:	4649      	mov	r1, r9
 80094cc:	4658      	mov	r0, fp
 80094ce:	f002 fe44 	bl	800c15a <__sprint_r>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	f040 830d 	bne.w	8009af2 <_vfprintf_r+0x145e>
 80094d8:	a92b      	add	r1, sp, #172	; 0xac
 80094da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094dc:	460c      	mov	r4, r1
 80094de:	3b10      	subs	r3, #16
 80094e0:	9319      	str	r3, [sp, #100]	; 0x64
 80094e2:	e66b      	b.n	80091bc <_vfprintf_r+0xb28>
 80094e4:	460c      	mov	r4, r1
 80094e6:	e685      	b.n	80091f4 <_vfprintf_r+0xb60>
 80094e8:	2010      	movs	r0, #16
 80094ea:	2a07      	cmp	r2, #7
 80094ec:	4403      	add	r3, r0
 80094ee:	6060      	str	r0, [r4, #4]
 80094f0:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80094f4:	dd08      	ble.n	8009508 <_vfprintf_r+0xe74>
 80094f6:	aa28      	add	r2, sp, #160	; 0xa0
 80094f8:	4649      	mov	r1, r9
 80094fa:	4658      	mov	r0, fp
 80094fc:	f002 fe2d 	bl	800c15a <__sprint_r>
 8009500:	2800      	cmp	r0, #0
 8009502:	f040 82f6 	bne.w	8009af2 <_vfprintf_r+0x145e>
 8009506:	a92b      	add	r1, sp, #172	; 0xac
 8009508:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800950a:	460c      	mov	r4, r1
 800950c:	3b10      	subs	r3, #16
 800950e:	9312      	str	r3, [sp, #72]	; 0x48
 8009510:	e675      	b.n	80091fe <_vfprintf_r+0xb6a>
 8009512:	460c      	mov	r4, r1
 8009514:	e68f      	b.n	8009236 <_vfprintf_r+0xba2>
 8009516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009518:	2b65      	cmp	r3, #101	; 0x65
 800951a:	f340 8237 	ble.w	800998c <_vfprintf_r+0x12f8>
 800951e:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8009522:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8009526:	f7f7 fa3f 	bl	80009a8 <__aeabi_dcmpeq>
 800952a:	2800      	cmp	r0, #0
 800952c:	d069      	beq.n	8009602 <_vfprintf_r+0xf6e>
 800952e:	4b6f      	ldr	r3, [pc, #444]	; (80096ec <_vfprintf_r+0x1058>)
 8009530:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009532:	6023      	str	r3, [r4, #0]
 8009534:	2301      	movs	r3, #1
 8009536:	441d      	add	r5, r3
 8009538:	6063      	str	r3, [r4, #4]
 800953a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800953c:	952a      	str	r5, [sp, #168]	; 0xa8
 800953e:	3301      	adds	r3, #1
 8009540:	2b07      	cmp	r3, #7
 8009542:	9329      	str	r3, [sp, #164]	; 0xa4
 8009544:	dc37      	bgt.n	80095b6 <_vfprintf_r+0xf22>
 8009546:	3408      	adds	r4, #8
 8009548:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800954a:	9a08      	ldr	r2, [sp, #32]
 800954c:	4293      	cmp	r3, r2
 800954e:	db03      	blt.n	8009558 <_vfprintf_r+0xec4>
 8009550:	f01a 0f01 	tst.w	sl, #1
 8009554:	f43f ae82 	beq.w	800925c <_vfprintf_r+0xbc8>
 8009558:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800955a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009560:	6063      	str	r3, [r4, #4]
 8009562:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009564:	4413      	add	r3, r2
 8009566:	932a      	str	r3, [sp, #168]	; 0xa8
 8009568:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800956a:	3301      	adds	r3, #1
 800956c:	2b07      	cmp	r3, #7
 800956e:	9329      	str	r3, [sp, #164]	; 0xa4
 8009570:	dc2b      	bgt.n	80095ca <_vfprintf_r+0xf36>
 8009572:	3408      	adds	r4, #8
 8009574:	9b08      	ldr	r3, [sp, #32]
 8009576:	1e5d      	subs	r5, r3, #1
 8009578:	2d00      	cmp	r5, #0
 800957a:	f77f ae6f 	ble.w	800925c <_vfprintf_r+0xbc8>
 800957e:	2710      	movs	r7, #16
 8009580:	4e5b      	ldr	r6, [pc, #364]	; (80096f0 <_vfprintf_r+0x105c>)
 8009582:	2d10      	cmp	r5, #16
 8009584:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8009588:	f104 0108 	add.w	r1, r4, #8
 800958c:	f103 0301 	add.w	r3, r3, #1
 8009590:	6026      	str	r6, [r4, #0]
 8009592:	dc24      	bgt.n	80095de <_vfprintf_r+0xf4a>
 8009594:	6065      	str	r5, [r4, #4]
 8009596:	2b07      	cmp	r3, #7
 8009598:	4415      	add	r5, r2
 800959a:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 800959e:	f340 8287 	ble.w	8009ab0 <_vfprintf_r+0x141c>
 80095a2:	aa28      	add	r2, sp, #160	; 0xa0
 80095a4:	4649      	mov	r1, r9
 80095a6:	4658      	mov	r0, fp
 80095a8:	f002 fdd7 	bl	800c15a <__sprint_r>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	f040 82a0 	bne.w	8009af2 <_vfprintf_r+0x145e>
 80095b2:	ac2b      	add	r4, sp, #172	; 0xac
 80095b4:	e652      	b.n	800925c <_vfprintf_r+0xbc8>
 80095b6:	aa28      	add	r2, sp, #160	; 0xa0
 80095b8:	4649      	mov	r1, r9
 80095ba:	4658      	mov	r0, fp
 80095bc:	f002 fdcd 	bl	800c15a <__sprint_r>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	f040 8296 	bne.w	8009af2 <_vfprintf_r+0x145e>
 80095c6:	ac2b      	add	r4, sp, #172	; 0xac
 80095c8:	e7be      	b.n	8009548 <_vfprintf_r+0xeb4>
 80095ca:	aa28      	add	r2, sp, #160	; 0xa0
 80095cc:	4649      	mov	r1, r9
 80095ce:	4658      	mov	r0, fp
 80095d0:	f002 fdc3 	bl	800c15a <__sprint_r>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	f040 828c 	bne.w	8009af2 <_vfprintf_r+0x145e>
 80095da:	ac2b      	add	r4, sp, #172	; 0xac
 80095dc:	e7ca      	b.n	8009574 <_vfprintf_r+0xee0>
 80095de:	3210      	adds	r2, #16
 80095e0:	2b07      	cmp	r3, #7
 80095e2:	6067      	str	r7, [r4, #4]
 80095e4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80095e8:	dd08      	ble.n	80095fc <_vfprintf_r+0xf68>
 80095ea:	aa28      	add	r2, sp, #160	; 0xa0
 80095ec:	4649      	mov	r1, r9
 80095ee:	4658      	mov	r0, fp
 80095f0:	f002 fdb3 	bl	800c15a <__sprint_r>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	f040 827c 	bne.w	8009af2 <_vfprintf_r+0x145e>
 80095fa:	a92b      	add	r1, sp, #172	; 0xac
 80095fc:	3d10      	subs	r5, #16
 80095fe:	460c      	mov	r4, r1
 8009600:	e7bf      	b.n	8009582 <_vfprintf_r+0xeee>
 8009602:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009604:	2b00      	cmp	r3, #0
 8009606:	dc75      	bgt.n	80096f4 <_vfprintf_r+0x1060>
 8009608:	4b38      	ldr	r3, [pc, #224]	; (80096ec <_vfprintf_r+0x1058>)
 800960a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	2301      	movs	r3, #1
 8009610:	441d      	add	r5, r3
 8009612:	6063      	str	r3, [r4, #4]
 8009614:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009616:	952a      	str	r5, [sp, #168]	; 0xa8
 8009618:	3301      	adds	r3, #1
 800961a:	2b07      	cmp	r3, #7
 800961c:	9329      	str	r3, [sp, #164]	; 0xa4
 800961e:	dc3e      	bgt.n	800969e <_vfprintf_r+0x100a>
 8009620:	3408      	adds	r4, #8
 8009622:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009624:	b92b      	cbnz	r3, 8009632 <_vfprintf_r+0xf9e>
 8009626:	9b08      	ldr	r3, [sp, #32]
 8009628:	b91b      	cbnz	r3, 8009632 <_vfprintf_r+0xf9e>
 800962a:	f01a 0f01 	tst.w	sl, #1
 800962e:	f43f ae15 	beq.w	800925c <_vfprintf_r+0xbc8>
 8009632:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009634:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009636:	6023      	str	r3, [r4, #0]
 8009638:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800963a:	6063      	str	r3, [r4, #4]
 800963c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800963e:	4413      	add	r3, r2
 8009640:	932a      	str	r3, [sp, #168]	; 0xa8
 8009642:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009644:	3301      	adds	r3, #1
 8009646:	2b07      	cmp	r3, #7
 8009648:	9329      	str	r3, [sp, #164]	; 0xa4
 800964a:	dc32      	bgt.n	80096b2 <_vfprintf_r+0x101e>
 800964c:	3408      	adds	r4, #8
 800964e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8009650:	2d00      	cmp	r5, #0
 8009652:	da1b      	bge.n	800968c <_vfprintf_r+0xff8>
 8009654:	4623      	mov	r3, r4
 8009656:	2710      	movs	r7, #16
 8009658:	4e25      	ldr	r6, [pc, #148]	; (80096f0 <_vfprintf_r+0x105c>)
 800965a:	426d      	negs	r5, r5
 800965c:	2d10      	cmp	r5, #16
 800965e:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 8009662:	f104 0408 	add.w	r4, r4, #8
 8009666:	f102 0201 	add.w	r2, r2, #1
 800966a:	601e      	str	r6, [r3, #0]
 800966c:	dc2b      	bgt.n	80096c6 <_vfprintf_r+0x1032>
 800966e:	605d      	str	r5, [r3, #4]
 8009670:	2a07      	cmp	r2, #7
 8009672:	440d      	add	r5, r1
 8009674:	e9cd 2529 	strd	r2, r5, [sp, #164]	; 0xa4
 8009678:	dd08      	ble.n	800968c <_vfprintf_r+0xff8>
 800967a:	aa28      	add	r2, sp, #160	; 0xa0
 800967c:	4649      	mov	r1, r9
 800967e:	4658      	mov	r0, fp
 8009680:	f002 fd6b 	bl	800c15a <__sprint_r>
 8009684:	2800      	cmp	r0, #0
 8009686:	f040 8234 	bne.w	8009af2 <_vfprintf_r+0x145e>
 800968a:	ac2b      	add	r4, sp, #172	; 0xac
 800968c:	9b07      	ldr	r3, [sp, #28]
 800968e:	9a08      	ldr	r2, [sp, #32]
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	9b08      	ldr	r3, [sp, #32]
 8009694:	6063      	str	r3, [r4, #4]
 8009696:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009698:	4413      	add	r3, r2
 800969a:	932a      	str	r3, [sp, #168]	; 0xa8
 800969c:	e5d7      	b.n	800924e <_vfprintf_r+0xbba>
 800969e:	aa28      	add	r2, sp, #160	; 0xa0
 80096a0:	4649      	mov	r1, r9
 80096a2:	4658      	mov	r0, fp
 80096a4:	f002 fd59 	bl	800c15a <__sprint_r>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	f040 8222 	bne.w	8009af2 <_vfprintf_r+0x145e>
 80096ae:	ac2b      	add	r4, sp, #172	; 0xac
 80096b0:	e7b7      	b.n	8009622 <_vfprintf_r+0xf8e>
 80096b2:	aa28      	add	r2, sp, #160	; 0xa0
 80096b4:	4649      	mov	r1, r9
 80096b6:	4658      	mov	r0, fp
 80096b8:	f002 fd4f 	bl	800c15a <__sprint_r>
 80096bc:	2800      	cmp	r0, #0
 80096be:	f040 8218 	bne.w	8009af2 <_vfprintf_r+0x145e>
 80096c2:	ac2b      	add	r4, sp, #172	; 0xac
 80096c4:	e7c3      	b.n	800964e <_vfprintf_r+0xfba>
 80096c6:	3110      	adds	r1, #16
 80096c8:	2a07      	cmp	r2, #7
 80096ca:	605f      	str	r7, [r3, #4]
 80096cc:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 80096d0:	dd08      	ble.n	80096e4 <_vfprintf_r+0x1050>
 80096d2:	aa28      	add	r2, sp, #160	; 0xa0
 80096d4:	4649      	mov	r1, r9
 80096d6:	4658      	mov	r0, fp
 80096d8:	f002 fd3f 	bl	800c15a <__sprint_r>
 80096dc:	2800      	cmp	r0, #0
 80096de:	f040 8208 	bne.w	8009af2 <_vfprintf_r+0x145e>
 80096e2:	ac2b      	add	r4, sp, #172	; 0xac
 80096e4:	3d10      	subs	r5, #16
 80096e6:	4623      	mov	r3, r4
 80096e8:	e7b8      	b.n	800965c <_vfprintf_r+0xfc8>
 80096ea:	bf00      	nop
 80096ec:	0800c7a2 	.word	0x0800c7a2
 80096f0:	0800c7d4 	.word	0x0800c7d4
 80096f4:	9b08      	ldr	r3, [sp, #32]
 80096f6:	42b3      	cmp	r3, r6
 80096f8:	bfa8      	it	ge
 80096fa:	4633      	movge	r3, r6
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	461d      	mov	r5, r3
 8009700:	dd0c      	ble.n	800971c <_vfprintf_r+0x1088>
 8009702:	9b07      	ldr	r3, [sp, #28]
 8009704:	e9c4 3500 	strd	r3, r5, [r4]
 8009708:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800970a:	442b      	add	r3, r5
 800970c:	932a      	str	r3, [sp, #168]	; 0xa8
 800970e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009710:	3301      	adds	r3, #1
 8009712:	2b07      	cmp	r3, #7
 8009714:	9329      	str	r3, [sp, #164]	; 0xa4
 8009716:	f300 8087 	bgt.w	8009828 <_vfprintf_r+0x1194>
 800971a:	3408      	adds	r4, #8
 800971c:	2d00      	cmp	r5, #0
 800971e:	bfb4      	ite	lt
 8009720:	4635      	movlt	r5, r6
 8009722:	1b75      	subge	r5, r6, r5
 8009724:	2d00      	cmp	r5, #0
 8009726:	dd19      	ble.n	800975c <_vfprintf_r+0x10c8>
 8009728:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800972c:	4896      	ldr	r0, [pc, #600]	; (8009988 <_vfprintf_r+0x12f4>)
 800972e:	2d10      	cmp	r5, #16
 8009730:	f103 0301 	add.w	r3, r3, #1
 8009734:	f104 0108 	add.w	r1, r4, #8
 8009738:	6020      	str	r0, [r4, #0]
 800973a:	dc7f      	bgt.n	800983c <_vfprintf_r+0x11a8>
 800973c:	6065      	str	r5, [r4, #4]
 800973e:	2b07      	cmp	r3, #7
 8009740:	4415      	add	r5, r2
 8009742:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8009746:	f340 808c 	ble.w	8009862 <_vfprintf_r+0x11ce>
 800974a:	aa28      	add	r2, sp, #160	; 0xa0
 800974c:	4649      	mov	r1, r9
 800974e:	4658      	mov	r0, fp
 8009750:	f002 fd03 	bl	800c15a <__sprint_r>
 8009754:	2800      	cmp	r0, #0
 8009756:	f040 81cc 	bne.w	8009af2 <_vfprintf_r+0x145e>
 800975a:	ac2b      	add	r4, sp, #172	; 0xac
 800975c:	9b07      	ldr	r3, [sp, #28]
 800975e:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8009762:	441e      	add	r6, r3
 8009764:	d00a      	beq.n	800977c <_vfprintf_r+0x10e8>
 8009766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009768:	2b00      	cmp	r3, #0
 800976a:	d17c      	bne.n	8009866 <_vfprintf_r+0x11d2>
 800976c:	2f00      	cmp	r7, #0
 800976e:	d17c      	bne.n	800986a <_vfprintf_r+0x11d6>
 8009770:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009774:	4413      	add	r3, r2
 8009776:	429e      	cmp	r6, r3
 8009778:	bf28      	it	cs
 800977a:	461e      	movcs	r6, r3
 800977c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800977e:	9a08      	ldr	r2, [sp, #32]
 8009780:	4293      	cmp	r3, r2
 8009782:	db02      	blt.n	800978a <_vfprintf_r+0x10f6>
 8009784:	f01a 0f01 	tst.w	sl, #1
 8009788:	d00e      	beq.n	80097a8 <_vfprintf_r+0x1114>
 800978a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800978c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800978e:	6023      	str	r3, [r4, #0]
 8009790:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009792:	6063      	str	r3, [r4, #4]
 8009794:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009796:	4413      	add	r3, r2
 8009798:	932a      	str	r3, [sp, #168]	; 0xa8
 800979a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800979c:	3301      	adds	r3, #1
 800979e:	2b07      	cmp	r3, #7
 80097a0:	9329      	str	r3, [sp, #164]	; 0xa4
 80097a2:	f300 80dd 	bgt.w	8009960 <_vfprintf_r+0x12cc>
 80097a6:	3408      	adds	r4, #8
 80097a8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80097aa:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80097ae:	4413      	add	r3, r2
 80097b0:	1b55      	subs	r5, r2, r5
 80097b2:	1b9b      	subs	r3, r3, r6
 80097b4:	429d      	cmp	r5, r3
 80097b6:	bfa8      	it	ge
 80097b8:	461d      	movge	r5, r3
 80097ba:	2d00      	cmp	r5, #0
 80097bc:	dd0b      	ble.n	80097d6 <_vfprintf_r+0x1142>
 80097be:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80097c0:	e9c4 6500 	strd	r6, r5, [r4]
 80097c4:	442b      	add	r3, r5
 80097c6:	932a      	str	r3, [sp, #168]	; 0xa8
 80097c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80097ca:	3301      	adds	r3, #1
 80097cc:	2b07      	cmp	r3, #7
 80097ce:	9329      	str	r3, [sp, #164]	; 0xa4
 80097d0:	f300 80d0 	bgt.w	8009974 <_vfprintf_r+0x12e0>
 80097d4:	3408      	adds	r4, #8
 80097d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097d8:	9a08      	ldr	r2, [sp, #32]
 80097da:	2d00      	cmp	r5, #0
 80097dc:	eba2 0303 	sub.w	r3, r2, r3
 80097e0:	bfb4      	ite	lt
 80097e2:	461d      	movlt	r5, r3
 80097e4:	1b5d      	subge	r5, r3, r5
 80097e6:	2d00      	cmp	r5, #0
 80097e8:	f77f ad38 	ble.w	800925c <_vfprintf_r+0xbc8>
 80097ec:	2710      	movs	r7, #16
 80097ee:	4e66      	ldr	r6, [pc, #408]	; (8009988 <_vfprintf_r+0x12f4>)
 80097f0:	2d10      	cmp	r5, #16
 80097f2:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80097f6:	f104 0108 	add.w	r1, r4, #8
 80097fa:	f103 0301 	add.w	r3, r3, #1
 80097fe:	6026      	str	r6, [r4, #0]
 8009800:	f77f aec8 	ble.w	8009594 <_vfprintf_r+0xf00>
 8009804:	3210      	adds	r2, #16
 8009806:	2b07      	cmp	r3, #7
 8009808:	6067      	str	r7, [r4, #4]
 800980a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 800980e:	dd08      	ble.n	8009822 <_vfprintf_r+0x118e>
 8009810:	aa28      	add	r2, sp, #160	; 0xa0
 8009812:	4649      	mov	r1, r9
 8009814:	4658      	mov	r0, fp
 8009816:	f002 fca0 	bl	800c15a <__sprint_r>
 800981a:	2800      	cmp	r0, #0
 800981c:	f040 8169 	bne.w	8009af2 <_vfprintf_r+0x145e>
 8009820:	a92b      	add	r1, sp, #172	; 0xac
 8009822:	3d10      	subs	r5, #16
 8009824:	460c      	mov	r4, r1
 8009826:	e7e3      	b.n	80097f0 <_vfprintf_r+0x115c>
 8009828:	aa28      	add	r2, sp, #160	; 0xa0
 800982a:	4649      	mov	r1, r9
 800982c:	4658      	mov	r0, fp
 800982e:	f002 fc94 	bl	800c15a <__sprint_r>
 8009832:	2800      	cmp	r0, #0
 8009834:	f040 815d 	bne.w	8009af2 <_vfprintf_r+0x145e>
 8009838:	ac2b      	add	r4, sp, #172	; 0xac
 800983a:	e76f      	b.n	800971c <_vfprintf_r+0x1088>
 800983c:	2010      	movs	r0, #16
 800983e:	2b07      	cmp	r3, #7
 8009840:	4402      	add	r2, r0
 8009842:	6060      	str	r0, [r4, #4]
 8009844:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8009848:	dd08      	ble.n	800985c <_vfprintf_r+0x11c8>
 800984a:	aa28      	add	r2, sp, #160	; 0xa0
 800984c:	4649      	mov	r1, r9
 800984e:	4658      	mov	r0, fp
 8009850:	f002 fc83 	bl	800c15a <__sprint_r>
 8009854:	2800      	cmp	r0, #0
 8009856:	f040 814c 	bne.w	8009af2 <_vfprintf_r+0x145e>
 800985a:	a92b      	add	r1, sp, #172	; 0xac
 800985c:	3d10      	subs	r5, #16
 800985e:	460c      	mov	r4, r1
 8009860:	e762      	b.n	8009728 <_vfprintf_r+0x1094>
 8009862:	460c      	mov	r4, r1
 8009864:	e77a      	b.n	800975c <_vfprintf_r+0x10c8>
 8009866:	2f00      	cmp	r7, #0
 8009868:	d04a      	beq.n	8009900 <_vfprintf_r+0x126c>
 800986a:	3f01      	subs	r7, #1
 800986c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800986e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009874:	6063      	str	r3, [r4, #4]
 8009876:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009878:	4413      	add	r3, r2
 800987a:	932a      	str	r3, [sp, #168]	; 0xa8
 800987c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800987e:	3301      	adds	r3, #1
 8009880:	2b07      	cmp	r3, #7
 8009882:	9329      	str	r3, [sp, #164]	; 0xa4
 8009884:	dc43      	bgt.n	800990e <_vfprintf_r+0x127a>
 8009886:	3408      	adds	r4, #8
 8009888:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800988c:	4413      	add	r3, r2
 800988e:	1b9a      	subs	r2, r3, r6
 8009890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	4293      	cmp	r3, r2
 8009896:	bfa8      	it	ge
 8009898:	4613      	movge	r3, r2
 800989a:	2b00      	cmp	r3, #0
 800989c:	461d      	mov	r5, r3
 800989e:	dd0a      	ble.n	80098b6 <_vfprintf_r+0x1222>
 80098a0:	e9c4 6300 	strd	r6, r3, [r4]
 80098a4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80098a6:	442b      	add	r3, r5
 80098a8:	932a      	str	r3, [sp, #168]	; 0xa8
 80098aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80098ac:	3301      	adds	r3, #1
 80098ae:	2b07      	cmp	r3, #7
 80098b0:	9329      	str	r3, [sp, #164]	; 0xa4
 80098b2:	dc36      	bgt.n	8009922 <_vfprintf_r+0x128e>
 80098b4:	3408      	adds	r4, #8
 80098b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098b8:	2d00      	cmp	r5, #0
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	bfb4      	ite	lt
 80098be:	461d      	movlt	r5, r3
 80098c0:	1b5d      	subge	r5, r3, r5
 80098c2:	2d00      	cmp	r5, #0
 80098c4:	dd18      	ble.n	80098f8 <_vfprintf_r+0x1264>
 80098c6:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 80098ca:	482f      	ldr	r0, [pc, #188]	; (8009988 <_vfprintf_r+0x12f4>)
 80098cc:	2d10      	cmp	r5, #16
 80098ce:	f102 0201 	add.w	r2, r2, #1
 80098d2:	f104 0108 	add.w	r1, r4, #8
 80098d6:	6020      	str	r0, [r4, #0]
 80098d8:	dc2d      	bgt.n	8009936 <_vfprintf_r+0x12a2>
 80098da:	442b      	add	r3, r5
 80098dc:	2a07      	cmp	r2, #7
 80098de:	6065      	str	r5, [r4, #4]
 80098e0:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80098e4:	dd3a      	ble.n	800995c <_vfprintf_r+0x12c8>
 80098e6:	aa28      	add	r2, sp, #160	; 0xa0
 80098e8:	4649      	mov	r1, r9
 80098ea:	4658      	mov	r0, fp
 80098ec:	f002 fc35 	bl	800c15a <__sprint_r>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	f040 80fe 	bne.w	8009af2 <_vfprintf_r+0x145e>
 80098f6:	ac2b      	add	r4, sp, #172	; 0xac
 80098f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	441e      	add	r6, r3
 80098fe:	e732      	b.n	8009766 <_vfprintf_r+0x10d2>
 8009900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009902:	3b01      	subs	r3, #1
 8009904:	930c      	str	r3, [sp, #48]	; 0x30
 8009906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009908:	3b01      	subs	r3, #1
 800990a:	930b      	str	r3, [sp, #44]	; 0x2c
 800990c:	e7ae      	b.n	800986c <_vfprintf_r+0x11d8>
 800990e:	aa28      	add	r2, sp, #160	; 0xa0
 8009910:	4649      	mov	r1, r9
 8009912:	4658      	mov	r0, fp
 8009914:	f002 fc21 	bl	800c15a <__sprint_r>
 8009918:	2800      	cmp	r0, #0
 800991a:	f040 80ea 	bne.w	8009af2 <_vfprintf_r+0x145e>
 800991e:	ac2b      	add	r4, sp, #172	; 0xac
 8009920:	e7b2      	b.n	8009888 <_vfprintf_r+0x11f4>
 8009922:	aa28      	add	r2, sp, #160	; 0xa0
 8009924:	4649      	mov	r1, r9
 8009926:	4658      	mov	r0, fp
 8009928:	f002 fc17 	bl	800c15a <__sprint_r>
 800992c:	2800      	cmp	r0, #0
 800992e:	f040 80e0 	bne.w	8009af2 <_vfprintf_r+0x145e>
 8009932:	ac2b      	add	r4, sp, #172	; 0xac
 8009934:	e7bf      	b.n	80098b6 <_vfprintf_r+0x1222>
 8009936:	2010      	movs	r0, #16
 8009938:	2a07      	cmp	r2, #7
 800993a:	4403      	add	r3, r0
 800993c:	6060      	str	r0, [r4, #4]
 800993e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8009942:	dd08      	ble.n	8009956 <_vfprintf_r+0x12c2>
 8009944:	aa28      	add	r2, sp, #160	; 0xa0
 8009946:	4649      	mov	r1, r9
 8009948:	4658      	mov	r0, fp
 800994a:	f002 fc06 	bl	800c15a <__sprint_r>
 800994e:	2800      	cmp	r0, #0
 8009950:	f040 80cf 	bne.w	8009af2 <_vfprintf_r+0x145e>
 8009954:	a92b      	add	r1, sp, #172	; 0xac
 8009956:	3d10      	subs	r5, #16
 8009958:	460c      	mov	r4, r1
 800995a:	e7b4      	b.n	80098c6 <_vfprintf_r+0x1232>
 800995c:	460c      	mov	r4, r1
 800995e:	e7cb      	b.n	80098f8 <_vfprintf_r+0x1264>
 8009960:	aa28      	add	r2, sp, #160	; 0xa0
 8009962:	4649      	mov	r1, r9
 8009964:	4658      	mov	r0, fp
 8009966:	f002 fbf8 	bl	800c15a <__sprint_r>
 800996a:	2800      	cmp	r0, #0
 800996c:	f040 80c1 	bne.w	8009af2 <_vfprintf_r+0x145e>
 8009970:	ac2b      	add	r4, sp, #172	; 0xac
 8009972:	e719      	b.n	80097a8 <_vfprintf_r+0x1114>
 8009974:	aa28      	add	r2, sp, #160	; 0xa0
 8009976:	4649      	mov	r1, r9
 8009978:	4658      	mov	r0, fp
 800997a:	f002 fbee 	bl	800c15a <__sprint_r>
 800997e:	2800      	cmp	r0, #0
 8009980:	f040 80b7 	bne.w	8009af2 <_vfprintf_r+0x145e>
 8009984:	ac2b      	add	r4, sp, #172	; 0xac
 8009986:	e726      	b.n	80097d6 <_vfprintf_r+0x1142>
 8009988:	0800c7d4 	.word	0x0800c7d4
 800998c:	9a08      	ldr	r2, [sp, #32]
 800998e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009990:	2a01      	cmp	r2, #1
 8009992:	9a07      	ldr	r2, [sp, #28]
 8009994:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009996:	6022      	str	r2, [r4, #0]
 8009998:	f04f 0201 	mov.w	r2, #1
 800999c:	f105 0501 	add.w	r5, r5, #1
 80099a0:	f103 0301 	add.w	r3, r3, #1
 80099a4:	f104 0608 	add.w	r6, r4, #8
 80099a8:	6062      	str	r2, [r4, #4]
 80099aa:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80099ae:	dc02      	bgt.n	80099b6 <_vfprintf_r+0x1322>
 80099b0:	f01a 0f01 	tst.w	sl, #1
 80099b4:	d077      	beq.n	8009aa6 <_vfprintf_r+0x1412>
 80099b6:	2b07      	cmp	r3, #7
 80099b8:	dd08      	ble.n	80099cc <_vfprintf_r+0x1338>
 80099ba:	aa28      	add	r2, sp, #160	; 0xa0
 80099bc:	4649      	mov	r1, r9
 80099be:	4658      	mov	r0, fp
 80099c0:	f002 fbcb 	bl	800c15a <__sprint_r>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	f040 8094 	bne.w	8009af2 <_vfprintf_r+0x145e>
 80099ca:	ae2b      	add	r6, sp, #172	; 0xac
 80099cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80099ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099d0:	6033      	str	r3, [r6, #0]
 80099d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099d4:	6073      	str	r3, [r6, #4]
 80099d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80099d8:	4413      	add	r3, r2
 80099da:	932a      	str	r3, [sp, #168]	; 0xa8
 80099dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80099de:	3301      	adds	r3, #1
 80099e0:	2b07      	cmp	r3, #7
 80099e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80099e4:	dc31      	bgt.n	8009a4a <_vfprintf_r+0x13b6>
 80099e6:	3608      	adds	r6, #8
 80099e8:	9b08      	ldr	r3, [sp, #32]
 80099ea:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 80099ee:	1e5c      	subs	r4, r3, #1
 80099f0:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80099f4:	f7f6 ffd8 	bl	80009a8 <__aeabi_dcmpeq>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d12f      	bne.n	8009a5c <_vfprintf_r+0x13c8>
 80099fc:	9b07      	ldr	r3, [sp, #28]
 80099fe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8009a00:	3301      	adds	r3, #1
 8009a02:	e9c6 3400 	strd	r3, r4, [r6]
 8009a06:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009a08:	9908      	ldr	r1, [sp, #32]
 8009a0a:	3201      	adds	r2, #1
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	440b      	add	r3, r1
 8009a10:	2a07      	cmp	r2, #7
 8009a12:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8009a16:	dd49      	ble.n	8009aac <_vfprintf_r+0x1418>
 8009a18:	aa28      	add	r2, sp, #160	; 0xa0
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	4658      	mov	r0, fp
 8009a1e:	f002 fb9c 	bl	800c15a <__sprint_r>
 8009a22:	2800      	cmp	r0, #0
 8009a24:	d165      	bne.n	8009af2 <_vfprintf_r+0x145e>
 8009a26:	ae2b      	add	r6, sp, #172	; 0xac
 8009a28:	ab24      	add	r3, sp, #144	; 0x90
 8009a2a:	6033      	str	r3, [r6, #0]
 8009a2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a2e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009a30:	6073      	str	r3, [r6, #4]
 8009a32:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009a34:	4413      	add	r3, r2
 8009a36:	932a      	str	r3, [sp, #168]	; 0xa8
 8009a38:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	2b07      	cmp	r3, #7
 8009a3e:	9329      	str	r3, [sp, #164]	; 0xa4
 8009a40:	f73f adaf 	bgt.w	80095a2 <_vfprintf_r+0xf0e>
 8009a44:	f106 0408 	add.w	r4, r6, #8
 8009a48:	e408      	b.n	800925c <_vfprintf_r+0xbc8>
 8009a4a:	aa28      	add	r2, sp, #160	; 0xa0
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	4658      	mov	r0, fp
 8009a50:	f002 fb83 	bl	800c15a <__sprint_r>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d14c      	bne.n	8009af2 <_vfprintf_r+0x145e>
 8009a58:	ae2b      	add	r6, sp, #172	; 0xac
 8009a5a:	e7c5      	b.n	80099e8 <_vfprintf_r+0x1354>
 8009a5c:	2c00      	cmp	r4, #0
 8009a5e:	dde3      	ble.n	8009a28 <_vfprintf_r+0x1394>
 8009a60:	2710      	movs	r7, #16
 8009a62:	4d3c      	ldr	r5, [pc, #240]	; (8009b54 <_vfprintf_r+0x14c0>)
 8009a64:	2c10      	cmp	r4, #16
 8009a66:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8009a6a:	f106 0108 	add.w	r1, r6, #8
 8009a6e:	f103 0301 	add.w	r3, r3, #1
 8009a72:	6035      	str	r5, [r6, #0]
 8009a74:	dc07      	bgt.n	8009a86 <_vfprintf_r+0x13f2>
 8009a76:	6074      	str	r4, [r6, #4]
 8009a78:	2b07      	cmp	r3, #7
 8009a7a:	4414      	add	r4, r2
 8009a7c:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 8009a80:	dcca      	bgt.n	8009a18 <_vfprintf_r+0x1384>
 8009a82:	460e      	mov	r6, r1
 8009a84:	e7d0      	b.n	8009a28 <_vfprintf_r+0x1394>
 8009a86:	3210      	adds	r2, #16
 8009a88:	2b07      	cmp	r3, #7
 8009a8a:	6077      	str	r7, [r6, #4]
 8009a8c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8009a90:	dd06      	ble.n	8009aa0 <_vfprintf_r+0x140c>
 8009a92:	aa28      	add	r2, sp, #160	; 0xa0
 8009a94:	4649      	mov	r1, r9
 8009a96:	4658      	mov	r0, fp
 8009a98:	f002 fb5f 	bl	800c15a <__sprint_r>
 8009a9c:	bb48      	cbnz	r0, 8009af2 <_vfprintf_r+0x145e>
 8009a9e:	a92b      	add	r1, sp, #172	; 0xac
 8009aa0:	3c10      	subs	r4, #16
 8009aa2:	460e      	mov	r6, r1
 8009aa4:	e7de      	b.n	8009a64 <_vfprintf_r+0x13d0>
 8009aa6:	2b07      	cmp	r3, #7
 8009aa8:	ddbe      	ble.n	8009a28 <_vfprintf_r+0x1394>
 8009aaa:	e7b5      	b.n	8009a18 <_vfprintf_r+0x1384>
 8009aac:	3608      	adds	r6, #8
 8009aae:	e7bb      	b.n	8009a28 <_vfprintf_r+0x1394>
 8009ab0:	460c      	mov	r4, r1
 8009ab2:	f7ff bbd3 	b.w	800925c <_vfprintf_r+0xbc8>
 8009ab6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ab8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009aba:	1a9d      	subs	r5, r3, r2
 8009abc:	2d00      	cmp	r5, #0
 8009abe:	f77f abd1 	ble.w	8009264 <_vfprintf_r+0xbd0>
 8009ac2:	2710      	movs	r7, #16
 8009ac4:	4e24      	ldr	r6, [pc, #144]	; (8009b58 <_vfprintf_r+0x14c4>)
 8009ac6:	2d10      	cmp	r5, #16
 8009ac8:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8009acc:	6026      	str	r6, [r4, #0]
 8009ace:	f103 0301 	add.w	r3, r3, #1
 8009ad2:	dc18      	bgt.n	8009b06 <_vfprintf_r+0x1472>
 8009ad4:	6065      	str	r5, [r4, #4]
 8009ad6:	2b07      	cmp	r3, #7
 8009ad8:	4415      	add	r5, r2
 8009ada:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8009ade:	f77f abc1 	ble.w	8009264 <_vfprintf_r+0xbd0>
 8009ae2:	aa28      	add	r2, sp, #160	; 0xa0
 8009ae4:	4649      	mov	r1, r9
 8009ae6:	4658      	mov	r0, fp
 8009ae8:	f002 fb37 	bl	800c15a <__sprint_r>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	f43f abb9 	beq.w	8009264 <_vfprintf_r+0xbd0>
 8009af2:	f1b8 0f00 	cmp.w	r8, #0
 8009af6:	f43f a898 	beq.w	8008c2a <_vfprintf_r+0x596>
 8009afa:	4641      	mov	r1, r8
 8009afc:	4658      	mov	r0, fp
 8009afe:	f001 f89f 	bl	800ac40 <_free_r>
 8009b02:	f7ff b892 	b.w	8008c2a <_vfprintf_r+0x596>
 8009b06:	3210      	adds	r2, #16
 8009b08:	2b07      	cmp	r3, #7
 8009b0a:	6067      	str	r7, [r4, #4]
 8009b0c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8009b10:	dc02      	bgt.n	8009b18 <_vfprintf_r+0x1484>
 8009b12:	3408      	adds	r4, #8
 8009b14:	3d10      	subs	r5, #16
 8009b16:	e7d6      	b.n	8009ac6 <_vfprintf_r+0x1432>
 8009b18:	aa28      	add	r2, sp, #160	; 0xa0
 8009b1a:	4649      	mov	r1, r9
 8009b1c:	4658      	mov	r0, fp
 8009b1e:	f002 fb1c 	bl	800c15a <__sprint_r>
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d1e5      	bne.n	8009af2 <_vfprintf_r+0x145e>
 8009b26:	ac2b      	add	r4, sp, #172	; 0xac
 8009b28:	e7f4      	b.n	8009b14 <_vfprintf_r+0x1480>
 8009b2a:	4641      	mov	r1, r8
 8009b2c:	4658      	mov	r0, fp
 8009b2e:	f001 f887 	bl	800ac40 <_free_r>
 8009b32:	f7ff bbaf 	b.w	8009294 <_vfprintf_r+0xc00>
 8009b36:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009b38:	b91b      	cbnz	r3, 8009b42 <_vfprintf_r+0x14ae>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	9329      	str	r3, [sp, #164]	; 0xa4
 8009b3e:	f7ff b874 	b.w	8008c2a <_vfprintf_r+0x596>
 8009b42:	aa28      	add	r2, sp, #160	; 0xa0
 8009b44:	4649      	mov	r1, r9
 8009b46:	4658      	mov	r0, fp
 8009b48:	f002 fb07 	bl	800c15a <__sprint_r>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	f47f a86c 	bne.w	8008c2a <_vfprintf_r+0x596>
 8009b52:	e7f2      	b.n	8009b3a <_vfprintf_r+0x14a6>
 8009b54:	0800c7d4 	.word	0x0800c7d4
 8009b58:	0800c7c4 	.word	0x0800c7c4

08009b5c <__sbprintf>:
 8009b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b5e:	460c      	mov	r4, r1
 8009b60:	461f      	mov	r7, r3
 8009b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b64:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8009b68:	9319      	str	r3, [sp, #100]	; 0x64
 8009b6a:	89e3      	ldrh	r3, [r4, #14]
 8009b6c:	8989      	ldrh	r1, [r1, #12]
 8009b6e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009b72:	69e3      	ldr	r3, [r4, #28]
 8009b74:	f021 0102 	bic.w	r1, r1, #2
 8009b78:	9307      	str	r3, [sp, #28]
 8009b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b7c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8009b80:	a91a      	add	r1, sp, #104	; 0x68
 8009b82:	4615      	mov	r5, r2
 8009b84:	4606      	mov	r6, r0
 8009b86:	9309      	str	r3, [sp, #36]	; 0x24
 8009b88:	9100      	str	r1, [sp, #0]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	9104      	str	r1, [sp, #16]
 8009b8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009b92:	a816      	add	r0, sp, #88	; 0x58
 8009b94:	9102      	str	r1, [sp, #8]
 8009b96:	9105      	str	r1, [sp, #20]
 8009b98:	9306      	str	r3, [sp, #24]
 8009b9a:	f001 fa87 	bl	800b0ac <__retarget_lock_init_recursive>
 8009b9e:	462a      	mov	r2, r5
 8009ba0:	463b      	mov	r3, r7
 8009ba2:	4669      	mov	r1, sp
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f7fe fd75 	bl	8008694 <_vfprintf_r>
 8009baa:	1e05      	subs	r5, r0, #0
 8009bac:	db07      	blt.n	8009bbe <__sbprintf+0x62>
 8009bae:	4669      	mov	r1, sp
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	f000 ff49 	bl	800aa48 <_fflush_r>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	bf18      	it	ne
 8009bba:	f04f 35ff 	movne.w	r5, #4294967295
 8009bbe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009bc2:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009bc4:	065b      	lsls	r3, r3, #25
 8009bc6:	bf42      	ittt	mi
 8009bc8:	89a3      	ldrhmi	r3, [r4, #12]
 8009bca:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8009bce:	81a3      	strhmi	r3, [r4, #12]
 8009bd0:	f001 fa6d 	bl	800b0ae <__retarget_lock_close_recursive>
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8009bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009bdc <__ascii_wctomb>:
 8009bdc:	b149      	cbz	r1, 8009bf2 <__ascii_wctomb+0x16>
 8009bde:	2aff      	cmp	r2, #255	; 0xff
 8009be0:	bf8b      	itete	hi
 8009be2:	238a      	movhi	r3, #138	; 0x8a
 8009be4:	700a      	strbls	r2, [r1, #0]
 8009be6:	6003      	strhi	r3, [r0, #0]
 8009be8:	2001      	movls	r0, #1
 8009bea:	bf88      	it	hi
 8009bec:	f04f 30ff 	movhi.w	r0, #4294967295
 8009bf0:	4770      	bx	lr
 8009bf2:	4608      	mov	r0, r1
 8009bf4:	4770      	bx	lr
	...

08009bf8 <__swsetup_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	4b2a      	ldr	r3, [pc, #168]	; (8009ca4 <__swsetup_r+0xac>)
 8009bfc:	4605      	mov	r5, r0
 8009bfe:	6818      	ldr	r0, [r3, #0]
 8009c00:	460c      	mov	r4, r1
 8009c02:	b118      	cbz	r0, 8009c0c <__swsetup_r+0x14>
 8009c04:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009c06:	b90b      	cbnz	r3, 8009c0c <__swsetup_r+0x14>
 8009c08:	f000 ff8a 	bl	800ab20 <__sinit>
 8009c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	0711      	lsls	r1, r2, #28
 8009c14:	d422      	bmi.n	8009c5c <__swsetup_r+0x64>
 8009c16:	06d0      	lsls	r0, r2, #27
 8009c18:	d407      	bmi.n	8009c2a <__swsetup_r+0x32>
 8009c1a:	2209      	movs	r2, #9
 8009c1c:	602a      	str	r2, [r5, #0]
 8009c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c22:	81a3      	strh	r3, [r4, #12]
 8009c24:	f04f 30ff 	mov.w	r0, #4294967295
 8009c28:	e034      	b.n	8009c94 <__swsetup_r+0x9c>
 8009c2a:	0751      	lsls	r1, r2, #29
 8009c2c:	d512      	bpl.n	8009c54 <__swsetup_r+0x5c>
 8009c2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009c30:	b141      	cbz	r1, 8009c44 <__swsetup_r+0x4c>
 8009c32:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009c36:	4299      	cmp	r1, r3
 8009c38:	d002      	beq.n	8009c40 <__swsetup_r+0x48>
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	f001 f800 	bl	800ac40 <_free_r>
 8009c40:	2300      	movs	r3, #0
 8009c42:	6323      	str	r3, [r4, #48]	; 0x30
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c4a:	81a3      	strh	r3, [r4, #12]
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	6063      	str	r3, [r4, #4]
 8009c50:	6923      	ldr	r3, [r4, #16]
 8009c52:	6023      	str	r3, [r4, #0]
 8009c54:	89a3      	ldrh	r3, [r4, #12]
 8009c56:	f043 0308 	orr.w	r3, r3, #8
 8009c5a:	81a3      	strh	r3, [r4, #12]
 8009c5c:	6923      	ldr	r3, [r4, #16]
 8009c5e:	b94b      	cbnz	r3, 8009c74 <__swsetup_r+0x7c>
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c6a:	d003      	beq.n	8009c74 <__swsetup_r+0x7c>
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	4628      	mov	r0, r5
 8009c70:	f001 fa4c 	bl	800b10c <__smakebuf_r>
 8009c74:	89a2      	ldrh	r2, [r4, #12]
 8009c76:	f012 0301 	ands.w	r3, r2, #1
 8009c7a:	d00c      	beq.n	8009c96 <__swsetup_r+0x9e>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60a3      	str	r3, [r4, #8]
 8009c80:	6963      	ldr	r3, [r4, #20]
 8009c82:	425b      	negs	r3, r3
 8009c84:	61a3      	str	r3, [r4, #24]
 8009c86:	6923      	ldr	r3, [r4, #16]
 8009c88:	b953      	cbnz	r3, 8009ca0 <__swsetup_r+0xa8>
 8009c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c8e:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009c92:	d1c4      	bne.n	8009c1e <__swsetup_r+0x26>
 8009c94:	bd38      	pop	{r3, r4, r5, pc}
 8009c96:	0792      	lsls	r2, r2, #30
 8009c98:	bf58      	it	pl
 8009c9a:	6963      	ldrpl	r3, [r4, #20]
 8009c9c:	60a3      	str	r3, [r4, #8]
 8009c9e:	e7f2      	b.n	8009c86 <__swsetup_r+0x8e>
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	e7f7      	b.n	8009c94 <__swsetup_r+0x9c>
 8009ca4:	2000017c 	.word	0x2000017c

08009ca8 <register_fini>:
 8009ca8:	4b02      	ldr	r3, [pc, #8]	; (8009cb4 <register_fini+0xc>)
 8009caa:	b113      	cbz	r3, 8009cb2 <register_fini+0xa>
 8009cac:	4802      	ldr	r0, [pc, #8]	; (8009cb8 <register_fini+0x10>)
 8009cae:	f000 b805 	b.w	8009cbc <atexit>
 8009cb2:	4770      	bx	lr
 8009cb4:	00000000 	.word	0x00000000
 8009cb8:	0800ab71 	.word	0x0800ab71

08009cbc <atexit>:
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	4601      	mov	r1, r0
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f002 ba8e 	b.w	800c1e4 <__register_exitproc>

08009cc8 <quorem>:
 8009cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ccc:	6903      	ldr	r3, [r0, #16]
 8009cce:	690c      	ldr	r4, [r1, #16]
 8009cd0:	4680      	mov	r8, r0
 8009cd2:	42a3      	cmp	r3, r4
 8009cd4:	f2c0 8084 	blt.w	8009de0 <quorem+0x118>
 8009cd8:	3c01      	subs	r4, #1
 8009cda:	f101 0714 	add.w	r7, r1, #20
 8009cde:	f100 0614 	add.w	r6, r0, #20
 8009ce2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009ce6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009cea:	3501      	adds	r5, #1
 8009cec:	fbb0 f5f5 	udiv	r5, r0, r5
 8009cf0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009cf4:	eb06 030c 	add.w	r3, r6, ip
 8009cf8:	eb07 090c 	add.w	r9, r7, ip
 8009cfc:	9301      	str	r3, [sp, #4]
 8009cfe:	b39d      	cbz	r5, 8009d68 <quorem+0xa0>
 8009d00:	f04f 0a00 	mov.w	sl, #0
 8009d04:	4638      	mov	r0, r7
 8009d06:	46b6      	mov	lr, r6
 8009d08:	46d3      	mov	fp, sl
 8009d0a:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d0e:	b293      	uxth	r3, r2
 8009d10:	fb05 a303 	mla	r3, r5, r3, sl
 8009d14:	0c12      	lsrs	r2, r2, #16
 8009d16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d1a:	fb05 a202 	mla	r2, r5, r2, sl
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	ebab 0303 	sub.w	r3, fp, r3
 8009d24:	f8de b000 	ldr.w	fp, [lr]
 8009d28:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009d2c:	fa1f fb8b 	uxth.w	fp, fp
 8009d30:	445b      	add	r3, fp
 8009d32:	fa1f fb82 	uxth.w	fp, r2
 8009d36:	f8de 2000 	ldr.w	r2, [lr]
 8009d3a:	4581      	cmp	r9, r0
 8009d3c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009d40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d4a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009d4e:	f84e 3b04 	str.w	r3, [lr], #4
 8009d52:	d2da      	bcs.n	8009d0a <quorem+0x42>
 8009d54:	f856 300c 	ldr.w	r3, [r6, ip]
 8009d58:	b933      	cbnz	r3, 8009d68 <quorem+0xa0>
 8009d5a:	9b01      	ldr	r3, [sp, #4]
 8009d5c:	3b04      	subs	r3, #4
 8009d5e:	429e      	cmp	r6, r3
 8009d60:	461a      	mov	r2, r3
 8009d62:	d331      	bcc.n	8009dc8 <quorem+0x100>
 8009d64:	f8c8 4010 	str.w	r4, [r8, #16]
 8009d68:	4640      	mov	r0, r8
 8009d6a:	f001 fe63 	bl	800ba34 <__mcmp>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	db26      	blt.n	8009dc0 <quorem+0xf8>
 8009d72:	4630      	mov	r0, r6
 8009d74:	f04f 0c00 	mov.w	ip, #0
 8009d78:	3501      	adds	r5, #1
 8009d7a:	f857 1b04 	ldr.w	r1, [r7], #4
 8009d7e:	f8d0 e000 	ldr.w	lr, [r0]
 8009d82:	b28b      	uxth	r3, r1
 8009d84:	ebac 0303 	sub.w	r3, ip, r3
 8009d88:	fa1f f28e 	uxth.w	r2, lr
 8009d8c:	4413      	add	r3, r2
 8009d8e:	0c0a      	lsrs	r2, r1, #16
 8009d90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d9e:	45b9      	cmp	r9, r7
 8009da0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009da4:	f840 3b04 	str.w	r3, [r0], #4
 8009da8:	d2e7      	bcs.n	8009d7a <quorem+0xb2>
 8009daa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009dae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009db2:	b92a      	cbnz	r2, 8009dc0 <quorem+0xf8>
 8009db4:	3b04      	subs	r3, #4
 8009db6:	429e      	cmp	r6, r3
 8009db8:	461a      	mov	r2, r3
 8009dba:	d30b      	bcc.n	8009dd4 <quorem+0x10c>
 8009dbc:	f8c8 4010 	str.w	r4, [r8, #16]
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	b003      	add	sp, #12
 8009dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc8:	6812      	ldr	r2, [r2, #0]
 8009dca:	3b04      	subs	r3, #4
 8009dcc:	2a00      	cmp	r2, #0
 8009dce:	d1c9      	bne.n	8009d64 <quorem+0x9c>
 8009dd0:	3c01      	subs	r4, #1
 8009dd2:	e7c4      	b.n	8009d5e <quorem+0x96>
 8009dd4:	6812      	ldr	r2, [r2, #0]
 8009dd6:	3b04      	subs	r3, #4
 8009dd8:	2a00      	cmp	r2, #0
 8009dda:	d1ef      	bne.n	8009dbc <quorem+0xf4>
 8009ddc:	3c01      	subs	r4, #1
 8009dde:	e7ea      	b.n	8009db6 <quorem+0xee>
 8009de0:	2000      	movs	r0, #0
 8009de2:	e7ee      	b.n	8009dc2 <quorem+0xfa>
 8009de4:	0000      	movs	r0, r0
	...

08009de8 <_dtoa_r>:
 8009de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	4616      	mov	r6, r2
 8009dee:	461f      	mov	r7, r3
 8009df0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8009df2:	b095      	sub	sp, #84	; 0x54
 8009df4:	4604      	mov	r4, r0
 8009df6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8009df8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009dfc:	b141      	cbz	r1, 8009e10 <_dtoa_r+0x28>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e02:	4093      	lsls	r3, r2
 8009e04:	608b      	str	r3, [r1, #8]
 8009e06:	604a      	str	r2, [r1, #4]
 8009e08:	f001 fc4f 	bl	800b6aa <_Bfree>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	6423      	str	r3, [r4, #64]	; 0x40
 8009e10:	1e3b      	subs	r3, r7, #0
 8009e12:	bfaf      	iteee	ge
 8009e14:	2300      	movge	r3, #0
 8009e16:	2201      	movlt	r2, #1
 8009e18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009e1c:	9303      	strlt	r3, [sp, #12]
 8009e1e:	bfa8      	it	ge
 8009e20:	602b      	strge	r3, [r5, #0]
 8009e22:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009e26:	4bb0      	ldr	r3, [pc, #704]	; (800a0e8 <_dtoa_r+0x300>)
 8009e28:	bfb8      	it	lt
 8009e2a:	602a      	strlt	r2, [r5, #0]
 8009e2c:	ea33 0308 	bics.w	r3, r3, r8
 8009e30:	d116      	bne.n	8009e60 <_dtoa_r+0x78>
 8009e32:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e36:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e38:	6013      	str	r3, [r2, #0]
 8009e3a:	9b02      	ldr	r3, [sp, #8]
 8009e3c:	b923      	cbnz	r3, 8009e48 <_dtoa_r+0x60>
 8009e3e:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009e42:	2800      	cmp	r0, #0
 8009e44:	f000 853f 	beq.w	800a8c6 <_dtoa_r+0xade>
 8009e48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e4a:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 800a0fc <_dtoa_r+0x314>
 8009e4e:	b11b      	cbz	r3, 8009e58 <_dtoa_r+0x70>
 8009e50:	f10b 0303 	add.w	r3, fp, #3
 8009e54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009e56:	6013      	str	r3, [r2, #0]
 8009e58:	4658      	mov	r0, fp
 8009e5a:	b015      	add	sp, #84	; 0x54
 8009e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e64:	2200      	movs	r2, #0
 8009e66:	2300      	movs	r3, #0
 8009e68:	4630      	mov	r0, r6
 8009e6a:	4639      	mov	r1, r7
 8009e6c:	f7f6 fd9c 	bl	80009a8 <__aeabi_dcmpeq>
 8009e70:	4682      	mov	sl, r0
 8009e72:	b160      	cbz	r0, 8009e8e <_dtoa_r+0xa6>
 8009e74:	2301      	movs	r3, #1
 8009e76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f000 851e 	beq.w	800a8be <_dtoa_r+0xad6>
 8009e82:	4b9a      	ldr	r3, [pc, #616]	; (800a0ec <_dtoa_r+0x304>)
 8009e84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009e86:	f103 3bff 	add.w	fp, r3, #4294967295
 8009e8a:	6013      	str	r3, [r2, #0]
 8009e8c:	e7e4      	b.n	8009e58 <_dtoa_r+0x70>
 8009e8e:	ab12      	add	r3, sp, #72	; 0x48
 8009e90:	9301      	str	r3, [sp, #4]
 8009e92:	ab13      	add	r3, sp, #76	; 0x4c
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	4632      	mov	r2, r6
 8009e98:	463b      	mov	r3, r7
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f001 fe42 	bl	800bb24 <__d2b>
 8009ea0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009ea4:	9006      	str	r0, [sp, #24]
 8009ea6:	2d00      	cmp	r5, #0
 8009ea8:	d07d      	beq.n	8009fa6 <_dtoa_r+0x1be>
 8009eaa:	46b0      	mov	r8, r6
 8009eac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009eb0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8009eb4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8009eb8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009ebc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	4b8b      	ldr	r3, [pc, #556]	; (800a0f0 <_dtoa_r+0x308>)
 8009ec4:	4640      	mov	r0, r8
 8009ec6:	4649      	mov	r1, r9
 8009ec8:	f7f6 f94e 	bl	8000168 <__aeabi_dsub>
 8009ecc:	a380      	add	r3, pc, #512	; (adr r3, 800a0d0 <_dtoa_r+0x2e8>)
 8009ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed2:	f7f6 fb01 	bl	80004d8 <__aeabi_dmul>
 8009ed6:	a380      	add	r3, pc, #512	; (adr r3, 800a0d8 <_dtoa_r+0x2f0>)
 8009ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009edc:	f7f6 f946 	bl	800016c <__adddf3>
 8009ee0:	4606      	mov	r6, r0
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	460f      	mov	r7, r1
 8009ee6:	f7f6 fa8d 	bl	8000404 <__aeabi_i2d>
 8009eea:	a37d      	add	r3, pc, #500	; (adr r3, 800a0e0 <_dtoa_r+0x2f8>)
 8009eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef0:	f7f6 faf2 	bl	80004d8 <__aeabi_dmul>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	4630      	mov	r0, r6
 8009efa:	4639      	mov	r1, r7
 8009efc:	f7f6 f936 	bl	800016c <__adddf3>
 8009f00:	4606      	mov	r6, r0
 8009f02:	460f      	mov	r7, r1
 8009f04:	f7f6 fd98 	bl	8000a38 <__aeabi_d2iz>
 8009f08:	2200      	movs	r2, #0
 8009f0a:	4682      	mov	sl, r0
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4630      	mov	r0, r6
 8009f10:	4639      	mov	r1, r7
 8009f12:	f7f6 fd53 	bl	80009bc <__aeabi_dcmplt>
 8009f16:	b148      	cbz	r0, 8009f2c <_dtoa_r+0x144>
 8009f18:	4650      	mov	r0, sl
 8009f1a:	f7f6 fa73 	bl	8000404 <__aeabi_i2d>
 8009f1e:	4632      	mov	r2, r6
 8009f20:	463b      	mov	r3, r7
 8009f22:	f7f6 fd41 	bl	80009a8 <__aeabi_dcmpeq>
 8009f26:	b908      	cbnz	r0, 8009f2c <_dtoa_r+0x144>
 8009f28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f2c:	f1ba 0f16 	cmp.w	sl, #22
 8009f30:	d85a      	bhi.n	8009fe8 <_dtoa_r+0x200>
 8009f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f36:	496f      	ldr	r1, [pc, #444]	; (800a0f4 <_dtoa_r+0x30c>)
 8009f38:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f40:	f7f6 fd5a 	bl	80009f8 <__aeabi_dcmpgt>
 8009f44:	2800      	cmp	r0, #0
 8009f46:	d051      	beq.n	8009fec <_dtoa_r+0x204>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f4e:	930d      	str	r3, [sp, #52]	; 0x34
 8009f50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f52:	1b5d      	subs	r5, r3, r5
 8009f54:	1e6b      	subs	r3, r5, #1
 8009f56:	9307      	str	r3, [sp, #28]
 8009f58:	bf43      	ittte	mi
 8009f5a:	2300      	movmi	r3, #0
 8009f5c:	f1c5 0901 	rsbmi	r9, r5, #1
 8009f60:	9307      	strmi	r3, [sp, #28]
 8009f62:	f04f 0900 	movpl.w	r9, #0
 8009f66:	f1ba 0f00 	cmp.w	sl, #0
 8009f6a:	db41      	blt.n	8009ff0 <_dtoa_r+0x208>
 8009f6c:	9b07      	ldr	r3, [sp, #28]
 8009f6e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8009f72:	4453      	add	r3, sl
 8009f74:	9307      	str	r3, [sp, #28]
 8009f76:	2300      	movs	r3, #0
 8009f78:	9308      	str	r3, [sp, #32]
 8009f7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009f7c:	2b09      	cmp	r3, #9
 8009f7e:	f200 808c 	bhi.w	800a09a <_dtoa_r+0x2b2>
 8009f82:	2b05      	cmp	r3, #5
 8009f84:	bfc4      	itt	gt
 8009f86:	3b04      	subgt	r3, #4
 8009f88:	931e      	strgt	r3, [sp, #120]	; 0x78
 8009f8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009f8c:	bfc8      	it	gt
 8009f8e:	2500      	movgt	r5, #0
 8009f90:	f1a3 0302 	sub.w	r3, r3, #2
 8009f94:	bfd8      	it	le
 8009f96:	2501      	movle	r5, #1
 8009f98:	2b03      	cmp	r3, #3
 8009f9a:	f200 808a 	bhi.w	800a0b2 <_dtoa_r+0x2ca>
 8009f9e:	e8df f003 	tbb	[pc, r3]
 8009fa2:	7a78      	.short	0x7a78
 8009fa4:	6c2f      	.short	0x6c2f
 8009fa6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009faa:	441d      	add	r5, r3
 8009fac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009fb0:	2820      	cmp	r0, #32
 8009fb2:	dd13      	ble.n	8009fdc <_dtoa_r+0x1f4>
 8009fb4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009fb8:	9b02      	ldr	r3, [sp, #8]
 8009fba:	fa08 f800 	lsl.w	r8, r8, r0
 8009fbe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009fc2:	fa23 f000 	lsr.w	r0, r3, r0
 8009fc6:	ea48 0000 	orr.w	r0, r8, r0
 8009fca:	f7f6 fa0b 	bl	80003e4 <__aeabi_ui2d>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	4680      	mov	r8, r0
 8009fd2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8009fd6:	3d01      	subs	r5, #1
 8009fd8:	9310      	str	r3, [sp, #64]	; 0x40
 8009fda:	e771      	b.n	8009ec0 <_dtoa_r+0xd8>
 8009fdc:	9b02      	ldr	r3, [sp, #8]
 8009fde:	f1c0 0020 	rsb	r0, r0, #32
 8009fe2:	fa03 f000 	lsl.w	r0, r3, r0
 8009fe6:	e7f0      	b.n	8009fca <_dtoa_r+0x1e2>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e7b0      	b.n	8009f4e <_dtoa_r+0x166>
 8009fec:	900d      	str	r0, [sp, #52]	; 0x34
 8009fee:	e7af      	b.n	8009f50 <_dtoa_r+0x168>
 8009ff0:	f1ca 0300 	rsb	r3, sl, #0
 8009ff4:	9308      	str	r3, [sp, #32]
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	eba9 090a 	sub.w	r9, r9, sl
 8009ffc:	930c      	str	r3, [sp, #48]	; 0x30
 8009ffe:	e7bc      	b.n	8009f7a <_dtoa_r+0x192>
 800a000:	2301      	movs	r3, #1
 800a002:	9309      	str	r3, [sp, #36]	; 0x24
 800a004:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a006:	2b00      	cmp	r3, #0
 800a008:	dd56      	ble.n	800a0b8 <_dtoa_r+0x2d0>
 800a00a:	4698      	mov	r8, r3
 800a00c:	9304      	str	r3, [sp, #16]
 800a00e:	2200      	movs	r2, #0
 800a010:	6462      	str	r2, [r4, #68]	; 0x44
 800a012:	2204      	movs	r2, #4
 800a014:	f102 0014 	add.w	r0, r2, #20
 800a018:	4298      	cmp	r0, r3
 800a01a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a01c:	d951      	bls.n	800a0c2 <_dtoa_r+0x2da>
 800a01e:	4620      	mov	r0, r4
 800a020:	f001 fb1e 	bl	800b660 <_Balloc>
 800a024:	f1b8 0f0e 	cmp.w	r8, #14
 800a028:	4683      	mov	fp, r0
 800a02a:	6420      	str	r0, [r4, #64]	; 0x40
 800a02c:	f200 80ed 	bhi.w	800a20a <_dtoa_r+0x422>
 800a030:	2d00      	cmp	r5, #0
 800a032:	f000 80ea 	beq.w	800a20a <_dtoa_r+0x422>
 800a036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a03a:	f1ba 0f00 	cmp.w	sl, #0
 800a03e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a042:	dd77      	ble.n	800a134 <_dtoa_r+0x34c>
 800a044:	4a2b      	ldr	r2, [pc, #172]	; (800a0f4 <_dtoa_r+0x30c>)
 800a046:	f00a 030f 	and.w	r3, sl, #15
 800a04a:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a04e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a052:	06f0      	lsls	r0, r6, #27
 800a054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a058:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a05c:	d568      	bpl.n	800a130 <_dtoa_r+0x348>
 800a05e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a062:	4b25      	ldr	r3, [pc, #148]	; (800a0f8 <_dtoa_r+0x310>)
 800a064:	2503      	movs	r5, #3
 800a066:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a06a:	f7f6 fb5f 	bl	800072c <__aeabi_ddiv>
 800a06e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a072:	f006 060f 	and.w	r6, r6, #15
 800a076:	4f20      	ldr	r7, [pc, #128]	; (800a0f8 <_dtoa_r+0x310>)
 800a078:	e04f      	b.n	800a11a <_dtoa_r+0x332>
 800a07a:	2301      	movs	r3, #1
 800a07c:	9309      	str	r3, [sp, #36]	; 0x24
 800a07e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a080:	4453      	add	r3, sl
 800a082:	f103 0801 	add.w	r8, r3, #1
 800a086:	9304      	str	r3, [sp, #16]
 800a088:	4643      	mov	r3, r8
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	bfb8      	it	lt
 800a08e:	2301      	movlt	r3, #1
 800a090:	e7bd      	b.n	800a00e <_dtoa_r+0x226>
 800a092:	2300      	movs	r3, #0
 800a094:	e7b5      	b.n	800a002 <_dtoa_r+0x21a>
 800a096:	2300      	movs	r3, #0
 800a098:	e7f0      	b.n	800a07c <_dtoa_r+0x294>
 800a09a:	2501      	movs	r5, #1
 800a09c:	2300      	movs	r3, #0
 800a09e:	9509      	str	r5, [sp, #36]	; 0x24
 800a0a0:	931e      	str	r3, [sp, #120]	; 0x78
 800a0a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	9304      	str	r3, [sp, #16]
 800a0aa:	4698      	mov	r8, r3
 800a0ac:	2312      	movs	r3, #18
 800a0ae:	921f      	str	r2, [sp, #124]	; 0x7c
 800a0b0:	e7ad      	b.n	800a00e <_dtoa_r+0x226>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0b6:	e7f4      	b.n	800a0a2 <_dtoa_r+0x2ba>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	9304      	str	r3, [sp, #16]
 800a0bc:	4698      	mov	r8, r3
 800a0be:	461a      	mov	r2, r3
 800a0c0:	e7f5      	b.n	800a0ae <_dtoa_r+0x2c6>
 800a0c2:	3101      	adds	r1, #1
 800a0c4:	6461      	str	r1, [r4, #68]	; 0x44
 800a0c6:	0052      	lsls	r2, r2, #1
 800a0c8:	e7a4      	b.n	800a014 <_dtoa_r+0x22c>
 800a0ca:	bf00      	nop
 800a0cc:	f3af 8000 	nop.w
 800a0d0:	636f4361 	.word	0x636f4361
 800a0d4:	3fd287a7 	.word	0x3fd287a7
 800a0d8:	8b60c8b3 	.word	0x8b60c8b3
 800a0dc:	3fc68a28 	.word	0x3fc68a28
 800a0e0:	509f79fb 	.word	0x509f79fb
 800a0e4:	3fd34413 	.word	0x3fd34413
 800a0e8:	7ff00000 	.word	0x7ff00000
 800a0ec:	0800c7a3 	.word	0x0800c7a3
 800a0f0:	3ff80000 	.word	0x3ff80000
 800a0f4:	0800c920 	.word	0x0800c920
 800a0f8:	0800c8f8 	.word	0x0800c8f8
 800a0fc:	0800c8ee 	.word	0x0800c8ee
 800a100:	07f1      	lsls	r1, r6, #31
 800a102:	d508      	bpl.n	800a116 <_dtoa_r+0x32e>
 800a104:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a10c:	f7f6 f9e4 	bl	80004d8 <__aeabi_dmul>
 800a110:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a114:	3501      	adds	r5, #1
 800a116:	1076      	asrs	r6, r6, #1
 800a118:	3708      	adds	r7, #8
 800a11a:	2e00      	cmp	r6, #0
 800a11c:	d1f0      	bne.n	800a100 <_dtoa_r+0x318>
 800a11e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a126:	f7f6 fb01 	bl	800072c <__aeabi_ddiv>
 800a12a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a12e:	e01b      	b.n	800a168 <_dtoa_r+0x380>
 800a130:	2502      	movs	r5, #2
 800a132:	e7a0      	b.n	800a076 <_dtoa_r+0x28e>
 800a134:	f000 80a4 	beq.w	800a280 <_dtoa_r+0x498>
 800a138:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a13c:	f1ca 0600 	rsb	r6, sl, #0
 800a140:	4ba0      	ldr	r3, [pc, #640]	; (800a3c4 <_dtoa_r+0x5dc>)
 800a142:	f006 020f 	and.w	r2, r6, #15
 800a146:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	f7f6 f9c3 	bl	80004d8 <__aeabi_dmul>
 800a152:	2502      	movs	r5, #2
 800a154:	2300      	movs	r3, #0
 800a156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a15a:	4f9b      	ldr	r7, [pc, #620]	; (800a3c8 <_dtoa_r+0x5e0>)
 800a15c:	1136      	asrs	r6, r6, #4
 800a15e:	2e00      	cmp	r6, #0
 800a160:	f040 8083 	bne.w	800a26a <_dtoa_r+0x482>
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1e0      	bne.n	800a12a <_dtoa_r+0x342>
 800a168:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f000 808a 	beq.w	800a284 <_dtoa_r+0x49c>
 800a170:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a174:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a178:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a17c:	2200      	movs	r2, #0
 800a17e:	4b93      	ldr	r3, [pc, #588]	; (800a3cc <_dtoa_r+0x5e4>)
 800a180:	f7f6 fc1c 	bl	80009bc <__aeabi_dcmplt>
 800a184:	2800      	cmp	r0, #0
 800a186:	d07d      	beq.n	800a284 <_dtoa_r+0x49c>
 800a188:	f1b8 0f00 	cmp.w	r8, #0
 800a18c:	d07a      	beq.n	800a284 <_dtoa_r+0x49c>
 800a18e:	9b04      	ldr	r3, [sp, #16]
 800a190:	2b00      	cmp	r3, #0
 800a192:	dd36      	ble.n	800a202 <_dtoa_r+0x41a>
 800a194:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a198:	2200      	movs	r2, #0
 800a19a:	4b8d      	ldr	r3, [pc, #564]	; (800a3d0 <_dtoa_r+0x5e8>)
 800a19c:	f7f6 f99c 	bl	80004d8 <__aeabi_dmul>
 800a1a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1a4:	9e04      	ldr	r6, [sp, #16]
 800a1a6:	f10a 37ff 	add.w	r7, sl, #4294967295
 800a1aa:	3501      	adds	r5, #1
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	f7f6 f929 	bl	8000404 <__aeabi_i2d>
 800a1b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1b6:	f7f6 f98f 	bl	80004d8 <__aeabi_dmul>
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	4b85      	ldr	r3, [pc, #532]	; (800a3d4 <_dtoa_r+0x5ec>)
 800a1be:	f7f5 ffd5 	bl	800016c <__adddf3>
 800a1c2:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800a1c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a1ca:	950b      	str	r5, [sp, #44]	; 0x2c
 800a1cc:	2e00      	cmp	r6, #0
 800a1ce:	d15c      	bne.n	800a28a <_dtoa_r+0x4a2>
 800a1d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	4b80      	ldr	r3, [pc, #512]	; (800a3d8 <_dtoa_r+0x5f0>)
 800a1d8:	f7f5 ffc6 	bl	8000168 <__aeabi_dsub>
 800a1dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1de:	462b      	mov	r3, r5
 800a1e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1e4:	f7f6 fc08 	bl	80009f8 <__aeabi_dcmpgt>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	f040 8282 	bne.w	800a6f2 <_dtoa_r+0x90a>
 800a1ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1f4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a1f8:	f7f6 fbe0 	bl	80009bc <__aeabi_dcmplt>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	f040 8276 	bne.w	800a6ee <_dtoa_r+0x906>
 800a202:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a206:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a20a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f2c0 814c 	blt.w	800a4aa <_dtoa_r+0x6c2>
 800a212:	f1ba 0f0e 	cmp.w	sl, #14
 800a216:	f300 8148 	bgt.w	800a4aa <_dtoa_r+0x6c2>
 800a21a:	4b6a      	ldr	r3, [pc, #424]	; (800a3c4 <_dtoa_r+0x5dc>)
 800a21c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a224:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a228:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f280 80d8 	bge.w	800a3e0 <_dtoa_r+0x5f8>
 800a230:	f1b8 0f00 	cmp.w	r8, #0
 800a234:	f300 80d4 	bgt.w	800a3e0 <_dtoa_r+0x5f8>
 800a238:	f040 8258 	bne.w	800a6ec <_dtoa_r+0x904>
 800a23c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a240:	2200      	movs	r2, #0
 800a242:	4b65      	ldr	r3, [pc, #404]	; (800a3d8 <_dtoa_r+0x5f0>)
 800a244:	f7f6 f948 	bl	80004d8 <__aeabi_dmul>
 800a248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a24c:	f7f6 fbca 	bl	80009e4 <__aeabi_dcmpge>
 800a250:	4646      	mov	r6, r8
 800a252:	4647      	mov	r7, r8
 800a254:	2800      	cmp	r0, #0
 800a256:	f040 822e 	bne.w	800a6b6 <_dtoa_r+0x8ce>
 800a25a:	2331      	movs	r3, #49	; 0x31
 800a25c:	f10b 0501 	add.w	r5, fp, #1
 800a260:	f88b 3000 	strb.w	r3, [fp]
 800a264:	f10a 0a01 	add.w	sl, sl, #1
 800a268:	e229      	b.n	800a6be <_dtoa_r+0x8d6>
 800a26a:	07f2      	lsls	r2, r6, #31
 800a26c:	d505      	bpl.n	800a27a <_dtoa_r+0x492>
 800a26e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a272:	f7f6 f931 	bl	80004d8 <__aeabi_dmul>
 800a276:	2301      	movs	r3, #1
 800a278:	3501      	adds	r5, #1
 800a27a:	1076      	asrs	r6, r6, #1
 800a27c:	3708      	adds	r7, #8
 800a27e:	e76e      	b.n	800a15e <_dtoa_r+0x376>
 800a280:	2502      	movs	r5, #2
 800a282:	e771      	b.n	800a168 <_dtoa_r+0x380>
 800a284:	4657      	mov	r7, sl
 800a286:	4646      	mov	r6, r8
 800a288:	e790      	b.n	800a1ac <_dtoa_r+0x3c4>
 800a28a:	4b4e      	ldr	r3, [pc, #312]	; (800a3c4 <_dtoa_r+0x5dc>)
 800a28c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a290:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a296:	2b00      	cmp	r3, #0
 800a298:	d048      	beq.n	800a32c <_dtoa_r+0x544>
 800a29a:	4602      	mov	r2, r0
 800a29c:	460b      	mov	r3, r1
 800a29e:	2000      	movs	r0, #0
 800a2a0:	494e      	ldr	r1, [pc, #312]	; (800a3dc <_dtoa_r+0x5f4>)
 800a2a2:	f7f6 fa43 	bl	800072c <__aeabi_ddiv>
 800a2a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a2aa:	f7f5 ff5d 	bl	8000168 <__aeabi_dsub>
 800a2ae:	465d      	mov	r5, fp
 800a2b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a2b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2b8:	f7f6 fbbe 	bl	8000a38 <__aeabi_d2iz>
 800a2bc:	9011      	str	r0, [sp, #68]	; 0x44
 800a2be:	f7f6 f8a1 	bl	8000404 <__aeabi_i2d>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2ca:	f7f5 ff4d 	bl	8000168 <__aeabi_dsub>
 800a2ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2d4:	3330      	adds	r3, #48	; 0x30
 800a2d6:	f805 3b01 	strb.w	r3, [r5], #1
 800a2da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a2de:	f7f6 fb6d 	bl	80009bc <__aeabi_dcmplt>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d163      	bne.n	800a3ae <_dtoa_r+0x5c6>
 800a2e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	4937      	ldr	r1, [pc, #220]	; (800a3cc <_dtoa_r+0x5e4>)
 800a2ee:	f7f5 ff3b 	bl	8000168 <__aeabi_dsub>
 800a2f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a2f6:	f7f6 fb61 	bl	80009bc <__aeabi_dcmplt>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	f040 80b6 	bne.w	800a46c <_dtoa_r+0x684>
 800a300:	eba5 030b 	sub.w	r3, r5, fp
 800a304:	429e      	cmp	r6, r3
 800a306:	f77f af7c 	ble.w	800a202 <_dtoa_r+0x41a>
 800a30a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a30e:	2200      	movs	r2, #0
 800a310:	4b2f      	ldr	r3, [pc, #188]	; (800a3d0 <_dtoa_r+0x5e8>)
 800a312:	f7f6 f8e1 	bl	80004d8 <__aeabi_dmul>
 800a316:	2200      	movs	r2, #0
 800a318:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a31c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a320:	4b2b      	ldr	r3, [pc, #172]	; (800a3d0 <_dtoa_r+0x5e8>)
 800a322:	f7f6 f8d9 	bl	80004d8 <__aeabi_dmul>
 800a326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a32a:	e7c3      	b.n	800a2b4 <_dtoa_r+0x4cc>
 800a32c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a330:	f7f6 f8d2 	bl	80004d8 <__aeabi_dmul>
 800a334:	eb0b 0506 	add.w	r5, fp, r6
 800a338:	465e      	mov	r6, fp
 800a33a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a33e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a342:	f7f6 fb79 	bl	8000a38 <__aeabi_d2iz>
 800a346:	9011      	str	r0, [sp, #68]	; 0x44
 800a348:	f7f6 f85c 	bl	8000404 <__aeabi_i2d>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a354:	f7f5 ff08 	bl	8000168 <__aeabi_dsub>
 800a358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a35a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a35e:	3330      	adds	r3, #48	; 0x30
 800a360:	f806 3b01 	strb.w	r3, [r6], #1
 800a364:	42ae      	cmp	r6, r5
 800a366:	f04f 0200 	mov.w	r2, #0
 800a36a:	d124      	bne.n	800a3b6 <_dtoa_r+0x5ce>
 800a36c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a370:	4b1a      	ldr	r3, [pc, #104]	; (800a3dc <_dtoa_r+0x5f4>)
 800a372:	f7f5 fefb 	bl	800016c <__adddf3>
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a37e:	f7f6 fb3b 	bl	80009f8 <__aeabi_dcmpgt>
 800a382:	2800      	cmp	r0, #0
 800a384:	d172      	bne.n	800a46c <_dtoa_r+0x684>
 800a386:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a38a:	2000      	movs	r0, #0
 800a38c:	4913      	ldr	r1, [pc, #76]	; (800a3dc <_dtoa_r+0x5f4>)
 800a38e:	f7f5 feeb 	bl	8000168 <__aeabi_dsub>
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a39a:	f7f6 fb0f 	bl	80009bc <__aeabi_dcmplt>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	f43f af2f 	beq.w	800a202 <_dtoa_r+0x41a>
 800a3a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a3a8:	1e6a      	subs	r2, r5, #1
 800a3aa:	2b30      	cmp	r3, #48	; 0x30
 800a3ac:	d001      	beq.n	800a3b2 <_dtoa_r+0x5ca>
 800a3ae:	46ba      	mov	sl, r7
 800a3b0:	e04b      	b.n	800a44a <_dtoa_r+0x662>
 800a3b2:	4615      	mov	r5, r2
 800a3b4:	e7f6      	b.n	800a3a4 <_dtoa_r+0x5bc>
 800a3b6:	4b06      	ldr	r3, [pc, #24]	; (800a3d0 <_dtoa_r+0x5e8>)
 800a3b8:	f7f6 f88e 	bl	80004d8 <__aeabi_dmul>
 800a3bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3c0:	e7bd      	b.n	800a33e <_dtoa_r+0x556>
 800a3c2:	bf00      	nop
 800a3c4:	0800c920 	.word	0x0800c920
 800a3c8:	0800c8f8 	.word	0x0800c8f8
 800a3cc:	3ff00000 	.word	0x3ff00000
 800a3d0:	40240000 	.word	0x40240000
 800a3d4:	401c0000 	.word	0x401c0000
 800a3d8:	40140000 	.word	0x40140000
 800a3dc:	3fe00000 	.word	0x3fe00000
 800a3e0:	465d      	mov	r5, fp
 800a3e2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a3e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	4639      	mov	r1, r7
 800a3ee:	f7f6 f99d 	bl	800072c <__aeabi_ddiv>
 800a3f2:	f7f6 fb21 	bl	8000a38 <__aeabi_d2iz>
 800a3f6:	4681      	mov	r9, r0
 800a3f8:	f7f6 f804 	bl	8000404 <__aeabi_i2d>
 800a3fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a400:	f7f6 f86a 	bl	80004d8 <__aeabi_dmul>
 800a404:	4602      	mov	r2, r0
 800a406:	460b      	mov	r3, r1
 800a408:	4630      	mov	r0, r6
 800a40a:	4639      	mov	r1, r7
 800a40c:	f7f5 feac 	bl	8000168 <__aeabi_dsub>
 800a410:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800a414:	f805 6b01 	strb.w	r6, [r5], #1
 800a418:	eba5 060b 	sub.w	r6, r5, fp
 800a41c:	45b0      	cmp	r8, r6
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	d135      	bne.n	800a490 <_dtoa_r+0x6a8>
 800a424:	f7f5 fea2 	bl	800016c <__adddf3>
 800a428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a42c:	4606      	mov	r6, r0
 800a42e:	460f      	mov	r7, r1
 800a430:	f7f6 fae2 	bl	80009f8 <__aeabi_dcmpgt>
 800a434:	b9c8      	cbnz	r0, 800a46a <_dtoa_r+0x682>
 800a436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a43a:	4630      	mov	r0, r6
 800a43c:	4639      	mov	r1, r7
 800a43e:	f7f6 fab3 	bl	80009a8 <__aeabi_dcmpeq>
 800a442:	b110      	cbz	r0, 800a44a <_dtoa_r+0x662>
 800a444:	f019 0f01 	tst.w	r9, #1
 800a448:	d10f      	bne.n	800a46a <_dtoa_r+0x682>
 800a44a:	9906      	ldr	r1, [sp, #24]
 800a44c:	4620      	mov	r0, r4
 800a44e:	f001 f92c 	bl	800b6aa <_Bfree>
 800a452:	2300      	movs	r3, #0
 800a454:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a456:	702b      	strb	r3, [r5, #0]
 800a458:	f10a 0301 	add.w	r3, sl, #1
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a460:	2b00      	cmp	r3, #0
 800a462:	f43f acf9 	beq.w	8009e58 <_dtoa_r+0x70>
 800a466:	601d      	str	r5, [r3, #0]
 800a468:	e4f6      	b.n	8009e58 <_dtoa_r+0x70>
 800a46a:	4657      	mov	r7, sl
 800a46c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a470:	1e6b      	subs	r3, r5, #1
 800a472:	2a39      	cmp	r2, #57	; 0x39
 800a474:	d106      	bne.n	800a484 <_dtoa_r+0x69c>
 800a476:	459b      	cmp	fp, r3
 800a478:	d108      	bne.n	800a48c <_dtoa_r+0x6a4>
 800a47a:	2330      	movs	r3, #48	; 0x30
 800a47c:	f88b 3000 	strb.w	r3, [fp]
 800a480:	465b      	mov	r3, fp
 800a482:	3701      	adds	r7, #1
 800a484:	781a      	ldrb	r2, [r3, #0]
 800a486:	3201      	adds	r2, #1
 800a488:	701a      	strb	r2, [r3, #0]
 800a48a:	e790      	b.n	800a3ae <_dtoa_r+0x5c6>
 800a48c:	461d      	mov	r5, r3
 800a48e:	e7ed      	b.n	800a46c <_dtoa_r+0x684>
 800a490:	2200      	movs	r2, #0
 800a492:	4b99      	ldr	r3, [pc, #612]	; (800a6f8 <_dtoa_r+0x910>)
 800a494:	f7f6 f820 	bl	80004d8 <__aeabi_dmul>
 800a498:	2200      	movs	r2, #0
 800a49a:	2300      	movs	r3, #0
 800a49c:	4606      	mov	r6, r0
 800a49e:	460f      	mov	r7, r1
 800a4a0:	f7f6 fa82 	bl	80009a8 <__aeabi_dcmpeq>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d09e      	beq.n	800a3e6 <_dtoa_r+0x5fe>
 800a4a8:	e7cf      	b.n	800a44a <_dtoa_r+0x662>
 800a4aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ac:	2a00      	cmp	r2, #0
 800a4ae:	f000 8088 	beq.w	800a5c2 <_dtoa_r+0x7da>
 800a4b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a4b4:	2a01      	cmp	r2, #1
 800a4b6:	dc6d      	bgt.n	800a594 <_dtoa_r+0x7ac>
 800a4b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a4ba:	2a00      	cmp	r2, #0
 800a4bc:	d066      	beq.n	800a58c <_dtoa_r+0x7a4>
 800a4be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a4c2:	464d      	mov	r5, r9
 800a4c4:	9e08      	ldr	r6, [sp, #32]
 800a4c6:	9a07      	ldr	r2, [sp, #28]
 800a4c8:	2101      	movs	r1, #1
 800a4ca:	441a      	add	r2, r3
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	4499      	add	r9, r3
 800a4d0:	9207      	str	r2, [sp, #28]
 800a4d2:	f001 f97c 	bl	800b7ce <__i2b>
 800a4d6:	4607      	mov	r7, r0
 800a4d8:	2d00      	cmp	r5, #0
 800a4da:	dd0b      	ble.n	800a4f4 <_dtoa_r+0x70c>
 800a4dc:	9b07      	ldr	r3, [sp, #28]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	dd08      	ble.n	800a4f4 <_dtoa_r+0x70c>
 800a4e2:	42ab      	cmp	r3, r5
 800a4e4:	bfa8      	it	ge
 800a4e6:	462b      	movge	r3, r5
 800a4e8:	9a07      	ldr	r2, [sp, #28]
 800a4ea:	eba9 0903 	sub.w	r9, r9, r3
 800a4ee:	1aed      	subs	r5, r5, r3
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	9307      	str	r3, [sp, #28]
 800a4f4:	9b08      	ldr	r3, [sp, #32]
 800a4f6:	b1eb      	cbz	r3, 800a534 <_dtoa_r+0x74c>
 800a4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d065      	beq.n	800a5ca <_dtoa_r+0x7e2>
 800a4fe:	b18e      	cbz	r6, 800a524 <_dtoa_r+0x73c>
 800a500:	4639      	mov	r1, r7
 800a502:	4632      	mov	r2, r6
 800a504:	4620      	mov	r0, r4
 800a506:	f001 fa01 	bl	800b90c <__pow5mult>
 800a50a:	9a06      	ldr	r2, [sp, #24]
 800a50c:	4601      	mov	r1, r0
 800a50e:	4607      	mov	r7, r0
 800a510:	4620      	mov	r0, r4
 800a512:	f001 f965 	bl	800b7e0 <__multiply>
 800a516:	9906      	ldr	r1, [sp, #24]
 800a518:	900a      	str	r0, [sp, #40]	; 0x28
 800a51a:	4620      	mov	r0, r4
 800a51c:	f001 f8c5 	bl	800b6aa <_Bfree>
 800a520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a522:	9306      	str	r3, [sp, #24]
 800a524:	9b08      	ldr	r3, [sp, #32]
 800a526:	1b9a      	subs	r2, r3, r6
 800a528:	d004      	beq.n	800a534 <_dtoa_r+0x74c>
 800a52a:	9906      	ldr	r1, [sp, #24]
 800a52c:	4620      	mov	r0, r4
 800a52e:	f001 f9ed 	bl	800b90c <__pow5mult>
 800a532:	9006      	str	r0, [sp, #24]
 800a534:	2101      	movs	r1, #1
 800a536:	4620      	mov	r0, r4
 800a538:	f001 f949 	bl	800b7ce <__i2b>
 800a53c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a53e:	4606      	mov	r6, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	f000 81ca 	beq.w	800a8da <_dtoa_r+0xaf2>
 800a546:	461a      	mov	r2, r3
 800a548:	4601      	mov	r1, r0
 800a54a:	4620      	mov	r0, r4
 800a54c:	f001 f9de 	bl	800b90c <__pow5mult>
 800a550:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a552:	4606      	mov	r6, r0
 800a554:	2b01      	cmp	r3, #1
 800a556:	dc3e      	bgt.n	800a5d6 <_dtoa_r+0x7ee>
 800a558:	9b02      	ldr	r3, [sp, #8]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d137      	bne.n	800a5ce <_dtoa_r+0x7e6>
 800a55e:	9b03      	ldr	r3, [sp, #12]
 800a560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a564:	2b00      	cmp	r3, #0
 800a566:	d134      	bne.n	800a5d2 <_dtoa_r+0x7ea>
 800a568:	9b03      	ldr	r3, [sp, #12]
 800a56a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a56e:	0d1b      	lsrs	r3, r3, #20
 800a570:	051b      	lsls	r3, r3, #20
 800a572:	b12b      	cbz	r3, 800a580 <_dtoa_r+0x798>
 800a574:	9b07      	ldr	r3, [sp, #28]
 800a576:	f109 0901 	add.w	r9, r9, #1
 800a57a:	3301      	adds	r3, #1
 800a57c:	9307      	str	r3, [sp, #28]
 800a57e:	2301      	movs	r3, #1
 800a580:	9308      	str	r3, [sp, #32]
 800a582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a584:	2b00      	cmp	r3, #0
 800a586:	d128      	bne.n	800a5da <_dtoa_r+0x7f2>
 800a588:	2001      	movs	r0, #1
 800a58a:	e02e      	b.n	800a5ea <_dtoa_r+0x802>
 800a58c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a58e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a592:	e796      	b.n	800a4c2 <_dtoa_r+0x6da>
 800a594:	9b08      	ldr	r3, [sp, #32]
 800a596:	f108 36ff 	add.w	r6, r8, #4294967295
 800a59a:	42b3      	cmp	r3, r6
 800a59c:	bfb7      	itett	lt
 800a59e:	9b08      	ldrlt	r3, [sp, #32]
 800a5a0:	1b9e      	subge	r6, r3, r6
 800a5a2:	1af2      	sublt	r2, r6, r3
 800a5a4:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800a5a6:	bfbf      	itttt	lt
 800a5a8:	9608      	strlt	r6, [sp, #32]
 800a5aa:	189b      	addlt	r3, r3, r2
 800a5ac:	930c      	strlt	r3, [sp, #48]	; 0x30
 800a5ae:	2600      	movlt	r6, #0
 800a5b0:	f1b8 0f00 	cmp.w	r8, #0
 800a5b4:	bfb9      	ittee	lt
 800a5b6:	eba9 0508 	sublt.w	r5, r9, r8
 800a5ba:	2300      	movlt	r3, #0
 800a5bc:	464d      	movge	r5, r9
 800a5be:	4643      	movge	r3, r8
 800a5c0:	e781      	b.n	800a4c6 <_dtoa_r+0x6de>
 800a5c2:	9e08      	ldr	r6, [sp, #32]
 800a5c4:	464d      	mov	r5, r9
 800a5c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a5c8:	e786      	b.n	800a4d8 <_dtoa_r+0x6f0>
 800a5ca:	9a08      	ldr	r2, [sp, #32]
 800a5cc:	e7ad      	b.n	800a52a <_dtoa_r+0x742>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e7d6      	b.n	800a580 <_dtoa_r+0x798>
 800a5d2:	9b02      	ldr	r3, [sp, #8]
 800a5d4:	e7d4      	b.n	800a580 <_dtoa_r+0x798>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	9308      	str	r3, [sp, #32]
 800a5da:	6933      	ldr	r3, [r6, #16]
 800a5dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a5e0:	6918      	ldr	r0, [r3, #16]
 800a5e2:	f001 f8a6 	bl	800b732 <__hi0bits>
 800a5e6:	f1c0 0020 	rsb	r0, r0, #32
 800a5ea:	9b07      	ldr	r3, [sp, #28]
 800a5ec:	4418      	add	r0, r3
 800a5ee:	f010 001f 	ands.w	r0, r0, #31
 800a5f2:	d047      	beq.n	800a684 <_dtoa_r+0x89c>
 800a5f4:	f1c0 0320 	rsb	r3, r0, #32
 800a5f8:	2b04      	cmp	r3, #4
 800a5fa:	dd3b      	ble.n	800a674 <_dtoa_r+0x88c>
 800a5fc:	9b07      	ldr	r3, [sp, #28]
 800a5fe:	f1c0 001c 	rsb	r0, r0, #28
 800a602:	4481      	add	r9, r0
 800a604:	4405      	add	r5, r0
 800a606:	4403      	add	r3, r0
 800a608:	9307      	str	r3, [sp, #28]
 800a60a:	f1b9 0f00 	cmp.w	r9, #0
 800a60e:	dd05      	ble.n	800a61c <_dtoa_r+0x834>
 800a610:	464a      	mov	r2, r9
 800a612:	9906      	ldr	r1, [sp, #24]
 800a614:	4620      	mov	r0, r4
 800a616:	f001 f9b9 	bl	800b98c <__lshift>
 800a61a:	9006      	str	r0, [sp, #24]
 800a61c:	9b07      	ldr	r3, [sp, #28]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	dd05      	ble.n	800a62e <_dtoa_r+0x846>
 800a622:	4631      	mov	r1, r6
 800a624:	461a      	mov	r2, r3
 800a626:	4620      	mov	r0, r4
 800a628:	f001 f9b0 	bl	800b98c <__lshift>
 800a62c:	4606      	mov	r6, r0
 800a62e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a630:	b353      	cbz	r3, 800a688 <_dtoa_r+0x8a0>
 800a632:	4631      	mov	r1, r6
 800a634:	9806      	ldr	r0, [sp, #24]
 800a636:	f001 f9fd 	bl	800ba34 <__mcmp>
 800a63a:	2800      	cmp	r0, #0
 800a63c:	da24      	bge.n	800a688 <_dtoa_r+0x8a0>
 800a63e:	2300      	movs	r3, #0
 800a640:	220a      	movs	r2, #10
 800a642:	9906      	ldr	r1, [sp, #24]
 800a644:	4620      	mov	r0, r4
 800a646:	f001 f839 	bl	800b6bc <__multadd>
 800a64a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a64c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a650:	9006      	str	r0, [sp, #24]
 800a652:	2b00      	cmp	r3, #0
 800a654:	f000 8148 	beq.w	800a8e8 <_dtoa_r+0xb00>
 800a658:	2300      	movs	r3, #0
 800a65a:	4639      	mov	r1, r7
 800a65c:	220a      	movs	r2, #10
 800a65e:	4620      	mov	r0, r4
 800a660:	f001 f82c 	bl	800b6bc <__multadd>
 800a664:	9b04      	ldr	r3, [sp, #16]
 800a666:	4607      	mov	r7, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	dc4d      	bgt.n	800a708 <_dtoa_r+0x920>
 800a66c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a66e:	2b02      	cmp	r3, #2
 800a670:	dd4a      	ble.n	800a708 <_dtoa_r+0x920>
 800a672:	e011      	b.n	800a698 <_dtoa_r+0x8b0>
 800a674:	d0c9      	beq.n	800a60a <_dtoa_r+0x822>
 800a676:	9a07      	ldr	r2, [sp, #28]
 800a678:	331c      	adds	r3, #28
 800a67a:	441a      	add	r2, r3
 800a67c:	4499      	add	r9, r3
 800a67e:	441d      	add	r5, r3
 800a680:	4613      	mov	r3, r2
 800a682:	e7c1      	b.n	800a608 <_dtoa_r+0x820>
 800a684:	4603      	mov	r3, r0
 800a686:	e7f6      	b.n	800a676 <_dtoa_r+0x88e>
 800a688:	f1b8 0f00 	cmp.w	r8, #0
 800a68c:	dc36      	bgt.n	800a6fc <_dtoa_r+0x914>
 800a68e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a690:	2b02      	cmp	r3, #2
 800a692:	dd33      	ble.n	800a6fc <_dtoa_r+0x914>
 800a694:	f8cd 8010 	str.w	r8, [sp, #16]
 800a698:	9b04      	ldr	r3, [sp, #16]
 800a69a:	b963      	cbnz	r3, 800a6b6 <_dtoa_r+0x8ce>
 800a69c:	4631      	mov	r1, r6
 800a69e:	2205      	movs	r2, #5
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f001 f80b 	bl	800b6bc <__multadd>
 800a6a6:	4601      	mov	r1, r0
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	9806      	ldr	r0, [sp, #24]
 800a6ac:	f001 f9c2 	bl	800ba34 <__mcmp>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	f73f add2 	bgt.w	800a25a <_dtoa_r+0x472>
 800a6b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a6b8:	465d      	mov	r5, fp
 800a6ba:	ea6f 0a03 	mvn.w	sl, r3
 800a6be:	f04f 0900 	mov.w	r9, #0
 800a6c2:	4631      	mov	r1, r6
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f000 fff0 	bl	800b6aa <_Bfree>
 800a6ca:	2f00      	cmp	r7, #0
 800a6cc:	f43f aebd 	beq.w	800a44a <_dtoa_r+0x662>
 800a6d0:	f1b9 0f00 	cmp.w	r9, #0
 800a6d4:	d005      	beq.n	800a6e2 <_dtoa_r+0x8fa>
 800a6d6:	45b9      	cmp	r9, r7
 800a6d8:	d003      	beq.n	800a6e2 <_dtoa_r+0x8fa>
 800a6da:	4649      	mov	r1, r9
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f000 ffe4 	bl	800b6aa <_Bfree>
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f000 ffe0 	bl	800b6aa <_Bfree>
 800a6ea:	e6ae      	b.n	800a44a <_dtoa_r+0x662>
 800a6ec:	2600      	movs	r6, #0
 800a6ee:	4637      	mov	r7, r6
 800a6f0:	e7e1      	b.n	800a6b6 <_dtoa_r+0x8ce>
 800a6f2:	46ba      	mov	sl, r7
 800a6f4:	4637      	mov	r7, r6
 800a6f6:	e5b0      	b.n	800a25a <_dtoa_r+0x472>
 800a6f8:	40240000 	.word	0x40240000
 800a6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6fe:	f8cd 8010 	str.w	r8, [sp, #16]
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 80f7 	beq.w	800a8f6 <_dtoa_r+0xb0e>
 800a708:	2d00      	cmp	r5, #0
 800a70a:	dd05      	ble.n	800a718 <_dtoa_r+0x930>
 800a70c:	4639      	mov	r1, r7
 800a70e:	462a      	mov	r2, r5
 800a710:	4620      	mov	r0, r4
 800a712:	f001 f93b 	bl	800b98c <__lshift>
 800a716:	4607      	mov	r7, r0
 800a718:	9b08      	ldr	r3, [sp, #32]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d04c      	beq.n	800a7b8 <_dtoa_r+0x9d0>
 800a71e:	6879      	ldr	r1, [r7, #4]
 800a720:	4620      	mov	r0, r4
 800a722:	f000 ff9d 	bl	800b660 <_Balloc>
 800a726:	4605      	mov	r5, r0
 800a728:	693a      	ldr	r2, [r7, #16]
 800a72a:	f107 010c 	add.w	r1, r7, #12
 800a72e:	3202      	adds	r2, #2
 800a730:	0092      	lsls	r2, r2, #2
 800a732:	300c      	adds	r0, #12
 800a734:	f7fc fd04 	bl	8007140 <memcpy>
 800a738:	2201      	movs	r2, #1
 800a73a:	4629      	mov	r1, r5
 800a73c:	4620      	mov	r0, r4
 800a73e:	f001 f925 	bl	800b98c <__lshift>
 800a742:	46b9      	mov	r9, r7
 800a744:	4607      	mov	r7, r0
 800a746:	9b02      	ldr	r3, [sp, #8]
 800a748:	f8cd b01c 	str.w	fp, [sp, #28]
 800a74c:	f003 0301 	and.w	r3, r3, #1
 800a750:	9308      	str	r3, [sp, #32]
 800a752:	4631      	mov	r1, r6
 800a754:	9806      	ldr	r0, [sp, #24]
 800a756:	f7ff fab7 	bl	8009cc8 <quorem>
 800a75a:	4649      	mov	r1, r9
 800a75c:	4605      	mov	r5, r0
 800a75e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a762:	9806      	ldr	r0, [sp, #24]
 800a764:	f001 f966 	bl	800ba34 <__mcmp>
 800a768:	463a      	mov	r2, r7
 800a76a:	9002      	str	r0, [sp, #8]
 800a76c:	4631      	mov	r1, r6
 800a76e:	4620      	mov	r0, r4
 800a770:	f001 f97a 	bl	800ba68 <__mdiff>
 800a774:	68c3      	ldr	r3, [r0, #12]
 800a776:	4602      	mov	r2, r0
 800a778:	bb03      	cbnz	r3, 800a7bc <_dtoa_r+0x9d4>
 800a77a:	4601      	mov	r1, r0
 800a77c:	9009      	str	r0, [sp, #36]	; 0x24
 800a77e:	9806      	ldr	r0, [sp, #24]
 800a780:	f001 f958 	bl	800ba34 <__mcmp>
 800a784:	4603      	mov	r3, r0
 800a786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a788:	4611      	mov	r1, r2
 800a78a:	4620      	mov	r0, r4
 800a78c:	9309      	str	r3, [sp, #36]	; 0x24
 800a78e:	f000 ff8c 	bl	800b6aa <_Bfree>
 800a792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a794:	b9a3      	cbnz	r3, 800a7c0 <_dtoa_r+0x9d8>
 800a796:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a798:	b992      	cbnz	r2, 800a7c0 <_dtoa_r+0x9d8>
 800a79a:	9a08      	ldr	r2, [sp, #32]
 800a79c:	b982      	cbnz	r2, 800a7c0 <_dtoa_r+0x9d8>
 800a79e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a7a2:	d029      	beq.n	800a7f8 <_dtoa_r+0xa10>
 800a7a4:	9b02      	ldr	r3, [sp, #8]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	dd01      	ble.n	800a7ae <_dtoa_r+0x9c6>
 800a7aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a7ae:	9b07      	ldr	r3, [sp, #28]
 800a7b0:	1c5d      	adds	r5, r3, #1
 800a7b2:	f883 8000 	strb.w	r8, [r3]
 800a7b6:	e784      	b.n	800a6c2 <_dtoa_r+0x8da>
 800a7b8:	4638      	mov	r0, r7
 800a7ba:	e7c2      	b.n	800a742 <_dtoa_r+0x95a>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e7e3      	b.n	800a788 <_dtoa_r+0x9a0>
 800a7c0:	9a02      	ldr	r2, [sp, #8]
 800a7c2:	2a00      	cmp	r2, #0
 800a7c4:	db04      	blt.n	800a7d0 <_dtoa_r+0x9e8>
 800a7c6:	d124      	bne.n	800a812 <_dtoa_r+0xa2a>
 800a7c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a7ca:	bb12      	cbnz	r2, 800a812 <_dtoa_r+0xa2a>
 800a7cc:	9a08      	ldr	r2, [sp, #32]
 800a7ce:	bb02      	cbnz	r2, 800a812 <_dtoa_r+0xa2a>
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	ddec      	ble.n	800a7ae <_dtoa_r+0x9c6>
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	9906      	ldr	r1, [sp, #24]
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f001 f8d7 	bl	800b98c <__lshift>
 800a7de:	4631      	mov	r1, r6
 800a7e0:	9006      	str	r0, [sp, #24]
 800a7e2:	f001 f927 	bl	800ba34 <__mcmp>
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	dc03      	bgt.n	800a7f2 <_dtoa_r+0xa0a>
 800a7ea:	d1e0      	bne.n	800a7ae <_dtoa_r+0x9c6>
 800a7ec:	f018 0f01 	tst.w	r8, #1
 800a7f0:	d0dd      	beq.n	800a7ae <_dtoa_r+0x9c6>
 800a7f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a7f6:	d1d8      	bne.n	800a7aa <_dtoa_r+0x9c2>
 800a7f8:	9b07      	ldr	r3, [sp, #28]
 800a7fa:	9a07      	ldr	r2, [sp, #28]
 800a7fc:	1c5d      	adds	r5, r3, #1
 800a7fe:	2339      	movs	r3, #57	; 0x39
 800a800:	7013      	strb	r3, [r2, #0]
 800a802:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a806:	1e6a      	subs	r2, r5, #1
 800a808:	2b39      	cmp	r3, #57	; 0x39
 800a80a:	d04e      	beq.n	800a8aa <_dtoa_r+0xac2>
 800a80c:	3301      	adds	r3, #1
 800a80e:	7013      	strb	r3, [r2, #0]
 800a810:	e757      	b.n	800a6c2 <_dtoa_r+0x8da>
 800a812:	9a07      	ldr	r2, [sp, #28]
 800a814:	2b00      	cmp	r3, #0
 800a816:	f102 0501 	add.w	r5, r2, #1
 800a81a:	dd06      	ble.n	800a82a <_dtoa_r+0xa42>
 800a81c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a820:	d0ea      	beq.n	800a7f8 <_dtoa_r+0xa10>
 800a822:	f108 0801 	add.w	r8, r8, #1
 800a826:	9b07      	ldr	r3, [sp, #28]
 800a828:	e7c3      	b.n	800a7b2 <_dtoa_r+0x9ca>
 800a82a:	9a04      	ldr	r2, [sp, #16]
 800a82c:	eba5 030b 	sub.w	r3, r5, fp
 800a830:	4293      	cmp	r3, r2
 800a832:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a836:	d021      	beq.n	800a87c <_dtoa_r+0xa94>
 800a838:	2300      	movs	r3, #0
 800a83a:	220a      	movs	r2, #10
 800a83c:	9906      	ldr	r1, [sp, #24]
 800a83e:	4620      	mov	r0, r4
 800a840:	f000 ff3c 	bl	800b6bc <__multadd>
 800a844:	45b9      	cmp	r9, r7
 800a846:	9006      	str	r0, [sp, #24]
 800a848:	f04f 0300 	mov.w	r3, #0
 800a84c:	f04f 020a 	mov.w	r2, #10
 800a850:	4649      	mov	r1, r9
 800a852:	4620      	mov	r0, r4
 800a854:	d105      	bne.n	800a862 <_dtoa_r+0xa7a>
 800a856:	f000 ff31 	bl	800b6bc <__multadd>
 800a85a:	4681      	mov	r9, r0
 800a85c:	4607      	mov	r7, r0
 800a85e:	9507      	str	r5, [sp, #28]
 800a860:	e777      	b.n	800a752 <_dtoa_r+0x96a>
 800a862:	f000 ff2b 	bl	800b6bc <__multadd>
 800a866:	4639      	mov	r1, r7
 800a868:	4681      	mov	r9, r0
 800a86a:	2300      	movs	r3, #0
 800a86c:	220a      	movs	r2, #10
 800a86e:	4620      	mov	r0, r4
 800a870:	f000 ff24 	bl	800b6bc <__multadd>
 800a874:	4607      	mov	r7, r0
 800a876:	e7f2      	b.n	800a85e <_dtoa_r+0xa76>
 800a878:	f04f 0900 	mov.w	r9, #0
 800a87c:	2201      	movs	r2, #1
 800a87e:	9906      	ldr	r1, [sp, #24]
 800a880:	4620      	mov	r0, r4
 800a882:	f001 f883 	bl	800b98c <__lshift>
 800a886:	4631      	mov	r1, r6
 800a888:	9006      	str	r0, [sp, #24]
 800a88a:	f001 f8d3 	bl	800ba34 <__mcmp>
 800a88e:	2800      	cmp	r0, #0
 800a890:	dcb7      	bgt.n	800a802 <_dtoa_r+0xa1a>
 800a892:	d102      	bne.n	800a89a <_dtoa_r+0xab2>
 800a894:	f018 0f01 	tst.w	r8, #1
 800a898:	d1b3      	bne.n	800a802 <_dtoa_r+0xa1a>
 800a89a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a89e:	1e6a      	subs	r2, r5, #1
 800a8a0:	2b30      	cmp	r3, #48	; 0x30
 800a8a2:	f47f af0e 	bne.w	800a6c2 <_dtoa_r+0x8da>
 800a8a6:	4615      	mov	r5, r2
 800a8a8:	e7f7      	b.n	800a89a <_dtoa_r+0xab2>
 800a8aa:	4593      	cmp	fp, r2
 800a8ac:	d105      	bne.n	800a8ba <_dtoa_r+0xad2>
 800a8ae:	2331      	movs	r3, #49	; 0x31
 800a8b0:	f10a 0a01 	add.w	sl, sl, #1
 800a8b4:	f88b 3000 	strb.w	r3, [fp]
 800a8b8:	e703      	b.n	800a6c2 <_dtoa_r+0x8da>
 800a8ba:	4615      	mov	r5, r2
 800a8bc:	e7a1      	b.n	800a802 <_dtoa_r+0xa1a>
 800a8be:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a924 <_dtoa_r+0xb3c>
 800a8c2:	f7ff bac9 	b.w	8009e58 <_dtoa_r+0x70>
 800a8c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8c8:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800a928 <_dtoa_r+0xb40>
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f43f aac3 	beq.w	8009e58 <_dtoa_r+0x70>
 800a8d2:	f10b 0308 	add.w	r3, fp, #8
 800a8d6:	f7ff babd 	b.w	8009e54 <_dtoa_r+0x6c>
 800a8da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	f77f ae3b 	ble.w	800a558 <_dtoa_r+0x770>
 800a8e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8e4:	9308      	str	r3, [sp, #32]
 800a8e6:	e64f      	b.n	800a588 <_dtoa_r+0x7a0>
 800a8e8:	9b04      	ldr	r3, [sp, #16]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	dc03      	bgt.n	800a8f6 <_dtoa_r+0xb0e>
 800a8ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	f73f aed1 	bgt.w	800a698 <_dtoa_r+0x8b0>
 800a8f6:	465d      	mov	r5, fp
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	9806      	ldr	r0, [sp, #24]
 800a8fc:	f7ff f9e4 	bl	8009cc8 <quorem>
 800a900:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a904:	f805 8b01 	strb.w	r8, [r5], #1
 800a908:	9a04      	ldr	r2, [sp, #16]
 800a90a:	eba5 030b 	sub.w	r3, r5, fp
 800a90e:	429a      	cmp	r2, r3
 800a910:	ddb2      	ble.n	800a878 <_dtoa_r+0xa90>
 800a912:	2300      	movs	r3, #0
 800a914:	220a      	movs	r2, #10
 800a916:	9906      	ldr	r1, [sp, #24]
 800a918:	4620      	mov	r0, r4
 800a91a:	f000 fecf 	bl	800b6bc <__multadd>
 800a91e:	9006      	str	r0, [sp, #24]
 800a920:	e7ea      	b.n	800a8f8 <_dtoa_r+0xb10>
 800a922:	bf00      	nop
 800a924:	0800c7a2 	.word	0x0800c7a2
 800a928:	0800c8e5 	.word	0x0800c8e5

0800a92c <__sflush_r>:
 800a92c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a934:	b293      	uxth	r3, r2
 800a936:	4605      	mov	r5, r0
 800a938:	0718      	lsls	r0, r3, #28
 800a93a:	460c      	mov	r4, r1
 800a93c:	d45f      	bmi.n	800a9fe <__sflush_r+0xd2>
 800a93e:	684b      	ldr	r3, [r1, #4]
 800a940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a944:	2b00      	cmp	r3, #0
 800a946:	818a      	strh	r2, [r1, #12]
 800a948:	dc05      	bgt.n	800a956 <__sflush_r+0x2a>
 800a94a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	dc02      	bgt.n	800a956 <__sflush_r+0x2a>
 800a950:	2000      	movs	r0, #0
 800a952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a958:	2e00      	cmp	r6, #0
 800a95a:	d0f9      	beq.n	800a950 <__sflush_r+0x24>
 800a95c:	2300      	movs	r3, #0
 800a95e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a962:	682f      	ldr	r7, [r5, #0]
 800a964:	69e1      	ldr	r1, [r4, #28]
 800a966:	602b      	str	r3, [r5, #0]
 800a968:	d036      	beq.n	800a9d8 <__sflush_r+0xac>
 800a96a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	075a      	lsls	r2, r3, #29
 800a970:	d505      	bpl.n	800a97e <__sflush_r+0x52>
 800a972:	6863      	ldr	r3, [r4, #4]
 800a974:	1ac0      	subs	r0, r0, r3
 800a976:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a978:	b10b      	cbz	r3, 800a97e <__sflush_r+0x52>
 800a97a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a97c:	1ac0      	subs	r0, r0, r3
 800a97e:	2300      	movs	r3, #0
 800a980:	4602      	mov	r2, r0
 800a982:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a984:	69e1      	ldr	r1, [r4, #28]
 800a986:	4628      	mov	r0, r5
 800a988:	47b0      	blx	r6
 800a98a:	1c43      	adds	r3, r0, #1
 800a98c:	89a3      	ldrh	r3, [r4, #12]
 800a98e:	d106      	bne.n	800a99e <__sflush_r+0x72>
 800a990:	6829      	ldr	r1, [r5, #0]
 800a992:	291d      	cmp	r1, #29
 800a994:	d84c      	bhi.n	800aa30 <__sflush_r+0x104>
 800a996:	4a2b      	ldr	r2, [pc, #172]	; (800aa44 <__sflush_r+0x118>)
 800a998:	40ca      	lsrs	r2, r1
 800a99a:	07d6      	lsls	r6, r2, #31
 800a99c:	d548      	bpl.n	800aa30 <__sflush_r+0x104>
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9a4:	b21b      	sxth	r3, r3
 800a9a6:	6062      	str	r2, [r4, #4]
 800a9a8:	6922      	ldr	r2, [r4, #16]
 800a9aa:	04d9      	lsls	r1, r3, #19
 800a9ac:	81a3      	strh	r3, [r4, #12]
 800a9ae:	6022      	str	r2, [r4, #0]
 800a9b0:	d504      	bpl.n	800a9bc <__sflush_r+0x90>
 800a9b2:	1c42      	adds	r2, r0, #1
 800a9b4:	d101      	bne.n	800a9ba <__sflush_r+0x8e>
 800a9b6:	682b      	ldr	r3, [r5, #0]
 800a9b8:	b903      	cbnz	r3, 800a9bc <__sflush_r+0x90>
 800a9ba:	6520      	str	r0, [r4, #80]	; 0x50
 800a9bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a9be:	602f      	str	r7, [r5, #0]
 800a9c0:	2900      	cmp	r1, #0
 800a9c2:	d0c5      	beq.n	800a950 <__sflush_r+0x24>
 800a9c4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a9c8:	4299      	cmp	r1, r3
 800a9ca:	d002      	beq.n	800a9d2 <__sflush_r+0xa6>
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	f000 f937 	bl	800ac40 <_free_r>
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	6320      	str	r0, [r4, #48]	; 0x30
 800a9d6:	e7bc      	b.n	800a952 <__sflush_r+0x26>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	4628      	mov	r0, r5
 800a9dc:	47b0      	blx	r6
 800a9de:	1c41      	adds	r1, r0, #1
 800a9e0:	d1c4      	bne.n	800a96c <__sflush_r+0x40>
 800a9e2:	682b      	ldr	r3, [r5, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d0c1      	beq.n	800a96c <__sflush_r+0x40>
 800a9e8:	2b1d      	cmp	r3, #29
 800a9ea:	d001      	beq.n	800a9f0 <__sflush_r+0xc4>
 800a9ec:	2b16      	cmp	r3, #22
 800a9ee:	d101      	bne.n	800a9f4 <__sflush_r+0xc8>
 800a9f0:	602f      	str	r7, [r5, #0]
 800a9f2:	e7ad      	b.n	800a950 <__sflush_r+0x24>
 800a9f4:	89a3      	ldrh	r3, [r4, #12]
 800a9f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9fa:	81a3      	strh	r3, [r4, #12]
 800a9fc:	e7a9      	b.n	800a952 <__sflush_r+0x26>
 800a9fe:	690f      	ldr	r7, [r1, #16]
 800aa00:	2f00      	cmp	r7, #0
 800aa02:	d0a5      	beq.n	800a950 <__sflush_r+0x24>
 800aa04:	079b      	lsls	r3, r3, #30
 800aa06:	bf18      	it	ne
 800aa08:	2300      	movne	r3, #0
 800aa0a:	680e      	ldr	r6, [r1, #0]
 800aa0c:	bf08      	it	eq
 800aa0e:	694b      	ldreq	r3, [r1, #20]
 800aa10:	eba6 0807 	sub.w	r8, r6, r7
 800aa14:	600f      	str	r7, [r1, #0]
 800aa16:	608b      	str	r3, [r1, #8]
 800aa18:	f1b8 0f00 	cmp.w	r8, #0
 800aa1c:	dd98      	ble.n	800a950 <__sflush_r+0x24>
 800aa1e:	4643      	mov	r3, r8
 800aa20:	463a      	mov	r2, r7
 800aa22:	69e1      	ldr	r1, [r4, #28]
 800aa24:	4628      	mov	r0, r5
 800aa26:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa28:	47b0      	blx	r6
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	dc06      	bgt.n	800aa3c <__sflush_r+0x110>
 800aa2e:	89a3      	ldrh	r3, [r4, #12]
 800aa30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa34:	81a3      	strh	r3, [r4, #12]
 800aa36:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3a:	e78a      	b.n	800a952 <__sflush_r+0x26>
 800aa3c:	4407      	add	r7, r0
 800aa3e:	eba8 0800 	sub.w	r8, r8, r0
 800aa42:	e7e9      	b.n	800aa18 <__sflush_r+0xec>
 800aa44:	20400001 	.word	0x20400001

0800aa48 <_fflush_r>:
 800aa48:	b538      	push	{r3, r4, r5, lr}
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	b118      	cbz	r0, 800aa58 <_fflush_r+0x10>
 800aa50:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800aa52:	b90b      	cbnz	r3, 800aa58 <_fflush_r+0x10>
 800aa54:	f000 f864 	bl	800ab20 <__sinit>
 800aa58:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800aa5c:	b1b8      	cbz	r0, 800aa8e <_fflush_r+0x46>
 800aa5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa60:	07db      	lsls	r3, r3, #31
 800aa62:	d404      	bmi.n	800aa6e <_fflush_r+0x26>
 800aa64:	0581      	lsls	r1, r0, #22
 800aa66:	d402      	bmi.n	800aa6e <_fflush_r+0x26>
 800aa68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa6a:	f000 fb21 	bl	800b0b0 <__retarget_lock_acquire_recursive>
 800aa6e:	4628      	mov	r0, r5
 800aa70:	4621      	mov	r1, r4
 800aa72:	f7ff ff5b 	bl	800a92c <__sflush_r>
 800aa76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa78:	4605      	mov	r5, r0
 800aa7a:	07da      	lsls	r2, r3, #31
 800aa7c:	d405      	bmi.n	800aa8a <_fflush_r+0x42>
 800aa7e:	89a3      	ldrh	r3, [r4, #12]
 800aa80:	059b      	lsls	r3, r3, #22
 800aa82:	d402      	bmi.n	800aa8a <_fflush_r+0x42>
 800aa84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa86:	f000 fb14 	bl	800b0b2 <__retarget_lock_release_recursive>
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	bd38      	pop	{r3, r4, r5, pc}
 800aa8e:	4605      	mov	r5, r0
 800aa90:	e7fb      	b.n	800aa8a <_fflush_r+0x42>
	...

0800aa94 <std>:
 800aa94:	2300      	movs	r3, #0
 800aa96:	b510      	push	{r4, lr}
 800aa98:	4604      	mov	r4, r0
 800aa9a:	e9c0 3300 	strd	r3, r3, [r0]
 800aa9e:	6083      	str	r3, [r0, #8]
 800aaa0:	8181      	strh	r1, [r0, #12]
 800aaa2:	6643      	str	r3, [r0, #100]	; 0x64
 800aaa4:	81c2      	strh	r2, [r0, #14]
 800aaa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaaa:	6183      	str	r3, [r0, #24]
 800aaac:	4619      	mov	r1, r3
 800aaae:	2208      	movs	r2, #8
 800aab0:	305c      	adds	r0, #92	; 0x5c
 800aab2:	f7fc fb50 	bl	8007156 <memset>
 800aab6:	4b07      	ldr	r3, [pc, #28]	; (800aad4 <std+0x40>)
 800aab8:	61e4      	str	r4, [r4, #28]
 800aaba:	6223      	str	r3, [r4, #32]
 800aabc:	4b06      	ldr	r3, [pc, #24]	; (800aad8 <std+0x44>)
 800aabe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aac2:	6263      	str	r3, [r4, #36]	; 0x24
 800aac4:	4b05      	ldr	r3, [pc, #20]	; (800aadc <std+0x48>)
 800aac6:	62a3      	str	r3, [r4, #40]	; 0x28
 800aac8:	4b05      	ldr	r3, [pc, #20]	; (800aae0 <std+0x4c>)
 800aaca:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aacc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aad0:	f000 baec 	b.w	800b0ac <__retarget_lock_init_recursive>
 800aad4:	0800bfa1 	.word	0x0800bfa1
 800aad8:	0800bfc3 	.word	0x0800bfc3
 800aadc:	0800bffb 	.word	0x0800bffb
 800aae0:	0800c01f 	.word	0x0800c01f

0800aae4 <_cleanup_r>:
 800aae4:	4901      	ldr	r1, [pc, #4]	; (800aaec <_cleanup_r+0x8>)
 800aae6:	f000 bab5 	b.w	800b054 <_fwalk_reent>
 800aaea:	bf00      	nop
 800aaec:	0800c30d 	.word	0x0800c30d

0800aaf0 <__sfp_lock_acquire>:
 800aaf0:	4801      	ldr	r0, [pc, #4]	; (800aaf8 <__sfp_lock_acquire+0x8>)
 800aaf2:	f000 badd 	b.w	800b0b0 <__retarget_lock_acquire_recursive>
 800aaf6:	bf00      	nop
 800aaf8:	200021c4 	.word	0x200021c4

0800aafc <__sfp_lock_release>:
 800aafc:	4801      	ldr	r0, [pc, #4]	; (800ab04 <__sfp_lock_release+0x8>)
 800aafe:	f000 bad8 	b.w	800b0b2 <__retarget_lock_release_recursive>
 800ab02:	bf00      	nop
 800ab04:	200021c4 	.word	0x200021c4

0800ab08 <__sinit_lock_acquire>:
 800ab08:	4801      	ldr	r0, [pc, #4]	; (800ab10 <__sinit_lock_acquire+0x8>)
 800ab0a:	f000 bad1 	b.w	800b0b0 <__retarget_lock_acquire_recursive>
 800ab0e:	bf00      	nop
 800ab10:	200021bf 	.word	0x200021bf

0800ab14 <__sinit_lock_release>:
 800ab14:	4801      	ldr	r0, [pc, #4]	; (800ab1c <__sinit_lock_release+0x8>)
 800ab16:	f000 bacc 	b.w	800b0b2 <__retarget_lock_release_recursive>
 800ab1a:	bf00      	nop
 800ab1c:	200021bf 	.word	0x200021bf

0800ab20 <__sinit>:
 800ab20:	b510      	push	{r4, lr}
 800ab22:	4604      	mov	r4, r0
 800ab24:	f7ff fff0 	bl	800ab08 <__sinit_lock_acquire>
 800ab28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ab2a:	b11a      	cbz	r2, 800ab34 <__sinit+0x14>
 800ab2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab30:	f7ff bff0 	b.w	800ab14 <__sinit_lock_release>
 800ab34:	4b0d      	ldr	r3, [pc, #52]	; (800ab6c <__sinit+0x4c>)
 800ab36:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800ab3a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800ab42:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800ab46:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800ab4a:	2104      	movs	r1, #4
 800ab4c:	6860      	ldr	r0, [r4, #4]
 800ab4e:	f7ff ffa1 	bl	800aa94 <std>
 800ab52:	2201      	movs	r2, #1
 800ab54:	2109      	movs	r1, #9
 800ab56:	68a0      	ldr	r0, [r4, #8]
 800ab58:	f7ff ff9c 	bl	800aa94 <std>
 800ab5c:	2202      	movs	r2, #2
 800ab5e:	2112      	movs	r1, #18
 800ab60:	68e0      	ldr	r0, [r4, #12]
 800ab62:	f7ff ff97 	bl	800aa94 <std>
 800ab66:	2301      	movs	r3, #1
 800ab68:	63a3      	str	r3, [r4, #56]	; 0x38
 800ab6a:	e7df      	b.n	800ab2c <__sinit+0xc>
 800ab6c:	0800aae5 	.word	0x0800aae5

0800ab70 <__libc_fini_array>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	4d07      	ldr	r5, [pc, #28]	; (800ab90 <__libc_fini_array+0x20>)
 800ab74:	4c07      	ldr	r4, [pc, #28]	; (800ab94 <__libc_fini_array+0x24>)
 800ab76:	1b64      	subs	r4, r4, r5
 800ab78:	10a4      	asrs	r4, r4, #2
 800ab7a:	b91c      	cbnz	r4, 800ab84 <__libc_fini_array+0x14>
 800ab7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab80:	f001 bd40 	b.w	800c604 <_fini>
 800ab84:	3c01      	subs	r4, #1
 800ab86:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800ab8a:	4798      	blx	r3
 800ab8c:	e7f5      	b.n	800ab7a <__libc_fini_array+0xa>
 800ab8e:	bf00      	nop
 800ab90:	0800ca04 	.word	0x0800ca04
 800ab94:	0800ca08 	.word	0x0800ca08

0800ab98 <_malloc_trim_r>:
 800ab98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab9c:	4605      	mov	r5, r0
 800ab9e:	2008      	movs	r0, #8
 800aba0:	460c      	mov	r4, r1
 800aba2:	f001 facd 	bl	800c140 <sysconf>
 800aba6:	4680      	mov	r8, r0
 800aba8:	4f22      	ldr	r7, [pc, #136]	; (800ac34 <_malloc_trim_r+0x9c>)
 800abaa:	4628      	mov	r0, r5
 800abac:	f000 fd4c 	bl	800b648 <__malloc_lock>
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	685e      	ldr	r6, [r3, #4]
 800abb4:	f026 0603 	bic.w	r6, r6, #3
 800abb8:	1b34      	subs	r4, r6, r4
 800abba:	3c11      	subs	r4, #17
 800abbc:	4444      	add	r4, r8
 800abbe:	fbb4 f4f8 	udiv	r4, r4, r8
 800abc2:	3c01      	subs	r4, #1
 800abc4:	fb08 f404 	mul.w	r4, r8, r4
 800abc8:	45a0      	cmp	r8, r4
 800abca:	dd05      	ble.n	800abd8 <_malloc_trim_r+0x40>
 800abcc:	4628      	mov	r0, r5
 800abce:	f000 fd41 	bl	800b654 <__malloc_unlock>
 800abd2:	2000      	movs	r0, #0
 800abd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd8:	2100      	movs	r1, #0
 800abda:	4628      	mov	r0, r5
 800abdc:	f001 f9d0 	bl	800bf80 <_sbrk_r>
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	4433      	add	r3, r6
 800abe4:	4298      	cmp	r0, r3
 800abe6:	d1f1      	bne.n	800abcc <_malloc_trim_r+0x34>
 800abe8:	4261      	negs	r1, r4
 800abea:	4628      	mov	r0, r5
 800abec:	f001 f9c8 	bl	800bf80 <_sbrk_r>
 800abf0:	3001      	adds	r0, #1
 800abf2:	d110      	bne.n	800ac16 <_malloc_trim_r+0x7e>
 800abf4:	2100      	movs	r1, #0
 800abf6:	4628      	mov	r0, r5
 800abf8:	f001 f9c2 	bl	800bf80 <_sbrk_r>
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	1a83      	subs	r3, r0, r2
 800ac00:	2b0f      	cmp	r3, #15
 800ac02:	dde3      	ble.n	800abcc <_malloc_trim_r+0x34>
 800ac04:	490c      	ldr	r1, [pc, #48]	; (800ac38 <_malloc_trim_r+0xa0>)
 800ac06:	f043 0301 	orr.w	r3, r3, #1
 800ac0a:	6809      	ldr	r1, [r1, #0]
 800ac0c:	6053      	str	r3, [r2, #4]
 800ac0e:	1a40      	subs	r0, r0, r1
 800ac10:	490a      	ldr	r1, [pc, #40]	; (800ac3c <_malloc_trim_r+0xa4>)
 800ac12:	6008      	str	r0, [r1, #0]
 800ac14:	e7da      	b.n	800abcc <_malloc_trim_r+0x34>
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	4a08      	ldr	r2, [pc, #32]	; (800ac3c <_malloc_trim_r+0xa4>)
 800ac1a:	1b36      	subs	r6, r6, r4
 800ac1c:	f046 0601 	orr.w	r6, r6, #1
 800ac20:	605e      	str	r6, [r3, #4]
 800ac22:	6813      	ldr	r3, [r2, #0]
 800ac24:	4628      	mov	r0, r5
 800ac26:	1b1c      	subs	r4, r3, r4
 800ac28:	6014      	str	r4, [r2, #0]
 800ac2a:	f000 fd13 	bl	800b654 <__malloc_unlock>
 800ac2e:	2001      	movs	r0, #1
 800ac30:	e7d0      	b.n	800abd4 <_malloc_trim_r+0x3c>
 800ac32:	bf00      	nop
 800ac34:	20000718 	.word	0x20000718
 800ac38:	20000b20 	.word	0x20000b20
 800ac3c:	20000d7c 	.word	0x20000d7c

0800ac40 <_free_r>:
 800ac40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac44:	4604      	mov	r4, r0
 800ac46:	4688      	mov	r8, r1
 800ac48:	2900      	cmp	r1, #0
 800ac4a:	f000 80ab 	beq.w	800ada4 <_free_r+0x164>
 800ac4e:	f000 fcfb 	bl	800b648 <__malloc_lock>
 800ac52:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800ac56:	4d54      	ldr	r5, [pc, #336]	; (800ada8 <_free_r+0x168>)
 800ac58:	f022 0001 	bic.w	r0, r2, #1
 800ac5c:	f1a8 0308 	sub.w	r3, r8, #8
 800ac60:	181f      	adds	r7, r3, r0
 800ac62:	68a9      	ldr	r1, [r5, #8]
 800ac64:	687e      	ldr	r6, [r7, #4]
 800ac66:	42b9      	cmp	r1, r7
 800ac68:	f026 0603 	bic.w	r6, r6, #3
 800ac6c:	f002 0201 	and.w	r2, r2, #1
 800ac70:	d11b      	bne.n	800acaa <_free_r+0x6a>
 800ac72:	4430      	add	r0, r6
 800ac74:	b93a      	cbnz	r2, 800ac86 <_free_r+0x46>
 800ac76:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800ac7a:	1a9b      	subs	r3, r3, r2
 800ac7c:	4410      	add	r0, r2
 800ac7e:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800ac82:	60ca      	str	r2, [r1, #12]
 800ac84:	6091      	str	r1, [r2, #8]
 800ac86:	f040 0201 	orr.w	r2, r0, #1
 800ac8a:	605a      	str	r2, [r3, #4]
 800ac8c:	60ab      	str	r3, [r5, #8]
 800ac8e:	4b47      	ldr	r3, [pc, #284]	; (800adac <_free_r+0x16c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4283      	cmp	r3, r0
 800ac94:	d804      	bhi.n	800aca0 <_free_r+0x60>
 800ac96:	4b46      	ldr	r3, [pc, #280]	; (800adb0 <_free_r+0x170>)
 800ac98:	4620      	mov	r0, r4
 800ac9a:	6819      	ldr	r1, [r3, #0]
 800ac9c:	f7ff ff7c 	bl	800ab98 <_malloc_trim_r>
 800aca0:	4620      	mov	r0, r4
 800aca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aca6:	f000 bcd5 	b.w	800b654 <__malloc_unlock>
 800acaa:	607e      	str	r6, [r7, #4]
 800acac:	2a00      	cmp	r2, #0
 800acae:	d139      	bne.n	800ad24 <_free_r+0xe4>
 800acb0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800acb4:	f105 0c08 	add.w	ip, r5, #8
 800acb8:	1a5b      	subs	r3, r3, r1
 800acba:	4408      	add	r0, r1
 800acbc:	6899      	ldr	r1, [r3, #8]
 800acbe:	4561      	cmp	r1, ip
 800acc0:	d032      	beq.n	800ad28 <_free_r+0xe8>
 800acc2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800acc6:	f8c1 c00c 	str.w	ip, [r1, #12]
 800acca:	f8cc 1008 	str.w	r1, [ip, #8]
 800acce:	19b9      	adds	r1, r7, r6
 800acd0:	6849      	ldr	r1, [r1, #4]
 800acd2:	07c9      	lsls	r1, r1, #31
 800acd4:	d40a      	bmi.n	800acec <_free_r+0xac>
 800acd6:	4430      	add	r0, r6
 800acd8:	68b9      	ldr	r1, [r7, #8]
 800acda:	bb3a      	cbnz	r2, 800ad2c <_free_r+0xec>
 800acdc:	4e35      	ldr	r6, [pc, #212]	; (800adb4 <_free_r+0x174>)
 800acde:	42b1      	cmp	r1, r6
 800ace0:	d124      	bne.n	800ad2c <_free_r+0xec>
 800ace2:	2201      	movs	r2, #1
 800ace4:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800ace8:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800acec:	f040 0101 	orr.w	r1, r0, #1
 800acf0:	6059      	str	r1, [r3, #4]
 800acf2:	5018      	str	r0, [r3, r0]
 800acf4:	2a00      	cmp	r2, #0
 800acf6:	d1d3      	bne.n	800aca0 <_free_r+0x60>
 800acf8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800acfc:	d21a      	bcs.n	800ad34 <_free_r+0xf4>
 800acfe:	2201      	movs	r2, #1
 800ad00:	08c0      	lsrs	r0, r0, #3
 800ad02:	1081      	asrs	r1, r0, #2
 800ad04:	408a      	lsls	r2, r1
 800ad06:	6869      	ldr	r1, [r5, #4]
 800ad08:	3001      	adds	r0, #1
 800ad0a:	430a      	orrs	r2, r1
 800ad0c:	606a      	str	r2, [r5, #4]
 800ad0e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800ad12:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800ad16:	3a08      	subs	r2, #8
 800ad18:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800ad1c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800ad20:	60cb      	str	r3, [r1, #12]
 800ad22:	e7bd      	b.n	800aca0 <_free_r+0x60>
 800ad24:	2200      	movs	r2, #0
 800ad26:	e7d2      	b.n	800acce <_free_r+0x8e>
 800ad28:	2201      	movs	r2, #1
 800ad2a:	e7d0      	b.n	800acce <_free_r+0x8e>
 800ad2c:	68fe      	ldr	r6, [r7, #12]
 800ad2e:	60ce      	str	r6, [r1, #12]
 800ad30:	60b1      	str	r1, [r6, #8]
 800ad32:	e7db      	b.n	800acec <_free_r+0xac>
 800ad34:	0a42      	lsrs	r2, r0, #9
 800ad36:	2a04      	cmp	r2, #4
 800ad38:	d813      	bhi.n	800ad62 <_free_r+0x122>
 800ad3a:	0982      	lsrs	r2, r0, #6
 800ad3c:	3238      	adds	r2, #56	; 0x38
 800ad3e:	1c51      	adds	r1, r2, #1
 800ad40:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800ad44:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800ad48:	428e      	cmp	r6, r1
 800ad4a:	d124      	bne.n	800ad96 <_free_r+0x156>
 800ad4c:	2001      	movs	r0, #1
 800ad4e:	1092      	asrs	r2, r2, #2
 800ad50:	fa00 f202 	lsl.w	r2, r0, r2
 800ad54:	6868      	ldr	r0, [r5, #4]
 800ad56:	4302      	orrs	r2, r0
 800ad58:	606a      	str	r2, [r5, #4]
 800ad5a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800ad5e:	60b3      	str	r3, [r6, #8]
 800ad60:	e7de      	b.n	800ad20 <_free_r+0xe0>
 800ad62:	2a14      	cmp	r2, #20
 800ad64:	d801      	bhi.n	800ad6a <_free_r+0x12a>
 800ad66:	325b      	adds	r2, #91	; 0x5b
 800ad68:	e7e9      	b.n	800ad3e <_free_r+0xfe>
 800ad6a:	2a54      	cmp	r2, #84	; 0x54
 800ad6c:	d802      	bhi.n	800ad74 <_free_r+0x134>
 800ad6e:	0b02      	lsrs	r2, r0, #12
 800ad70:	326e      	adds	r2, #110	; 0x6e
 800ad72:	e7e4      	b.n	800ad3e <_free_r+0xfe>
 800ad74:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800ad78:	d802      	bhi.n	800ad80 <_free_r+0x140>
 800ad7a:	0bc2      	lsrs	r2, r0, #15
 800ad7c:	3277      	adds	r2, #119	; 0x77
 800ad7e:	e7de      	b.n	800ad3e <_free_r+0xfe>
 800ad80:	f240 5154 	movw	r1, #1364	; 0x554
 800ad84:	428a      	cmp	r2, r1
 800ad86:	bf9a      	itte	ls
 800ad88:	0c82      	lsrls	r2, r0, #18
 800ad8a:	327c      	addls	r2, #124	; 0x7c
 800ad8c:	227e      	movhi	r2, #126	; 0x7e
 800ad8e:	e7d6      	b.n	800ad3e <_free_r+0xfe>
 800ad90:	6889      	ldr	r1, [r1, #8]
 800ad92:	428e      	cmp	r6, r1
 800ad94:	d004      	beq.n	800ada0 <_free_r+0x160>
 800ad96:	684a      	ldr	r2, [r1, #4]
 800ad98:	f022 0203 	bic.w	r2, r2, #3
 800ad9c:	4282      	cmp	r2, r0
 800ad9e:	d8f7      	bhi.n	800ad90 <_free_r+0x150>
 800ada0:	68ce      	ldr	r6, [r1, #12]
 800ada2:	e7da      	b.n	800ad5a <_free_r+0x11a>
 800ada4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada8:	20000718 	.word	0x20000718
 800adac:	20000b24 	.word	0x20000b24
 800adb0:	20000dac 	.word	0x20000dac
 800adb4:	20000720 	.word	0x20000720

0800adb8 <__sfvwrite_r>:
 800adb8:	6893      	ldr	r3, [r2, #8]
 800adba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adbe:	4680      	mov	r8, r0
 800adc0:	460c      	mov	r4, r1
 800adc2:	4691      	mov	r9, r2
 800adc4:	b91b      	cbnz	r3, 800adce <__sfvwrite_r+0x16>
 800adc6:	2000      	movs	r0, #0
 800adc8:	b003      	add	sp, #12
 800adca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adce:	898b      	ldrh	r3, [r1, #12]
 800add0:	0718      	lsls	r0, r3, #28
 800add2:	d54f      	bpl.n	800ae74 <__sfvwrite_r+0xbc>
 800add4:	690b      	ldr	r3, [r1, #16]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d04c      	beq.n	800ae74 <__sfvwrite_r+0xbc>
 800adda:	89a5      	ldrh	r5, [r4, #12]
 800addc:	f8d9 6000 	ldr.w	r6, [r9]
 800ade0:	f015 0702 	ands.w	r7, r5, #2
 800ade4:	d169      	bne.n	800aeba <__sfvwrite_r+0x102>
 800ade6:	f015 0501 	ands.w	r5, r5, #1
 800adea:	f000 809a 	beq.w	800af22 <__sfvwrite_r+0x16a>
 800adee:	4638      	mov	r0, r7
 800adf0:	46ba      	mov	sl, r7
 800adf2:	46bb      	mov	fp, r7
 800adf4:	f1bb 0f00 	cmp.w	fp, #0
 800adf8:	f000 8103 	beq.w	800b002 <__sfvwrite_r+0x24a>
 800adfc:	b950      	cbnz	r0, 800ae14 <__sfvwrite_r+0x5c>
 800adfe:	465a      	mov	r2, fp
 800ae00:	210a      	movs	r1, #10
 800ae02:	4650      	mov	r0, sl
 800ae04:	f000 fbf8 	bl	800b5f8 <memchr>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	f000 80ff 	beq.w	800b00c <__sfvwrite_r+0x254>
 800ae0e:	3001      	adds	r0, #1
 800ae10:	eba0 070a 	sub.w	r7, r0, sl
 800ae14:	6820      	ldr	r0, [r4, #0]
 800ae16:	6921      	ldr	r1, [r4, #16]
 800ae18:	455f      	cmp	r7, fp
 800ae1a:	463b      	mov	r3, r7
 800ae1c:	bf28      	it	cs
 800ae1e:	465b      	movcs	r3, fp
 800ae20:	4288      	cmp	r0, r1
 800ae22:	6962      	ldr	r2, [r4, #20]
 800ae24:	f240 80f5 	bls.w	800b012 <__sfvwrite_r+0x25a>
 800ae28:	68a5      	ldr	r5, [r4, #8]
 800ae2a:	4415      	add	r5, r2
 800ae2c:	42ab      	cmp	r3, r5
 800ae2e:	f340 80f0 	ble.w	800b012 <__sfvwrite_r+0x25a>
 800ae32:	4651      	mov	r1, sl
 800ae34:	462a      	mov	r2, r5
 800ae36:	f000 fbed 	bl	800b614 <memmove>
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	442b      	add	r3, r5
 800ae40:	6023      	str	r3, [r4, #0]
 800ae42:	4640      	mov	r0, r8
 800ae44:	f7ff fe00 	bl	800aa48 <_fflush_r>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d165      	bne.n	800af18 <__sfvwrite_r+0x160>
 800ae4c:	1b7f      	subs	r7, r7, r5
 800ae4e:	f040 80fa 	bne.w	800b046 <__sfvwrite_r+0x28e>
 800ae52:	4621      	mov	r1, r4
 800ae54:	4640      	mov	r0, r8
 800ae56:	f7ff fdf7 	bl	800aa48 <_fflush_r>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d15c      	bne.n	800af18 <__sfvwrite_r+0x160>
 800ae5e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ae62:	44aa      	add	sl, r5
 800ae64:	ebab 0b05 	sub.w	fp, fp, r5
 800ae68:	1b5d      	subs	r5, r3, r5
 800ae6a:	f8c9 5008 	str.w	r5, [r9, #8]
 800ae6e:	2d00      	cmp	r5, #0
 800ae70:	d1c0      	bne.n	800adf4 <__sfvwrite_r+0x3c>
 800ae72:	e7a8      	b.n	800adc6 <__sfvwrite_r+0xe>
 800ae74:	4621      	mov	r1, r4
 800ae76:	4640      	mov	r0, r8
 800ae78:	f7fe febe 	bl	8009bf8 <__swsetup_r>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d0ac      	beq.n	800adda <__sfvwrite_r+0x22>
 800ae80:	f04f 30ff 	mov.w	r0, #4294967295
 800ae84:	e7a0      	b.n	800adc8 <__sfvwrite_r+0x10>
 800ae86:	e9d6 a700 	ldrd	sl, r7, [r6]
 800ae8a:	3608      	adds	r6, #8
 800ae8c:	2f00      	cmp	r7, #0
 800ae8e:	d0fa      	beq.n	800ae86 <__sfvwrite_r+0xce>
 800ae90:	455f      	cmp	r7, fp
 800ae92:	463b      	mov	r3, r7
 800ae94:	4652      	mov	r2, sl
 800ae96:	bf28      	it	cs
 800ae98:	465b      	movcs	r3, fp
 800ae9a:	69e1      	ldr	r1, [r4, #28]
 800ae9c:	4640      	mov	r0, r8
 800ae9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aea0:	47a8      	blx	r5
 800aea2:	2800      	cmp	r0, #0
 800aea4:	dd38      	ble.n	800af18 <__sfvwrite_r+0x160>
 800aea6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800aeaa:	4482      	add	sl, r0
 800aeac:	1a3f      	subs	r7, r7, r0
 800aeae:	1a18      	subs	r0, r3, r0
 800aeb0:	f8c9 0008 	str.w	r0, [r9, #8]
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	d1e9      	bne.n	800ae8c <__sfvwrite_r+0xd4>
 800aeb8:	e785      	b.n	800adc6 <__sfvwrite_r+0xe>
 800aeba:	f04f 0a00 	mov.w	sl, #0
 800aebe:	f8df b190 	ldr.w	fp, [pc, #400]	; 800b050 <__sfvwrite_r+0x298>
 800aec2:	4657      	mov	r7, sl
 800aec4:	e7e2      	b.n	800ae8c <__sfvwrite_r+0xd4>
 800aec6:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800aeca:	3608      	adds	r6, #8
 800aecc:	f1ba 0f00 	cmp.w	sl, #0
 800aed0:	d0f9      	beq.n	800aec6 <__sfvwrite_r+0x10e>
 800aed2:	89a2      	ldrh	r2, [r4, #12]
 800aed4:	68a3      	ldr	r3, [r4, #8]
 800aed6:	0591      	lsls	r1, r2, #22
 800aed8:	6820      	ldr	r0, [r4, #0]
 800aeda:	d564      	bpl.n	800afa6 <__sfvwrite_r+0x1ee>
 800aedc:	4553      	cmp	r3, sl
 800aede:	d836      	bhi.n	800af4e <__sfvwrite_r+0x196>
 800aee0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aee4:	d033      	beq.n	800af4e <__sfvwrite_r+0x196>
 800aee6:	2302      	movs	r3, #2
 800aee8:	6967      	ldr	r7, [r4, #20]
 800aeea:	6921      	ldr	r1, [r4, #16]
 800aeec:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800aef0:	fb97 f7f3 	sdiv	r7, r7, r3
 800aef4:	eba0 0b01 	sub.w	fp, r0, r1
 800aef8:	f10b 0301 	add.w	r3, fp, #1
 800aefc:	4453      	add	r3, sl
 800aefe:	429f      	cmp	r7, r3
 800af00:	bf38      	it	cc
 800af02:	461f      	movcc	r7, r3
 800af04:	0553      	lsls	r3, r2, #21
 800af06:	d53e      	bpl.n	800af86 <__sfvwrite_r+0x1ce>
 800af08:	4639      	mov	r1, r7
 800af0a:	4640      	mov	r0, r8
 800af0c:	f000 f93e 	bl	800b18c <_malloc_r>
 800af10:	b948      	cbnz	r0, 800af26 <__sfvwrite_r+0x16e>
 800af12:	230c      	movs	r3, #12
 800af14:	f8c8 3000 	str.w	r3, [r8]
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af1e:	81a3      	strh	r3, [r4, #12]
 800af20:	e7ae      	b.n	800ae80 <__sfvwrite_r+0xc8>
 800af22:	46aa      	mov	sl, r5
 800af24:	e7d2      	b.n	800aecc <__sfvwrite_r+0x114>
 800af26:	465a      	mov	r2, fp
 800af28:	6921      	ldr	r1, [r4, #16]
 800af2a:	9001      	str	r0, [sp, #4]
 800af2c:	f7fc f908 	bl	8007140 <memcpy>
 800af30:	89a2      	ldrh	r2, [r4, #12]
 800af32:	9b01      	ldr	r3, [sp, #4]
 800af34:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800af38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af3c:	81a2      	strh	r2, [r4, #12]
 800af3e:	6123      	str	r3, [r4, #16]
 800af40:	445b      	add	r3, fp
 800af42:	6023      	str	r3, [r4, #0]
 800af44:	4653      	mov	r3, sl
 800af46:	6167      	str	r7, [r4, #20]
 800af48:	eba7 070b 	sub.w	r7, r7, fp
 800af4c:	60a7      	str	r7, [r4, #8]
 800af4e:	4553      	cmp	r3, sl
 800af50:	bf28      	it	cs
 800af52:	4653      	movcs	r3, sl
 800af54:	4657      	mov	r7, sl
 800af56:	461a      	mov	r2, r3
 800af58:	4629      	mov	r1, r5
 800af5a:	6820      	ldr	r0, [r4, #0]
 800af5c:	9301      	str	r3, [sp, #4]
 800af5e:	f000 fb59 	bl	800b614 <memmove>
 800af62:	68a2      	ldr	r2, [r4, #8]
 800af64:	9b01      	ldr	r3, [sp, #4]
 800af66:	1ad2      	subs	r2, r2, r3
 800af68:	60a2      	str	r2, [r4, #8]
 800af6a:	6822      	ldr	r2, [r4, #0]
 800af6c:	4413      	add	r3, r2
 800af6e:	6023      	str	r3, [r4, #0]
 800af70:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800af74:	443d      	add	r5, r7
 800af76:	ebaa 0a07 	sub.w	sl, sl, r7
 800af7a:	1bdf      	subs	r7, r3, r7
 800af7c:	f8c9 7008 	str.w	r7, [r9, #8]
 800af80:	2f00      	cmp	r7, #0
 800af82:	d1a3      	bne.n	800aecc <__sfvwrite_r+0x114>
 800af84:	e71f      	b.n	800adc6 <__sfvwrite_r+0xe>
 800af86:	463a      	mov	r2, r7
 800af88:	4640      	mov	r0, r8
 800af8a:	f000 fe1b 	bl	800bbc4 <_realloc_r>
 800af8e:	4603      	mov	r3, r0
 800af90:	2800      	cmp	r0, #0
 800af92:	d1d4      	bne.n	800af3e <__sfvwrite_r+0x186>
 800af94:	6921      	ldr	r1, [r4, #16]
 800af96:	4640      	mov	r0, r8
 800af98:	f7ff fe52 	bl	800ac40 <_free_r>
 800af9c:	89a3      	ldrh	r3, [r4, #12]
 800af9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afa2:	81a3      	strh	r3, [r4, #12]
 800afa4:	e7b5      	b.n	800af12 <__sfvwrite_r+0x15a>
 800afa6:	6922      	ldr	r2, [r4, #16]
 800afa8:	4282      	cmp	r2, r0
 800afaa:	d302      	bcc.n	800afb2 <__sfvwrite_r+0x1fa>
 800afac:	6962      	ldr	r2, [r4, #20]
 800afae:	4552      	cmp	r2, sl
 800afb0:	d916      	bls.n	800afe0 <__sfvwrite_r+0x228>
 800afb2:	4553      	cmp	r3, sl
 800afb4:	bf28      	it	cs
 800afb6:	4653      	movcs	r3, sl
 800afb8:	461f      	mov	r7, r3
 800afba:	461a      	mov	r2, r3
 800afbc:	4629      	mov	r1, r5
 800afbe:	f000 fb29 	bl	800b614 <memmove>
 800afc2:	68a3      	ldr	r3, [r4, #8]
 800afc4:	6822      	ldr	r2, [r4, #0]
 800afc6:	1bdb      	subs	r3, r3, r7
 800afc8:	443a      	add	r2, r7
 800afca:	60a3      	str	r3, [r4, #8]
 800afcc:	6022      	str	r2, [r4, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1ce      	bne.n	800af70 <__sfvwrite_r+0x1b8>
 800afd2:	4621      	mov	r1, r4
 800afd4:	4640      	mov	r0, r8
 800afd6:	f7ff fd37 	bl	800aa48 <_fflush_r>
 800afda:	2800      	cmp	r0, #0
 800afdc:	d0c8      	beq.n	800af70 <__sfvwrite_r+0x1b8>
 800afde:	e79b      	b.n	800af18 <__sfvwrite_r+0x160>
 800afe0:	4b1a      	ldr	r3, [pc, #104]	; (800b04c <__sfvwrite_r+0x294>)
 800afe2:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800afe4:	459a      	cmp	sl, r3
 800afe6:	bf94      	ite	ls
 800afe8:	4653      	movls	r3, sl
 800afea:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 800afee:	fb93 f3f2 	sdiv	r3, r3, r2
 800aff2:	69e1      	ldr	r1, [r4, #28]
 800aff4:	4353      	muls	r3, r2
 800aff6:	4640      	mov	r0, r8
 800aff8:	462a      	mov	r2, r5
 800affa:	47b8      	blx	r7
 800affc:	1e07      	subs	r7, r0, #0
 800affe:	dcb7      	bgt.n	800af70 <__sfvwrite_r+0x1b8>
 800b000:	e78a      	b.n	800af18 <__sfvwrite_r+0x160>
 800b002:	e9d6 ab00 	ldrd	sl, fp, [r6]
 800b006:	2000      	movs	r0, #0
 800b008:	3608      	adds	r6, #8
 800b00a:	e6f3      	b.n	800adf4 <__sfvwrite_r+0x3c>
 800b00c:	f10b 0701 	add.w	r7, fp, #1
 800b010:	e700      	b.n	800ae14 <__sfvwrite_r+0x5c>
 800b012:	429a      	cmp	r2, r3
 800b014:	dc09      	bgt.n	800b02a <__sfvwrite_r+0x272>
 800b016:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b018:	4613      	mov	r3, r2
 800b01a:	69e1      	ldr	r1, [r4, #28]
 800b01c:	4652      	mov	r2, sl
 800b01e:	4640      	mov	r0, r8
 800b020:	47a8      	blx	r5
 800b022:	1e05      	subs	r5, r0, #0
 800b024:	f73f af12 	bgt.w	800ae4c <__sfvwrite_r+0x94>
 800b028:	e776      	b.n	800af18 <__sfvwrite_r+0x160>
 800b02a:	461a      	mov	r2, r3
 800b02c:	4651      	mov	r1, sl
 800b02e:	9301      	str	r3, [sp, #4]
 800b030:	f000 faf0 	bl	800b614 <memmove>
 800b034:	9b01      	ldr	r3, [sp, #4]
 800b036:	68a2      	ldr	r2, [r4, #8]
 800b038:	461d      	mov	r5, r3
 800b03a:	1ad2      	subs	r2, r2, r3
 800b03c:	60a2      	str	r2, [r4, #8]
 800b03e:	6822      	ldr	r2, [r4, #0]
 800b040:	441a      	add	r2, r3
 800b042:	6022      	str	r2, [r4, #0]
 800b044:	e702      	b.n	800ae4c <__sfvwrite_r+0x94>
 800b046:	2001      	movs	r0, #1
 800b048:	e709      	b.n	800ae5e <__sfvwrite_r+0xa6>
 800b04a:	bf00      	nop
 800b04c:	7ffffffe 	.word	0x7ffffffe
 800b050:	7ffffc00 	.word	0x7ffffc00

0800b054 <_fwalk_reent>:
 800b054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b058:	4680      	mov	r8, r0
 800b05a:	4689      	mov	r9, r1
 800b05c:	2600      	movs	r6, #0
 800b05e:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800b062:	b914      	cbnz	r4, 800b06a <_fwalk_reent+0x16>
 800b064:	4630      	mov	r0, r6
 800b066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b06a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b06e:	3f01      	subs	r7, #1
 800b070:	d501      	bpl.n	800b076 <_fwalk_reent+0x22>
 800b072:	6824      	ldr	r4, [r4, #0]
 800b074:	e7f5      	b.n	800b062 <_fwalk_reent+0xe>
 800b076:	89ab      	ldrh	r3, [r5, #12]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d907      	bls.n	800b08c <_fwalk_reent+0x38>
 800b07c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b080:	3301      	adds	r3, #1
 800b082:	d003      	beq.n	800b08c <_fwalk_reent+0x38>
 800b084:	4629      	mov	r1, r5
 800b086:	4640      	mov	r0, r8
 800b088:	47c8      	blx	r9
 800b08a:	4306      	orrs	r6, r0
 800b08c:	3568      	adds	r5, #104	; 0x68
 800b08e:	e7ee      	b.n	800b06e <_fwalk_reent+0x1a>

0800b090 <_localeconv_r>:
 800b090:	4b04      	ldr	r3, [pc, #16]	; (800b0a4 <_localeconv_r+0x14>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b096:	4b04      	ldr	r3, [pc, #16]	; (800b0a8 <_localeconv_r+0x18>)
 800b098:	2800      	cmp	r0, #0
 800b09a:	bf08      	it	eq
 800b09c:	4618      	moveq	r0, r3
 800b09e:	30f0      	adds	r0, #240	; 0xf0
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	2000017c 	.word	0x2000017c
 800b0a8:	200005a8 	.word	0x200005a8

0800b0ac <__retarget_lock_init_recursive>:
 800b0ac:	4770      	bx	lr

0800b0ae <__retarget_lock_close_recursive>:
 800b0ae:	4770      	bx	lr

0800b0b0 <__retarget_lock_acquire_recursive>:
 800b0b0:	4770      	bx	lr

0800b0b2 <__retarget_lock_release_recursive>:
 800b0b2:	4770      	bx	lr

0800b0b4 <__swhatbuf_r>:
 800b0b4:	b570      	push	{r4, r5, r6, lr}
 800b0b6:	460e      	mov	r6, r1
 800b0b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0bc:	b096      	sub	sp, #88	; 0x58
 800b0be:	2900      	cmp	r1, #0
 800b0c0:	4614      	mov	r4, r2
 800b0c2:	461d      	mov	r5, r3
 800b0c4:	da09      	bge.n	800b0da <__swhatbuf_r+0x26>
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	89b3      	ldrh	r3, [r6, #12]
 800b0ca:	602a      	str	r2, [r5, #0]
 800b0cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b0d0:	d116      	bne.n	800b100 <__swhatbuf_r+0x4c>
 800b0d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0d6:	6023      	str	r3, [r4, #0]
 800b0d8:	e015      	b.n	800b106 <__swhatbuf_r+0x52>
 800b0da:	466a      	mov	r2, sp
 800b0dc:	f001 f9d8 	bl	800c490 <_fstat_r>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	dbf0      	blt.n	800b0c6 <__swhatbuf_r+0x12>
 800b0e4:	9a01      	ldr	r2, [sp, #4]
 800b0e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b0ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0f2:	425a      	negs	r2, r3
 800b0f4:	415a      	adcs	r2, r3
 800b0f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0fa:	602a      	str	r2, [r5, #0]
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	e002      	b.n	800b106 <__swhatbuf_r+0x52>
 800b100:	2340      	movs	r3, #64	; 0x40
 800b102:	4610      	mov	r0, r2
 800b104:	6023      	str	r3, [r4, #0]
 800b106:	b016      	add	sp, #88	; 0x58
 800b108:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b10c <__smakebuf_r>:
 800b10c:	898b      	ldrh	r3, [r1, #12]
 800b10e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b110:	079d      	lsls	r5, r3, #30
 800b112:	4606      	mov	r6, r0
 800b114:	460c      	mov	r4, r1
 800b116:	d507      	bpl.n	800b128 <__smakebuf_r+0x1c>
 800b118:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800b11c:	6023      	str	r3, [r4, #0]
 800b11e:	6123      	str	r3, [r4, #16]
 800b120:	2301      	movs	r3, #1
 800b122:	6163      	str	r3, [r4, #20]
 800b124:	b002      	add	sp, #8
 800b126:	bd70      	pop	{r4, r5, r6, pc}
 800b128:	ab01      	add	r3, sp, #4
 800b12a:	466a      	mov	r2, sp
 800b12c:	f7ff ffc2 	bl	800b0b4 <__swhatbuf_r>
 800b130:	9900      	ldr	r1, [sp, #0]
 800b132:	4605      	mov	r5, r0
 800b134:	4630      	mov	r0, r6
 800b136:	f000 f829 	bl	800b18c <_malloc_r>
 800b13a:	b948      	cbnz	r0, 800b150 <__smakebuf_r+0x44>
 800b13c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b140:	059a      	lsls	r2, r3, #22
 800b142:	d4ef      	bmi.n	800b124 <__smakebuf_r+0x18>
 800b144:	f023 0303 	bic.w	r3, r3, #3
 800b148:	f043 0302 	orr.w	r3, r3, #2
 800b14c:	81a3      	strh	r3, [r4, #12]
 800b14e:	e7e3      	b.n	800b118 <__smakebuf_r+0xc>
 800b150:	4b0d      	ldr	r3, [pc, #52]	; (800b188 <__smakebuf_r+0x7c>)
 800b152:	63f3      	str	r3, [r6, #60]	; 0x3c
 800b154:	89a3      	ldrh	r3, [r4, #12]
 800b156:	6020      	str	r0, [r4, #0]
 800b158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b15c:	81a3      	strh	r3, [r4, #12]
 800b15e:	9b00      	ldr	r3, [sp, #0]
 800b160:	6120      	str	r0, [r4, #16]
 800b162:	6163      	str	r3, [r4, #20]
 800b164:	9b01      	ldr	r3, [sp, #4]
 800b166:	b15b      	cbz	r3, 800b180 <__smakebuf_r+0x74>
 800b168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b16c:	4630      	mov	r0, r6
 800b16e:	f001 f9a1 	bl	800c4b4 <_isatty_r>
 800b172:	b128      	cbz	r0, 800b180 <__smakebuf_r+0x74>
 800b174:	89a3      	ldrh	r3, [r4, #12]
 800b176:	f023 0303 	bic.w	r3, r3, #3
 800b17a:	f043 0301 	orr.w	r3, r3, #1
 800b17e:	81a3      	strh	r3, [r4, #12]
 800b180:	89a3      	ldrh	r3, [r4, #12]
 800b182:	431d      	orrs	r5, r3
 800b184:	81a5      	strh	r5, [r4, #12]
 800b186:	e7cd      	b.n	800b124 <__smakebuf_r+0x18>
 800b188:	0800aae5 	.word	0x0800aae5

0800b18c <_malloc_r>:
 800b18c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b190:	f101 050b 	add.w	r5, r1, #11
 800b194:	2d16      	cmp	r5, #22
 800b196:	4606      	mov	r6, r0
 800b198:	d906      	bls.n	800b1a8 <_malloc_r+0x1c>
 800b19a:	f035 0507 	bics.w	r5, r5, #7
 800b19e:	d504      	bpl.n	800b1aa <_malloc_r+0x1e>
 800b1a0:	230c      	movs	r3, #12
 800b1a2:	6033      	str	r3, [r6, #0]
 800b1a4:	2400      	movs	r4, #0
 800b1a6:	e1a8      	b.n	800b4fa <_malloc_r+0x36e>
 800b1a8:	2510      	movs	r5, #16
 800b1aa:	428d      	cmp	r5, r1
 800b1ac:	d3f8      	bcc.n	800b1a0 <_malloc_r+0x14>
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	f000 fa4a 	bl	800b648 <__malloc_lock>
 800b1b4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800b1b8:	4fc0      	ldr	r7, [pc, #768]	; (800b4bc <_malloc_r+0x330>)
 800b1ba:	d238      	bcs.n	800b22e <_malloc_r+0xa2>
 800b1bc:	f105 0208 	add.w	r2, r5, #8
 800b1c0:	443a      	add	r2, r7
 800b1c2:	6854      	ldr	r4, [r2, #4]
 800b1c4:	f1a2 0108 	sub.w	r1, r2, #8
 800b1c8:	428c      	cmp	r4, r1
 800b1ca:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 800b1ce:	d102      	bne.n	800b1d6 <_malloc_r+0x4a>
 800b1d0:	68d4      	ldr	r4, [r2, #12]
 800b1d2:	42a2      	cmp	r2, r4
 800b1d4:	d010      	beq.n	800b1f8 <_malloc_r+0x6c>
 800b1d6:	6863      	ldr	r3, [r4, #4]
 800b1d8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800b1dc:	f023 0303 	bic.w	r3, r3, #3
 800b1e0:	60ca      	str	r2, [r1, #12]
 800b1e2:	4423      	add	r3, r4
 800b1e4:	6091      	str	r1, [r2, #8]
 800b1e6:	685a      	ldr	r2, [r3, #4]
 800b1e8:	f042 0201 	orr.w	r2, r2, #1
 800b1ec:	605a      	str	r2, [r3, #4]
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	f000 fa30 	bl	800b654 <__malloc_unlock>
 800b1f4:	3408      	adds	r4, #8
 800b1f6:	e180      	b.n	800b4fa <_malloc_r+0x36e>
 800b1f8:	3302      	adds	r3, #2
 800b1fa:	4ab1      	ldr	r2, [pc, #708]	; (800b4c0 <_malloc_r+0x334>)
 800b1fc:	693c      	ldr	r4, [r7, #16]
 800b1fe:	4611      	mov	r1, r2
 800b200:	4294      	cmp	r4, r2
 800b202:	d075      	beq.n	800b2f0 <_malloc_r+0x164>
 800b204:	6860      	ldr	r0, [r4, #4]
 800b206:	f020 0c03 	bic.w	ip, r0, #3
 800b20a:	ebac 0005 	sub.w	r0, ip, r5
 800b20e:	280f      	cmp	r0, #15
 800b210:	dd48      	ble.n	800b2a4 <_malloc_r+0x118>
 800b212:	1963      	adds	r3, r4, r5
 800b214:	f045 0501 	orr.w	r5, r5, #1
 800b218:	6065      	str	r5, [r4, #4]
 800b21a:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800b21e:	e9c3 2202 	strd	r2, r2, [r3, #8]
 800b222:	f040 0201 	orr.w	r2, r0, #1
 800b226:	605a      	str	r2, [r3, #4]
 800b228:	f844 000c 	str.w	r0, [r4, ip]
 800b22c:	e7df      	b.n	800b1ee <_malloc_r+0x62>
 800b22e:	0a6b      	lsrs	r3, r5, #9
 800b230:	d02a      	beq.n	800b288 <_malloc_r+0xfc>
 800b232:	2b04      	cmp	r3, #4
 800b234:	d812      	bhi.n	800b25c <_malloc_r+0xd0>
 800b236:	09ab      	lsrs	r3, r5, #6
 800b238:	3338      	adds	r3, #56	; 0x38
 800b23a:	1c5a      	adds	r2, r3, #1
 800b23c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800b240:	6854      	ldr	r4, [r2, #4]
 800b242:	f1a2 0c08 	sub.w	ip, r2, #8
 800b246:	4564      	cmp	r4, ip
 800b248:	d006      	beq.n	800b258 <_malloc_r+0xcc>
 800b24a:	6862      	ldr	r2, [r4, #4]
 800b24c:	f022 0203 	bic.w	r2, r2, #3
 800b250:	1b50      	subs	r0, r2, r5
 800b252:	280f      	cmp	r0, #15
 800b254:	dd1c      	ble.n	800b290 <_malloc_r+0x104>
 800b256:	3b01      	subs	r3, #1
 800b258:	3301      	adds	r3, #1
 800b25a:	e7ce      	b.n	800b1fa <_malloc_r+0x6e>
 800b25c:	2b14      	cmp	r3, #20
 800b25e:	d801      	bhi.n	800b264 <_malloc_r+0xd8>
 800b260:	335b      	adds	r3, #91	; 0x5b
 800b262:	e7ea      	b.n	800b23a <_malloc_r+0xae>
 800b264:	2b54      	cmp	r3, #84	; 0x54
 800b266:	d802      	bhi.n	800b26e <_malloc_r+0xe2>
 800b268:	0b2b      	lsrs	r3, r5, #12
 800b26a:	336e      	adds	r3, #110	; 0x6e
 800b26c:	e7e5      	b.n	800b23a <_malloc_r+0xae>
 800b26e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800b272:	d802      	bhi.n	800b27a <_malloc_r+0xee>
 800b274:	0beb      	lsrs	r3, r5, #15
 800b276:	3377      	adds	r3, #119	; 0x77
 800b278:	e7df      	b.n	800b23a <_malloc_r+0xae>
 800b27a:	f240 5254 	movw	r2, #1364	; 0x554
 800b27e:	4293      	cmp	r3, r2
 800b280:	d804      	bhi.n	800b28c <_malloc_r+0x100>
 800b282:	0cab      	lsrs	r3, r5, #18
 800b284:	337c      	adds	r3, #124	; 0x7c
 800b286:	e7d8      	b.n	800b23a <_malloc_r+0xae>
 800b288:	233f      	movs	r3, #63	; 0x3f
 800b28a:	e7d6      	b.n	800b23a <_malloc_r+0xae>
 800b28c:	237e      	movs	r3, #126	; 0x7e
 800b28e:	e7d4      	b.n	800b23a <_malloc_r+0xae>
 800b290:	2800      	cmp	r0, #0
 800b292:	68e1      	ldr	r1, [r4, #12]
 800b294:	db04      	blt.n	800b2a0 <_malloc_r+0x114>
 800b296:	68a3      	ldr	r3, [r4, #8]
 800b298:	60d9      	str	r1, [r3, #12]
 800b29a:	608b      	str	r3, [r1, #8]
 800b29c:	18a3      	adds	r3, r4, r2
 800b29e:	e7a2      	b.n	800b1e6 <_malloc_r+0x5a>
 800b2a0:	460c      	mov	r4, r1
 800b2a2:	e7d0      	b.n	800b246 <_malloc_r+0xba>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800b2aa:	db07      	blt.n	800b2bc <_malloc_r+0x130>
 800b2ac:	44a4      	add	ip, r4
 800b2ae:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800b2b2:	f043 0301 	orr.w	r3, r3, #1
 800b2b6:	f8cc 3004 	str.w	r3, [ip, #4]
 800b2ba:	e798      	b.n	800b1ee <_malloc_r+0x62>
 800b2bc:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f080 8099 	bcs.w	800b3f8 <_malloc_r+0x26c>
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800b2cc:	ea4f 0eac 	mov.w	lr, ip, asr #2
 800b2d0:	fa02 f20e 	lsl.w	r2, r2, lr
 800b2d4:	4310      	orrs	r0, r2
 800b2d6:	f10c 0c01 	add.w	ip, ip, #1
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 800b2e0:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 800b2e4:	3a08      	subs	r2, #8
 800b2e6:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800b2ea:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800b2ee:	60c4      	str	r4, [r0, #12]
 800b2f0:	2001      	movs	r0, #1
 800b2f2:	109a      	asrs	r2, r3, #2
 800b2f4:	fa00 f202 	lsl.w	r2, r0, r2
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	4290      	cmp	r0, r2
 800b2fc:	d326      	bcc.n	800b34c <_malloc_r+0x1c0>
 800b2fe:	4210      	tst	r0, r2
 800b300:	d106      	bne.n	800b310 <_malloc_r+0x184>
 800b302:	f023 0303 	bic.w	r3, r3, #3
 800b306:	0052      	lsls	r2, r2, #1
 800b308:	4210      	tst	r0, r2
 800b30a:	f103 0304 	add.w	r3, r3, #4
 800b30e:	d0fa      	beq.n	800b306 <_malloc_r+0x17a>
 800b310:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 800b314:	46e1      	mov	r9, ip
 800b316:	4698      	mov	r8, r3
 800b318:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800b31c:	454c      	cmp	r4, r9
 800b31e:	f040 80af 	bne.w	800b480 <_malloc_r+0x2f4>
 800b322:	f108 0801 	add.w	r8, r8, #1
 800b326:	f018 0f03 	tst.w	r8, #3
 800b32a:	f109 0908 	add.w	r9, r9, #8
 800b32e:	d1f3      	bne.n	800b318 <_malloc_r+0x18c>
 800b330:	0798      	lsls	r0, r3, #30
 800b332:	f040 80e8 	bne.w	800b506 <_malloc_r+0x37a>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	ea23 0302 	bic.w	r3, r3, r2
 800b33c:	607b      	str	r3, [r7, #4]
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	0052      	lsls	r2, r2, #1
 800b342:	4290      	cmp	r0, r2
 800b344:	d302      	bcc.n	800b34c <_malloc_r+0x1c0>
 800b346:	2a00      	cmp	r2, #0
 800b348:	f040 80eb 	bne.w	800b522 <_malloc_r+0x396>
 800b34c:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800b350:	f8da 4004 	ldr.w	r4, [sl, #4]
 800b354:	f024 0203 	bic.w	r2, r4, #3
 800b358:	42aa      	cmp	r2, r5
 800b35a:	d303      	bcc.n	800b364 <_malloc_r+0x1d8>
 800b35c:	1b53      	subs	r3, r2, r5
 800b35e:	2b0f      	cmp	r3, #15
 800b360:	f300 813f 	bgt.w	800b5e2 <_malloc_r+0x456>
 800b364:	4b57      	ldr	r3, [pc, #348]	; (800b4c4 <_malloc_r+0x338>)
 800b366:	2008      	movs	r0, #8
 800b368:	681c      	ldr	r4, [r3, #0]
 800b36a:	9200      	str	r2, [sp, #0]
 800b36c:	f000 fee8 	bl	800c140 <sysconf>
 800b370:	4b55      	ldr	r3, [pc, #340]	; (800b4c8 <_malloc_r+0x33c>)
 800b372:	3410      	adds	r4, #16
 800b374:	6819      	ldr	r1, [r3, #0]
 800b376:	442c      	add	r4, r5
 800b378:	3101      	adds	r1, #1
 800b37a:	bf1f      	itttt	ne
 800b37c:	f104 34ff 	addne.w	r4, r4, #4294967295
 800b380:	1824      	addne	r4, r4, r0
 800b382:	4241      	negne	r1, r0
 800b384:	400c      	andne	r4, r1
 800b386:	9a00      	ldr	r2, [sp, #0]
 800b388:	4680      	mov	r8, r0
 800b38a:	4621      	mov	r1, r4
 800b38c:	4630      	mov	r0, r6
 800b38e:	e9cd 2300 	strd	r2, r3, [sp]
 800b392:	f000 fdf5 	bl	800bf80 <_sbrk_r>
 800b396:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b39a:	4683      	mov	fp, r0
 800b39c:	f000 80fa 	beq.w	800b594 <_malloc_r+0x408>
 800b3a0:	9a00      	ldr	r2, [sp, #0]
 800b3a2:	9b01      	ldr	r3, [sp, #4]
 800b3a4:	eb0a 0102 	add.w	r1, sl, r2
 800b3a8:	4281      	cmp	r1, r0
 800b3aa:	d902      	bls.n	800b3b2 <_malloc_r+0x226>
 800b3ac:	45ba      	cmp	sl, r7
 800b3ae:	f040 80f1 	bne.w	800b594 <_malloc_r+0x408>
 800b3b2:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800b4d4 <_malloc_r+0x348>
 800b3b6:	4559      	cmp	r1, fp
 800b3b8:	f8d9 0000 	ldr.w	r0, [r9]
 800b3bc:	f108 3cff 	add.w	ip, r8, #4294967295
 800b3c0:	eb00 0e04 	add.w	lr, r0, r4
 800b3c4:	f8c9 e000 	str.w	lr, [r9]
 800b3c8:	f040 80ad 	bne.w	800b526 <_malloc_r+0x39a>
 800b3cc:	ea11 0f0c 	tst.w	r1, ip
 800b3d0:	f040 80a9 	bne.w	800b526 <_malloc_r+0x39a>
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	4414      	add	r4, r2
 800b3d8:	f044 0401 	orr.w	r4, r4, #1
 800b3dc:	605c      	str	r4, [r3, #4]
 800b3de:	4a3b      	ldr	r2, [pc, #236]	; (800b4cc <_malloc_r+0x340>)
 800b3e0:	f8d9 3000 	ldr.w	r3, [r9]
 800b3e4:	6811      	ldr	r1, [r2, #0]
 800b3e6:	428b      	cmp	r3, r1
 800b3e8:	bf88      	it	hi
 800b3ea:	6013      	strhi	r3, [r2, #0]
 800b3ec:	4a38      	ldr	r2, [pc, #224]	; (800b4d0 <_malloc_r+0x344>)
 800b3ee:	6811      	ldr	r1, [r2, #0]
 800b3f0:	428b      	cmp	r3, r1
 800b3f2:	bf88      	it	hi
 800b3f4:	6013      	strhi	r3, [r2, #0]
 800b3f6:	e0cd      	b.n	800b594 <_malloc_r+0x408>
 800b3f8:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800b3fc:	2a04      	cmp	r2, #4
 800b3fe:	d818      	bhi.n	800b432 <_malloc_r+0x2a6>
 800b400:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800b404:	3238      	adds	r2, #56	; 0x38
 800b406:	f102 0e01 	add.w	lr, r2, #1
 800b40a:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 800b40e:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 800b412:	45f0      	cmp	r8, lr
 800b414:	d12b      	bne.n	800b46e <_malloc_r+0x2e2>
 800b416:	f04f 0c01 	mov.w	ip, #1
 800b41a:	1092      	asrs	r2, r2, #2
 800b41c:	fa0c f202 	lsl.w	r2, ip, r2
 800b420:	4310      	orrs	r0, r2
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800b428:	f8c8 4008 	str.w	r4, [r8, #8]
 800b42c:	f8ce 400c 	str.w	r4, [lr, #12]
 800b430:	e75e      	b.n	800b2f0 <_malloc_r+0x164>
 800b432:	2a14      	cmp	r2, #20
 800b434:	d801      	bhi.n	800b43a <_malloc_r+0x2ae>
 800b436:	325b      	adds	r2, #91	; 0x5b
 800b438:	e7e5      	b.n	800b406 <_malloc_r+0x27a>
 800b43a:	2a54      	cmp	r2, #84	; 0x54
 800b43c:	d803      	bhi.n	800b446 <_malloc_r+0x2ba>
 800b43e:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800b442:	326e      	adds	r2, #110	; 0x6e
 800b444:	e7df      	b.n	800b406 <_malloc_r+0x27a>
 800b446:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b44a:	d803      	bhi.n	800b454 <_malloc_r+0x2c8>
 800b44c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800b450:	3277      	adds	r2, #119	; 0x77
 800b452:	e7d8      	b.n	800b406 <_malloc_r+0x27a>
 800b454:	f240 5e54 	movw	lr, #1364	; 0x554
 800b458:	4572      	cmp	r2, lr
 800b45a:	bf9a      	itte	ls
 800b45c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800b460:	327c      	addls	r2, #124	; 0x7c
 800b462:	227e      	movhi	r2, #126	; 0x7e
 800b464:	e7cf      	b.n	800b406 <_malloc_r+0x27a>
 800b466:	f8de e008 	ldr.w	lr, [lr, #8]
 800b46a:	45f0      	cmp	r8, lr
 800b46c:	d005      	beq.n	800b47a <_malloc_r+0x2ee>
 800b46e:	f8de 2004 	ldr.w	r2, [lr, #4]
 800b472:	f022 0203 	bic.w	r2, r2, #3
 800b476:	4562      	cmp	r2, ip
 800b478:	d8f5      	bhi.n	800b466 <_malloc_r+0x2da>
 800b47a:	f8de 800c 	ldr.w	r8, [lr, #12]
 800b47e:	e7d1      	b.n	800b424 <_malloc_r+0x298>
 800b480:	6860      	ldr	r0, [r4, #4]
 800b482:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800b486:	f020 0003 	bic.w	r0, r0, #3
 800b48a:	eba0 0a05 	sub.w	sl, r0, r5
 800b48e:	f1ba 0f0f 	cmp.w	sl, #15
 800b492:	dd21      	ble.n	800b4d8 <_malloc_r+0x34c>
 800b494:	68a2      	ldr	r2, [r4, #8]
 800b496:	1963      	adds	r3, r4, r5
 800b498:	f045 0501 	orr.w	r5, r5, #1
 800b49c:	6065      	str	r5, [r4, #4]
 800b49e:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b4a2:	f8ce 2008 	str.w	r2, [lr, #8]
 800b4a6:	f04a 0201 	orr.w	r2, sl, #1
 800b4aa:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800b4ae:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800b4b2:	605a      	str	r2, [r3, #4]
 800b4b4:	f844 a000 	str.w	sl, [r4, r0]
 800b4b8:	e699      	b.n	800b1ee <_malloc_r+0x62>
 800b4ba:	bf00      	nop
 800b4bc:	20000718 	.word	0x20000718
 800b4c0:	20000720 	.word	0x20000720
 800b4c4:	20000dac 	.word	0x20000dac
 800b4c8:	20000b20 	.word	0x20000b20
 800b4cc:	20000da4 	.word	0x20000da4
 800b4d0:	20000da8 	.word	0x20000da8
 800b4d4:	20000d7c 	.word	0x20000d7c
 800b4d8:	f1ba 0f00 	cmp.w	sl, #0
 800b4dc:	db11      	blt.n	800b502 <_malloc_r+0x376>
 800b4de:	4420      	add	r0, r4
 800b4e0:	6843      	ldr	r3, [r0, #4]
 800b4e2:	f043 0301 	orr.w	r3, r3, #1
 800b4e6:	6043      	str	r3, [r0, #4]
 800b4e8:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	f8c3 e00c 	str.w	lr, [r3, #12]
 800b4f2:	f8ce 3008 	str.w	r3, [lr, #8]
 800b4f6:	f000 f8ad 	bl	800b654 <__malloc_unlock>
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	b003      	add	sp, #12
 800b4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b502:	4674      	mov	r4, lr
 800b504:	e70a      	b.n	800b31c <_malloc_r+0x190>
 800b506:	f1ac 0008 	sub.w	r0, ip, #8
 800b50a:	f8dc c000 	ldr.w	ip, [ip]
 800b50e:	3b01      	subs	r3, #1
 800b510:	4584      	cmp	ip, r0
 800b512:	f43f af0d 	beq.w	800b330 <_malloc_r+0x1a4>
 800b516:	e712      	b.n	800b33e <_malloc_r+0x1b2>
 800b518:	3304      	adds	r3, #4
 800b51a:	0052      	lsls	r2, r2, #1
 800b51c:	4210      	tst	r0, r2
 800b51e:	d0fb      	beq.n	800b518 <_malloc_r+0x38c>
 800b520:	e6f6      	b.n	800b310 <_malloc_r+0x184>
 800b522:	4643      	mov	r3, r8
 800b524:	e7fa      	b.n	800b51c <_malloc_r+0x390>
 800b526:	6818      	ldr	r0, [r3, #0]
 800b528:	9200      	str	r2, [sp, #0]
 800b52a:	3001      	adds	r0, #1
 800b52c:	bf1b      	ittet	ne
 800b52e:	ebab 0101 	subne.w	r1, fp, r1
 800b532:	4471      	addne	r1, lr
 800b534:	f8c3 b000 	streq.w	fp, [r3]
 800b538:	f8c9 1000 	strne.w	r1, [r9]
 800b53c:	f01b 0307 	ands.w	r3, fp, #7
 800b540:	bf1c      	itt	ne
 800b542:	f1c3 0308 	rsbne	r3, r3, #8
 800b546:	449b      	addne	fp, r3
 800b548:	445c      	add	r4, fp
 800b54a:	4498      	add	r8, r3
 800b54c:	ea04 030c 	and.w	r3, r4, ip
 800b550:	eba8 0803 	sub.w	r8, r8, r3
 800b554:	4641      	mov	r1, r8
 800b556:	4630      	mov	r0, r6
 800b558:	f000 fd12 	bl	800bf80 <_sbrk_r>
 800b55c:	1c43      	adds	r3, r0, #1
 800b55e:	bf04      	itt	eq
 800b560:	4658      	moveq	r0, fp
 800b562:	f04f 0800 	moveq.w	r8, #0
 800b566:	f8d9 3000 	ldr.w	r3, [r9]
 800b56a:	eba0 000b 	sub.w	r0, r0, fp
 800b56e:	4440      	add	r0, r8
 800b570:	4443      	add	r3, r8
 800b572:	f040 0001 	orr.w	r0, r0, #1
 800b576:	45ba      	cmp	sl, r7
 800b578:	f8c7 b008 	str.w	fp, [r7, #8]
 800b57c:	9a00      	ldr	r2, [sp, #0]
 800b57e:	f8c9 3000 	str.w	r3, [r9]
 800b582:	f8cb 0004 	str.w	r0, [fp, #4]
 800b586:	f43f af2a 	beq.w	800b3de <_malloc_r+0x252>
 800b58a:	2a0f      	cmp	r2, #15
 800b58c:	d810      	bhi.n	800b5b0 <_malloc_r+0x424>
 800b58e:	2301      	movs	r3, #1
 800b590:	f8cb 3004 	str.w	r3, [fp, #4]
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	f022 0203 	bic.w	r2, r2, #3
 800b59c:	42aa      	cmp	r2, r5
 800b59e:	eba2 0305 	sub.w	r3, r2, r5
 800b5a2:	d301      	bcc.n	800b5a8 <_malloc_r+0x41c>
 800b5a4:	2b0f      	cmp	r3, #15
 800b5a6:	dc1c      	bgt.n	800b5e2 <_malloc_r+0x456>
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f000 f853 	bl	800b654 <__malloc_unlock>
 800b5ae:	e5f9      	b.n	800b1a4 <_malloc_r+0x18>
 800b5b0:	f1a2 040c 	sub.w	r4, r2, #12
 800b5b4:	2205      	movs	r2, #5
 800b5b6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b5ba:	f024 0407 	bic.w	r4, r4, #7
 800b5be:	f003 0301 	and.w	r3, r3, #1
 800b5c2:	4323      	orrs	r3, r4
 800b5c4:	f8ca 3004 	str.w	r3, [sl, #4]
 800b5c8:	2c0f      	cmp	r4, #15
 800b5ca:	eb0a 0304 	add.w	r3, sl, r4
 800b5ce:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800b5d2:	f67f af04 	bls.w	800b3de <_malloc_r+0x252>
 800b5d6:	f10a 0108 	add.w	r1, sl, #8
 800b5da:	4630      	mov	r0, r6
 800b5dc:	f7ff fb30 	bl	800ac40 <_free_r>
 800b5e0:	e6fd      	b.n	800b3de <_malloc_r+0x252>
 800b5e2:	68bc      	ldr	r4, [r7, #8]
 800b5e4:	f045 0201 	orr.w	r2, r5, #1
 800b5e8:	f043 0301 	orr.w	r3, r3, #1
 800b5ec:	4425      	add	r5, r4
 800b5ee:	6062      	str	r2, [r4, #4]
 800b5f0:	60bd      	str	r5, [r7, #8]
 800b5f2:	606b      	str	r3, [r5, #4]
 800b5f4:	e5fb      	b.n	800b1ee <_malloc_r+0x62>
 800b5f6:	bf00      	nop

0800b5f8 <memchr>:
 800b5f8:	b510      	push	{r4, lr}
 800b5fa:	b2c9      	uxtb	r1, r1
 800b5fc:	4402      	add	r2, r0
 800b5fe:	4290      	cmp	r0, r2
 800b600:	4603      	mov	r3, r0
 800b602:	d101      	bne.n	800b608 <memchr+0x10>
 800b604:	2300      	movs	r3, #0
 800b606:	e003      	b.n	800b610 <memchr+0x18>
 800b608:	781c      	ldrb	r4, [r3, #0]
 800b60a:	3001      	adds	r0, #1
 800b60c:	428c      	cmp	r4, r1
 800b60e:	d1f6      	bne.n	800b5fe <memchr+0x6>
 800b610:	4618      	mov	r0, r3
 800b612:	bd10      	pop	{r4, pc}

0800b614 <memmove>:
 800b614:	4288      	cmp	r0, r1
 800b616:	b510      	push	{r4, lr}
 800b618:	eb01 0302 	add.w	r3, r1, r2
 800b61c:	d807      	bhi.n	800b62e <memmove+0x1a>
 800b61e:	1e42      	subs	r2, r0, #1
 800b620:	4299      	cmp	r1, r3
 800b622:	d00a      	beq.n	800b63a <memmove+0x26>
 800b624:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b628:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b62c:	e7f8      	b.n	800b620 <memmove+0xc>
 800b62e:	4283      	cmp	r3, r0
 800b630:	d9f5      	bls.n	800b61e <memmove+0xa>
 800b632:	1881      	adds	r1, r0, r2
 800b634:	1ad2      	subs	r2, r2, r3
 800b636:	42d3      	cmn	r3, r2
 800b638:	d100      	bne.n	800b63c <memmove+0x28>
 800b63a:	bd10      	pop	{r4, pc}
 800b63c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b640:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b644:	e7f7      	b.n	800b636 <memmove+0x22>
	...

0800b648 <__malloc_lock>:
 800b648:	4801      	ldr	r0, [pc, #4]	; (800b650 <__malloc_lock+0x8>)
 800b64a:	f7ff bd31 	b.w	800b0b0 <__retarget_lock_acquire_recursive>
 800b64e:	bf00      	nop
 800b650:	200021c0 	.word	0x200021c0

0800b654 <__malloc_unlock>:
 800b654:	4801      	ldr	r0, [pc, #4]	; (800b65c <__malloc_unlock+0x8>)
 800b656:	f7ff bd2c 	b.w	800b0b2 <__retarget_lock_release_recursive>
 800b65a:	bf00      	nop
 800b65c:	200021c0 	.word	0x200021c0

0800b660 <_Balloc>:
 800b660:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b662:	b570      	push	{r4, r5, r6, lr}
 800b664:	4605      	mov	r5, r0
 800b666:	460c      	mov	r4, r1
 800b668:	b17b      	cbz	r3, 800b68a <_Balloc+0x2a>
 800b66a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800b66c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b670:	b9a0      	cbnz	r0, 800b69c <_Balloc+0x3c>
 800b672:	2101      	movs	r1, #1
 800b674:	fa01 f604 	lsl.w	r6, r1, r4
 800b678:	1d72      	adds	r2, r6, #5
 800b67a:	0092      	lsls	r2, r2, #2
 800b67c:	4628      	mov	r0, r5
 800b67e:	f000 fe07 	bl	800c290 <_calloc_r>
 800b682:	b148      	cbz	r0, 800b698 <_Balloc+0x38>
 800b684:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800b688:	e00b      	b.n	800b6a2 <_Balloc+0x42>
 800b68a:	2221      	movs	r2, #33	; 0x21
 800b68c:	2104      	movs	r1, #4
 800b68e:	f000 fdff 	bl	800c290 <_calloc_r>
 800b692:	64e8      	str	r0, [r5, #76]	; 0x4c
 800b694:	2800      	cmp	r0, #0
 800b696:	d1e8      	bne.n	800b66a <_Balloc+0xa>
 800b698:	2000      	movs	r0, #0
 800b69a:	bd70      	pop	{r4, r5, r6, pc}
 800b69c:	6802      	ldr	r2, [r0, #0]
 800b69e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6a8:	e7f7      	b.n	800b69a <_Balloc+0x3a>

0800b6aa <_Bfree>:
 800b6aa:	b131      	cbz	r1, 800b6ba <_Bfree+0x10>
 800b6ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b6ae:	684a      	ldr	r2, [r1, #4]
 800b6b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b6b4:	6008      	str	r0, [r1, #0]
 800b6b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b6ba:	4770      	bx	lr

0800b6bc <__multadd>:
 800b6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c0:	461f      	mov	r7, r3
 800b6c2:	4606      	mov	r6, r0
 800b6c4:	460c      	mov	r4, r1
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	690d      	ldr	r5, [r1, #16]
 800b6ca:	f101 0c14 	add.w	ip, r1, #20
 800b6ce:	f8dc 0000 	ldr.w	r0, [ip]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	b281      	uxth	r1, r0
 800b6d6:	fb02 7101 	mla	r1, r2, r1, r7
 800b6da:	0c00      	lsrs	r0, r0, #16
 800b6dc:	0c0f      	lsrs	r7, r1, #16
 800b6de:	fb02 7000 	mla	r0, r2, r0, r7
 800b6e2:	b289      	uxth	r1, r1
 800b6e4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b6e8:	429d      	cmp	r5, r3
 800b6ea:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b6ee:	f84c 1b04 	str.w	r1, [ip], #4
 800b6f2:	dcec      	bgt.n	800b6ce <__multadd+0x12>
 800b6f4:	b1d7      	cbz	r7, 800b72c <__multadd+0x70>
 800b6f6:	68a3      	ldr	r3, [r4, #8]
 800b6f8:	42ab      	cmp	r3, r5
 800b6fa:	dc12      	bgt.n	800b722 <__multadd+0x66>
 800b6fc:	6861      	ldr	r1, [r4, #4]
 800b6fe:	4630      	mov	r0, r6
 800b700:	3101      	adds	r1, #1
 800b702:	f7ff ffad 	bl	800b660 <_Balloc>
 800b706:	4680      	mov	r8, r0
 800b708:	6922      	ldr	r2, [r4, #16]
 800b70a:	f104 010c 	add.w	r1, r4, #12
 800b70e:	3202      	adds	r2, #2
 800b710:	0092      	lsls	r2, r2, #2
 800b712:	300c      	adds	r0, #12
 800b714:	f7fb fd14 	bl	8007140 <memcpy>
 800b718:	4621      	mov	r1, r4
 800b71a:	4630      	mov	r0, r6
 800b71c:	f7ff ffc5 	bl	800b6aa <_Bfree>
 800b720:	4644      	mov	r4, r8
 800b722:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b726:	3501      	adds	r5, #1
 800b728:	615f      	str	r7, [r3, #20]
 800b72a:	6125      	str	r5, [r4, #16]
 800b72c:	4620      	mov	r0, r4
 800b72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b732 <__hi0bits>:
 800b732:	0c02      	lsrs	r2, r0, #16
 800b734:	0412      	lsls	r2, r2, #16
 800b736:	4603      	mov	r3, r0
 800b738:	b9b2      	cbnz	r2, 800b768 <__hi0bits+0x36>
 800b73a:	0403      	lsls	r3, r0, #16
 800b73c:	2010      	movs	r0, #16
 800b73e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b742:	bf04      	itt	eq
 800b744:	021b      	lsleq	r3, r3, #8
 800b746:	3008      	addeq	r0, #8
 800b748:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b74c:	bf04      	itt	eq
 800b74e:	011b      	lsleq	r3, r3, #4
 800b750:	3004      	addeq	r0, #4
 800b752:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b756:	bf04      	itt	eq
 800b758:	009b      	lsleq	r3, r3, #2
 800b75a:	3002      	addeq	r0, #2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	db06      	blt.n	800b76e <__hi0bits+0x3c>
 800b760:	005b      	lsls	r3, r3, #1
 800b762:	d503      	bpl.n	800b76c <__hi0bits+0x3a>
 800b764:	3001      	adds	r0, #1
 800b766:	4770      	bx	lr
 800b768:	2000      	movs	r0, #0
 800b76a:	e7e8      	b.n	800b73e <__hi0bits+0xc>
 800b76c:	2020      	movs	r0, #32
 800b76e:	4770      	bx	lr

0800b770 <__lo0bits>:
 800b770:	6803      	ldr	r3, [r0, #0]
 800b772:	4601      	mov	r1, r0
 800b774:	f013 0207 	ands.w	r2, r3, #7
 800b778:	d00b      	beq.n	800b792 <__lo0bits+0x22>
 800b77a:	07da      	lsls	r2, r3, #31
 800b77c:	d423      	bmi.n	800b7c6 <__lo0bits+0x56>
 800b77e:	0798      	lsls	r0, r3, #30
 800b780:	bf49      	itett	mi
 800b782:	085b      	lsrmi	r3, r3, #1
 800b784:	089b      	lsrpl	r3, r3, #2
 800b786:	2001      	movmi	r0, #1
 800b788:	600b      	strmi	r3, [r1, #0]
 800b78a:	bf5c      	itt	pl
 800b78c:	600b      	strpl	r3, [r1, #0]
 800b78e:	2002      	movpl	r0, #2
 800b790:	4770      	bx	lr
 800b792:	b298      	uxth	r0, r3
 800b794:	b9a8      	cbnz	r0, 800b7c2 <__lo0bits+0x52>
 800b796:	2010      	movs	r0, #16
 800b798:	0c1b      	lsrs	r3, r3, #16
 800b79a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b79e:	bf04      	itt	eq
 800b7a0:	0a1b      	lsreq	r3, r3, #8
 800b7a2:	3008      	addeq	r0, #8
 800b7a4:	071a      	lsls	r2, r3, #28
 800b7a6:	bf04      	itt	eq
 800b7a8:	091b      	lsreq	r3, r3, #4
 800b7aa:	3004      	addeq	r0, #4
 800b7ac:	079a      	lsls	r2, r3, #30
 800b7ae:	bf04      	itt	eq
 800b7b0:	089b      	lsreq	r3, r3, #2
 800b7b2:	3002      	addeq	r0, #2
 800b7b4:	07da      	lsls	r2, r3, #31
 800b7b6:	d402      	bmi.n	800b7be <__lo0bits+0x4e>
 800b7b8:	085b      	lsrs	r3, r3, #1
 800b7ba:	d006      	beq.n	800b7ca <__lo0bits+0x5a>
 800b7bc:	3001      	adds	r0, #1
 800b7be:	600b      	str	r3, [r1, #0]
 800b7c0:	4770      	bx	lr
 800b7c2:	4610      	mov	r0, r2
 800b7c4:	e7e9      	b.n	800b79a <__lo0bits+0x2a>
 800b7c6:	2000      	movs	r0, #0
 800b7c8:	4770      	bx	lr
 800b7ca:	2020      	movs	r0, #32
 800b7cc:	4770      	bx	lr

0800b7ce <__i2b>:
 800b7ce:	b510      	push	{r4, lr}
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	2101      	movs	r1, #1
 800b7d4:	f7ff ff44 	bl	800b660 <_Balloc>
 800b7d8:	2201      	movs	r2, #1
 800b7da:	6144      	str	r4, [r0, #20]
 800b7dc:	6102      	str	r2, [r0, #16]
 800b7de:	bd10      	pop	{r4, pc}

0800b7e0 <__multiply>:
 800b7e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e4:	4614      	mov	r4, r2
 800b7e6:	690a      	ldr	r2, [r1, #16]
 800b7e8:	6923      	ldr	r3, [r4, #16]
 800b7ea:	4688      	mov	r8, r1
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	bfbe      	ittt	lt
 800b7f0:	460b      	movlt	r3, r1
 800b7f2:	46a0      	movlt	r8, r4
 800b7f4:	461c      	movlt	r4, r3
 800b7f6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b7fa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b7fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b802:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b806:	eb07 0609 	add.w	r6, r7, r9
 800b80a:	42b3      	cmp	r3, r6
 800b80c:	bfb8      	it	lt
 800b80e:	3101      	addlt	r1, #1
 800b810:	f7ff ff26 	bl	800b660 <_Balloc>
 800b814:	f100 0514 	add.w	r5, r0, #20
 800b818:	462b      	mov	r3, r5
 800b81a:	2200      	movs	r2, #0
 800b81c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b820:	4573      	cmp	r3, lr
 800b822:	d316      	bcc.n	800b852 <__multiply+0x72>
 800b824:	f104 0214 	add.w	r2, r4, #20
 800b828:	f108 0114 	add.w	r1, r8, #20
 800b82c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b830:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	9b00      	ldr	r3, [sp, #0]
 800b838:	9201      	str	r2, [sp, #4]
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d80c      	bhi.n	800b858 <__multiply+0x78>
 800b83e:	2e00      	cmp	r6, #0
 800b840:	dd03      	ble.n	800b84a <__multiply+0x6a>
 800b842:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b846:	2b00      	cmp	r3, #0
 800b848:	d05d      	beq.n	800b906 <__multiply+0x126>
 800b84a:	6106      	str	r6, [r0, #16]
 800b84c:	b003      	add	sp, #12
 800b84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b852:	f843 2b04 	str.w	r2, [r3], #4
 800b856:	e7e3      	b.n	800b820 <__multiply+0x40>
 800b858:	f8b2 b000 	ldrh.w	fp, [r2]
 800b85c:	f1bb 0f00 	cmp.w	fp, #0
 800b860:	d023      	beq.n	800b8aa <__multiply+0xca>
 800b862:	4689      	mov	r9, r1
 800b864:	46ac      	mov	ip, r5
 800b866:	f04f 0800 	mov.w	r8, #0
 800b86a:	f859 4b04 	ldr.w	r4, [r9], #4
 800b86e:	f8dc a000 	ldr.w	sl, [ip]
 800b872:	b2a3      	uxth	r3, r4
 800b874:	fa1f fa8a 	uxth.w	sl, sl
 800b878:	fb0b a303 	mla	r3, fp, r3, sl
 800b87c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b880:	f8dc 4000 	ldr.w	r4, [ip]
 800b884:	4443      	add	r3, r8
 800b886:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b88a:	fb0b 840a 	mla	r4, fp, sl, r8
 800b88e:	46e2      	mov	sl, ip
 800b890:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b894:	b29b      	uxth	r3, r3
 800b896:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b89a:	454f      	cmp	r7, r9
 800b89c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b8a0:	f84a 3b04 	str.w	r3, [sl], #4
 800b8a4:	d82b      	bhi.n	800b8fe <__multiply+0x11e>
 800b8a6:	f8cc 8004 	str.w	r8, [ip, #4]
 800b8aa:	9b01      	ldr	r3, [sp, #4]
 800b8ac:	3204      	adds	r2, #4
 800b8ae:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b8b2:	f1ba 0f00 	cmp.w	sl, #0
 800b8b6:	d020      	beq.n	800b8fa <__multiply+0x11a>
 800b8b8:	4689      	mov	r9, r1
 800b8ba:	46a8      	mov	r8, r5
 800b8bc:	f04f 0b00 	mov.w	fp, #0
 800b8c0:	682b      	ldr	r3, [r5, #0]
 800b8c2:	f8b9 c000 	ldrh.w	ip, [r9]
 800b8c6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	fb0a 440c 	mla	r4, sl, ip, r4
 800b8d0:	46c4      	mov	ip, r8
 800b8d2:	445c      	add	r4, fp
 800b8d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b8d8:	f84c 3b04 	str.w	r3, [ip], #4
 800b8dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b8e0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b8e4:	0c1b      	lsrs	r3, r3, #16
 800b8e6:	fb0a b303 	mla	r3, sl, r3, fp
 800b8ea:	454f      	cmp	r7, r9
 800b8ec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b8f0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b8f4:	d805      	bhi.n	800b902 <__multiply+0x122>
 800b8f6:	f8c8 3004 	str.w	r3, [r8, #4]
 800b8fa:	3504      	adds	r5, #4
 800b8fc:	e79b      	b.n	800b836 <__multiply+0x56>
 800b8fe:	46d4      	mov	ip, sl
 800b900:	e7b3      	b.n	800b86a <__multiply+0x8a>
 800b902:	46e0      	mov	r8, ip
 800b904:	e7dd      	b.n	800b8c2 <__multiply+0xe2>
 800b906:	3e01      	subs	r6, #1
 800b908:	e799      	b.n	800b83e <__multiply+0x5e>
	...

0800b90c <__pow5mult>:
 800b90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b910:	4615      	mov	r5, r2
 800b912:	f012 0203 	ands.w	r2, r2, #3
 800b916:	4606      	mov	r6, r0
 800b918:	460f      	mov	r7, r1
 800b91a:	d007      	beq.n	800b92c <__pow5mult+0x20>
 800b91c:	4c1a      	ldr	r4, [pc, #104]	; (800b988 <__pow5mult+0x7c>)
 800b91e:	3a01      	subs	r2, #1
 800b920:	2300      	movs	r3, #0
 800b922:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b926:	f7ff fec9 	bl	800b6bc <__multadd>
 800b92a:	4607      	mov	r7, r0
 800b92c:	10ad      	asrs	r5, r5, #2
 800b92e:	d027      	beq.n	800b980 <__pow5mult+0x74>
 800b930:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800b932:	b944      	cbnz	r4, 800b946 <__pow5mult+0x3a>
 800b934:	f240 2171 	movw	r1, #625	; 0x271
 800b938:	4630      	mov	r0, r6
 800b93a:	f7ff ff48 	bl	800b7ce <__i2b>
 800b93e:	2300      	movs	r3, #0
 800b940:	4604      	mov	r4, r0
 800b942:	64b0      	str	r0, [r6, #72]	; 0x48
 800b944:	6003      	str	r3, [r0, #0]
 800b946:	f04f 0800 	mov.w	r8, #0
 800b94a:	07eb      	lsls	r3, r5, #31
 800b94c:	d50a      	bpl.n	800b964 <__pow5mult+0x58>
 800b94e:	4639      	mov	r1, r7
 800b950:	4622      	mov	r2, r4
 800b952:	4630      	mov	r0, r6
 800b954:	f7ff ff44 	bl	800b7e0 <__multiply>
 800b958:	4681      	mov	r9, r0
 800b95a:	4639      	mov	r1, r7
 800b95c:	4630      	mov	r0, r6
 800b95e:	f7ff fea4 	bl	800b6aa <_Bfree>
 800b962:	464f      	mov	r7, r9
 800b964:	106d      	asrs	r5, r5, #1
 800b966:	d00b      	beq.n	800b980 <__pow5mult+0x74>
 800b968:	6820      	ldr	r0, [r4, #0]
 800b96a:	b938      	cbnz	r0, 800b97c <__pow5mult+0x70>
 800b96c:	4622      	mov	r2, r4
 800b96e:	4621      	mov	r1, r4
 800b970:	4630      	mov	r0, r6
 800b972:	f7ff ff35 	bl	800b7e0 <__multiply>
 800b976:	6020      	str	r0, [r4, #0]
 800b978:	f8c0 8000 	str.w	r8, [r0]
 800b97c:	4604      	mov	r4, r0
 800b97e:	e7e4      	b.n	800b94a <__pow5mult+0x3e>
 800b980:	4638      	mov	r0, r7
 800b982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b986:	bf00      	nop
 800b988:	0800c9e8 	.word	0x0800c9e8

0800b98c <__lshift>:
 800b98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b990:	460c      	mov	r4, r1
 800b992:	4607      	mov	r7, r0
 800b994:	4616      	mov	r6, r2
 800b996:	6923      	ldr	r3, [r4, #16]
 800b998:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b99c:	eb0a 0903 	add.w	r9, sl, r3
 800b9a0:	6849      	ldr	r1, [r1, #4]
 800b9a2:	68a3      	ldr	r3, [r4, #8]
 800b9a4:	f109 0501 	add.w	r5, r9, #1
 800b9a8:	42ab      	cmp	r3, r5
 800b9aa:	db32      	blt.n	800ba12 <__lshift+0x86>
 800b9ac:	4638      	mov	r0, r7
 800b9ae:	f7ff fe57 	bl	800b660 <_Balloc>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	4680      	mov	r8, r0
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	f100 0114 	add.w	r1, r0, #20
 800b9bc:	4553      	cmp	r3, sl
 800b9be:	db2b      	blt.n	800ba18 <__lshift+0x8c>
 800b9c0:	6920      	ldr	r0, [r4, #16]
 800b9c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9c6:	f104 0314 	add.w	r3, r4, #20
 800b9ca:	f016 021f 	ands.w	r2, r6, #31
 800b9ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b9d6:	d025      	beq.n	800ba24 <__lshift+0x98>
 800b9d8:	2000      	movs	r0, #0
 800b9da:	f1c2 0e20 	rsb	lr, r2, #32
 800b9de:	468a      	mov	sl, r1
 800b9e0:	681e      	ldr	r6, [r3, #0]
 800b9e2:	4096      	lsls	r6, r2
 800b9e4:	4330      	orrs	r0, r6
 800b9e6:	f84a 0b04 	str.w	r0, [sl], #4
 800b9ea:	f853 0b04 	ldr.w	r0, [r3], #4
 800b9ee:	459c      	cmp	ip, r3
 800b9f0:	fa20 f00e 	lsr.w	r0, r0, lr
 800b9f4:	d814      	bhi.n	800ba20 <__lshift+0x94>
 800b9f6:	6048      	str	r0, [r1, #4]
 800b9f8:	b108      	cbz	r0, 800b9fe <__lshift+0x72>
 800b9fa:	f109 0502 	add.w	r5, r9, #2
 800b9fe:	3d01      	subs	r5, #1
 800ba00:	4638      	mov	r0, r7
 800ba02:	f8c8 5010 	str.w	r5, [r8, #16]
 800ba06:	4621      	mov	r1, r4
 800ba08:	f7ff fe4f 	bl	800b6aa <_Bfree>
 800ba0c:	4640      	mov	r0, r8
 800ba0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba12:	3101      	adds	r1, #1
 800ba14:	005b      	lsls	r3, r3, #1
 800ba16:	e7c7      	b.n	800b9a8 <__lshift+0x1c>
 800ba18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	e7cd      	b.n	800b9bc <__lshift+0x30>
 800ba20:	4651      	mov	r1, sl
 800ba22:	e7dc      	b.n	800b9de <__lshift+0x52>
 800ba24:	3904      	subs	r1, #4
 800ba26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba2a:	459c      	cmp	ip, r3
 800ba2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba30:	d8f9      	bhi.n	800ba26 <__lshift+0x9a>
 800ba32:	e7e4      	b.n	800b9fe <__lshift+0x72>

0800ba34 <__mcmp>:
 800ba34:	6903      	ldr	r3, [r0, #16]
 800ba36:	690a      	ldr	r2, [r1, #16]
 800ba38:	b530      	push	{r4, r5, lr}
 800ba3a:	1a9b      	subs	r3, r3, r2
 800ba3c:	d10c      	bne.n	800ba58 <__mcmp+0x24>
 800ba3e:	0092      	lsls	r2, r2, #2
 800ba40:	3014      	adds	r0, #20
 800ba42:	3114      	adds	r1, #20
 800ba44:	1884      	adds	r4, r0, r2
 800ba46:	4411      	add	r1, r2
 800ba48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba50:	4295      	cmp	r5, r2
 800ba52:	d003      	beq.n	800ba5c <__mcmp+0x28>
 800ba54:	d305      	bcc.n	800ba62 <__mcmp+0x2e>
 800ba56:	2301      	movs	r3, #1
 800ba58:	4618      	mov	r0, r3
 800ba5a:	bd30      	pop	{r4, r5, pc}
 800ba5c:	42a0      	cmp	r0, r4
 800ba5e:	d3f3      	bcc.n	800ba48 <__mcmp+0x14>
 800ba60:	e7fa      	b.n	800ba58 <__mcmp+0x24>
 800ba62:	f04f 33ff 	mov.w	r3, #4294967295
 800ba66:	e7f7      	b.n	800ba58 <__mcmp+0x24>

0800ba68 <__mdiff>:
 800ba68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba6c:	460d      	mov	r5, r1
 800ba6e:	4607      	mov	r7, r0
 800ba70:	4611      	mov	r1, r2
 800ba72:	4628      	mov	r0, r5
 800ba74:	4614      	mov	r4, r2
 800ba76:	f7ff ffdd 	bl	800ba34 <__mcmp>
 800ba7a:	1e06      	subs	r6, r0, #0
 800ba7c:	d108      	bne.n	800ba90 <__mdiff+0x28>
 800ba7e:	4631      	mov	r1, r6
 800ba80:	4638      	mov	r0, r7
 800ba82:	f7ff fded 	bl	800b660 <_Balloc>
 800ba86:	2301      	movs	r3, #1
 800ba88:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ba8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba90:	bfa4      	itt	ge
 800ba92:	4623      	movge	r3, r4
 800ba94:	462c      	movge	r4, r5
 800ba96:	4638      	mov	r0, r7
 800ba98:	6861      	ldr	r1, [r4, #4]
 800ba9a:	bfa6      	itte	ge
 800ba9c:	461d      	movge	r5, r3
 800ba9e:	2600      	movge	r6, #0
 800baa0:	2601      	movlt	r6, #1
 800baa2:	f7ff fddd 	bl	800b660 <_Balloc>
 800baa6:	f04f 0e00 	mov.w	lr, #0
 800baaa:	60c6      	str	r6, [r0, #12]
 800baac:	692b      	ldr	r3, [r5, #16]
 800baae:	6926      	ldr	r6, [r4, #16]
 800bab0:	f104 0214 	add.w	r2, r4, #20
 800bab4:	f105 0914 	add.w	r9, r5, #20
 800bab8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800babc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800bac0:	f100 0114 	add.w	r1, r0, #20
 800bac4:	f852 ab04 	ldr.w	sl, [r2], #4
 800bac8:	f859 5b04 	ldr.w	r5, [r9], #4
 800bacc:	fa1f f38a 	uxth.w	r3, sl
 800bad0:	4473      	add	r3, lr
 800bad2:	b2ac      	uxth	r4, r5
 800bad4:	1b1b      	subs	r3, r3, r4
 800bad6:	0c2c      	lsrs	r4, r5, #16
 800bad8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800badc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800bae6:	45c8      	cmp	r8, r9
 800bae8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800baec:	4694      	mov	ip, r2
 800baee:	f841 4b04 	str.w	r4, [r1], #4
 800baf2:	d8e7      	bhi.n	800bac4 <__mdiff+0x5c>
 800baf4:	45bc      	cmp	ip, r7
 800baf6:	d304      	bcc.n	800bb02 <__mdiff+0x9a>
 800baf8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bafc:	b183      	cbz	r3, 800bb20 <__mdiff+0xb8>
 800bafe:	6106      	str	r6, [r0, #16]
 800bb00:	e7c4      	b.n	800ba8c <__mdiff+0x24>
 800bb02:	f85c 4b04 	ldr.w	r4, [ip], #4
 800bb06:	b2a2      	uxth	r2, r4
 800bb08:	4472      	add	r2, lr
 800bb0a:	1413      	asrs	r3, r2, #16
 800bb0c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bb10:	b292      	uxth	r2, r2
 800bb12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bb16:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800bb1a:	f841 2b04 	str.w	r2, [r1], #4
 800bb1e:	e7e9      	b.n	800baf4 <__mdiff+0x8c>
 800bb20:	3e01      	subs	r6, #1
 800bb22:	e7e9      	b.n	800baf8 <__mdiff+0x90>

0800bb24 <__d2b>:
 800bb24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bb28:	461c      	mov	r4, r3
 800bb2a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800bb2e:	2101      	movs	r1, #1
 800bb30:	4690      	mov	r8, r2
 800bb32:	f7ff fd95 	bl	800b660 <_Balloc>
 800bb36:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800bb3a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800bb3e:	4607      	mov	r7, r0
 800bb40:	bb34      	cbnz	r4, 800bb90 <__d2b+0x6c>
 800bb42:	9201      	str	r2, [sp, #4]
 800bb44:	f1b8 0200 	subs.w	r2, r8, #0
 800bb48:	d027      	beq.n	800bb9a <__d2b+0x76>
 800bb4a:	a802      	add	r0, sp, #8
 800bb4c:	f840 2d08 	str.w	r2, [r0, #-8]!
 800bb50:	f7ff fe0e 	bl	800b770 <__lo0bits>
 800bb54:	9900      	ldr	r1, [sp, #0]
 800bb56:	b1f0      	cbz	r0, 800bb96 <__d2b+0x72>
 800bb58:	9a01      	ldr	r2, [sp, #4]
 800bb5a:	f1c0 0320 	rsb	r3, r0, #32
 800bb5e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb62:	430b      	orrs	r3, r1
 800bb64:	40c2      	lsrs	r2, r0
 800bb66:	617b      	str	r3, [r7, #20]
 800bb68:	9201      	str	r2, [sp, #4]
 800bb6a:	9b01      	ldr	r3, [sp, #4]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	bf14      	ite	ne
 800bb70:	2102      	movne	r1, #2
 800bb72:	2101      	moveq	r1, #1
 800bb74:	61bb      	str	r3, [r7, #24]
 800bb76:	6139      	str	r1, [r7, #16]
 800bb78:	b1c4      	cbz	r4, 800bbac <__d2b+0x88>
 800bb7a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bb7e:	4404      	add	r4, r0
 800bb80:	6034      	str	r4, [r6, #0]
 800bb82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb86:	6028      	str	r0, [r5, #0]
 800bb88:	4638      	mov	r0, r7
 800bb8a:	b002      	add	sp, #8
 800bb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb90:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bb94:	e7d5      	b.n	800bb42 <__d2b+0x1e>
 800bb96:	6179      	str	r1, [r7, #20]
 800bb98:	e7e7      	b.n	800bb6a <__d2b+0x46>
 800bb9a:	a801      	add	r0, sp, #4
 800bb9c:	f7ff fde8 	bl	800b770 <__lo0bits>
 800bba0:	2101      	movs	r1, #1
 800bba2:	9b01      	ldr	r3, [sp, #4]
 800bba4:	6139      	str	r1, [r7, #16]
 800bba6:	617b      	str	r3, [r7, #20]
 800bba8:	3020      	adds	r0, #32
 800bbaa:	e7e5      	b.n	800bb78 <__d2b+0x54>
 800bbac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bbb0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bbb4:	6030      	str	r0, [r6, #0]
 800bbb6:	6918      	ldr	r0, [r3, #16]
 800bbb8:	f7ff fdbb 	bl	800b732 <__hi0bits>
 800bbbc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bbc0:	e7e1      	b.n	800bb86 <__d2b+0x62>
	...

0800bbc4 <_realloc_r>:
 800bbc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc8:	4682      	mov	sl, r0
 800bbca:	460c      	mov	r4, r1
 800bbcc:	b929      	cbnz	r1, 800bbda <_realloc_r+0x16>
 800bbce:	4611      	mov	r1, r2
 800bbd0:	b003      	add	sp, #12
 800bbd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd6:	f7ff bad9 	b.w	800b18c <_malloc_r>
 800bbda:	9201      	str	r2, [sp, #4]
 800bbdc:	f7ff fd34 	bl	800b648 <__malloc_lock>
 800bbe0:	9a01      	ldr	r2, [sp, #4]
 800bbe2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800bbe6:	f102 080b 	add.w	r8, r2, #11
 800bbea:	f1b8 0f16 	cmp.w	r8, #22
 800bbee:	f1a4 0908 	sub.w	r9, r4, #8
 800bbf2:	f025 0603 	bic.w	r6, r5, #3
 800bbf6:	d90b      	bls.n	800bc10 <_realloc_r+0x4c>
 800bbf8:	f038 0807 	bics.w	r8, r8, #7
 800bbfc:	d50a      	bpl.n	800bc14 <_realloc_r+0x50>
 800bbfe:	230c      	movs	r3, #12
 800bc00:	f04f 0b00 	mov.w	fp, #0
 800bc04:	f8ca 3000 	str.w	r3, [sl]
 800bc08:	4658      	mov	r0, fp
 800bc0a:	b003      	add	sp, #12
 800bc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc10:	f04f 0810 	mov.w	r8, #16
 800bc14:	4590      	cmp	r8, r2
 800bc16:	d3f2      	bcc.n	800bbfe <_realloc_r+0x3a>
 800bc18:	45b0      	cmp	r8, r6
 800bc1a:	f340 8175 	ble.w	800bf08 <_realloc_r+0x344>
 800bc1e:	49ab      	ldr	r1, [pc, #684]	; (800becc <_realloc_r+0x308>)
 800bc20:	eb09 0306 	add.w	r3, r9, r6
 800bc24:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800bc28:	6858      	ldr	r0, [r3, #4]
 800bc2a:	459c      	cmp	ip, r3
 800bc2c:	9101      	str	r1, [sp, #4]
 800bc2e:	d005      	beq.n	800bc3c <_realloc_r+0x78>
 800bc30:	f020 0101 	bic.w	r1, r0, #1
 800bc34:	4419      	add	r1, r3
 800bc36:	6849      	ldr	r1, [r1, #4]
 800bc38:	07cf      	lsls	r7, r1, #31
 800bc3a:	d447      	bmi.n	800bccc <_realloc_r+0x108>
 800bc3c:	f020 0003 	bic.w	r0, r0, #3
 800bc40:	459c      	cmp	ip, r3
 800bc42:	eb06 0700 	add.w	r7, r6, r0
 800bc46:	d119      	bne.n	800bc7c <_realloc_r+0xb8>
 800bc48:	f108 0110 	add.w	r1, r8, #16
 800bc4c:	42b9      	cmp	r1, r7
 800bc4e:	dc3f      	bgt.n	800bcd0 <_realloc_r+0x10c>
 800bc50:	9a01      	ldr	r2, [sp, #4]
 800bc52:	eba7 0708 	sub.w	r7, r7, r8
 800bc56:	eb09 0308 	add.w	r3, r9, r8
 800bc5a:	f047 0701 	orr.w	r7, r7, #1
 800bc5e:	6093      	str	r3, [r2, #8]
 800bc60:	605f      	str	r7, [r3, #4]
 800bc62:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bc66:	4650      	mov	r0, sl
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	ea43 0308 	orr.w	r3, r3, r8
 800bc70:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc74:	f7ff fcee 	bl	800b654 <__malloc_unlock>
 800bc78:	46a3      	mov	fp, r4
 800bc7a:	e7c5      	b.n	800bc08 <_realloc_r+0x44>
 800bc7c:	45b8      	cmp	r8, r7
 800bc7e:	dc27      	bgt.n	800bcd0 <_realloc_r+0x10c>
 800bc80:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800bc84:	60da      	str	r2, [r3, #12]
 800bc86:	6093      	str	r3, [r2, #8]
 800bc88:	eba7 0008 	sub.w	r0, r7, r8
 800bc8c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800bc90:	280f      	cmp	r0, #15
 800bc92:	f002 0201 	and.w	r2, r2, #1
 800bc96:	eb09 0307 	add.w	r3, r9, r7
 800bc9a:	f240 8137 	bls.w	800bf0c <_realloc_r+0x348>
 800bc9e:	eb09 0108 	add.w	r1, r9, r8
 800bca2:	ea48 0202 	orr.w	r2, r8, r2
 800bca6:	f040 0001 	orr.w	r0, r0, #1
 800bcaa:	f8c9 2004 	str.w	r2, [r9, #4]
 800bcae:	6048      	str	r0, [r1, #4]
 800bcb0:	685a      	ldr	r2, [r3, #4]
 800bcb2:	3108      	adds	r1, #8
 800bcb4:	f042 0201 	orr.w	r2, r2, #1
 800bcb8:	605a      	str	r2, [r3, #4]
 800bcba:	4650      	mov	r0, sl
 800bcbc:	f7fe ffc0 	bl	800ac40 <_free_r>
 800bcc0:	4650      	mov	r0, sl
 800bcc2:	f7ff fcc7 	bl	800b654 <__malloc_unlock>
 800bcc6:	f109 0b08 	add.w	fp, r9, #8
 800bcca:	e79d      	b.n	800bc08 <_realloc_r+0x44>
 800bccc:	2000      	movs	r0, #0
 800bcce:	4603      	mov	r3, r0
 800bcd0:	07e9      	lsls	r1, r5, #31
 800bcd2:	f100 80c9 	bmi.w	800be68 <_realloc_r+0x2a4>
 800bcd6:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800bcda:	eba9 0505 	sub.w	r5, r9, r5
 800bcde:	6869      	ldr	r1, [r5, #4]
 800bce0:	f021 0103 	bic.w	r1, r1, #3
 800bce4:	eb01 0b06 	add.w	fp, r1, r6
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 8088 	beq.w	800bdfe <_realloc_r+0x23a>
 800bcee:	459c      	cmp	ip, r3
 800bcf0:	eb00 070b 	add.w	r7, r0, fp
 800bcf4:	d14a      	bne.n	800bd8c <_realloc_r+0x1c8>
 800bcf6:	f108 0310 	add.w	r3, r8, #16
 800bcfa:	42bb      	cmp	r3, r7
 800bcfc:	dc7f      	bgt.n	800bdfe <_realloc_r+0x23a>
 800bcfe:	46ab      	mov	fp, r5
 800bd00:	68eb      	ldr	r3, [r5, #12]
 800bd02:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800bd06:	60d3      	str	r3, [r2, #12]
 800bd08:	609a      	str	r2, [r3, #8]
 800bd0a:	1f32      	subs	r2, r6, #4
 800bd0c:	2a24      	cmp	r2, #36	; 0x24
 800bd0e:	d838      	bhi.n	800bd82 <_realloc_r+0x1be>
 800bd10:	2a13      	cmp	r2, #19
 800bd12:	d934      	bls.n	800bd7e <_realloc_r+0x1ba>
 800bd14:	6823      	ldr	r3, [r4, #0]
 800bd16:	2a1b      	cmp	r2, #27
 800bd18:	60ab      	str	r3, [r5, #8]
 800bd1a:	6863      	ldr	r3, [r4, #4]
 800bd1c:	60eb      	str	r3, [r5, #12]
 800bd1e:	d81b      	bhi.n	800bd58 <_realloc_r+0x194>
 800bd20:	3408      	adds	r4, #8
 800bd22:	f105 0310 	add.w	r3, r5, #16
 800bd26:	6822      	ldr	r2, [r4, #0]
 800bd28:	601a      	str	r2, [r3, #0]
 800bd2a:	6862      	ldr	r2, [r4, #4]
 800bd2c:	605a      	str	r2, [r3, #4]
 800bd2e:	68a2      	ldr	r2, [r4, #8]
 800bd30:	609a      	str	r2, [r3, #8]
 800bd32:	9a01      	ldr	r2, [sp, #4]
 800bd34:	eba7 0708 	sub.w	r7, r7, r8
 800bd38:	eb05 0308 	add.w	r3, r5, r8
 800bd3c:	f047 0701 	orr.w	r7, r7, #1
 800bd40:	6093      	str	r3, [r2, #8]
 800bd42:	605f      	str	r7, [r3, #4]
 800bd44:	686b      	ldr	r3, [r5, #4]
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	ea43 0308 	orr.w	r3, r3, r8
 800bd4e:	606b      	str	r3, [r5, #4]
 800bd50:	4650      	mov	r0, sl
 800bd52:	f7ff fc7f 	bl	800b654 <__malloc_unlock>
 800bd56:	e757      	b.n	800bc08 <_realloc_r+0x44>
 800bd58:	68a3      	ldr	r3, [r4, #8]
 800bd5a:	2a24      	cmp	r2, #36	; 0x24
 800bd5c:	612b      	str	r3, [r5, #16]
 800bd5e:	68e3      	ldr	r3, [r4, #12]
 800bd60:	bf18      	it	ne
 800bd62:	3410      	addne	r4, #16
 800bd64:	616b      	str	r3, [r5, #20]
 800bd66:	bf09      	itett	eq
 800bd68:	6923      	ldreq	r3, [r4, #16]
 800bd6a:	f105 0318 	addne.w	r3, r5, #24
 800bd6e:	61ab      	streq	r3, [r5, #24]
 800bd70:	6962      	ldreq	r2, [r4, #20]
 800bd72:	bf02      	ittt	eq
 800bd74:	f105 0320 	addeq.w	r3, r5, #32
 800bd78:	61ea      	streq	r2, [r5, #28]
 800bd7a:	3418      	addeq	r4, #24
 800bd7c:	e7d3      	b.n	800bd26 <_realloc_r+0x162>
 800bd7e:	465b      	mov	r3, fp
 800bd80:	e7d1      	b.n	800bd26 <_realloc_r+0x162>
 800bd82:	4621      	mov	r1, r4
 800bd84:	4658      	mov	r0, fp
 800bd86:	f7ff fc45 	bl	800b614 <memmove>
 800bd8a:	e7d2      	b.n	800bd32 <_realloc_r+0x16e>
 800bd8c:	45b8      	cmp	r8, r7
 800bd8e:	dc36      	bgt.n	800bdfe <_realloc_r+0x23a>
 800bd90:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800bd94:	4628      	mov	r0, r5
 800bd96:	60da      	str	r2, [r3, #12]
 800bd98:	6093      	str	r3, [r2, #8]
 800bd9a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800bd9e:	68eb      	ldr	r3, [r5, #12]
 800bda0:	60d3      	str	r3, [r2, #12]
 800bda2:	609a      	str	r2, [r3, #8]
 800bda4:	1f32      	subs	r2, r6, #4
 800bda6:	2a24      	cmp	r2, #36	; 0x24
 800bda8:	d825      	bhi.n	800bdf6 <_realloc_r+0x232>
 800bdaa:	2a13      	cmp	r2, #19
 800bdac:	d908      	bls.n	800bdc0 <_realloc_r+0x1fc>
 800bdae:	6823      	ldr	r3, [r4, #0]
 800bdb0:	2a1b      	cmp	r2, #27
 800bdb2:	60ab      	str	r3, [r5, #8]
 800bdb4:	6863      	ldr	r3, [r4, #4]
 800bdb6:	60eb      	str	r3, [r5, #12]
 800bdb8:	d80a      	bhi.n	800bdd0 <_realloc_r+0x20c>
 800bdba:	3408      	adds	r4, #8
 800bdbc:	f105 0010 	add.w	r0, r5, #16
 800bdc0:	6823      	ldr	r3, [r4, #0]
 800bdc2:	6003      	str	r3, [r0, #0]
 800bdc4:	6863      	ldr	r3, [r4, #4]
 800bdc6:	6043      	str	r3, [r0, #4]
 800bdc8:	68a3      	ldr	r3, [r4, #8]
 800bdca:	6083      	str	r3, [r0, #8]
 800bdcc:	46a9      	mov	r9, r5
 800bdce:	e75b      	b.n	800bc88 <_realloc_r+0xc4>
 800bdd0:	68a3      	ldr	r3, [r4, #8]
 800bdd2:	2a24      	cmp	r2, #36	; 0x24
 800bdd4:	612b      	str	r3, [r5, #16]
 800bdd6:	68e3      	ldr	r3, [r4, #12]
 800bdd8:	bf18      	it	ne
 800bdda:	f105 0018 	addne.w	r0, r5, #24
 800bdde:	616b      	str	r3, [r5, #20]
 800bde0:	bf09      	itett	eq
 800bde2:	6923      	ldreq	r3, [r4, #16]
 800bde4:	3410      	addne	r4, #16
 800bde6:	61ab      	streq	r3, [r5, #24]
 800bde8:	6963      	ldreq	r3, [r4, #20]
 800bdea:	bf02      	ittt	eq
 800bdec:	f105 0020 	addeq.w	r0, r5, #32
 800bdf0:	61eb      	streq	r3, [r5, #28]
 800bdf2:	3418      	addeq	r4, #24
 800bdf4:	e7e4      	b.n	800bdc0 <_realloc_r+0x1fc>
 800bdf6:	4621      	mov	r1, r4
 800bdf8:	f7ff fc0c 	bl	800b614 <memmove>
 800bdfc:	e7e6      	b.n	800bdcc <_realloc_r+0x208>
 800bdfe:	45d8      	cmp	r8, fp
 800be00:	dc32      	bgt.n	800be68 <_realloc_r+0x2a4>
 800be02:	4628      	mov	r0, r5
 800be04:	68eb      	ldr	r3, [r5, #12]
 800be06:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800be0a:	60d3      	str	r3, [r2, #12]
 800be0c:	609a      	str	r2, [r3, #8]
 800be0e:	1f32      	subs	r2, r6, #4
 800be10:	2a24      	cmp	r2, #36	; 0x24
 800be12:	d825      	bhi.n	800be60 <_realloc_r+0x29c>
 800be14:	2a13      	cmp	r2, #19
 800be16:	d908      	bls.n	800be2a <_realloc_r+0x266>
 800be18:	6823      	ldr	r3, [r4, #0]
 800be1a:	2a1b      	cmp	r2, #27
 800be1c:	60ab      	str	r3, [r5, #8]
 800be1e:	6863      	ldr	r3, [r4, #4]
 800be20:	60eb      	str	r3, [r5, #12]
 800be22:	d80a      	bhi.n	800be3a <_realloc_r+0x276>
 800be24:	3408      	adds	r4, #8
 800be26:	f105 0010 	add.w	r0, r5, #16
 800be2a:	6823      	ldr	r3, [r4, #0]
 800be2c:	6003      	str	r3, [r0, #0]
 800be2e:	6863      	ldr	r3, [r4, #4]
 800be30:	6043      	str	r3, [r0, #4]
 800be32:	68a3      	ldr	r3, [r4, #8]
 800be34:	6083      	str	r3, [r0, #8]
 800be36:	465f      	mov	r7, fp
 800be38:	e7c8      	b.n	800bdcc <_realloc_r+0x208>
 800be3a:	68a3      	ldr	r3, [r4, #8]
 800be3c:	2a24      	cmp	r2, #36	; 0x24
 800be3e:	612b      	str	r3, [r5, #16]
 800be40:	68e3      	ldr	r3, [r4, #12]
 800be42:	bf18      	it	ne
 800be44:	f105 0018 	addne.w	r0, r5, #24
 800be48:	616b      	str	r3, [r5, #20]
 800be4a:	bf09      	itett	eq
 800be4c:	6923      	ldreq	r3, [r4, #16]
 800be4e:	3410      	addne	r4, #16
 800be50:	61ab      	streq	r3, [r5, #24]
 800be52:	6963      	ldreq	r3, [r4, #20]
 800be54:	bf02      	ittt	eq
 800be56:	f105 0020 	addeq.w	r0, r5, #32
 800be5a:	61eb      	streq	r3, [r5, #28]
 800be5c:	3418      	addeq	r4, #24
 800be5e:	e7e4      	b.n	800be2a <_realloc_r+0x266>
 800be60:	4621      	mov	r1, r4
 800be62:	f7ff fbd7 	bl	800b614 <memmove>
 800be66:	e7e6      	b.n	800be36 <_realloc_r+0x272>
 800be68:	4611      	mov	r1, r2
 800be6a:	4650      	mov	r0, sl
 800be6c:	f7ff f98e 	bl	800b18c <_malloc_r>
 800be70:	4683      	mov	fp, r0
 800be72:	2800      	cmp	r0, #0
 800be74:	f43f af6c 	beq.w	800bd50 <_realloc_r+0x18c>
 800be78:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800be7c:	f1a0 0208 	sub.w	r2, r0, #8
 800be80:	f023 0301 	bic.w	r3, r3, #1
 800be84:	444b      	add	r3, r9
 800be86:	4293      	cmp	r3, r2
 800be88:	d105      	bne.n	800be96 <_realloc_r+0x2d2>
 800be8a:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800be8e:	f027 0703 	bic.w	r7, r7, #3
 800be92:	4437      	add	r7, r6
 800be94:	e6f8      	b.n	800bc88 <_realloc_r+0xc4>
 800be96:	1f32      	subs	r2, r6, #4
 800be98:	2a24      	cmp	r2, #36	; 0x24
 800be9a:	d831      	bhi.n	800bf00 <_realloc_r+0x33c>
 800be9c:	2a13      	cmp	r2, #19
 800be9e:	d92c      	bls.n	800befa <_realloc_r+0x336>
 800bea0:	6823      	ldr	r3, [r4, #0]
 800bea2:	2a1b      	cmp	r2, #27
 800bea4:	6003      	str	r3, [r0, #0]
 800bea6:	6863      	ldr	r3, [r4, #4]
 800bea8:	6043      	str	r3, [r0, #4]
 800beaa:	d811      	bhi.n	800bed0 <_realloc_r+0x30c>
 800beac:	f104 0208 	add.w	r2, r4, #8
 800beb0:	f100 0308 	add.w	r3, r0, #8
 800beb4:	6811      	ldr	r1, [r2, #0]
 800beb6:	6019      	str	r1, [r3, #0]
 800beb8:	6851      	ldr	r1, [r2, #4]
 800beba:	6059      	str	r1, [r3, #4]
 800bebc:	6892      	ldr	r2, [r2, #8]
 800bebe:	609a      	str	r2, [r3, #8]
 800bec0:	4621      	mov	r1, r4
 800bec2:	4650      	mov	r0, sl
 800bec4:	f7fe febc 	bl	800ac40 <_free_r>
 800bec8:	e742      	b.n	800bd50 <_realloc_r+0x18c>
 800beca:	bf00      	nop
 800becc:	20000718 	.word	0x20000718
 800bed0:	68a3      	ldr	r3, [r4, #8]
 800bed2:	2a24      	cmp	r2, #36	; 0x24
 800bed4:	6083      	str	r3, [r0, #8]
 800bed6:	68e3      	ldr	r3, [r4, #12]
 800bed8:	bf18      	it	ne
 800beda:	f104 0210 	addne.w	r2, r4, #16
 800bede:	60c3      	str	r3, [r0, #12]
 800bee0:	bf09      	itett	eq
 800bee2:	6923      	ldreq	r3, [r4, #16]
 800bee4:	f100 0310 	addne.w	r3, r0, #16
 800bee8:	6103      	streq	r3, [r0, #16]
 800beea:	6961      	ldreq	r1, [r4, #20]
 800beec:	bf02      	ittt	eq
 800beee:	f104 0218 	addeq.w	r2, r4, #24
 800bef2:	f100 0318 	addeq.w	r3, r0, #24
 800bef6:	6141      	streq	r1, [r0, #20]
 800bef8:	e7dc      	b.n	800beb4 <_realloc_r+0x2f0>
 800befa:	4603      	mov	r3, r0
 800befc:	4622      	mov	r2, r4
 800befe:	e7d9      	b.n	800beb4 <_realloc_r+0x2f0>
 800bf00:	4621      	mov	r1, r4
 800bf02:	f7ff fb87 	bl	800b614 <memmove>
 800bf06:	e7db      	b.n	800bec0 <_realloc_r+0x2fc>
 800bf08:	4637      	mov	r7, r6
 800bf0a:	e6bd      	b.n	800bc88 <_realloc_r+0xc4>
 800bf0c:	4317      	orrs	r7, r2
 800bf0e:	f8c9 7004 	str.w	r7, [r9, #4]
 800bf12:	685a      	ldr	r2, [r3, #4]
 800bf14:	f042 0201 	orr.w	r2, r2, #1
 800bf18:	605a      	str	r2, [r3, #4]
 800bf1a:	e6d1      	b.n	800bcc0 <_realloc_r+0xfc>

0800bf1c <frexp>:
 800bf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1e:	4616      	mov	r6, r2
 800bf20:	2700      	movs	r7, #0
 800bf22:	6037      	str	r7, [r6, #0]
 800bf24:	4f14      	ldr	r7, [pc, #80]	; (800bf78 <frexp+0x5c>)
 800bf26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf2a:	42bb      	cmp	r3, r7
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	460d      	mov	r5, r1
 800bf30:	460a      	mov	r2, r1
 800bf32:	dc1e      	bgt.n	800bf72 <frexp+0x56>
 800bf34:	4607      	mov	r7, r0
 800bf36:	431f      	orrs	r7, r3
 800bf38:	d01b      	beq.n	800bf72 <frexp+0x56>
 800bf3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf3e:	da0a      	bge.n	800bf56 <frexp+0x3a>
 800bf40:	2200      	movs	r2, #0
 800bf42:	4b0e      	ldr	r3, [pc, #56]	; (800bf7c <frexp+0x60>)
 800bf44:	f7f4 fac8 	bl	80004d8 <__aeabi_dmul>
 800bf48:	460a      	mov	r2, r1
 800bf4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf4e:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800bf52:	4604      	mov	r4, r0
 800bf54:	6031      	str	r1, [r6, #0]
 800bf56:	6831      	ldr	r1, [r6, #0]
 800bf58:	151b      	asrs	r3, r3, #20
 800bf5a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800bf5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bf62:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800bf66:	440b      	add	r3, r1
 800bf68:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bf6c:	6033      	str	r3, [r6, #0]
 800bf6e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800bf72:	4620      	mov	r0, r4
 800bf74:	4629      	mov	r1, r5
 800bf76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf78:	7fefffff 	.word	0x7fefffff
 800bf7c:	43500000 	.word	0x43500000

0800bf80 <_sbrk_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	2300      	movs	r3, #0
 800bf84:	4c05      	ldr	r4, [pc, #20]	; (800bf9c <_sbrk_r+0x1c>)
 800bf86:	4605      	mov	r5, r0
 800bf88:	4608      	mov	r0, r1
 800bf8a:	6023      	str	r3, [r4, #0]
 800bf8c:	f7f5 fa80 	bl	8001490 <_sbrk>
 800bf90:	1c43      	adds	r3, r0, #1
 800bf92:	d102      	bne.n	800bf9a <_sbrk_r+0x1a>
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	b103      	cbz	r3, 800bf9a <_sbrk_r+0x1a>
 800bf98:	602b      	str	r3, [r5, #0]
 800bf9a:	bd38      	pop	{r3, r4, r5, pc}
 800bf9c:	200021c8 	.word	0x200021c8

0800bfa0 <__sread>:
 800bfa0:	b510      	push	{r4, lr}
 800bfa2:	460c      	mov	r4, r1
 800bfa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfa8:	f000 faa6 	bl	800c4f8 <_read_r>
 800bfac:	2800      	cmp	r0, #0
 800bfae:	bfab      	itete	ge
 800bfb0:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800bfb2:	89a3      	ldrhlt	r3, [r4, #12]
 800bfb4:	181b      	addge	r3, r3, r0
 800bfb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bfba:	bfac      	ite	ge
 800bfbc:	6523      	strge	r3, [r4, #80]	; 0x50
 800bfbe:	81a3      	strhlt	r3, [r4, #12]
 800bfc0:	bd10      	pop	{r4, pc}

0800bfc2 <__swrite>:
 800bfc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc6:	461f      	mov	r7, r3
 800bfc8:	898b      	ldrh	r3, [r1, #12]
 800bfca:	4605      	mov	r5, r0
 800bfcc:	05db      	lsls	r3, r3, #23
 800bfce:	460c      	mov	r4, r1
 800bfd0:	4616      	mov	r6, r2
 800bfd2:	d505      	bpl.n	800bfe0 <__swrite+0x1e>
 800bfd4:	2302      	movs	r3, #2
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfdc:	f000 fa7a 	bl	800c4d4 <_lseek_r>
 800bfe0:	89a3      	ldrh	r3, [r4, #12]
 800bfe2:	4632      	mov	r2, r6
 800bfe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfe8:	81a3      	strh	r3, [r4, #12]
 800bfea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfee:	463b      	mov	r3, r7
 800bff0:	4628      	mov	r0, r5
 800bff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bff6:	f000 b8e3 	b.w	800c1c0 <_write_r>

0800bffa <__sseek>:
 800bffa:	b510      	push	{r4, lr}
 800bffc:	460c      	mov	r4, r1
 800bffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c002:	f000 fa67 	bl	800c4d4 <_lseek_r>
 800c006:	1c43      	adds	r3, r0, #1
 800c008:	89a3      	ldrh	r3, [r4, #12]
 800c00a:	bf15      	itete	ne
 800c00c:	6520      	strne	r0, [r4, #80]	; 0x50
 800c00e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c016:	81a3      	strheq	r3, [r4, #12]
 800c018:	bf18      	it	ne
 800c01a:	81a3      	strhne	r3, [r4, #12]
 800c01c:	bd10      	pop	{r4, pc}

0800c01e <__sclose>:
 800c01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c022:	f000 b963 	b.w	800c2ec <_close_r>

0800c026 <strncpy>:
 800c026:	b570      	push	{r4, r5, r6, lr}
 800c028:	4604      	mov	r4, r0
 800c02a:	3901      	subs	r1, #1
 800c02c:	b902      	cbnz	r2, 800c030 <strncpy+0xa>
 800c02e:	bd70      	pop	{r4, r5, r6, pc}
 800c030:	4623      	mov	r3, r4
 800c032:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800c036:	1e56      	subs	r6, r2, #1
 800c038:	f803 5b01 	strb.w	r5, [r3], #1
 800c03c:	b92d      	cbnz	r5, 800c04a <strncpy+0x24>
 800c03e:	4414      	add	r4, r2
 800c040:	42a3      	cmp	r3, r4
 800c042:	d0f4      	beq.n	800c02e <strncpy+0x8>
 800c044:	f803 5b01 	strb.w	r5, [r3], #1
 800c048:	e7fa      	b.n	800c040 <strncpy+0x1a>
 800c04a:	461c      	mov	r4, r3
 800c04c:	4632      	mov	r2, r6
 800c04e:	e7ed      	b.n	800c02c <strncpy+0x6>

0800c050 <__ssprint_r>:
 800c050:	6893      	ldr	r3, [r2, #8]
 800c052:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c056:	4681      	mov	r9, r0
 800c058:	460c      	mov	r4, r1
 800c05a:	4616      	mov	r6, r2
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d05e      	beq.n	800c11e <__ssprint_r+0xce>
 800c060:	f04f 0b00 	mov.w	fp, #0
 800c064:	465f      	mov	r7, fp
 800c066:	f8d2 a000 	ldr.w	sl, [r2]
 800c06a:	b357      	cbz	r7, 800c0c2 <__ssprint_r+0x72>
 800c06c:	68a3      	ldr	r3, [r4, #8]
 800c06e:	429f      	cmp	r7, r3
 800c070:	d340      	bcc.n	800c0f4 <__ssprint_r+0xa4>
 800c072:	89a2      	ldrh	r2, [r4, #12]
 800c074:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c078:	d03c      	beq.n	800c0f4 <__ssprint_r+0xa4>
 800c07a:	2302      	movs	r3, #2
 800c07c:	6825      	ldr	r5, [r4, #0]
 800c07e:	6921      	ldr	r1, [r4, #16]
 800c080:	eba5 0801 	sub.w	r8, r5, r1
 800c084:	6965      	ldr	r5, [r4, #20]
 800c086:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c08a:	fb95 f5f3 	sdiv	r5, r5, r3
 800c08e:	f108 0301 	add.w	r3, r8, #1
 800c092:	443b      	add	r3, r7
 800c094:	429d      	cmp	r5, r3
 800c096:	bf38      	it	cc
 800c098:	461d      	movcc	r5, r3
 800c09a:	0553      	lsls	r3, r2, #21
 800c09c:	d544      	bpl.n	800c128 <__ssprint_r+0xd8>
 800c09e:	4629      	mov	r1, r5
 800c0a0:	4648      	mov	r0, r9
 800c0a2:	f7ff f873 	bl	800b18c <_malloc_r>
 800c0a6:	b988      	cbnz	r0, 800c0cc <__ssprint_r+0x7c>
 800c0a8:	230c      	movs	r3, #12
 800c0aa:	f8c9 3000 	str.w	r3, [r9]
 800c0ae:	89a3      	ldrh	r3, [r4, #12]
 800c0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0b8:	81a3      	strh	r3, [r4, #12]
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c0c0:	e02f      	b.n	800c122 <__ssprint_r+0xd2>
 800c0c2:	e9da b700 	ldrd	fp, r7, [sl]
 800c0c6:	f10a 0a08 	add.w	sl, sl, #8
 800c0ca:	e7ce      	b.n	800c06a <__ssprint_r+0x1a>
 800c0cc:	4642      	mov	r2, r8
 800c0ce:	6921      	ldr	r1, [r4, #16]
 800c0d0:	9001      	str	r0, [sp, #4]
 800c0d2:	f7fb f835 	bl	8007140 <memcpy>
 800c0d6:	89a2      	ldrh	r2, [r4, #12]
 800c0d8:	9b01      	ldr	r3, [sp, #4]
 800c0da:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c0de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c0e2:	81a2      	strh	r2, [r4, #12]
 800c0e4:	6123      	str	r3, [r4, #16]
 800c0e6:	4443      	add	r3, r8
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	463b      	mov	r3, r7
 800c0ec:	6165      	str	r5, [r4, #20]
 800c0ee:	eba5 0508 	sub.w	r5, r5, r8
 800c0f2:	60a5      	str	r5, [r4, #8]
 800c0f4:	42bb      	cmp	r3, r7
 800c0f6:	bf28      	it	cs
 800c0f8:	463b      	movcs	r3, r7
 800c0fa:	4659      	mov	r1, fp
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	6820      	ldr	r0, [r4, #0]
 800c100:	9301      	str	r3, [sp, #4]
 800c102:	f7ff fa87 	bl	800b614 <memmove>
 800c106:	68a2      	ldr	r2, [r4, #8]
 800c108:	9b01      	ldr	r3, [sp, #4]
 800c10a:	1ad2      	subs	r2, r2, r3
 800c10c:	60a2      	str	r2, [r4, #8]
 800c10e:	6822      	ldr	r2, [r4, #0]
 800c110:	4413      	add	r3, r2
 800c112:	6023      	str	r3, [r4, #0]
 800c114:	68b3      	ldr	r3, [r6, #8]
 800c116:	1bdf      	subs	r7, r3, r7
 800c118:	60b7      	str	r7, [r6, #8]
 800c11a:	2f00      	cmp	r7, #0
 800c11c:	d1d1      	bne.n	800c0c2 <__ssprint_r+0x72>
 800c11e:	2000      	movs	r0, #0
 800c120:	6070      	str	r0, [r6, #4]
 800c122:	b003      	add	sp, #12
 800c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c128:	462a      	mov	r2, r5
 800c12a:	4648      	mov	r0, r9
 800c12c:	f7ff fd4a 	bl	800bbc4 <_realloc_r>
 800c130:	4603      	mov	r3, r0
 800c132:	2800      	cmp	r0, #0
 800c134:	d1d6      	bne.n	800c0e4 <__ssprint_r+0x94>
 800c136:	6921      	ldr	r1, [r4, #16]
 800c138:	4648      	mov	r0, r9
 800c13a:	f7fe fd81 	bl	800ac40 <_free_r>
 800c13e:	e7b3      	b.n	800c0a8 <__ssprint_r+0x58>

0800c140 <sysconf>:
 800c140:	2808      	cmp	r0, #8
 800c142:	b508      	push	{r3, lr}
 800c144:	d006      	beq.n	800c154 <sysconf+0x14>
 800c146:	f7fa ffb1 	bl	80070ac <__errno>
 800c14a:	2316      	movs	r3, #22
 800c14c:	6003      	str	r3, [r0, #0]
 800c14e:	f04f 30ff 	mov.w	r0, #4294967295
 800c152:	bd08      	pop	{r3, pc}
 800c154:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c158:	e7fb      	b.n	800c152 <sysconf+0x12>

0800c15a <__sprint_r>:
 800c15a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c15e:	6893      	ldr	r3, [r2, #8]
 800c160:	4680      	mov	r8, r0
 800c162:	460f      	mov	r7, r1
 800c164:	4614      	mov	r4, r2
 800c166:	b91b      	cbnz	r3, 800c170 <__sprint_r+0x16>
 800c168:	4618      	mov	r0, r3
 800c16a:	6053      	str	r3, [r2, #4]
 800c16c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c170:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800c172:	049d      	lsls	r5, r3, #18
 800c174:	d520      	bpl.n	800c1b8 <__sprint_r+0x5e>
 800c176:	6815      	ldr	r5, [r2, #0]
 800c178:	68a0      	ldr	r0, [r4, #8]
 800c17a:	3508      	adds	r5, #8
 800c17c:	b918      	cbnz	r0, 800c186 <__sprint_r+0x2c>
 800c17e:	2300      	movs	r3, #0
 800c180:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800c184:	e7f2      	b.n	800c16c <__sprint_r+0x12>
 800c186:	f04f 0900 	mov.w	r9, #0
 800c18a:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800c18e:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800c192:	45ca      	cmp	sl, r9
 800c194:	dc05      	bgt.n	800c1a2 <__sprint_r+0x48>
 800c196:	68a3      	ldr	r3, [r4, #8]
 800c198:	f026 0603 	bic.w	r6, r6, #3
 800c19c:	1b9e      	subs	r6, r3, r6
 800c19e:	60a6      	str	r6, [r4, #8]
 800c1a0:	e7ea      	b.n	800c178 <__sprint_r+0x1e>
 800c1a2:	463a      	mov	r2, r7
 800c1a4:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800c1a8:	4640      	mov	r0, r8
 800c1aa:	f000 f947 	bl	800c43c <_fputwc_r>
 800c1ae:	1c43      	adds	r3, r0, #1
 800c1b0:	d0e5      	beq.n	800c17e <__sprint_r+0x24>
 800c1b2:	f109 0901 	add.w	r9, r9, #1
 800c1b6:	e7ec      	b.n	800c192 <__sprint_r+0x38>
 800c1b8:	f7fe fdfe 	bl	800adb8 <__sfvwrite_r>
 800c1bc:	e7df      	b.n	800c17e <__sprint_r+0x24>
	...

0800c1c0 <_write_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	4605      	mov	r5, r0
 800c1c4:	4608      	mov	r0, r1
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	4c05      	ldr	r4, [pc, #20]	; (800c1e0 <_write_r+0x20>)
 800c1cc:	6022      	str	r2, [r4, #0]
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	f7f4 ff60 	bl	8001094 <_write>
 800c1d4:	1c43      	adds	r3, r0, #1
 800c1d6:	d102      	bne.n	800c1de <_write_r+0x1e>
 800c1d8:	6823      	ldr	r3, [r4, #0]
 800c1da:	b103      	cbz	r3, 800c1de <_write_r+0x1e>
 800c1dc:	602b      	str	r3, [r5, #0]
 800c1de:	bd38      	pop	{r3, r4, r5, pc}
 800c1e0:	200021c8 	.word	0x200021c8

0800c1e4 <__register_exitproc>:
 800c1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1e8:	4c26      	ldr	r4, [pc, #152]	; (800c284 <__register_exitproc+0xa0>)
 800c1ea:	4606      	mov	r6, r0
 800c1ec:	6820      	ldr	r0, [r4, #0]
 800c1ee:	4698      	mov	r8, r3
 800c1f0:	460f      	mov	r7, r1
 800c1f2:	4691      	mov	r9, r2
 800c1f4:	f7fe ff5c 	bl	800b0b0 <__retarget_lock_acquire_recursive>
 800c1f8:	4b23      	ldr	r3, [pc, #140]	; (800c288 <__register_exitproc+0xa4>)
 800c1fa:	681d      	ldr	r5, [r3, #0]
 800c1fc:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800c200:	b918      	cbnz	r0, 800c20a <__register_exitproc+0x26>
 800c202:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800c206:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800c20a:	6843      	ldr	r3, [r0, #4]
 800c20c:	2b1f      	cmp	r3, #31
 800c20e:	dd19      	ble.n	800c244 <__register_exitproc+0x60>
 800c210:	4b1e      	ldr	r3, [pc, #120]	; (800c28c <__register_exitproc+0xa8>)
 800c212:	b933      	cbnz	r3, 800c222 <__register_exitproc+0x3e>
 800c214:	6820      	ldr	r0, [r4, #0]
 800c216:	f7fe ff4c 	bl	800b0b2 <__retarget_lock_release_recursive>
 800c21a:	f04f 30ff 	mov.w	r0, #4294967295
 800c21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c222:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c226:	f3af 8000 	nop.w
 800c22a:	2800      	cmp	r0, #0
 800c22c:	d0f2      	beq.n	800c214 <__register_exitproc+0x30>
 800c22e:	2200      	movs	r2, #0
 800c230:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800c234:	6042      	str	r2, [r0, #4]
 800c236:	6003      	str	r3, [r0, #0]
 800c238:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800c23c:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800c240:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800c244:	6843      	ldr	r3, [r0, #4]
 800c246:	b19e      	cbz	r6, 800c270 <__register_exitproc+0x8c>
 800c248:	2201      	movs	r2, #1
 800c24a:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800c24e:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800c252:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800c256:	409a      	lsls	r2, r3
 800c258:	4311      	orrs	r1, r2
 800c25a:	2e02      	cmp	r6, #2
 800c25c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800c260:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800c264:	bf02      	ittt	eq
 800c266:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800c26a:	430a      	orreq	r2, r1
 800c26c:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800c270:	1c5a      	adds	r2, r3, #1
 800c272:	3302      	adds	r3, #2
 800c274:	6042      	str	r2, [r0, #4]
 800c276:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800c27a:	6820      	ldr	r0, [r4, #0]
 800c27c:	f7fe ff19 	bl	800b0b2 <__retarget_lock_release_recursive>
 800c280:	2000      	movs	r0, #0
 800c282:	e7cc      	b.n	800c21e <__register_exitproc+0x3a>
 800c284:	20000714 	.word	0x20000714
 800c288:	0800c760 	.word	0x0800c760
 800c28c:	00000000 	.word	0x00000000

0800c290 <_calloc_r>:
 800c290:	b510      	push	{r4, lr}
 800c292:	4351      	muls	r1, r2
 800c294:	f7fe ff7a 	bl	800b18c <_malloc_r>
 800c298:	4604      	mov	r4, r0
 800c29a:	b198      	cbz	r0, 800c2c4 <_calloc_r+0x34>
 800c29c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c2a0:	f022 0203 	bic.w	r2, r2, #3
 800c2a4:	3a04      	subs	r2, #4
 800c2a6:	2a24      	cmp	r2, #36	; 0x24
 800c2a8:	d81b      	bhi.n	800c2e2 <_calloc_r+0x52>
 800c2aa:	2a13      	cmp	r2, #19
 800c2ac:	d917      	bls.n	800c2de <_calloc_r+0x4e>
 800c2ae:	2100      	movs	r1, #0
 800c2b0:	2a1b      	cmp	r2, #27
 800c2b2:	e9c0 1100 	strd	r1, r1, [r0]
 800c2b6:	d807      	bhi.n	800c2c8 <_calloc_r+0x38>
 800c2b8:	f100 0308 	add.w	r3, r0, #8
 800c2bc:	2200      	movs	r2, #0
 800c2be:	e9c3 2200 	strd	r2, r2, [r3]
 800c2c2:	609a      	str	r2, [r3, #8]
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	bd10      	pop	{r4, pc}
 800c2c8:	2a24      	cmp	r2, #36	; 0x24
 800c2ca:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800c2ce:	bf11      	iteee	ne
 800c2d0:	f100 0310 	addne.w	r3, r0, #16
 800c2d4:	6101      	streq	r1, [r0, #16]
 800c2d6:	f100 0318 	addeq.w	r3, r0, #24
 800c2da:	6141      	streq	r1, [r0, #20]
 800c2dc:	e7ee      	b.n	800c2bc <_calloc_r+0x2c>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	e7ec      	b.n	800c2bc <_calloc_r+0x2c>
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	f7fa ff37 	bl	8007156 <memset>
 800c2e8:	e7ec      	b.n	800c2c4 <_calloc_r+0x34>
	...

0800c2ec <_close_r>:
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	4c05      	ldr	r4, [pc, #20]	; (800c308 <_close_r+0x1c>)
 800c2f2:	4605      	mov	r5, r0
 800c2f4:	4608      	mov	r0, r1
 800c2f6:	6023      	str	r3, [r4, #0]
 800c2f8:	f7f5 f899 	bl	800142e <_close>
 800c2fc:	1c43      	adds	r3, r0, #1
 800c2fe:	d102      	bne.n	800c306 <_close_r+0x1a>
 800c300:	6823      	ldr	r3, [r4, #0]
 800c302:	b103      	cbz	r3, 800c306 <_close_r+0x1a>
 800c304:	602b      	str	r3, [r5, #0]
 800c306:	bd38      	pop	{r3, r4, r5, pc}
 800c308:	200021c8 	.word	0x200021c8

0800c30c <_fclose_r>:
 800c30c:	b570      	push	{r4, r5, r6, lr}
 800c30e:	4606      	mov	r6, r0
 800c310:	460c      	mov	r4, r1
 800c312:	b911      	cbnz	r1, 800c31a <_fclose_r+0xe>
 800c314:	2500      	movs	r5, #0
 800c316:	4628      	mov	r0, r5
 800c318:	bd70      	pop	{r4, r5, r6, pc}
 800c31a:	b118      	cbz	r0, 800c324 <_fclose_r+0x18>
 800c31c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c31e:	b90b      	cbnz	r3, 800c324 <_fclose_r+0x18>
 800c320:	f7fe fbfe 	bl	800ab20 <__sinit>
 800c324:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c326:	07d8      	lsls	r0, r3, #31
 800c328:	d405      	bmi.n	800c336 <_fclose_r+0x2a>
 800c32a:	89a3      	ldrh	r3, [r4, #12]
 800c32c:	0599      	lsls	r1, r3, #22
 800c32e:	d402      	bmi.n	800c336 <_fclose_r+0x2a>
 800c330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c332:	f7fe febd 	bl	800b0b0 <__retarget_lock_acquire_recursive>
 800c336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c33a:	b93b      	cbnz	r3, 800c34c <_fclose_r+0x40>
 800c33c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800c33e:	f015 0501 	ands.w	r5, r5, #1
 800c342:	d1e7      	bne.n	800c314 <_fclose_r+0x8>
 800c344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c346:	f7fe feb4 	bl	800b0b2 <__retarget_lock_release_recursive>
 800c34a:	e7e4      	b.n	800c316 <_fclose_r+0xa>
 800c34c:	4621      	mov	r1, r4
 800c34e:	4630      	mov	r0, r6
 800c350:	f7fe faec 	bl	800a92c <__sflush_r>
 800c354:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c356:	4605      	mov	r5, r0
 800c358:	b133      	cbz	r3, 800c368 <_fclose_r+0x5c>
 800c35a:	69e1      	ldr	r1, [r4, #28]
 800c35c:	4630      	mov	r0, r6
 800c35e:	4798      	blx	r3
 800c360:	2800      	cmp	r0, #0
 800c362:	bfb8      	it	lt
 800c364:	f04f 35ff 	movlt.w	r5, #4294967295
 800c368:	89a3      	ldrh	r3, [r4, #12]
 800c36a:	061a      	lsls	r2, r3, #24
 800c36c:	d503      	bpl.n	800c376 <_fclose_r+0x6a>
 800c36e:	6921      	ldr	r1, [r4, #16]
 800c370:	4630      	mov	r0, r6
 800c372:	f7fe fc65 	bl	800ac40 <_free_r>
 800c376:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c378:	b141      	cbz	r1, 800c38c <_fclose_r+0x80>
 800c37a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c37e:	4299      	cmp	r1, r3
 800c380:	d002      	beq.n	800c388 <_fclose_r+0x7c>
 800c382:	4630      	mov	r0, r6
 800c384:	f7fe fc5c 	bl	800ac40 <_free_r>
 800c388:	2300      	movs	r3, #0
 800c38a:	6323      	str	r3, [r4, #48]	; 0x30
 800c38c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c38e:	b121      	cbz	r1, 800c39a <_fclose_r+0x8e>
 800c390:	4630      	mov	r0, r6
 800c392:	f7fe fc55 	bl	800ac40 <_free_r>
 800c396:	2300      	movs	r3, #0
 800c398:	6463      	str	r3, [r4, #68]	; 0x44
 800c39a:	f7fe fba9 	bl	800aaf0 <__sfp_lock_acquire>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	81a3      	strh	r3, [r4, #12]
 800c3a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3a4:	07db      	lsls	r3, r3, #31
 800c3a6:	d402      	bmi.n	800c3ae <_fclose_r+0xa2>
 800c3a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3aa:	f7fe fe82 	bl	800b0b2 <__retarget_lock_release_recursive>
 800c3ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3b0:	f7fe fe7d 	bl	800b0ae <__retarget_lock_close_recursive>
 800c3b4:	f7fe fba2 	bl	800aafc <__sfp_lock_release>
 800c3b8:	e7ad      	b.n	800c316 <_fclose_r+0xa>

0800c3ba <__fputwc>:
 800c3ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3be:	4680      	mov	r8, r0
 800c3c0:	460e      	mov	r6, r1
 800c3c2:	4614      	mov	r4, r2
 800c3c4:	f7fa fe9c 	bl	8007100 <__locale_mb_cur_max>
 800c3c8:	2801      	cmp	r0, #1
 800c3ca:	d11c      	bne.n	800c406 <__fputwc+0x4c>
 800c3cc:	1e73      	subs	r3, r6, #1
 800c3ce:	2bfe      	cmp	r3, #254	; 0xfe
 800c3d0:	d819      	bhi.n	800c406 <__fputwc+0x4c>
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	f88d 6004 	strb.w	r6, [sp, #4]
 800c3d8:	2700      	movs	r7, #0
 800c3da:	f10d 0904 	add.w	r9, sp, #4
 800c3de:	42af      	cmp	r7, r5
 800c3e0:	d020      	beq.n	800c424 <__fputwc+0x6a>
 800c3e2:	68a3      	ldr	r3, [r4, #8]
 800c3e4:	f817 1009 	ldrb.w	r1, [r7, r9]
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	60a3      	str	r3, [r4, #8]
 800c3ee:	da04      	bge.n	800c3fa <__fputwc+0x40>
 800c3f0:	69a2      	ldr	r2, [r4, #24]
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	db1a      	blt.n	800c42c <__fputwc+0x72>
 800c3f6:	290a      	cmp	r1, #10
 800c3f8:	d018      	beq.n	800c42c <__fputwc+0x72>
 800c3fa:	6823      	ldr	r3, [r4, #0]
 800c3fc:	1c5a      	adds	r2, r3, #1
 800c3fe:	6022      	str	r2, [r4, #0]
 800c400:	7019      	strb	r1, [r3, #0]
 800c402:	3701      	adds	r7, #1
 800c404:	e7eb      	b.n	800c3de <__fputwc+0x24>
 800c406:	4632      	mov	r2, r6
 800c408:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800c40c:	a901      	add	r1, sp, #4
 800c40e:	4640      	mov	r0, r8
 800c410:	f000 f8ce 	bl	800c5b0 <_wcrtomb_r>
 800c414:	1c42      	adds	r2, r0, #1
 800c416:	4605      	mov	r5, r0
 800c418:	d1de      	bne.n	800c3d8 <__fputwc+0x1e>
 800c41a:	4606      	mov	r6, r0
 800c41c:	89a3      	ldrh	r3, [r4, #12]
 800c41e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c422:	81a3      	strh	r3, [r4, #12]
 800c424:	4630      	mov	r0, r6
 800c426:	b003      	add	sp, #12
 800c428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c42c:	4622      	mov	r2, r4
 800c42e:	4640      	mov	r0, r8
 800c430:	f000 f874 	bl	800c51c <__swbuf_r>
 800c434:	1c43      	adds	r3, r0, #1
 800c436:	d1e4      	bne.n	800c402 <__fputwc+0x48>
 800c438:	4606      	mov	r6, r0
 800c43a:	e7f3      	b.n	800c424 <__fputwc+0x6a>

0800c43c <_fputwc_r>:
 800c43c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800c43e:	b570      	push	{r4, r5, r6, lr}
 800c440:	07db      	lsls	r3, r3, #31
 800c442:	4605      	mov	r5, r0
 800c444:	460e      	mov	r6, r1
 800c446:	4614      	mov	r4, r2
 800c448:	d405      	bmi.n	800c456 <_fputwc_r+0x1a>
 800c44a:	8993      	ldrh	r3, [r2, #12]
 800c44c:	0598      	lsls	r0, r3, #22
 800c44e:	d402      	bmi.n	800c456 <_fputwc_r+0x1a>
 800c450:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800c452:	f7fe fe2d 	bl	800b0b0 <__retarget_lock_acquire_recursive>
 800c456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c45a:	0499      	lsls	r1, r3, #18
 800c45c:	d406      	bmi.n	800c46c <_fputwc_r+0x30>
 800c45e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c462:	81a3      	strh	r3, [r4, #12]
 800c464:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c466:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c46a:	6663      	str	r3, [r4, #100]	; 0x64
 800c46c:	4622      	mov	r2, r4
 800c46e:	4628      	mov	r0, r5
 800c470:	4631      	mov	r1, r6
 800c472:	f7ff ffa2 	bl	800c3ba <__fputwc>
 800c476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c478:	4605      	mov	r5, r0
 800c47a:	07da      	lsls	r2, r3, #31
 800c47c:	d405      	bmi.n	800c48a <_fputwc_r+0x4e>
 800c47e:	89a3      	ldrh	r3, [r4, #12]
 800c480:	059b      	lsls	r3, r3, #22
 800c482:	d402      	bmi.n	800c48a <_fputwc_r+0x4e>
 800c484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c486:	f7fe fe14 	bl	800b0b2 <__retarget_lock_release_recursive>
 800c48a:	4628      	mov	r0, r5
 800c48c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c490 <_fstat_r>:
 800c490:	b538      	push	{r3, r4, r5, lr}
 800c492:	2300      	movs	r3, #0
 800c494:	4c06      	ldr	r4, [pc, #24]	; (800c4b0 <_fstat_r+0x20>)
 800c496:	4605      	mov	r5, r0
 800c498:	4608      	mov	r0, r1
 800c49a:	4611      	mov	r1, r2
 800c49c:	6023      	str	r3, [r4, #0]
 800c49e:	f7f4 ffd1 	bl	8001444 <_fstat>
 800c4a2:	1c43      	adds	r3, r0, #1
 800c4a4:	d102      	bne.n	800c4ac <_fstat_r+0x1c>
 800c4a6:	6823      	ldr	r3, [r4, #0]
 800c4a8:	b103      	cbz	r3, 800c4ac <_fstat_r+0x1c>
 800c4aa:	602b      	str	r3, [r5, #0]
 800c4ac:	bd38      	pop	{r3, r4, r5, pc}
 800c4ae:	bf00      	nop
 800c4b0:	200021c8 	.word	0x200021c8

0800c4b4 <_isatty_r>:
 800c4b4:	b538      	push	{r3, r4, r5, lr}
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	4c05      	ldr	r4, [pc, #20]	; (800c4d0 <_isatty_r+0x1c>)
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	4608      	mov	r0, r1
 800c4be:	6023      	str	r3, [r4, #0]
 800c4c0:	f7f4 ffcf 	bl	8001462 <_isatty>
 800c4c4:	1c43      	adds	r3, r0, #1
 800c4c6:	d102      	bne.n	800c4ce <_isatty_r+0x1a>
 800c4c8:	6823      	ldr	r3, [r4, #0]
 800c4ca:	b103      	cbz	r3, 800c4ce <_isatty_r+0x1a>
 800c4cc:	602b      	str	r3, [r5, #0]
 800c4ce:	bd38      	pop	{r3, r4, r5, pc}
 800c4d0:	200021c8 	.word	0x200021c8

0800c4d4 <_lseek_r>:
 800c4d4:	b538      	push	{r3, r4, r5, lr}
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	4608      	mov	r0, r1
 800c4da:	4611      	mov	r1, r2
 800c4dc:	2200      	movs	r2, #0
 800c4de:	4c05      	ldr	r4, [pc, #20]	; (800c4f4 <_lseek_r+0x20>)
 800c4e0:	6022      	str	r2, [r4, #0]
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	f7f4 ffc7 	bl	8001476 <_lseek>
 800c4e8:	1c43      	adds	r3, r0, #1
 800c4ea:	d102      	bne.n	800c4f2 <_lseek_r+0x1e>
 800c4ec:	6823      	ldr	r3, [r4, #0]
 800c4ee:	b103      	cbz	r3, 800c4f2 <_lseek_r+0x1e>
 800c4f0:	602b      	str	r3, [r5, #0]
 800c4f2:	bd38      	pop	{r3, r4, r5, pc}
 800c4f4:	200021c8 	.word	0x200021c8

0800c4f8 <_read_r>:
 800c4f8:	b538      	push	{r3, r4, r5, lr}
 800c4fa:	4605      	mov	r5, r0
 800c4fc:	4608      	mov	r0, r1
 800c4fe:	4611      	mov	r1, r2
 800c500:	2200      	movs	r2, #0
 800c502:	4c05      	ldr	r4, [pc, #20]	; (800c518 <_read_r+0x20>)
 800c504:	6022      	str	r2, [r4, #0]
 800c506:	461a      	mov	r2, r3
 800c508:	f7f4 ff74 	bl	80013f4 <_read>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d102      	bne.n	800c516 <_read_r+0x1e>
 800c510:	6823      	ldr	r3, [r4, #0]
 800c512:	b103      	cbz	r3, 800c516 <_read_r+0x1e>
 800c514:	602b      	str	r3, [r5, #0]
 800c516:	bd38      	pop	{r3, r4, r5, pc}
 800c518:	200021c8 	.word	0x200021c8

0800c51c <__swbuf_r>:
 800c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c51e:	460d      	mov	r5, r1
 800c520:	4614      	mov	r4, r2
 800c522:	4606      	mov	r6, r0
 800c524:	b118      	cbz	r0, 800c52e <__swbuf_r+0x12>
 800c526:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c528:	b90b      	cbnz	r3, 800c52e <__swbuf_r+0x12>
 800c52a:	f7fe faf9 	bl	800ab20 <__sinit>
 800c52e:	69a3      	ldr	r3, [r4, #24]
 800c530:	60a3      	str	r3, [r4, #8]
 800c532:	89a3      	ldrh	r3, [r4, #12]
 800c534:	0719      	lsls	r1, r3, #28
 800c536:	d528      	bpl.n	800c58a <__swbuf_r+0x6e>
 800c538:	6923      	ldr	r3, [r4, #16]
 800c53a:	b333      	cbz	r3, 800c58a <__swbuf_r+0x6e>
 800c53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c540:	b2ed      	uxtb	r5, r5
 800c542:	049a      	lsls	r2, r3, #18
 800c544:	462f      	mov	r7, r5
 800c546:	d52a      	bpl.n	800c59e <__swbuf_r+0x82>
 800c548:	6923      	ldr	r3, [r4, #16]
 800c54a:	6820      	ldr	r0, [r4, #0]
 800c54c:	1ac0      	subs	r0, r0, r3
 800c54e:	6963      	ldr	r3, [r4, #20]
 800c550:	4283      	cmp	r3, r0
 800c552:	dc04      	bgt.n	800c55e <__swbuf_r+0x42>
 800c554:	4621      	mov	r1, r4
 800c556:	4630      	mov	r0, r6
 800c558:	f7fe fa76 	bl	800aa48 <_fflush_r>
 800c55c:	b9d8      	cbnz	r0, 800c596 <__swbuf_r+0x7a>
 800c55e:	68a3      	ldr	r3, [r4, #8]
 800c560:	3001      	adds	r0, #1
 800c562:	3b01      	subs	r3, #1
 800c564:	60a3      	str	r3, [r4, #8]
 800c566:	6823      	ldr	r3, [r4, #0]
 800c568:	1c5a      	adds	r2, r3, #1
 800c56a:	6022      	str	r2, [r4, #0]
 800c56c:	701d      	strb	r5, [r3, #0]
 800c56e:	6963      	ldr	r3, [r4, #20]
 800c570:	4283      	cmp	r3, r0
 800c572:	d004      	beq.n	800c57e <__swbuf_r+0x62>
 800c574:	89a3      	ldrh	r3, [r4, #12]
 800c576:	07db      	lsls	r3, r3, #31
 800c578:	d50f      	bpl.n	800c59a <__swbuf_r+0x7e>
 800c57a:	2d0a      	cmp	r5, #10
 800c57c:	d10d      	bne.n	800c59a <__swbuf_r+0x7e>
 800c57e:	4621      	mov	r1, r4
 800c580:	4630      	mov	r0, r6
 800c582:	f7fe fa61 	bl	800aa48 <_fflush_r>
 800c586:	b140      	cbz	r0, 800c59a <__swbuf_r+0x7e>
 800c588:	e005      	b.n	800c596 <__swbuf_r+0x7a>
 800c58a:	4621      	mov	r1, r4
 800c58c:	4630      	mov	r0, r6
 800c58e:	f7fd fb33 	bl	8009bf8 <__swsetup_r>
 800c592:	2800      	cmp	r0, #0
 800c594:	d0d2      	beq.n	800c53c <__swbuf_r+0x20>
 800c596:	f04f 37ff 	mov.w	r7, #4294967295
 800c59a:	4638      	mov	r0, r7
 800c59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c59e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c5a2:	81a3      	strh	r3, [r4, #12]
 800c5a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5aa:	6663      	str	r3, [r4, #100]	; 0x64
 800c5ac:	e7cc      	b.n	800c548 <__swbuf_r+0x2c>
	...

0800c5b0 <_wcrtomb_r>:
 800c5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5b2:	4c0f      	ldr	r4, [pc, #60]	; (800c5f0 <_wcrtomb_r+0x40>)
 800c5b4:	b085      	sub	sp, #20
 800c5b6:	6824      	ldr	r4, [r4, #0]
 800c5b8:	4605      	mov	r5, r0
 800c5ba:	461e      	mov	r6, r3
 800c5bc:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800c5be:	b981      	cbnz	r1, 800c5e2 <_wcrtomb_r+0x32>
 800c5c0:	4a0c      	ldr	r2, [pc, #48]	; (800c5f4 <_wcrtomb_r+0x44>)
 800c5c2:	2c00      	cmp	r4, #0
 800c5c4:	bf08      	it	eq
 800c5c6:	4614      	moveq	r4, r2
 800c5c8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800c5cc:	460a      	mov	r2, r1
 800c5ce:	a901      	add	r1, sp, #4
 800c5d0:	47a0      	blx	r4
 800c5d2:	1c43      	adds	r3, r0, #1
 800c5d4:	bf01      	itttt	eq
 800c5d6:	2300      	moveq	r3, #0
 800c5d8:	6033      	streq	r3, [r6, #0]
 800c5da:	238a      	moveq	r3, #138	; 0x8a
 800c5dc:	602b      	streq	r3, [r5, #0]
 800c5de:	b005      	add	sp, #20
 800c5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5e2:	4f04      	ldr	r7, [pc, #16]	; (800c5f4 <_wcrtomb_r+0x44>)
 800c5e4:	2c00      	cmp	r4, #0
 800c5e6:	bf08      	it	eq
 800c5e8:	463c      	moveq	r4, r7
 800c5ea:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800c5ee:	e7ef      	b.n	800c5d0 <_wcrtomb_r+0x20>
 800c5f0:	2000017c 	.word	0x2000017c
 800c5f4:	200005a8 	.word	0x200005a8

0800c5f8 <_init>:
 800c5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fa:	bf00      	nop
 800c5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5fe:	bc08      	pop	{r3}
 800c600:	469e      	mov	lr, r3
 800c602:	4770      	bx	lr

0800c604 <_fini>:
 800c604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c606:	bf00      	nop
 800c608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c60a:	bc08      	pop	{r3}
 800c60c:	469e      	mov	lr, r3
 800c60e:	4770      	bx	lr
