
MBMS200711.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c468  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800c578  0800c578  0001c578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca34  0800ca34  00020b28  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca34  0800ca34  0001ca34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca3c  0800ca3c  00020b28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ca3c  0800ca3c  0001ca3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca44  0800ca44  0001ca44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b28  20000000  0800ca48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000182c  20000b28  0800d570  00020b28  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002354  0800d570  00022354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020b28  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f16  00000000  00000000  00020b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003610  00000000  00000000  00035a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e38  00000000  00000000  00039078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c90  00000000  00000000  00039eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017d79  00000000  00000000  0003ab40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ddbd  00000000  00000000  000528b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00070b26  00000000  00000000  00060676  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d119c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a48  00000000  00000000  000d1218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000b28 	.word	0x20000b28
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c560 	.word	0x0800c560

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000b2c 	.word	0x20000b2c
 800014c:	0800c560 	.word	0x0800c560

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9c:	f000 b974 	b.w	8000d88 <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	468c      	mov	ip, r1
 8000abe:	4604      	mov	r4, r0
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d14b      	bne.n	8000b5e <__udivmoddi4+0xa6>
 8000ac6:	428a      	cmp	r2, r1
 8000ac8:	4615      	mov	r5, r2
 8000aca:	d967      	bls.n	8000b9c <__udivmoddi4+0xe4>
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	b14a      	cbz	r2, 8000ae6 <__udivmoddi4+0x2e>
 8000ad2:	f1c2 0720 	rsb	r7, r2, #32
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	fa20 f707 	lsr.w	r7, r0, r7
 8000ade:	4095      	lsls	r5, r2
 8000ae0:	ea47 0c03 	orr.w	ip, r7, r3
 8000ae4:	4094      	lsls	r4, r2
 8000ae6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aea:	fbbc f7fe 	udiv	r7, ip, lr
 8000aee:	fa1f f885 	uxth.w	r8, r5
 8000af2:	fb0e c317 	mls	r3, lr, r7, ip
 8000af6:	fb07 f908 	mul.w	r9, r7, r8
 8000afa:	0c21      	lsrs	r1, r4, #16
 8000afc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b00:	4599      	cmp	r9, r3
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x60>
 8000b04:	18eb      	adds	r3, r5, r3
 8000b06:	f107 31ff 	add.w	r1, r7, #4294967295
 8000b0a:	f080 811c 	bcs.w	8000d46 <__udivmoddi4+0x28e>
 8000b0e:	4599      	cmp	r9, r3
 8000b10:	f240 8119 	bls.w	8000d46 <__udivmoddi4+0x28e>
 8000b14:	3f02      	subs	r7, #2
 8000b16:	442b      	add	r3, r5
 8000b18:	eba3 0309 	sub.w	r3, r3, r9
 8000b1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b24:	fb00 f108 	mul.w	r1, r0, r8
 8000b28:	b2a4      	uxth	r4, r4
 8000b2a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2e:	42a1      	cmp	r1, r4
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0x8e>
 8000b32:	192c      	adds	r4, r5, r4
 8000b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b38:	f080 8107 	bcs.w	8000d4a <__udivmoddi4+0x292>
 8000b3c:	42a1      	cmp	r1, r4
 8000b3e:	f240 8104 	bls.w	8000d4a <__udivmoddi4+0x292>
 8000b42:	3802      	subs	r0, #2
 8000b44:	442c      	add	r4, r5
 8000b46:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4a:	2700      	movs	r7, #0
 8000b4c:	1a64      	subs	r4, r4, r1
 8000b4e:	b11e      	cbz	r6, 8000b58 <__udivmoddi4+0xa0>
 8000b50:	2300      	movs	r3, #0
 8000b52:	40d4      	lsrs	r4, r2
 8000b54:	e9c6 4300 	strd	r4, r3, [r6]
 8000b58:	4639      	mov	r1, r7
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0xbe>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f000 80ec 	beq.w	8000d40 <__udivmoddi4+0x288>
 8000b68:	2700      	movs	r7, #0
 8000b6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000b6e:	4638      	mov	r0, r7
 8000b70:	4639      	mov	r1, r7
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f783 	clz	r7, r3
 8000b7a:	2f00      	cmp	r7, #0
 8000b7c:	d148      	bne.n	8000c10 <__udivmoddi4+0x158>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xd0>
 8000b82:	4282      	cmp	r2, r0
 8000b84:	f200 80fb 	bhi.w	8000d7e <__udivmoddi4+0x2c6>
 8000b88:	1a84      	subs	r4, r0, r2
 8000b8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	469c      	mov	ip, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d0e0      	beq.n	8000b58 <__udivmoddi4+0xa0>
 8000b96:	e9c6 4c00 	strd	r4, ip, [r6]
 8000b9a:	e7dd      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000b9c:	b902      	cbnz	r2, 8000ba0 <__udivmoddi4+0xe8>
 8000b9e:	deff      	udf	#255	; 0xff
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	f040 808f 	bne.w	8000cc8 <__udivmoddi4+0x210>
 8000baa:	2701      	movs	r7, #1
 8000bac:	1b49      	subs	r1, r1, r5
 8000bae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bb2:	fa1f f985 	uxth.w	r9, r5
 8000bb6:	fbb1 fef8 	udiv	lr, r1, r8
 8000bba:	fb08 111e 	mls	r1, r8, lr, r1
 8000bbe:	fb09 f00e 	mul.w	r0, r9, lr
 8000bc2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000bc6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d907      	bls.n	8000bde <__udivmoddi4+0x126>
 8000bce:	18eb      	adds	r3, r5, r3
 8000bd0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000bd4:	d202      	bcs.n	8000bdc <__udivmoddi4+0x124>
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	f200 80cd 	bhi.w	8000d76 <__udivmoddi4+0x2be>
 8000bdc:	468e      	mov	lr, r1
 8000bde:	1a1b      	subs	r3, r3, r0
 8000be0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be4:	fb08 3310 	mls	r3, r8, r0, r3
 8000be8:	fb09 f900 	mul.w	r9, r9, r0
 8000bec:	b2a4      	uxth	r4, r4
 8000bee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf2:	45a1      	cmp	r9, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x14e>
 8000bf6:	192c      	adds	r4, r5, r4
 8000bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfc:	d202      	bcs.n	8000c04 <__udivmoddi4+0x14c>
 8000bfe:	45a1      	cmp	r9, r4
 8000c00:	f200 80b6 	bhi.w	8000d70 <__udivmoddi4+0x2b8>
 8000c04:	4618      	mov	r0, r3
 8000c06:	eba4 0409 	sub.w	r4, r4, r9
 8000c0a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c0e:	e79e      	b.n	8000b4e <__udivmoddi4+0x96>
 8000c10:	f1c7 0520 	rsb	r5, r7, #32
 8000c14:	40bb      	lsls	r3, r7
 8000c16:	fa22 fc05 	lsr.w	ip, r2, r5
 8000c1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1e:	fa21 f405 	lsr.w	r4, r1, r5
 8000c22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c26:	fbb4 f9fe 	udiv	r9, r4, lr
 8000c2a:	fa1f f88c 	uxth.w	r8, ip
 8000c2e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000c32:	fa20 f305 	lsr.w	r3, r0, r5
 8000c36:	40b9      	lsls	r1, r7
 8000c38:	fb09 fa08 	mul.w	sl, r9, r8
 8000c3c:	4319      	orrs	r1, r3
 8000c3e:	0c0b      	lsrs	r3, r1, #16
 8000c40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c44:	45a2      	cmp	sl, r4
 8000c46:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4a:	fa00 f307 	lsl.w	r3, r0, r7
 8000c4e:	d90b      	bls.n	8000c68 <__udivmoddi4+0x1b0>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c58:	f080 8088 	bcs.w	8000d6c <__udivmoddi4+0x2b4>
 8000c5c:	45a2      	cmp	sl, r4
 8000c5e:	f240 8085 	bls.w	8000d6c <__udivmoddi4+0x2b4>
 8000c62:	f1a9 0902 	sub.w	r9, r9, #2
 8000c66:	4464      	add	r4, ip
 8000c68:	eba4 040a 	sub.w	r4, r4, sl
 8000c6c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000c70:	fb0e 4410 	mls	r4, lr, r0, r4
 8000c74:	fb00 fa08 	mul.w	sl, r0, r8
 8000c78:	b289      	uxth	r1, r1
 8000c7a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000c7e:	45a2      	cmp	sl, r4
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x1dc>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8a:	d26b      	bcs.n	8000d64 <__udivmoddi4+0x2ac>
 8000c8c:	45a2      	cmp	sl, r4
 8000c8e:	d969      	bls.n	8000d64 <__udivmoddi4+0x2ac>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4464      	add	r4, ip
 8000c94:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c98:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9c:	eba4 040a 	sub.w	r4, r4, sl
 8000ca0:	454c      	cmp	r4, r9
 8000ca2:	4641      	mov	r1, r8
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	d354      	bcc.n	8000d52 <__udivmoddi4+0x29a>
 8000ca8:	d051      	beq.n	8000d4e <__udivmoddi4+0x296>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d069      	beq.n	8000d82 <__udivmoddi4+0x2ca>
 8000cae:	1a5a      	subs	r2, r3, r1
 8000cb0:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb4:	fa04 f505 	lsl.w	r5, r4, r5
 8000cb8:	fa22 f307 	lsr.w	r3, r2, r7
 8000cbc:	40fc      	lsrs	r4, r7
 8000cbe:	431d      	orrs	r5, r3
 8000cc0:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc4:	2700      	movs	r7, #0
 8000cc6:	e747      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000cc8:	4095      	lsls	r5, r2
 8000cca:	f1c2 0320 	rsb	r3, r2, #32
 8000cce:	fa21 f003 	lsr.w	r0, r1, r3
 8000cd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000cd6:	fbb0 f7f8 	udiv	r7, r0, r8
 8000cda:	fa1f f985 	uxth.w	r9, r5
 8000cde:	fb08 0017 	mls	r0, r8, r7, r0
 8000ce2:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fb07 fc09 	mul.w	ip, r7, r9
 8000cec:	430b      	orrs	r3, r1
 8000cee:	0c19      	lsrs	r1, r3, #16
 8000cf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf4:	458c      	cmp	ip, r1
 8000cf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x254>
 8000cfc:	1869      	adds	r1, r5, r1
 8000cfe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d02:	d231      	bcs.n	8000d68 <__udivmoddi4+0x2b0>
 8000d04:	458c      	cmp	ip, r1
 8000d06:	d92f      	bls.n	8000d68 <__udivmoddi4+0x2b0>
 8000d08:	3f02      	subs	r7, #2
 8000d0a:	4429      	add	r1, r5
 8000d0c:	eba1 010c 	sub.w	r1, r1, ip
 8000d10:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d14:	fb08 1c10 	mls	ip, r8, r0, r1
 8000d18:	fb00 fe09 	mul.w	lr, r0, r9
 8000d1c:	b299      	uxth	r1, r3
 8000d1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d22:	458e      	cmp	lr, r1
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x27e>
 8000d26:	1869      	adds	r1, r5, r1
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	d218      	bcs.n	8000d60 <__udivmoddi4+0x2a8>
 8000d2e:	458e      	cmp	lr, r1
 8000d30:	d916      	bls.n	8000d60 <__udivmoddi4+0x2a8>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4429      	add	r1, r5
 8000d36:	eba1 010e 	sub.w	r1, r1, lr
 8000d3a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d3e:	e73a      	b.n	8000bb6 <__udivmoddi4+0xfe>
 8000d40:	4637      	mov	r7, r6
 8000d42:	4630      	mov	r0, r6
 8000d44:	e708      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000d46:	460f      	mov	r7, r1
 8000d48:	e6e6      	b.n	8000b18 <__udivmoddi4+0x60>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	e6fb      	b.n	8000b46 <__udivmoddi4+0x8e>
 8000d4e:	4543      	cmp	r3, r8
 8000d50:	d2ab      	bcs.n	8000caa <__udivmoddi4+0x1f2>
 8000d52:	ebb8 0102 	subs.w	r1, r8, r2
 8000d56:	eb69 020c 	sbc.w	r2, r9, ip
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	4696      	mov	lr, r2
 8000d5e:	e7a4      	b.n	8000caa <__udivmoddi4+0x1f2>
 8000d60:	4618      	mov	r0, r3
 8000d62:	e7e8      	b.n	8000d36 <__udivmoddi4+0x27e>
 8000d64:	4608      	mov	r0, r1
 8000d66:	e795      	b.n	8000c94 <__udivmoddi4+0x1dc>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e7cf      	b.n	8000d0c <__udivmoddi4+0x254>
 8000d6c:	4681      	mov	r9, r0
 8000d6e:	e77b      	b.n	8000c68 <__udivmoddi4+0x1b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	e747      	b.n	8000c06 <__udivmoddi4+0x14e>
 8000d76:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7a:	442b      	add	r3, r5
 8000d7c:	e72f      	b.n	8000bde <__udivmoddi4+0x126>
 8000d7e:	4638      	mov	r0, r7
 8000d80:	e707      	b.n	8000b92 <__udivmoddi4+0xda>
 8000d82:	4637      	mov	r7, r6
 8000d84:	e6e8      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f000 fd78 	bl	8001884 <HAL_Init>

  /* USER CODE BEGIN Init */
  /*** LiveLed ***/
  hLiveLed.LedOffFnPtr = &LiveLedOff;
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <main+0xa8>)
 8000d96:	4a28      	ldr	r2, [pc, #160]	; (8000e38 <main+0xac>)
 8000d98:	609a      	str	r2, [r3, #8]
  hLiveLed.LedOnFnPtr = &LiveLedOn;
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <main+0xa8>)
 8000d9c:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <main+0xb0>)
 8000d9e:	605a      	str	r2, [r3, #4]
  hLiveLed.HalfPeriodTimeMs = 500;
 8000da0:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <main+0xa8>)
 8000da2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000da6:	601a      	str	r2, [r3, #0]
  LiveLedInit(&hLiveLed);
 8000da8:	4822      	ldr	r0, [pc, #136]	; (8000e34 <main+0xa8>)
 8000daa:	f000 fd25 	bl	80017f8 <LiveLedInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dae:	f000 f85d 	bl	8000e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db2:	f000 f8eb 	bl	8000f8c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000db6:	f000 f8b3 	bl	8000f20 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8000dba:	f005 fc3b 	bl	8006634 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  DelayMs(500);
 8000dbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc2:	f000 fd05 	bl	80017d0 <DelayMs>

  UsbPullUp();
 8000dc6:	f000 fb25 	bl	8001414 <UsbPullUp>


  printf(VT100_CLEARSCREEN);
 8000dca:	481d      	ldr	r0, [pc, #116]	; (8000e40 <main+0xb4>)
 8000dcc:	f006 f98a 	bl	80070e4 <printf>
  printf(VT100_CURSORHOME);
 8000dd0:	481c      	ldr	r0, [pc, #112]	; (8000e44 <main+0xb8>)
 8000dd2:	f006 f987 	bl	80070e4 <printf>
  printf(VT100_ATTR_RESET);
 8000dd6:	481c      	ldr	r0, [pc, #112]	; (8000e48 <main+0xbc>)
 8000dd8:	f006 f984 	bl	80070e4 <printf>

#ifdef DEBUG
  printf(VT100_ATTR_RED);
 8000ddc:	481b      	ldr	r0, [pc, #108]	; (8000e4c <main+0xc0>)
 8000dde:	f006 f981 	bl	80070e4 <printf>
    DeviceUsrLog("This is a DEBUG version.");
 8000de2:	481b      	ldr	r0, [pc, #108]	; (8000e50 <main+0xc4>)
 8000de4:	f006 f97e 	bl	80070e4 <printf>
 8000de8:	481a      	ldr	r0, [pc, #104]	; (8000e54 <main+0xc8>)
 8000dea:	f006 f9d3 	bl	8007194 <puts>
  printf(VT100_ATTR_RESET);
 8000dee:	4816      	ldr	r0, [pc, #88]	; (8000e48 <main+0xbc>)
 8000df0:	f006 f978 	bl	80070e4 <printf>
#endif

  DeviceUsrLog("Manufacturer:%s, Name:%s, Version:%04X",DEVICE_MNF, DEVICE_NAME, DEVICE_FW);
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <main+0xcc>)
 8000df6:	4a19      	ldr	r2, [pc, #100]	; (8000e5c <main+0xd0>)
 8000df8:	4919      	ldr	r1, [pc, #100]	; (8000e60 <main+0xd4>)
 8000dfa:	481a      	ldr	r0, [pc, #104]	; (8000e64 <main+0xd8>)
 8000dfc:	f006 f972 	bl	80070e4 <printf>
 8000e00:	4814      	ldr	r0, [pc, #80]	; (8000e54 <main+0xc8>)
 8000e02:	f006 f9c7 	bl	8007194 <puts>

AsciShutDown();
 8000e06:	f000 fae1 	bl	80013cc <AsciShutDown>
DelayMs(100);
 8000e0a:	2064      	movs	r0, #100	; 0x64
 8000e0c:	f000 fce0 	bl	80017d0 <DelayMs>
AsciWakeUp();
 8000e10:	f000 fad0 	bl	80013b4 <AsciWakeUp>
DelayMs(100);
 8000e14:	2064      	movs	r0, #100	; 0x64
 8000e16:	f000 fcdb 	bl	80017d0 <DelayMs>

UartRxTimestamp = HAL_GetTick();
 8000e1a:	f000 fd8b 	bl	8001934 <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <main+0xdc>)
 8000e22:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    LiveLedTask(&hLiveLed);
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <main+0xa8>)
 8000e26:	f000 fcfe 	bl	8001826 <LiveLedTask>
    CDC_Task_FS();
 8000e2a:	f005 fd23 	bl	8006874 <CDC_Task_FS>
    //TestVcpTask();
    AsciTask();
 8000e2e:	f000 f961 	bl	80010f4 <AsciTask>
    LiveLedTask(&hLiveLed);
 8000e32:	e7f7      	b.n	8000e24 <main+0x98>
 8000e34:	20000da4 	.word	0x20000da4
 8000e38:	080013fd 	.word	0x080013fd
 8000e3c:	080013e5 	.word	0x080013e5
 8000e40:	0800c578 	.word	0x0800c578
 8000e44:	0800c580 	.word	0x0800c580
 8000e48:	0800c584 	.word	0x0800c584
 8000e4c:	0800c58c 	.word	0x0800c58c
 8000e50:	0800c594 	.word	0x0800c594
 8000e54:	0800c5b0 	.word	0x0800c5b0
 8000e58:	00200720 	.word	0x00200720
 8000e5c:	0800c5b4 	.word	0x0800c5b4
 8000e60:	0800c5c0 	.word	0x0800c5c0
 8000e64:	0800c5d0 	.word	0x0800c5d0
 8000e68:	20000ed8 	.word	0x20000ed8

08000e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b094      	sub	sp, #80	; 0x50
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e76:	2228      	movs	r2, #40	; 0x28
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f006 f929 	bl	80070d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000eb8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 fea2 	bl	8002c0c <HAL_RCC_OscConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ece:	f000 faad 	bl	800142c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2102      	movs	r1, #2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 f90c 	bl	800310c <HAL_RCC_ClockConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000efa:	f000 fa97 	bl	800142c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000efe:	2310      	movs	r3, #16
 8000f00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 fa69 	bl	80033e0 <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f14:	f000 fa8a 	bl	800142c <Error_Handler>
  }
}
 8000f18:	bf00      	nop
 8000f1a:	3750      	adds	r7, #80	; 0x50
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f26:	4a18      	ldr	r2, [pc, #96]	; (8000f88 <MX_SPI2_Init+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f50:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f54:	2210      	movs	r2, #16
 8000f56:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f6c:	220a      	movs	r2, #10
 8000f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f72:	f002 faeb 	bl	800354c <HAL_SPI_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f7c:	f000 fa56 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000db8 	.word	0x20000db8
 8000f88:	40003800 	.word	0x40003800

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa0:	4b47      	ldr	r3, [pc, #284]	; (80010c0 <MX_GPIO_Init+0x134>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a46      	ldr	r2, [pc, #280]	; (80010c0 <MX_GPIO_Init+0x134>)
 8000fa6:	f043 0310 	orr.w	r3, r3, #16
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <MX_GPIO_Init+0x134>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb8:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <MX_GPIO_Init+0x134>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a40      	ldr	r2, [pc, #256]	; (80010c0 <MX_GPIO_Init+0x134>)
 8000fbe:	f043 0320 	orr.w	r3, r3, #32
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <MX_GPIO_Init+0x134>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0320 	and.w	r3, r3, #32
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <MX_GPIO_Init+0x134>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a3a      	ldr	r2, [pc, #232]	; (80010c0 <MX_GPIO_Init+0x134>)
 8000fd6:	f043 0308 	orr.w	r3, r3, #8
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <MX_GPIO_Init+0x134>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <MX_GPIO_Init+0x134>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a34      	ldr	r2, [pc, #208]	; (80010c0 <MX_GPIO_Init+0x134>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b32      	ldr	r3, [pc, #200]	; (80010c0 <MX_GPIO_Init+0x134>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIVE_LED_GPIO_Port, LIVE_LED_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001006:	482f      	ldr	r0, [pc, #188]	; (80010c4 <MX_GPIO_Init+0x138>)
 8001008:	f000 ff06 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001012:	482d      	ldr	r0, [pc, #180]	; (80010c8 <MX_GPIO_Init+0x13c>)
 8001014:	f000 ff00 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAX_SHDN_Pin|USB_PULL_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 4102 	mov.w	r1, #33280	; 0x8200
 800101e:	482b      	ldr	r0, [pc, #172]	; (80010cc <MX_GPIO_Init+0x140>)
 8001020:	f000 fefa 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LIVE_LED_Pin */
  GPIO_InitStruct.Pin = LIVE_LED_Pin;
 8001024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2302      	movs	r3, #2
 8001034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIVE_LED_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	4619      	mov	r1, r3
 800103c:	4821      	ldr	r0, [pc, #132]	; (80010c4 <MX_GPIO_Init+0x138>)
 800103e:	f000 fd91 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_CS_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin;
 8001042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104c:	2301      	movs	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAX_CS_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	4619      	mov	r1, r3
 800105a:	481b      	ldr	r0, [pc, #108]	; (80010c8 <MX_GPIO_Init+0x13c>)
 800105c:	f000 fd82 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_INT_Pin */
  GPIO_InitStruct.Pin = MAX_INT_Pin;
 8001060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001064:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MAX_INT_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	4619      	mov	r1, r3
 8001074:	4815      	ldr	r0, [pc, #84]	; (80010cc <MX_GPIO_Init+0x140>)
 8001076:	f000 fd75 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_SHDN_Pin */
  GPIO_InitStruct.Pin = MAX_SHDN_Pin;
 800107a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800107e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001084:	2302      	movs	r3, #2
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAX_SHDN_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	4619      	mov	r1, r3
 8001092:	480e      	ldr	r0, [pc, #56]	; (80010cc <MX_GPIO_Init+0x140>)
 8001094:	f000 fd66 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PULL_Pin */
  GPIO_InitStruct.Pin = USB_PULL_Pin;
 8001098:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800109c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PULL_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	4619      	mov	r1, r3
 80010b0:	4806      	ldr	r0, [pc, #24]	; (80010cc <MX_GPIO_Init+0x140>)
 80010b2:	f000 fd57 	bl	8001b64 <HAL_GPIO_Init>

}
 80010b6:	bf00      	nop
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40011000 	.word	0x40011000
 80010c8:	40010c00 	.word	0x40010c00
 80010cc:	40010800 	.word	0x40010800

080010d0 <_write>:
//  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 100);
//  return len;
//}

int _write(int file, char *ptr, int len)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t*)ptr, len);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4619      	mov	r1, r3
 80010e2:	68b8      	ldr	r0, [r7, #8]
 80010e4:	f005 fba0 	bl	8006828 <CDC_Transmit_FS>
  return len;
 80010e8:	687b      	ldr	r3, [r7, #4]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <AsciTask>:
    DeviceErrLog("RX_STATUS_ERROR");
  }

}
void AsciTask(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	; 0x50
 80010f8:	af00      	add	r7, sp, #0
  uint8_t rxStatus;
  uint8_t ptrBefore;
  uint8_t ptrAfter;


  AsciReadRegU8(RX_STATUS_READ_REG, &rxStatus);
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	4619      	mov	r1, r3
 80010fe:	2001      	movs	r0, #1
 8001100:	f000 f8b8 	bl	8001274 <AsciReadRegU8>

  if(rxStatus & RX_STATUS_STOP )
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d045      	beq.n	800119a <AsciTask+0xa6>
  {

    AsciReadRegU8(RX_READ_PTR_REG, &ptrBefore);
 800110e:	1dbb      	adds	r3, r7, #6
 8001110:	4619      	mov	r1, r3
 8001112:	2097      	movs	r0, #151	; 0x97
 8001114:	f000 f8ae 	bl	8001274 <AsciReadRegU8>
    AsciReadReg(RX_NXT_MSG_REG, msgBuffer, sizeof(msgBuffer));
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	223e      	movs	r2, #62	; 0x3e
 800111e:	4619      	mov	r1, r3
 8001120:	2093      	movs	r0, #147	; 0x93
 8001122:	f000 f8b9 	bl	8001298 <AsciReadReg>
    AsciReadRegU8(RX_READ_PTR_REG, &ptrAfter);
 8001126:	1d7b      	adds	r3, r7, #5
 8001128:	4619      	mov	r1, r3
 800112a:	2097      	movs	r0, #151	; 0x97
 800112c:	f000 f8a2 	bl	8001274 <AsciReadRegU8>

    uint32_t reltiveTime = HAL_GetTick() - UartRxTimestamp;
 8001130:	f000 fc00 	bl	8001934 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <AsciTask+0xfc>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	64fb      	str	r3, [r7, #76]	; 0x4c
    UartRxTimestamp = HAL_GetTick();
 800113e:	f000 fbf9 	bl	8001934 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <AsciTask+0xfc>)
 8001146:	601a      	str	r2, [r3, #0]
    //sprintf(String2,"ptrBefore:%02d, ptrAfter:%02d, value: %s ",ptrBefore,  ptrAfter, StringPlusDataToHexaString(msgBuffer, String, ptrAfter - ptrBefore));
    sprintf(String2,"R+%06ldms:  %s", reltiveTime, StringPlusDataToHexaString(msgBuffer, String, ptrAfter - ptrBefore));
 8001148:	797b      	ldrb	r3, [r7, #5]
 800114a:	461a      	mov	r2, r3
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	461a      	mov	r2, r3
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	4927      	ldr	r1, [pc, #156]	; (80011f4 <AsciTask+0x100>)
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fafd 	bl	8001758 <StringPlusDataToHexaString>
 800115e:	4603      	mov	r3, r0
 8001160:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001162:	4925      	ldr	r1, [pc, #148]	; (80011f8 <AsciTask+0x104>)
 8001164:	4825      	ldr	r0, [pc, #148]	; (80011fc <AsciTask+0x108>)
 8001166:	f006 f81d 	bl	80071a4 <sprintf>
    DeviceDbgLog(String2);
 800116a:	4825      	ldr	r0, [pc, #148]	; (8001200 <AsciTask+0x10c>)
 800116c:	f005 ffba 	bl	80070e4 <printf>
 8001170:	4824      	ldr	r0, [pc, #144]	; (8001204 <AsciTask+0x110>)
 8001172:	f005 ffb7 	bl	80070e4 <printf>
 8001176:	4821      	ldr	r0, [pc, #132]	; (80011fc <AsciTask+0x108>)
 8001178:	f005 ffb4 	bl	80070e4 <printf>
 800117c:	4822      	ldr	r0, [pc, #136]	; (8001208 <AsciTask+0x114>)
 800117e:	f005 ffb1 	bl	80070e4 <printf>
 8001182:	4822      	ldr	r0, [pc, #136]	; (800120c <AsciTask+0x118>)
 8001184:	f006 f806 	bl	8007194 <puts>

    /*Clear Buffer*/
    AsciWrite((uint8_t[]){0xE0}, 1);
 8001188:	23e0      	movs	r3, #224	; 0xe0
 800118a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 800118e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f843 	bl	8001220 <AsciWrite>
  }

  if(rxStatus & RX_STATUS_OVER)
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00e      	beq.n	80011c2 <AsciTask+0xce>
  {
    DeviceErrLog("RX_STATUS_OVER");
 80011a4:	481a      	ldr	r0, [pc, #104]	; (8001210 <AsciTask+0x11c>)
 80011a6:	f005 ff9d 	bl	80070e4 <printf>
 80011aa:	481a      	ldr	r0, [pc, #104]	; (8001214 <AsciTask+0x120>)
 80011ac:	f005 ff9a 	bl	80070e4 <printf>
 80011b0:	4819      	ldr	r0, [pc, #100]	; (8001218 <AsciTask+0x124>)
 80011b2:	f005 ff97 	bl	80070e4 <printf>
 80011b6:	4814      	ldr	r0, [pc, #80]	; (8001208 <AsciTask+0x114>)
 80011b8:	f005 ff94 	bl	80070e4 <printf>
 80011bc:	4813      	ldr	r0, [pc, #76]	; (800120c <AsciTask+0x118>)
 80011be:	f005 ffe9 	bl	8007194 <puts>
  }
  if(rxStatus & RX_STATUS_ERROR)
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	da0e      	bge.n	80011e8 <AsciTask+0xf4>
  {
    DeviceErrLog("RX_STATUS_ERROR");
 80011ca:	4811      	ldr	r0, [pc, #68]	; (8001210 <AsciTask+0x11c>)
 80011cc:	f005 ff8a 	bl	80070e4 <printf>
 80011d0:	4810      	ldr	r0, [pc, #64]	; (8001214 <AsciTask+0x120>)
 80011d2:	f005 ff87 	bl	80070e4 <printf>
 80011d6:	4811      	ldr	r0, [pc, #68]	; (800121c <AsciTask+0x128>)
 80011d8:	f005 ff84 	bl	80070e4 <printf>
 80011dc:	480a      	ldr	r0, [pc, #40]	; (8001208 <AsciTask+0x114>)
 80011de:	f005 ff81 	bl	80070e4 <printf>
 80011e2:	480a      	ldr	r0, [pc, #40]	; (800120c <AsciTask+0x118>)
 80011e4:	f005 ffd6 	bl	8007194 <puts>
  }

}
 80011e8:	bf00      	nop
 80011ea:	3750      	adds	r7, #80	; 0x50
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000ed8 	.word	0x20000ed8
 80011f4:	20000edc 	.word	0x20000edc
 80011f8:	0800c718 	.word	0x0800c718
 80011fc:	20000e10 	.word	0x20000e10
 8001200:	0800c65c 	.word	0x0800c65c
 8001204:	0800c664 	.word	0x0800c664
 8001208:	0800c584 	.word	0x0800c584
 800120c:	0800c5b0 	.word	0x0800c5b0
 8001210:	0800c58c 	.word	0x0800c58c
 8001214:	0800c6e8 	.word	0x0800c6e8
 8001218:	0800c6f8 	.word	0x0800c6f8
 800121c:	0800c708 	.word	0x0800c708

08001220 <AsciWrite>:
    return 0;
}


uint8_t AsciWrite(uint8_t *writeBuffer, uint8_t size)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
  uint8_t status = MAX_ASCI_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <AsciWrite+0x4c>)
 8001238:	f000 fdee 	bl	8001e18 <HAL_GPIO_WritePin>

  if(HAL_SPI_Transmit(&hspi2, writeBuffer, size, 100)!= HAL_OK)
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	b29a      	uxth	r2, r3
 8001240:	2364      	movs	r3, #100	; 0x64
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	480a      	ldr	r0, [pc, #40]	; (8001270 <AsciWrite+0x50>)
 8001246:	f002 f9e2 	bl	800360e <HAL_SPI_Transmit>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <AsciWrite+0x34>
  {
    status = MAX_ASCI_IO_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
  }

  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125a:	4804      	ldr	r0, [pc, #16]	; (800126c <AsciWrite+0x4c>)
 800125c:	f000 fddc 	bl	8001e18 <HAL_GPIO_WritePin>

  return status;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40010c00 	.word	0x40010c00
 8001270:	20000db8 	.word	0x20000db8

08001274 <AsciReadRegU8>:


uint8_t AsciReadRegU8(uint8_t regAddr,  uint8_t *byte)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  return AsciReadReg(regAddr,  byte, 1 );
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2201      	movs	r2, #1
 8001284:	6839      	ldr	r1, [r7, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f806 	bl	8001298 <AsciReadReg>
 800128c:	4603      	mov	r3, r0

}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <AsciReadReg>:

uint8_t AsciReadReg(uint8_t regAddr,  uint8_t *rxBuffer, uint8_t size)
{
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af02      	add	r7, sp, #8
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
 80012a8:	466b      	mov	r3, sp
 80012aa:	461d      	mov	r5, r3
  uint8_t status = MAX_ASCI_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	76fb      	strb	r3, [r7, #27]
  uint8_t txBuffer[size + 1];
 80012b0:	79bb      	ldrb	r3, [r7, #6]
 80012b2:	1c58      	adds	r0, r3, #1
 80012b4:	1e43      	subs	r3, r0, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	4603      	mov	r3, r0
 80012ba:	4619      	mov	r1, r3
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	f04f 0400 	mov.w	r4, #0
 80012c8:	00d4      	lsls	r4, r2, #3
 80012ca:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80012ce:	00cb      	lsls	r3, r1, #3
 80012d0:	4603      	mov	r3, r0
 80012d2:	4619      	mov	r1, r3
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	f04f 0400 	mov.w	r4, #0
 80012e0:	00d4      	lsls	r4, r2, #3
 80012e2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80012e6:	00cb      	lsls	r3, r1, #3
 80012e8:	4603      	mov	r3, r0
 80012ea:	3307      	adds	r3, #7
 80012ec:	08db      	lsrs	r3, r3, #3
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	ebad 0d03 	sub.w	sp, sp, r3
 80012f4:	ab02      	add	r3, sp, #8
 80012f6:	3300      	adds	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  uint8_t rxTemp[size + 1];
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	1c58      	adds	r0, r3, #1
 80012fe:	1e43      	subs	r3, r0, #1
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	4603      	mov	r3, r0
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	f04f 0400 	mov.w	r4, #0
 8001312:	00d4      	lsls	r4, r2, #3
 8001314:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001318:	00cb      	lsls	r3, r1, #3
 800131a:	4603      	mov	r3, r0
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	f04f 0400 	mov.w	r4, #0
 800132a:	00d4      	lsls	r4, r2, #3
 800132c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001330:	00cb      	lsls	r3, r1, #3
 8001332:	4603      	mov	r3, r0
 8001334:	3307      	adds	r3, #7
 8001336:	08db      	lsrs	r3, r3, #3
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	ebad 0d03 	sub.w	sp, sp, r3
 800133e:	ab02      	add	r3, sp, #8
 8001340:	3300      	adds	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800134a:	4818      	ldr	r0, [pc, #96]	; (80013ac <AsciReadReg+0x114>)
 800134c:	f000 fd64 	bl	8001e18 <HAL_GPIO_WritePin>

  memset(txBuffer,0xAA, size + 1);
 8001350:	6978      	ldr	r0, [r7, #20]
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	3301      	adds	r3, #1
 8001356:	461a      	mov	r2, r3
 8001358:	21aa      	movs	r1, #170	; 0xaa
 800135a:	f005 feba 	bl	80070d2 <memset>
  txBuffer[0] = regAddr;
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	79fa      	ldrb	r2, [r7, #7]
 8001362:	701a      	strb	r2, [r3, #0]
  if(HAL_SPI_TransmitReceive(&hspi2, txBuffer, rxTemp, size + 1 , 100)!= HAL_OK)
 8001364:	6979      	ldr	r1, [r7, #20]
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	b29b      	uxth	r3, r3
 800136c:	3301      	adds	r3, #1
 800136e:	b298      	uxth	r0, r3
 8001370:	2364      	movs	r3, #100	; 0x64
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	4603      	mov	r3, r0
 8001376:	480e      	ldr	r0, [pc, #56]	; (80013b0 <AsciReadReg+0x118>)
 8001378:	f002 fa7d 	bl	8003876 <HAL_SPI_TransmitReceive>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <AsciReadReg+0xee>
  {
    status = MAX_ASCI_IO_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	76fb      	strb	r3, [r7, #27]
  }

  memcpy(rxBuffer, rxTemp + 1, size);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	79ba      	ldrb	r2, [r7, #6]
 800138c:	4619      	mov	r1, r3
 800138e:	6838      	ldr	r0, [r7, #0]
 8001390:	f005 fe94 	bl	80070bc <memcpy>

  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800139a:	4804      	ldr	r0, [pc, #16]	; (80013ac <AsciReadReg+0x114>)
 800139c:	f000 fd3c 	bl	8001e18 <HAL_GPIO_WritePin>

  return status;
 80013a0:	7efb      	ldrb	r3, [r7, #27]
 80013a2:	46ad      	mov	sp, r5
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3720      	adds	r7, #32
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bdb0      	pop	{r4, r5, r7, pc}
 80013ac:	40010c00 	.word	0x40010c00
 80013b0:	20000db8 	.word	0x20000db8

080013b4 <AsciWakeUp>:




void AsciWakeUp(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(MAX_SHDN_GPIO_Port, MAX_SHDN_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013be:	4802      	ldr	r0, [pc, #8]	; (80013c8 <AsciWakeUp+0x14>)
 80013c0:	f000 fd2a 	bl	8001e18 <HAL_GPIO_WritePin>
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40010800 	.word	0x40010800

080013cc <AsciShutDown>:

void AsciShutDown(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(MAX_SHDN_GPIO_Port, MAX_SHDN_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d6:	4802      	ldr	r0, [pc, #8]	; (80013e0 <AsciShutDown+0x14>)
 80013d8:	f000 fd1e 	bl	8001e18 <HAL_GPIO_WritePin>
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40010800 	.word	0x40010800

080013e4 <LiveLedOn>:

/* LEDs ---------------------------------------------------------------------*/
void LiveLedOn(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LIVE_LED_GPIO_Port, LIVE_LED_Pin, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ee:	4802      	ldr	r0, [pc, #8]	; (80013f8 <LiveLedOn+0x14>)
 80013f0:	f000 fd12 	bl	8001e18 <HAL_GPIO_WritePin>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40011000 	.word	0x40011000

080013fc <LiveLedOff>:

void LiveLedOff(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LIVE_LED_GPIO_Port, LIVE_LED_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001406:	4802      	ldr	r0, [pc, #8]	; (8001410 <LiveLedOff+0x14>)
 8001408:	f000 fd06 	bl	8001e18 <HAL_GPIO_WritePin>
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40011000 	.word	0x40011000

08001414 <UsbPullUp>:
/* USB ---------------------------------------------------------------------*/
void UsbPullUp(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(USB_PULL_GPIO_Port, USB_PULL_Pin, GPIO_PIN_SET);
 8001418:	2201      	movs	r2, #1
 800141a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800141e:	4802      	ldr	r0, [pc, #8]	; (8001428 <UsbPullUp+0x14>)
 8001420:	f000 fcfa 	bl	8001e18 <HAL_GPIO_WritePin>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40010800 	.word	0x40010800

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_MspInit+0x5c>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	4a14      	ldr	r2, [pc, #80]	; (8001494 <HAL_MspInit+0x5c>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6193      	str	r3, [r2, #24]
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_MspInit+0x5c>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <HAL_MspInit+0x5c>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <HAL_MspInit+0x5c>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	61d3      	str	r3, [r2, #28]
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_MspInit+0x5c>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_MspInit+0x60>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <HAL_MspInit+0x60>)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40021000 	.word	0x40021000
 8001498:	40010000 	.word	0x40010000

0800149c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a1c      	ldr	r2, [pc, #112]	; (8001528 <HAL_SPI_MspInit+0x8c>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d131      	bne.n	8001520 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_SPI_MspInit+0x90>)
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	4a1a      	ldr	r2, [pc, #104]	; (800152c <HAL_SPI_MspInit+0x90>)
 80014c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c6:	61d3      	str	r3, [r2, #28]
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_SPI_MspInit+0x90>)
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_SPI_MspInit+0x90>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a14      	ldr	r2, [pc, #80]	; (800152c <HAL_SPI_MspInit+0x90>)
 80014da:	f043 0308 	orr.w	r3, r3, #8
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_SPI_MspInit+0x90>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80014ec:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80014f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4619      	mov	r1, r3
 8001500:	480b      	ldr	r0, [pc, #44]	; (8001530 <HAL_SPI_MspInit+0x94>)
 8001502:	f000 fb2f 	bl	8001b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001506:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800150a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001510:	2301      	movs	r3, #1
 8001512:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <HAL_SPI_MspInit+0x94>)
 800151c:	f000 fb22 	bl	8001b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001520:	bf00      	nop
 8001522:	3720      	adds	r7, #32
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40003800 	.word	0x40003800
 800152c:	40021000 	.word	0x40021000
 8001530:	40010c00 	.word	0x40010c00

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <HardFault_Handler+0x4>

08001546 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <MemManage_Handler+0x4>

0800154c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <BusFault_Handler+0x4>

08001552 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <UsageFault_Handler+0x4>

08001558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001580:	f000 f9c6 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800158e:	f000 fd62 	bl	8002056 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200020d8 	.word	0x200020d8

0800159c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80015a2:	f000 fd58 	bl	8002056 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200020d8 	.word	0x200020d8

080015b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	e00a      	b.n	80015d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015c2:	f3af 8000 	nop.w
 80015c6:	4601      	mov	r1, r0
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	60ba      	str	r2, [r7, #8]
 80015ce:	b2ca      	uxtb	r2, r1
 80015d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dbf0      	blt.n	80015c2 <_read+0x12>
	}

return len;
 80015e0:	687b      	ldr	r3, [r7, #4]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <_close>:
	}
	return len;
}

int _close(int file)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
	return -1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001610:	605a      	str	r2, [r3, #4]
	return 0;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <_isatty>:

int _isatty(int file)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
	return 1;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001632:	b480      	push	{r7}
 8001634:	b085      	sub	sp, #20
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
	return 0;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
	...

0800164c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <_sbrk+0x50>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x16>
		heap_end = &end;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <_sbrk+0x50>)
 800165e:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <_sbrk+0x54>)
 8001660:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <_sbrk+0x50>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <_sbrk+0x50>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	466a      	mov	r2, sp
 8001672:	4293      	cmp	r3, r2
 8001674:	d907      	bls.n	8001686 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001676:	f005 fcd7 	bl	8007028 <__errno>
 800167a:	4602      	mov	r2, r0
 800167c:	230c      	movs	r3, #12
 800167e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
 8001684:	e006      	b.n	8001694 <_sbrk+0x48>
	}

	heap_end += incr;
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <_sbrk+0x50>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a03      	ldr	r2, [pc, #12]	; (800169c <_sbrk+0x50>)
 8001690:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000b44 	.word	0x20000b44
 80016a0:	20002358 	.word	0x20002358

080016a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <SystemInit+0x5c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a14      	ldr	r2, [pc, #80]	; (8001700 <SystemInit+0x5c>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <SystemInit+0x5c>)
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	4911      	ldr	r1, [pc, #68]	; (8001700 <SystemInit+0x5c>)
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <SystemInit+0x60>)
 80016bc:	4013      	ands	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <SystemInit+0x5c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <SystemInit+0x5c>)
 80016c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80016ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <SystemInit+0x5c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <SystemInit+0x5c>)
 80016d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <SystemInit+0x5c>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a07      	ldr	r2, [pc, #28]	; (8001700 <SystemInit+0x5c>)
 80016e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80016e6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <SystemInit+0x5c>)
 80016ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80016ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SystemInit+0x64>)
 80016f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016f6:	609a      	str	r2, [r3, #8]
#endif 
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000
 8001704:	f8ff0000 	.word	0xf8ff0000
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800170c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800170e:	e003      	b.n	8001718 <LoopCopyDataInit>

08001710 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001712:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001714:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001716:	3104      	adds	r1, #4

08001718 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001718:	480a      	ldr	r0, [pc, #40]	; (8001744 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800171c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800171e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001720:	d3f6      	bcc.n	8001710 <CopyDataInit>
  ldr r2, =_sbss
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001724:	e002      	b.n	800172c <LoopFillZerobss>

08001726 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001728:	f842 3b04 	str.w	r3, [r2], #4

0800172c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800172e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001730:	d3f9      	bcc.n	8001726 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001732:	f7ff ffb7 	bl	80016a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001736:	f005 fc7d 	bl	8007034 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800173a:	f7ff fb27 	bl	8000d8c <main>
  bx lr
 800173e:	4770      	bx	lr
  ldr r3, =_sidata
 8001740:	0800ca48 	.word	0x0800ca48
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001748:	20000b28 	.word	0x20000b28
  ldr r2, =_sbss
 800174c:	20000b28 	.word	0x20000b28
  ldr r3, = _ebss
 8001750:	20002354 	.word	0x20002354

08001754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001754:	e7fe      	b.n	8001754 <ADC1_2_IRQHandler>
	...

08001758 <StringPlusDataToHexaString>:
  *
  * 02 10 60 00 00 00 00 00 06 50 60 00 32 01 F4 00 .
  *
  */
char *StringPlusDataToHexaString(void* data, char *buffer, size_t size)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
    uint8_t *ptr = data;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	613b      	str	r3, [r7, #16]
    uint8_t i = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	75fb      	strb	r3, [r7, #23]
    if(size)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d023      	beq.n	80017ba <StringPlusDataToHexaString+0x62>
    {
        for(; i<size; i++)
 8001772:	e011      	b.n	8001798 <StringPlusDataToHexaString+0x40>
            sprintf((buffer +(i*3)),"%02X ", *(ptr+i));
 8001774:	7dfa      	ldrb	r2, [r7, #23]
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	461a      	mov	r2, r3
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1898      	adds	r0, r3, r2
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	490f      	ldr	r1, [pc, #60]	; (80017cc <StringPlusDataToHexaString+0x74>)
 800178e:	f005 fd09 	bl	80071a4 <sprintf>
        for(; i<size; i++)
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	3301      	adds	r3, #1
 8001796:	75fb      	strb	r3, [r7, #23]
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	d8e9      	bhi.n	8001774 <StringPlusDataToHexaString+0x1c>
        if(i > 1)
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d90c      	bls.n	80017c0 <StringPlusDataToHexaString+0x68>
            buffer[(i*3)-1]=0;
 80017a6:	7dfa      	ldrb	r2, [r7, #23]
 80017a8:	4613      	mov	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4413      	add	r3, r2
 80017ae:	3b01      	subs	r3, #1
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	4413      	add	r3, r2
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	e002      	b.n	80017c0 <StringPlusDataToHexaString+0x68>
    }
    else
    {
        buffer[0]=0;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
    }
    return buffer;
 80017c0:	68bb      	ldr	r3, [r7, #8]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	0800c730 	.word	0x0800c730

080017d0 <DelayMs>:
/* Delay ---------------------------------------------------------------------*/
/**
  * @brief  DelayMs
  */
void DelayMs(volatile int32_t n)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  unsigned long timetick;
  timetick = HAL_GetTick();
 80017d8:	f000 f8ac 	bl	8001934 <HAL_GetTick>
 80017dc:	60f8      	str	r0, [r7, #12]
  while ((HAL_GetTick() - timetick) < n);
 80017de:	bf00      	nop
 80017e0:	f000 f8a8 	bl	8001934 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d3f7      	bcc.n	80017e0 <DelayMs+0x10>
}
 80017f0:	bf00      	nop
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <LiveLedInit>:
/* Includes ------------------------------------------------------------------*/
#include "LiveLed.h"

/* Private define ------------------------------------------------------------*/
uint8_t LiveLedInit(LiveLED_HnadleTypeDef *hnd)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if(!hnd) 
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <LiveLedInit+0x12>
      return LIVELED_FAIL;
 8001806:	2301      	movs	r3, #1
 8001808:	e009      	b.n	800181e <LiveLedInit+0x26>
  hnd->State = 1;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	741a      	strb	r2, [r3, #16]
  hnd->Timestamp = HAL_GetTick();
 8001810:	f000 f890 	bl	8001934 <HAL_GetTick>
 8001814:	4603      	mov	r3, r0
 8001816:	461a      	mov	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	60da      	str	r2, [r3, #12]
  return LIVELED_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <LiveLedTask>:

uint8_t LiveLedTask(LiveLED_HnadleTypeDef *hnd)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  if(!hnd) 
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <LiveLedTask+0x12>
    return LIVELED_FAIL;
 8001834:	2301      	movs	r3, #1
 8001836:	e021      	b.n	800187c <LiveLedTask+0x56>

  if(HAL_GetTick() - hnd->Timestamp > hnd->HalfPeriodTimeMs)
 8001838:	f000 f87c 	bl	8001934 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	4293      	cmp	r3, r2
 800184a:	d916      	bls.n	800187a <LiveLedTask+0x54>
  {
    hnd->Timestamp = HAL_GetTick();
 800184c:	f000 f872 	bl	8001934 <HAL_GetTick>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	60da      	str	r2, [r3, #12]
    if(hnd->State)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7c1b      	ldrb	r3, [r3, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <LiveLedTask+0x48>
    {
      hnd->State = 0;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	741a      	strb	r2, [r3, #16]
      hnd->LedOnFnPtr();
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4798      	blx	r3
 800186c:	e005      	b.n	800187a <LiveLedTask+0x54>
    }
    else
    {
      hnd->State = 1;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	741a      	strb	r2, [r3, #16]
      hnd->LedOffFnPtr();
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4798      	blx	r3
    }
  }
  return LIVELED_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_Init+0x28>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_Init+0x28>)
 800188e:	f043 0310 	orr.w	r3, r3, #16
 8001892:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f923 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	2000      	movs	r0, #0
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff fdca 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40022000 	.word	0x40022000

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f93b 	bl	8001b4a <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f000 f903 	bl	8001af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000000 	.word	0x20000000
 8001908:	20000008 	.word	0x20000008
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_IncTick+0x1c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_IncTick+0x20>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a03      	ldr	r2, [pc, #12]	; (8001930 <HAL_IncTick+0x20>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	20000008 	.word	0x20000008
 8001930:	20000fa4 	.word	0x20000fa4

08001934 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b02      	ldr	r3, [pc, #8]	; (8001944 <HAL_GetTick+0x10>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	20000fa4 	.word	0x20000fa4

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4906      	ldr	r1, [pc, #24]	; (80019e0 <__NVIC_EnableIRQ+0x34>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	210f      	movs	r1, #15
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f7ff ff90 	bl	80019e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff2d 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff42 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff90 	bl	8001a38 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5f 	bl	80019e4 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff35 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffa2 	bl	8001a9c <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b08b      	sub	sp, #44	; 0x2c
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b76:	e127      	b.n	8001dc8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	f040 8116 	bne.w	8001dc2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b12      	cmp	r3, #18
 8001b9c:	d034      	beq.n	8001c08 <HAL_GPIO_Init+0xa4>
 8001b9e:	2b12      	cmp	r3, #18
 8001ba0:	d80d      	bhi.n	8001bbe <HAL_GPIO_Init+0x5a>
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d02b      	beq.n	8001bfe <HAL_GPIO_Init+0x9a>
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d804      	bhi.n	8001bb4 <HAL_GPIO_Init+0x50>
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d031      	beq.n	8001c12 <HAL_GPIO_Init+0xae>
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d01c      	beq.n	8001bec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bb2:	e048      	b.n	8001c46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d043      	beq.n	8001c40 <HAL_GPIO_Init+0xdc>
 8001bb8:	2b11      	cmp	r3, #17
 8001bba:	d01b      	beq.n	8001bf4 <HAL_GPIO_Init+0x90>
          break;
 8001bbc:	e043      	b.n	8001c46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bbe:	4a89      	ldr	r2, [pc, #548]	; (8001de4 <HAL_GPIO_Init+0x280>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d026      	beq.n	8001c12 <HAL_GPIO_Init+0xae>
 8001bc4:	4a87      	ldr	r2, [pc, #540]	; (8001de4 <HAL_GPIO_Init+0x280>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d806      	bhi.n	8001bd8 <HAL_GPIO_Init+0x74>
 8001bca:	4a87      	ldr	r2, [pc, #540]	; (8001de8 <HAL_GPIO_Init+0x284>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d020      	beq.n	8001c12 <HAL_GPIO_Init+0xae>
 8001bd0:	4a86      	ldr	r2, [pc, #536]	; (8001dec <HAL_GPIO_Init+0x288>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01d      	beq.n	8001c12 <HAL_GPIO_Init+0xae>
          break;
 8001bd6:	e036      	b.n	8001c46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bd8:	4a85      	ldr	r2, [pc, #532]	; (8001df0 <HAL_GPIO_Init+0x28c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_GPIO_Init+0xae>
 8001bde:	4a85      	ldr	r2, [pc, #532]	; (8001df4 <HAL_GPIO_Init+0x290>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d016      	beq.n	8001c12 <HAL_GPIO_Init+0xae>
 8001be4:	4a84      	ldr	r2, [pc, #528]	; (8001df8 <HAL_GPIO_Init+0x294>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d013      	beq.n	8001c12 <HAL_GPIO_Init+0xae>
          break;
 8001bea:	e02c      	b.n	8001c46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	623b      	str	r3, [r7, #32]
          break;
 8001bf2:	e028      	b.n	8001c46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	623b      	str	r3, [r7, #32]
          break;
 8001bfc:	e023      	b.n	8001c46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	3308      	adds	r3, #8
 8001c04:	623b      	str	r3, [r7, #32]
          break;
 8001c06:	e01e      	b.n	8001c46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	330c      	adds	r3, #12
 8001c0e:	623b      	str	r3, [r7, #32]
          break;
 8001c10:	e019      	b.n	8001c46 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d102      	bne.n	8001c20 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	623b      	str	r3, [r7, #32]
          break;
 8001c1e:	e012      	b.n	8001c46 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d105      	bne.n	8001c34 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c28:	2308      	movs	r3, #8
 8001c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	611a      	str	r2, [r3, #16]
          break;
 8001c32:	e008      	b.n	8001c46 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c34:	2308      	movs	r3, #8
 8001c36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	615a      	str	r2, [r3, #20]
          break;
 8001c3e:	e002      	b.n	8001c46 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c40:	2300      	movs	r3, #0
 8001c42:	623b      	str	r3, [r7, #32]
          break;
 8001c44:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2bff      	cmp	r3, #255	; 0xff
 8001c4a:	d801      	bhi.n	8001c50 <HAL_GPIO_Init+0xec>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	e001      	b.n	8001c54 <HAL_GPIO_Init+0xf0>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3304      	adds	r3, #4
 8001c54:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	2bff      	cmp	r3, #255	; 0xff
 8001c5a:	d802      	bhi.n	8001c62 <HAL_GPIO_Init+0xfe>
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	e002      	b.n	8001c68 <HAL_GPIO_Init+0x104>
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	3b08      	subs	r3, #8
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	210f      	movs	r1, #15
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	401a      	ands	r2, r3
 8001c7a:	6a39      	ldr	r1, [r7, #32]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	431a      	orrs	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 8096 	beq.w	8001dc2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c96:	4b59      	ldr	r3, [pc, #356]	; (8001dfc <HAL_GPIO_Init+0x298>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	4a58      	ldr	r2, [pc, #352]	; (8001dfc <HAL_GPIO_Init+0x298>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6193      	str	r3, [r2, #24]
 8001ca2:	4b56      	ldr	r3, [pc, #344]	; (8001dfc <HAL_GPIO_Init+0x298>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cae:	4a54      	ldr	r2, [pc, #336]	; (8001e00 <HAL_GPIO_Init+0x29c>)
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4b      	ldr	r2, [pc, #300]	; (8001e04 <HAL_GPIO_Init+0x2a0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d013      	beq.n	8001d02 <HAL_GPIO_Init+0x19e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4a      	ldr	r2, [pc, #296]	; (8001e08 <HAL_GPIO_Init+0x2a4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00d      	beq.n	8001cfe <HAL_GPIO_Init+0x19a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a49      	ldr	r2, [pc, #292]	; (8001e0c <HAL_GPIO_Init+0x2a8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <HAL_GPIO_Init+0x196>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a48      	ldr	r2, [pc, #288]	; (8001e10 <HAL_GPIO_Init+0x2ac>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_GPIO_Init+0x192>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_Init+0x1a0>
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	e004      	b.n	8001d04 <HAL_GPIO_Init+0x1a0>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_Init+0x1a0>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_Init+0x1a0>
 8001d02:	2300      	movs	r3, #0
 8001d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d06:	f002 0203 	and.w	r2, r2, #3
 8001d0a:	0092      	lsls	r2, r2, #2
 8001d0c:	4093      	lsls	r3, r2
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d14:	493a      	ldr	r1, [pc, #232]	; (8001e00 <HAL_GPIO_Init+0x29c>)
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d006      	beq.n	8001d3c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d2e:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4938      	ldr	r1, [pc, #224]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]
 8001d3a:	e006      	b.n	8001d4a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d3c:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	4933      	ldr	r1, [pc, #204]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d006      	beq.n	8001d64 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d56:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	492e      	ldr	r1, [pc, #184]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	604b      	str	r3, [r1, #4]
 8001d62:	e006      	b.n	8001d72 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d64:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	4929      	ldr	r1, [pc, #164]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d006      	beq.n	8001d8c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	4924      	ldr	r1, [pc, #144]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
 8001d8a:	e006      	b.n	8001d9a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	491f      	ldr	r1, [pc, #124]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001da6:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	491a      	ldr	r1, [pc, #104]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60cb      	str	r3, [r1, #12]
 8001db2:	e006      	b.n	8001dc2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001db4:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	4915      	ldr	r1, [pc, #84]	; (8001e14 <HAL_GPIO_Init+0x2b0>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f47f aed0 	bne.w	8001b78 <HAL_GPIO_Init+0x14>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	372c      	adds	r7, #44	; 0x2c
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	10210000 	.word	0x10210000
 8001de8:	10110000 	.word	0x10110000
 8001dec:	10120000 	.word	0x10120000
 8001df0:	10310000 	.word	0x10310000
 8001df4:	10320000 	.word	0x10320000
 8001df8:	10220000 	.word	0x10220000
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40010000 	.word	0x40010000
 8001e04:	40010800 	.word	0x40010800
 8001e08:	40010c00 	.word	0x40010c00
 8001e0c:	40011000 	.word	0x40011000
 8001e10:	40011400 	.word	0x40011400
 8001e14:	40010400 	.word	0x40010400

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e34:	e003      	b.n	8001e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	611a      	str	r2, [r3, #16]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4a:	b08b      	sub	sp, #44	; 0x2c
 8001e4c:	af06      	add	r7, sp, #24
 8001e4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0d3      	b.n	8002002 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f004 fe34 	bl	8006adc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2203      	movs	r2, #3
 8001e78:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f001 ff49 	bl	8003d18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	687e      	ldr	r6, [r7, #4]
 8001e8e:	466d      	mov	r5, sp
 8001e90:	f106 0410 	add.w	r4, r6, #16
 8001e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	602b      	str	r3, [r5, #0]
 8001e9c:	1d33      	adds	r3, r6, #4
 8001e9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ea0:	6838      	ldr	r0, [r7, #0]
 8001ea2:	f001 ff12 	bl	8003cca <USB_CoreInit>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0a4      	b.n	8002002 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 ff46 	bl	8003d50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	e035      	b.n	8001f36 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	015b      	lsls	r3, r3, #5
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3329      	adds	r3, #41	; 0x29
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	015b      	lsls	r3, r3, #5
 8001ede:	4413      	add	r3, r2
 8001ee0:	3328      	adds	r3, #40	; 0x28
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	b291      	uxth	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	015b      	lsls	r3, r3, #5
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3336      	adds	r3, #54	; 0x36
 8001ef4:	460a      	mov	r2, r1
 8001ef6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	015b      	lsls	r3, r3, #5
 8001efe:	4413      	add	r3, r2
 8001f00:	332b      	adds	r3, #43	; 0x2b
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	015b      	lsls	r3, r3, #5
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3338      	adds	r3, #56	; 0x38
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	015b      	lsls	r3, r3, #5
 8001f1a:	4413      	add	r3, r2
 8001f1c:	333c      	adds	r3, #60	; 0x3c
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	3302      	adds	r3, #2
 8001f28:	015b      	lsls	r3, r3, #5
 8001f2a:	4413      	add	r3, r2
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	3301      	adds	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d3c4      	bcc.n	8001eca <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	e031      	b.n	8001faa <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	015b      	lsls	r3, r3, #5
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	015b      	lsls	r3, r3, #5
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	015b      	lsls	r3, r3, #5
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	015b      	lsls	r3, r3, #5
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	015b      	lsls	r3, r3, #5
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	330a      	adds	r3, #10
 8001f9c:	015b      	lsls	r3, r3, #5
 8001f9e:	4413      	add	r3, r2
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d3c8      	bcc.n	8001f46 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	687e      	ldr	r6, [r7, #4]
 8001fbc:	466d      	mov	r5, sp
 8001fbe:	f106 0410 	add.w	r4, r6, #16
 8001fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	602b      	str	r3, [r5, #0]
 8001fca:	1d33      	adds	r3, r6, #4
 8001fcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fce:	6838      	ldr	r0, [r7, #0]
 8001fd0:	f001 feca 	bl	8003d68 <USB_DevInit>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00d      	b.n	8002002 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f002 ff07 	bl	8004e0e <USB_DevDisconnect>

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800200a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_PCD_Start+0x16>
 800201c:	2302      	movs	r3, #2
 800201e:	e016      	b.n	800204e <HAL_PCD_Start+0x44>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002028:	2101      	movs	r1, #1
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f004 ffc5 	bl	8006fba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f002 fee0 	bl	8004dfa <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f001 fe53 	bl	8003cea <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f002 fedd 	bl	8004e22 <USB_ReadInterrupts>
 8002068:	4603      	mov	r3, r0
 800206a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800206e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002072:	d102      	bne.n	800207a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 faf3 	bl	8002660 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f002 fecf 	bl	8004e22 <USB_ReadInterrupts>
 8002084:	4603      	mov	r3, r0
 8002086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800208a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800208e:	d112      	bne.n	80020b6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002098:	b29a      	uxth	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a2:	b292      	uxth	r2, r2
 80020a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f004 fd94 	bl	8006bd6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80020ae:	2100      	movs	r1, #0
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f8de 	bl	8002272 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 feb1 	bl	8004e22 <USB_ReadInterrupts>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020ca:	d10b      	bne.n	80020e4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020de:	b292      	uxth	r2, r2
 80020e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f002 fe9a 	bl	8004e22 <USB_ReadInterrupts>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f8:	d10b      	bne.n	8002112 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002102:	b29a      	uxth	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800210c:	b292      	uxth	r2, r2
 800210e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f002 fe83 	bl	8004e22 <USB_ReadInterrupts>
 800211c:	4603      	mov	r3, r0
 800211e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002126:	d126      	bne.n	8002176 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002130:	b29a      	uxth	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0204 	bic.w	r2, r2, #4
 800213a:	b292      	uxth	r2, r2
 800213c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002148:	b29a      	uxth	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0208 	bic.w	r2, r2, #8
 8002152:	b292      	uxth	r2, r2
 8002154:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f004 fd75 	bl	8006c48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002166:	b29a      	uxth	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002170:	b292      	uxth	r2, r2
 8002172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f002 fe51 	bl	8004e22 <USB_ReadInterrupts>
 8002180:	4603      	mov	r3, r0
 8002182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800218a:	d13d      	bne.n	8002208 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002194:	b29a      	uxth	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0208 	orr.w	r2, r2, #8
 800219e:	b292      	uxth	r2, r2
 80021a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b6:	b292      	uxth	r2, r2
 80021b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0204 	orr.w	r2, r2, #4
 80021ce:	b292      	uxth	r2, r2
 80021d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 fe22 	bl	8004e22 <USB_ReadInterrupts>
 80021de:	4603      	mov	r3, r0
 80021e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e8:	d10b      	bne.n	8002202 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021fc:	b292      	uxth	r2, r2
 80021fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f004 fd06 	bl	8006c14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f002 fe08 	bl	8004e22 <USB_ReadInterrupts>
 8002212:	4603      	mov	r3, r0
 8002214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800221c:	d10e      	bne.n	800223c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002226:	b29a      	uxth	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002230:	b292      	uxth	r2, r2
 8002232:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f004 fcbf 	bl	8006bba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f002 fdee 	bl	8004e22 <USB_ReadInterrupts>
 8002246:	4603      	mov	r3, r0
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002250:	d10b      	bne.n	800226a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800225a:	b29a      	uxth	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002264:	b292      	uxth	r2, r2
 8002266:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_PCD_SetAddress+0x1a>
 8002288:	2302      	movs	r3, #2
 800228a:	e013      	b.n	80022b4 <HAL_PCD_SetAddress+0x42>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	78fa      	ldrb	r2, [r7, #3]
 8002298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f002 fd95 	bl	8004dd4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	4608      	mov	r0, r1
 80022c6:	4611      	mov	r1, r2
 80022c8:	461a      	mov	r2, r3
 80022ca:	4603      	mov	r3, r0
 80022cc:	70fb      	strb	r3, [r7, #3]
 80022ce:	460b      	mov	r3, r1
 80022d0:	803b      	strh	r3, [r7, #0]
 80022d2:	4613      	mov	r3, r2
 80022d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	da0b      	bge.n	80022fa <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	015b      	lsls	r3, r3, #5
 80022ea:	3328      	adds	r3, #40	; 0x28
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	705a      	strb	r2, [r3, #1]
 80022f8:	e00b      	b.n	8002312 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	015b      	lsls	r3, r3, #5
 8002302:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	b2da      	uxtb	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800231e:	883a      	ldrh	r2, [r7, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	78ba      	ldrb	r2, [r7, #2]
 8002328:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	785b      	ldrb	r3, [r3, #1]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d004      	beq.n	800233c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800233c:	78bb      	ldrb	r3, [r7, #2]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d102      	bne.n	8002348 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_PCD_EP_Open+0x9a>
 8002352:	2302      	movs	r3, #2
 8002354:	e00e      	b.n	8002374 <HAL_PCD_EP_Open+0xb8>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68f9      	ldr	r1, [r7, #12]
 8002364:	4618      	mov	r0, r3
 8002366:	f001 fd23 	bl	8003db0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002372:	7afb      	ldrb	r3, [r7, #11]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002388:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800238c:	2b00      	cmp	r3, #0
 800238e:	da0b      	bge.n	80023a8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	015b      	lsls	r3, r3, #5
 8002398:	3328      	adds	r3, #40	; 0x28
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	705a      	strb	r2, [r3, #1]
 80023a6:	e00b      	b.n	80023c0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	015b      	lsls	r3, r3, #5
 80023b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_PCD_EP_Close+0x5e>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e00e      	b.n	80023f8 <HAL_PCD_EP_Close+0x7c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68f9      	ldr	r1, [r7, #12]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f001 ffcf 	bl	800438c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	460b      	mov	r3, r1
 800240e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002410:	7afb      	ldrb	r3, [r7, #11]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	015b      	lsls	r3, r3, #5
 8002418:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4413      	add	r3, r2
 8002420:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2200      	movs	r2, #0
 8002432:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2200      	movs	r2, #0
 8002438:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800243a:	7afb      	ldrb	r3, [r7, #11]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	b2da      	uxtb	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002446:	7afb      	ldrb	r3, [r7, #11]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	2b00      	cmp	r3, #0
 800244e:	d106      	bne.n	800245e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6979      	ldr	r1, [r7, #20]
 8002456:	4618      	mov	r0, r3
 8002458:	f002 f92e 	bl	80046b8 <USB_EPStartXfer>
 800245c:	e005      	b.n	800246a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6979      	ldr	r1, [r7, #20]
 8002464:	4618      	mov	r0, r3
 8002466:	f002 f927 	bl	80046b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	330a      	adds	r3, #10
 800248a:	015b      	lsls	r3, r3, #5
 800248c:	4413      	add	r3, r2
 800248e:	3304      	adds	r3, #4
 8002490:	681b      	ldr	r3, [r3, #0]
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	460b      	mov	r3, r1
 80024aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ac:	7afb      	ldrb	r3, [r7, #11]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	015b      	lsls	r3, r3, #5
 80024b4:	3328      	adds	r3, #40	; 0x28
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4413      	add	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2201      	movs	r2, #1
 80024d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024d4:	7afb      	ldrb	r3, [r7, #11]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024e0:	7afb      	ldrb	r3, [r7, #11]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d106      	bne.n	80024f8 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6979      	ldr	r1, [r7, #20]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 f8e1 	bl	80046b8 <USB_EPStartXfer>
 80024f6:	e005      	b.n	8002504 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6979      	ldr	r1, [r7, #20]
 80024fe:	4618      	mov	r0, r3
 8002500:	f002 f8da 	bl	80046b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	f003 0207 	and.w	r2, r3, #7
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	d901      	bls.n	800252c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e046      	b.n	80025ba <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800252c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002530:	2b00      	cmp	r3, #0
 8002532:	da0b      	bge.n	800254c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	015b      	lsls	r3, r3, #5
 800253c:	3328      	adds	r3, #40	; 0x28
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2201      	movs	r2, #1
 8002548:	705a      	strb	r2, [r3, #1]
 800254a:	e009      	b.n	8002560 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	015b      	lsls	r3, r3, #5
 8002550:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	b2da      	uxtb	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_PCD_EP_SetStall+0x72>
 800257c:	2302      	movs	r3, #2
 800257e:	e01c      	b.n	80025ba <HAL_PCD_EP_SetStall+0xac>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68f9      	ldr	r1, [r7, #12]
 800258e:	4618      	mov	r0, r3
 8002590:	f002 fb4a 	bl	8004c28 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	2b00      	cmp	r3, #0
 800259c:	d108      	bne.n	80025b0 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80025a8:	4619      	mov	r1, r3
 80025aa:	4610      	mov	r0, r2
 80025ac:	f002 fc48 	bl	8004e40 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	f003 020f 	and.w	r2, r3, #15
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d901      	bls.n	80025e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e03a      	b.n	8002656 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	da0b      	bge.n	8002600 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	015b      	lsls	r3, r3, #5
 80025f0:	3328      	adds	r3, #40	; 0x28
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2201      	movs	r2, #1
 80025fc:	705a      	strb	r2, [r3, #1]
 80025fe:	e00b      	b.n	8002618 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	015b      	lsls	r3, r3, #5
 8002608:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	b2da      	uxtb	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_PCD_EP_ClrStall+0x76>
 8002634:	2302      	movs	r3, #2
 8002636:	e00e      	b.n	8002656 <HAL_PCD_EP_ClrStall+0x94>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68f9      	ldr	r1, [r7, #12]
 8002646:	4618      	mov	r0, r3
 8002648:	f002 fb30 	bl	8004cac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002668:	e282      	b.n	8002b70 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002672:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002674:	8afb      	ldrh	r3, [r7, #22]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800267e:	7d7b      	ldrb	r3, [r7, #21]
 8002680:	2b00      	cmp	r3, #0
 8002682:	f040 8142 	bne.w	800290a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002686:	8afb      	ldrh	r3, [r7, #22]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	d151      	bne.n	8002734 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800269c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a0:	b29c      	uxth	r4, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80026aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3328      	adds	r3, #40	; 0x28
 80026b6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	3302      	adds	r3, #2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	441a      	add	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80026f2:	2100      	movs	r1, #0
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f004 fa49 	bl	8006b8c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 8234 	beq.w	8002b70 <PCD_EP_ISR_Handler+0x510>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	f040 822f 	bne.w	8002b70 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800271e:	b2da      	uxtb	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	b292      	uxth	r2, r2
 8002726:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002732:	e21d      	b.n	8002b70 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800273a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002744:	8a7b      	ldrh	r3, [r7, #18]
 8002746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800274a:	2b00      	cmp	r3, #0
 800274c:	d033      	beq.n	80027b6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002756:	b29b      	uxth	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4413      	add	r3, r2
 8002762:	3306      	adds	r3, #6
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	4413      	add	r3, r2
 800276c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800278c:	b29b      	uxth	r3, r3
 800278e:	f002 fba6 	bl	8004ede <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	b29a      	uxth	r2, r3
 800279a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800279e:	4013      	ands	r3, r2
 80027a0:	b29c      	uxth	r4, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80027aa:	b292      	uxth	r2, r2
 80027ac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f004 f9c2 	bl	8006b38 <HAL_PCD_SetupStageCallback>
 80027b4:	e1dc      	b.n	8002b70 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f280 81d8 	bge.w	8002b70 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027cc:	4013      	ands	r3, r2
 80027ce:	b29c      	uxth	r4, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80027d8:	b292      	uxth	r2, r2
 80027da:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	3306      	adds	r3, #6
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d019      	beq.n	8002844 <PCD_EP_ISR_Handler+0x1e4>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d015      	beq.n	8002844 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6959      	ldr	r1, [r3, #20]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002828:	b29b      	uxth	r3, r3
 800282a:	f002 fb58 	bl	8004ede <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	441a      	add	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800283c:	2100      	movs	r1, #0
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f004 f98c 	bl	8006b5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	461c      	mov	r4, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002852:	b29b      	uxth	r3, r3
 8002854:	441c      	add	r4, r3
 8002856:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800285a:	461c      	mov	r4, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10e      	bne.n	8002882 <PCD_EP_ISR_Handler+0x222>
 8002864:	8823      	ldrh	r3, [r4, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800286c:	b29b      	uxth	r3, r3
 800286e:	8023      	strh	r3, [r4, #0]
 8002870:	8823      	ldrh	r3, [r4, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800287c:	b29b      	uxth	r3, r3
 800287e:	8023      	strh	r3, [r4, #0]
 8002880:	e02d      	b.n	80028de <PCD_EP_ISR_Handler+0x27e>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b3e      	cmp	r3, #62	; 0x3e
 8002888:	d812      	bhi.n	80028b0 <PCD_EP_ISR_Handler+0x250>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	085b      	lsrs	r3, r3, #1
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <PCD_EP_ISR_Handler+0x244>
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	3301      	adds	r3, #1
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	029b      	lsls	r3, r3, #10
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	8023      	strh	r3, [r4, #0]
 80028ae:	e016      	b.n	80028de <PCD_EP_ISR_Handler+0x27e>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	61bb      	str	r3, [r7, #24]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <PCD_EP_ISR_Handler+0x26a>
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	029b      	lsls	r3, r3, #10
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028da:	b29b      	uxth	r3, r3
 80028dc:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ee:	b29c      	uxth	r4, r3
 80028f0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80028f4:	b29c      	uxth	r4, r3
 80028f6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80028fa:	b29c      	uxth	r4, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4ba2      	ldr	r3, [pc, #648]	; (8002b8c <PCD_EP_ISR_Handler+0x52c>)
 8002902:	4323      	orrs	r3, r4
 8002904:	b29b      	uxth	r3, r3
 8002906:	8013      	strh	r3, [r2, #0]
 8002908:	e132      	b.n	8002b70 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	7d7b      	ldrb	r3, [r7, #21]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800291a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f280 80d1 	bge.w	8002ac6 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	7d7b      	ldrb	r3, [r7, #21]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b29a      	uxth	r2, r3
 8002934:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002938:	4013      	ands	r3, r2
 800293a:	b29c      	uxth	r4, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	7d7b      	ldrb	r3, [r7, #21]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800294c:	b292      	uxth	r2, r2
 800294e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002950:	7d7b      	ldrb	r3, [r7, #21]
 8002952:	015b      	lsls	r3, r3, #5
 8002954:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	7b1b      	ldrb	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d121      	bne.n	80029aa <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4413      	add	r3, r2
 800297a:	3306      	adds	r3, #6
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	4413      	add	r3, r2
 8002984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800298e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002990:	8bfb      	ldrh	r3, [r7, #30]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d072      	beq.n	8002a7c <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6959      	ldr	r1, [r3, #20]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	88da      	ldrh	r2, [r3, #6]
 80029a2:	8bfb      	ldrh	r3, [r7, #30]
 80029a4:	f002 fa9b 	bl	8004ede <USB_ReadPMA>
 80029a8:	e068      	b.n	8002a7c <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d021      	beq.n	8002a08 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4413      	add	r3, r2
 80029d8:	3302      	adds	r3, #2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ec:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80029ee:	8bfb      	ldrh	r3, [r7, #30]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d02a      	beq.n	8002a4a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6959      	ldr	r1, [r3, #20]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	891a      	ldrh	r2, [r3, #8]
 8002a00:	8bfb      	ldrh	r3, [r7, #30]
 8002a02:	f002 fa6c 	bl	8004ede <USB_ReadPMA>
 8002a06:	e020      	b.n	8002a4a <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3306      	adds	r3, #6
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a30:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002a32:	8bfb      	ldrh	r3, [r7, #30]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6959      	ldr	r1, [r3, #20]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	895a      	ldrh	r2, [r3, #10]
 8002a44:	8bfb      	ldrh	r3, [r7, #30]
 8002a46:	f002 fa4a 	bl	8004ede <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a64:	b29c      	uxth	r4, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	441a      	add	r2, r3
 8002a74:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <PCD_EP_ISR_Handler+0x530>)
 8002a76:	4323      	orrs	r3, r4
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	8bfb      	ldrh	r3, [r7, #30]
 8002a82:	441a      	add	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	8bfb      	ldrh	r3, [r7, #30]
 8002a8e:	441a      	add	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d004      	beq.n	8002aa6 <PCD_EP_ISR_Handler+0x446>
 8002a9c:	8bfa      	ldrh	r2, [r7, #30]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d206      	bcs.n	8002ab4 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f004 f855 	bl	8006b5c <HAL_PCD_DataOutStageCallback>
 8002ab2:	e008      	b.n	8002ac6 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	7819      	ldrb	r1, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff fc9d 	bl	8002400 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ac6:	8a7b      	ldrh	r3, [r7, #18]
 8002ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d04f      	beq.n	8002b70 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ad0:	7d7b      	ldrb	r3, [r7, #21]
 8002ad2:	015b      	lsls	r3, r3, #5
 8002ad4:	3328      	adds	r3, #40	; 0x28
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	7d7b      	ldrb	r3, [r7, #21]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af4:	b29c      	uxth	r4, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	7d7b      	ldrb	r3, [r7, #21]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	441a      	add	r2, r3
 8002b02:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4413      	add	r3, r2
 8002b22:	3302      	adds	r3, #2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	441a      	add	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d106      	bne.n	8002b5e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	4619      	mov	r1, r3
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f004 f818 	bl	8006b8c <HAL_PCD_DataInStageCallback>
 8002b5c:	e008      	b.n	8002b70 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	7819      	ldrb	r1, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff fc96 	bl	800249c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f6ff ad74 	blt.w	800266a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3724      	adds	r7, #36	; 0x24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd90      	pop	{r4, r7, pc}
 8002b8c:	ffff8080 	.word	0xffff8080
 8002b90:	ffff80c0 	.word	0xffff80c0

08002b94 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	817b      	strh	r3, [r7, #10]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ba6:	897b      	ldrh	r3, [r7, #10]
 8002ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb2:	897b      	ldrh	r3, [r7, #10]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	015b      	lsls	r3, r3, #5
 8002bba:	3328      	adds	r3, #40	; 0x28
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	e006      	b.n	8002bd2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bc4:	897b      	ldrh	r3, [r7, #10]
 8002bc6:	015b      	lsls	r3, r3, #5
 8002bc8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4413      	add	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002bd2:	893b      	ldrh	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	80da      	strh	r2, [r3, #6]
 8002be6:	e00b      	b.n	8002c00 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2201      	movs	r2, #1
 8002bec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e26c      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 8087 	beq.w	8002d3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c2c:	4b92      	ldr	r3, [pc, #584]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d00c      	beq.n	8002c52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c38:	4b8f      	ldr	r3, [pc, #572]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 030c 	and.w	r3, r3, #12
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d112      	bne.n	8002c6a <HAL_RCC_OscConfig+0x5e>
 8002c44:	4b8c      	ldr	r3, [pc, #560]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c50:	d10b      	bne.n	8002c6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c52:	4b89      	ldr	r3, [pc, #548]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d06c      	beq.n	8002d38 <HAL_RCC_OscConfig+0x12c>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d168      	bne.n	8002d38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e246      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c72:	d106      	bne.n	8002c82 <HAL_RCC_OscConfig+0x76>
 8002c74:	4b80      	ldr	r3, [pc, #512]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a7f      	ldr	r2, [pc, #508]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	e02e      	b.n	8002ce0 <HAL_RCC_OscConfig+0xd4>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x98>
 8002c8a:	4b7b      	ldr	r3, [pc, #492]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a7a      	ldr	r2, [pc, #488]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b78      	ldr	r3, [pc, #480]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a77      	ldr	r2, [pc, #476]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	e01d      	b.n	8002ce0 <HAL_RCC_OscConfig+0xd4>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xbc>
 8002cae:	4b72      	ldr	r3, [pc, #456]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a71      	ldr	r2, [pc, #452]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b6f      	ldr	r3, [pc, #444]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a6e      	ldr	r2, [pc, #440]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e00b      	b.n	8002ce0 <HAL_RCC_OscConfig+0xd4>
 8002cc8:	4b6b      	ldr	r3, [pc, #428]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a6a      	ldr	r2, [pc, #424]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	4b68      	ldr	r3, [pc, #416]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a67      	ldr	r2, [pc, #412]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d013      	beq.n	8002d10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fe24 	bl	8001934 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf0:	f7fe fe20 	bl	8001934 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	; 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e1fa      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	4b5d      	ldr	r3, [pc, #372]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0xe4>
 8002d0e:	e014      	b.n	8002d3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe fe10 	bl	8001934 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d18:	f7fe fe0c 	bl	8001934 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e1e6      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2a:	4b53      	ldr	r3, [pc, #332]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x10c>
 8002d36:	e000      	b.n	8002d3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d063      	beq.n	8002e0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d46:	4b4c      	ldr	r3, [pc, #304]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00b      	beq.n	8002d6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d52:	4b49      	ldr	r3, [pc, #292]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d11c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x18c>
 8002d5e:	4b46      	ldr	r3, [pc, #280]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d116      	bne.n	8002d98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6a:	4b43      	ldr	r3, [pc, #268]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_RCC_OscConfig+0x176>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d001      	beq.n	8002d82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e1ba      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d82:	4b3d      	ldr	r3, [pc, #244]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4939      	ldr	r1, [pc, #228]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d96:	e03a      	b.n	8002e0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d020      	beq.n	8002de2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da0:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <HAL_RCC_OscConfig+0x270>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7fe fdc5 	bl	8001934 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dae:	f7fe fdc1 	bl	8001934 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e19b      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc0:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dcc:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4927      	ldr	r1, [pc, #156]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	600b      	str	r3, [r1, #0]
 8002de0:	e015      	b.n	8002e0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de2:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <HAL_RCC_OscConfig+0x270>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe fda4 	bl	8001934 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df0:	f7fe fda0 	bl	8001934 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e17a      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d03a      	beq.n	8002e90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d019      	beq.n	8002e56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <HAL_RCC_OscConfig+0x274>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e28:	f7fe fd84 	bl	8001934 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e30:	f7fe fd80 	bl	8001934 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e15a      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e42:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e4e:	2001      	movs	r0, #1
 8002e50:	f000 faa8 	bl	80033a4 <RCC_Delay>
 8002e54:	e01c      	b.n	8002e90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_RCC_OscConfig+0x274>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5c:	f7fe fd6a 	bl	8001934 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e62:	e00f      	b.n	8002e84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e64:	f7fe fd66 	bl	8001934 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d908      	bls.n	8002e84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e140      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	42420000 	.word	0x42420000
 8002e80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e84:	4b9e      	ldr	r3, [pc, #632]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e9      	bne.n	8002e64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80a6 	beq.w	8002fea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea2:	4b97      	ldr	r3, [pc, #604]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10d      	bne.n	8002eca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	4b94      	ldr	r3, [pc, #592]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4a93      	ldr	r2, [pc, #588]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	61d3      	str	r3, [r2, #28]
 8002eba:	4b91      	ldr	r3, [pc, #580]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eca:	4b8e      	ldr	r3, [pc, #568]	; (8003104 <HAL_RCC_OscConfig+0x4f8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d118      	bne.n	8002f08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed6:	4b8b      	ldr	r3, [pc, #556]	; (8003104 <HAL_RCC_OscConfig+0x4f8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a8a      	ldr	r2, [pc, #552]	; (8003104 <HAL_RCC_OscConfig+0x4f8>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe fd27 	bl	8001934 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eea:	f7fe fd23 	bl	8001934 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b64      	cmp	r3, #100	; 0x64
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e0fd      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efc:	4b81      	ldr	r3, [pc, #516]	; (8003104 <HAL_RCC_OscConfig+0x4f8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x312>
 8002f10:	4b7b      	ldr	r3, [pc, #492]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4a7a      	ldr	r2, [pc, #488]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6213      	str	r3, [r2, #32]
 8002f1c:	e02d      	b.n	8002f7a <HAL_RCC_OscConfig+0x36e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x334>
 8002f26:	4b76      	ldr	r3, [pc, #472]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4a75      	ldr	r2, [pc, #468]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6213      	str	r3, [r2, #32]
 8002f32:	4b73      	ldr	r3, [pc, #460]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a72      	ldr	r2, [pc, #456]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002f38:	f023 0304 	bic.w	r3, r3, #4
 8002f3c:	6213      	str	r3, [r2, #32]
 8002f3e:	e01c      	b.n	8002f7a <HAL_RCC_OscConfig+0x36e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b05      	cmp	r3, #5
 8002f46:	d10c      	bne.n	8002f62 <HAL_RCC_OscConfig+0x356>
 8002f48:	4b6d      	ldr	r3, [pc, #436]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	4a6c      	ldr	r2, [pc, #432]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	6213      	str	r3, [r2, #32]
 8002f54:	4b6a      	ldr	r3, [pc, #424]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4a69      	ldr	r2, [pc, #420]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6213      	str	r3, [r2, #32]
 8002f60:	e00b      	b.n	8002f7a <HAL_RCC_OscConfig+0x36e>
 8002f62:	4b67      	ldr	r3, [pc, #412]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	4a66      	ldr	r2, [pc, #408]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6213      	str	r3, [r2, #32]
 8002f6e:	4b64      	ldr	r3, [pc, #400]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4a63      	ldr	r2, [pc, #396]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002f74:	f023 0304 	bic.w	r3, r3, #4
 8002f78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d015      	beq.n	8002fae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7fe fcd7 	bl	8001934 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fe fcd3 	bl	8001934 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e0ab      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa0:	4b57      	ldr	r3, [pc, #348]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0ee      	beq.n	8002f8a <HAL_RCC_OscConfig+0x37e>
 8002fac:	e014      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fae:	f7fe fcc1 	bl	8001934 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb4:	e00a      	b.n	8002fcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb6:	f7fe fcbd 	bl	8001934 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e095      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fcc:	4b4c      	ldr	r3, [pc, #304]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1ee      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d105      	bne.n	8002fea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fde:	4b48      	ldr	r3, [pc, #288]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	4a47      	ldr	r2, [pc, #284]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 8081 	beq.w	80030f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ff4:	4b42      	ldr	r3, [pc, #264]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d061      	beq.n	80030c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d146      	bne.n	8003096 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003008:	4b3f      	ldr	r3, [pc, #252]	; (8003108 <HAL_RCC_OscConfig+0x4fc>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fe fc91 	bl	8001934 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003016:	f7fe fc8d 	bl	8001934 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e067      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003028:	4b35      	ldr	r3, [pc, #212]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f0      	bne.n	8003016 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800303c:	d108      	bne.n	8003050 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800303e:	4b30      	ldr	r3, [pc, #192]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	492d      	ldr	r1, [pc, #180]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 800304c:	4313      	orrs	r3, r2
 800304e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003050:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a19      	ldr	r1, [r3, #32]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	430b      	orrs	r3, r1
 8003062:	4927      	ldr	r1, [pc, #156]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003068:	4b27      	ldr	r3, [pc, #156]	; (8003108 <HAL_RCC_OscConfig+0x4fc>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fe fc61 	bl	8001934 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003076:	f7fe fc5d 	bl	8001934 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e037      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003088:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x46a>
 8003094:	e02f      	b.n	80030f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003096:	4b1c      	ldr	r3, [pc, #112]	; (8003108 <HAL_RCC_OscConfig+0x4fc>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe fc4a 	bl	8001934 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe fc46 	bl	8001934 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e020      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x498>
 80030c2:	e018      	b.n	80030f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e013      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_RCC_OscConfig+0x4f4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d106      	bne.n	80030f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d001      	beq.n	80030f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000
 8003104:	40007000 	.word	0x40007000
 8003108:	42420060 	.word	0x42420060

0800310c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0d0      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003120:	4b6a      	ldr	r3, [pc, #424]	; (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d910      	bls.n	8003150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b67      	ldr	r3, [pc, #412]	; (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 0207 	bic.w	r2, r3, #7
 8003136:	4965      	ldr	r1, [pc, #404]	; (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b63      	ldr	r3, [pc, #396]	; (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0b8      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d020      	beq.n	800319e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003168:	4b59      	ldr	r3, [pc, #356]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4a58      	ldr	r2, [pc, #352]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 800316e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003172:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003180:	4b53      	ldr	r3, [pc, #332]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a52      	ldr	r2, [pc, #328]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003186:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800318a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318c:	4b50      	ldr	r3, [pc, #320]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	494d      	ldr	r1, [pc, #308]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	4313      	orrs	r3, r2
 800319c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d040      	beq.n	800322c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d115      	bne.n	80031ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e07f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ca:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e073      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031da:	4b3d      	ldr	r3, [pc, #244]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e06b      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ea:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f023 0203 	bic.w	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4936      	ldr	r1, [pc, #216]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031fc:	f7fe fb9a 	bl	8001934 <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	e00a      	b.n	800321a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003204:	f7fe fb96 	bl	8001934 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e053      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	4b2d      	ldr	r3, [pc, #180]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 020c 	and.w	r2, r3, #12
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	429a      	cmp	r2, r3
 800322a:	d1eb      	bne.n	8003204 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800322c:	4b27      	ldr	r3, [pc, #156]	; (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d210      	bcs.n	800325c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 0207 	bic.w	r2, r3, #7
 8003242:	4922      	ldr	r1, [pc, #136]	; (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e032      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4916      	ldr	r1, [pc, #88]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003286:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	490e      	ldr	r1, [pc, #56]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800329a:	f000 f821 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 800329e:	4601      	mov	r1, r0
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <HAL_RCC_ClockConfig+0x1c8>)
 80032ac:	5cd3      	ldrb	r3, [r2, r3]
 80032ae:	fa21 f303 	lsr.w	r3, r1, r3
 80032b2:	4a09      	ldr	r2, [pc, #36]	; (80032d8 <HAL_RCC_ClockConfig+0x1cc>)
 80032b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032b6:	4b09      	ldr	r3, [pc, #36]	; (80032dc <HAL_RCC_ClockConfig+0x1d0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe faf8 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40022000 	.word	0x40022000
 80032d0:	40021000 	.word	0x40021000
 80032d4:	0800c794 	.word	0x0800c794
 80032d8:	20000000 	.word	0x20000000
 80032dc:	20000004 	.word	0x20000004

080032e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e0:	b490      	push	{r4, r7}
 80032e2:	b08a      	sub	sp, #40	; 0x28
 80032e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032e6:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032e8:	1d3c      	adds	r4, r7, #4
 80032ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032f0:	4b28      	ldr	r3, [pc, #160]	; (8003394 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	2300      	movs	r3, #0
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800330a:	4b23      	ldr	r3, [pc, #140]	; (8003398 <HAL_RCC_GetSysClockFreq+0xb8>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b04      	cmp	r3, #4
 8003318:	d002      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x40>
 800331a:	2b08      	cmp	r3, #8
 800331c:	d003      	beq.n	8003326 <HAL_RCC_GetSysClockFreq+0x46>
 800331e:	e02d      	b.n	800337c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003320:	4b1e      	ldr	r3, [pc, #120]	; (800339c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003322:	623b      	str	r3, [r7, #32]
      break;
 8003324:	e02d      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	0c9b      	lsrs	r3, r3, #18
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003332:	4413      	add	r3, r2
 8003334:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003338:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d013      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003344:	4b14      	ldr	r3, [pc, #80]	; (8003398 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	0c5b      	lsrs	r3, r3, #17
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003352:	4413      	add	r3, r2
 8003354:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003358:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	4a0f      	ldr	r2, [pc, #60]	; (800339c <HAL_RCC_GetSysClockFreq+0xbc>)
 800335e:	fb02 f203 	mul.w	r2, r2, r3
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	fbb2 f3f3 	udiv	r3, r2, r3
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
 800336a:	e004      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	4a0c      	ldr	r2, [pc, #48]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003370:	fb02 f303 	mul.w	r3, r2, r3
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	623b      	str	r3, [r7, #32]
      break;
 800337a:	e002      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800337c:	4b07      	ldr	r3, [pc, #28]	; (800339c <HAL_RCC_GetSysClockFreq+0xbc>)
 800337e:	623b      	str	r3, [r7, #32]
      break;
 8003380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003382:	6a3b      	ldr	r3, [r7, #32]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3728      	adds	r7, #40	; 0x28
 8003388:	46bd      	mov	sp, r7
 800338a:	bc90      	pop	{r4, r7}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	0800c738 	.word	0x0800c738
 8003394:	0800c748 	.word	0x0800c748
 8003398:	40021000 	.word	0x40021000
 800339c:	007a1200 	.word	0x007a1200
 80033a0:	003d0900 	.word	0x003d0900

080033a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <RCC_Delay+0x34>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <RCC_Delay+0x38>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	0a5b      	lsrs	r3, r3, #9
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033c0:	bf00      	nop
  }
  while (Delay --);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1e5a      	subs	r2, r3, #1
 80033c6:	60fa      	str	r2, [r7, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f9      	bne.n	80033c0 <RCC_Delay+0x1c>
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000000 	.word	0x20000000
 80033dc:	10624dd3 	.word	0x10624dd3

080033e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d07d      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80033fc:	2300      	movs	r3, #0
 80033fe:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003400:	4b4f      	ldr	r3, [pc, #316]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10d      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340c:	4b4c      	ldr	r3, [pc, #304]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	4a4b      	ldr	r2, [pc, #300]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003416:	61d3      	str	r3, [r2, #28]
 8003418:	4b49      	ldr	r3, [pc, #292]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003424:	2301      	movs	r3, #1
 8003426:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	4b46      	ldr	r3, [pc, #280]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d118      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003434:	4b43      	ldr	r3, [pc, #268]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a42      	ldr	r2, [pc, #264]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800343a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003440:	f7fe fa78 	bl	8001934 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003446:	e008      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003448:	f7fe fa74 	bl	8001934 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	; 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e06d      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345a:	4b3a      	ldr	r3, [pc, #232]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003466:	4b36      	ldr	r3, [pc, #216]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d02e      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	429a      	cmp	r2, r3
 8003482:	d027      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003484:	4b2e      	ldr	r3, [pc, #184]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800348e:	4b2e      	ldr	r3, [pc, #184]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003494:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800349a:	4a29      	ldr	r2, [pc, #164]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d014      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7fe fa43 	bl	8001934 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b0:	e00a      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f7fe fa3f 	bl	8001934 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e036      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c8:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ee      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d4:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4917      	ldr	r1, [pc, #92]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d105      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ec:	4b14      	ldr	r3, [pc, #80]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	4a13      	ldr	r2, [pc, #76]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003504:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	490b      	ldr	r1, [pc, #44]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	4904      	ldr	r1, [pc, #16]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
 8003544:	40007000 	.word	0x40007000
 8003548:	42420440 	.word	0x42420440

0800354c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e053      	b.n	8003606 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d106      	bne.n	800357e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7fd ff8f 	bl	800149c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003594:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	ea42 0103 	orr.w	r1, r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	0c1a      	lsrs	r2, r3, #16
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f002 0204 	and.w	r2, r2, #4
 80035e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b088      	sub	sp, #32
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	603b      	str	r3, [r7, #0]
 800361a:	4613      	mov	r3, r2
 800361c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_SPI_Transmit+0x22>
 800362c:	2302      	movs	r3, #2
 800362e:	e11e      	b.n	800386e <HAL_SPI_Transmit+0x260>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003638:	f7fe f97c 	bl	8001934 <HAL_GetTick>
 800363c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d002      	beq.n	8003654 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800364e:	2302      	movs	r3, #2
 8003650:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003652:	e103      	b.n	800385c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_SPI_Transmit+0x52>
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003664:	e0fa      	b.n	800385c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2203      	movs	r2, #3
 800366a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	88fa      	ldrh	r2, [r7, #6]
 8003684:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ac:	d107      	bne.n	80036be <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d007      	beq.n	80036dc <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e4:	d14b      	bne.n	800377e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_SPI_Transmit+0xe6>
 80036ee:	8afb      	ldrh	r3, [r7, #22]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d13e      	bne.n	8003772 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	881a      	ldrh	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	1c9a      	adds	r2, r3, #2
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003718:	e02b      	b.n	8003772 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b02      	cmp	r3, #2
 8003726:	d112      	bne.n	800374e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	881a      	ldrh	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	1c9a      	adds	r2, r3, #2
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	86da      	strh	r2, [r3, #54]	; 0x36
 800374c:	e011      	b.n	8003772 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800374e:	f7fe f8f1 	bl	8001934 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d803      	bhi.n	8003766 <HAL_SPI_Transmit+0x158>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d102      	bne.n	800376c <HAL_SPI_Transmit+0x15e>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003770:	e074      	b.n	800385c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ce      	bne.n	800371a <HAL_SPI_Transmit+0x10c>
 800377c:	e04c      	b.n	8003818 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_SPI_Transmit+0x17e>
 8003786:	8afb      	ldrh	r3, [r7, #22]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d140      	bne.n	800380e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	330c      	adds	r3, #12
 8003796:	7812      	ldrb	r2, [r2, #0]
 8003798:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80037b2:	e02c      	b.n	800380e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d113      	bne.n	80037ea <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	330c      	adds	r3, #12
 80037cc:	7812      	ldrb	r2, [r2, #0]
 80037ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80037e8:	e011      	b.n	800380e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037ea:	f7fe f8a3 	bl	8001934 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d803      	bhi.n	8003802 <HAL_SPI_Transmit+0x1f4>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003800:	d102      	bne.n	8003808 <HAL_SPI_Transmit+0x1fa>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d102      	bne.n	800380e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800380c:	e026      	b.n	800385c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1cd      	bne.n	80037b4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	6839      	ldr	r1, [r7, #0]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fa36 	bl	8003c8e <SPI_EndRxTxTransaction>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e000      	b.n	800385c <HAL_SPI_Transmit+0x24e>
  }

error:
 800385a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800386c:	7ffb      	ldrb	r3, [r7, #31]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b08c      	sub	sp, #48	; 0x30
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003884:	2301      	movs	r3, #1
 8003886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_SPI_TransmitReceive+0x26>
 8003898:	2302      	movs	r3, #2
 800389a:	e18a      	b.n	8003bb2 <HAL_SPI_TransmitReceive+0x33c>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038a4:	f7fe f846 	bl	8001934 <HAL_GetTick>
 80038a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80038ba:	887b      	ldrh	r3, [r7, #2]
 80038bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d00f      	beq.n	80038e6 <HAL_SPI_TransmitReceive+0x70>
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038cc:	d107      	bne.n	80038de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <HAL_SPI_TransmitReceive+0x68>
 80038d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d003      	beq.n	80038e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80038de:	2302      	movs	r3, #2
 80038e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038e4:	e15b      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_SPI_TransmitReceive+0x82>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_SPI_TransmitReceive+0x82>
 80038f2:	887b      	ldrh	r3, [r7, #2]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d103      	bne.n	8003900 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038fe:	e14e      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b04      	cmp	r3, #4
 800390a:	d003      	beq.n	8003914 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2205      	movs	r2, #5
 8003910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	887a      	ldrh	r2, [r7, #2]
 8003924:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	887a      	ldrh	r2, [r7, #2]
 800392a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	887a      	ldrh	r2, [r7, #2]
 8003936:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003954:	2b40      	cmp	r3, #64	; 0x40
 8003956:	d007      	beq.n	8003968 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003966:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003970:	d178      	bne.n	8003a64 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HAL_SPI_TransmitReceive+0x10a>
 800397a:	8b7b      	ldrh	r3, [r7, #26]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d166      	bne.n	8003a4e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	881a      	ldrh	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	1c9a      	adds	r2, r3, #2
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039a4:	e053      	b.n	8003a4e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d11b      	bne.n	80039ec <HAL_SPI_TransmitReceive+0x176>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d016      	beq.n	80039ec <HAL_SPI_TransmitReceive+0x176>
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d113      	bne.n	80039ec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	881a      	ldrh	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	1c9a      	adds	r2, r3, #2
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d119      	bne.n	8003a2e <HAL_SPI_TransmitReceive+0x1b8>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d014      	beq.n	8003a2e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	b292      	uxth	r2, r2
 8003a10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	1c9a      	adds	r2, r3, #2
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a2e:	f7fd ff81 	bl	8001934 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d807      	bhi.n	8003a4e <HAL_SPI_TransmitReceive+0x1d8>
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a44:	d003      	beq.n	8003a4e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a4c:	e0a7      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1a6      	bne.n	80039a6 <HAL_SPI_TransmitReceive+0x130>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1a1      	bne.n	80039a6 <HAL_SPI_TransmitReceive+0x130>
 8003a62:	e07c      	b.n	8003b5e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_SPI_TransmitReceive+0x1fc>
 8003a6c:	8b7b      	ldrh	r3, [r7, #26]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d16b      	bne.n	8003b4a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	7812      	ldrb	r2, [r2, #0]
 8003a7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a98:	e057      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d11c      	bne.n	8003ae2 <HAL_SPI_TransmitReceive+0x26c>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d017      	beq.n	8003ae2 <HAL_SPI_TransmitReceive+0x26c>
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d114      	bne.n	8003ae2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	7812      	ldrb	r2, [r2, #0]
 8003ac4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d119      	bne.n	8003b24 <HAL_SPI_TransmitReceive+0x2ae>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d014      	beq.n	8003b24 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b20:	2301      	movs	r3, #1
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b24:	f7fd ff06 	bl	8001934 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d803      	bhi.n	8003b3c <HAL_SPI_TransmitReceive+0x2c6>
 8003b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d102      	bne.n	8003b42 <HAL_SPI_TransmitReceive+0x2cc>
 8003b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d103      	bne.n	8003b4a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b48:	e029      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1a2      	bne.n	8003a9a <HAL_SPI_TransmitReceive+0x224>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d19d      	bne.n	8003a9a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f893 	bl	8003c8e <SPI_EndRxTxTransaction>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d006      	beq.n	8003b7c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b7a:	e010      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	e000      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003b9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3730      	adds	r7, #48	; 0x30
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bca:	e04c      	b.n	8003c66 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd2:	d048      	beq.n	8003c66 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003bd4:	f7fd feae 	bl	8001934 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d902      	bls.n	8003bea <SPI_WaitFlagStateUntilTimeout+0x30>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d13d      	bne.n	8003c66 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c02:	d111      	bne.n	8003c28 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c0c:	d004      	beq.n	8003c18 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c16:	d107      	bne.n	8003c28 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c30:	d10f      	bne.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e00f      	b.n	8003c86 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	bf0c      	ite	eq
 8003c76:	2301      	moveq	r3, #1
 8003c78:	2300      	movne	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d1a3      	bne.n	8003bcc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af02      	add	r7, sp, #8
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2180      	movs	r1, #128	; 0x80
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7ff ff88 	bl	8003bba <SPI_WaitFlagStateUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb4:	f043 0220 	orr.w	r2, r3, #32
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e000      	b.n	8003cc2 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cca:	b084      	sub	sp, #16
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	f107 0014 	add.w	r0, r7, #20
 8003cd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	b004      	add	sp, #16
 8003ce8:	4770      	bx	lr

08003cea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cf2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cf6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	89fb      	ldrh	r3, [r7, #14]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d20:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d24:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	b21a      	sxth	r2, r3
 8003d30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d34:	43db      	mvns	r3, r3
 8003d36:	b21b      	sxth	r3, r3
 8003d38:	4013      	ands	r3, r2
 8003d3a:	b21b      	sxth	r3, r3
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr

08003d68 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d68:	b084      	sub	sp, #16
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	f107 0014 	add.w	r0, r7, #20
 8003d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff ffa5 	bl	8003cea <USB_EnableGlobalInt>

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dac:	b004      	add	sp, #16
 8003dae:	4770      	bx	lr

08003db0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003db0:	b490      	push	{r4, r7}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd4:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	78db      	ldrb	r3, [r3, #3]
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d819      	bhi.n	8003e12 <USB_ActivateEndpoint+0x62>
 8003dde:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <USB_ActivateEndpoint+0x34>)
 8003de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de4:	08003df5 	.word	0x08003df5
 8003de8:	08003e09 	.word	0x08003e09
 8003dec:	08003e19 	.word	0x08003e19
 8003df0:	08003dff 	.word	0x08003dff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003df4:	89bb      	ldrh	r3, [r7, #12]
 8003df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dfa:	81bb      	strh	r3, [r7, #12]
      break;
 8003dfc:	e00d      	b.n	8003e1a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003dfe:	89bb      	ldrh	r3, [r7, #12]
 8003e00:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003e04:	81bb      	strh	r3, [r7, #12]
      break;
 8003e06:	e008      	b.n	8003e1a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003e08:	89bb      	ldrh	r3, [r7, #12]
 8003e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e0e:	81bb      	strh	r3, [r7, #12]
      break;
 8003e10:	e003      	b.n	8003e1a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
      break;
 8003e16:	e000      	b.n	8003e1a <USB_ActivateEndpoint+0x6a>
      break;
 8003e18:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	441a      	add	r2, r3
 8003e24:	89bb      	ldrh	r3, [r7, #12]
 8003e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	b29c      	uxth	r4, r3
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	441a      	add	r2, r3
 8003e66:	4b8a      	ldr	r3, [pc, #552]	; (8004090 <USB_ActivateEndpoint+0x2e0>)
 8003e68:	4323      	orrs	r3, r4
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	7b1b      	ldrb	r3, [r3, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f040 8112 	bne.w	800409c <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	785b      	ldrb	r3, [r3, #1]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d067      	beq.n	8003f50 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e80:	687c      	ldr	r4, [r7, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	441c      	add	r4, r3
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	4423      	add	r3, r4
 8003e94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e98:	461c      	mov	r4, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	88db      	ldrh	r3, [r3, #6]
 8003e9e:	085b      	lsrs	r3, r3, #1
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b29c      	uxth	r4, r3
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d014      	beq.n	8003eea <USB_ActivateEndpoint+0x13a>
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed6:	b29c      	uxth	r4, r3
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	441a      	add	r2, r3
 8003ee2:	4b6c      	ldr	r3, [pc, #432]	; (8004094 <USB_ActivateEndpoint+0x2e4>)
 8003ee4:	4323      	orrs	r3, r4
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	78db      	ldrb	r3, [r3, #3]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d018      	beq.n	8003f24 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f08:	b29c      	uxth	r4, r3
 8003f0a:	f084 0320 	eor.w	r3, r4, #32
 8003f0e:	b29c      	uxth	r4, r3
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	441a      	add	r2, r3
 8003f1a:	4b5d      	ldr	r3, [pc, #372]	; (8004090 <USB_ActivateEndpoint+0x2e0>)
 8003f1c:	4323      	orrs	r3, r4
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	8013      	strh	r3, [r2, #0]
 8003f22:	e22b      	b.n	800437c <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f3a:	b29c      	uxth	r4, r3
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	441a      	add	r2, r3
 8003f46:	4b52      	ldr	r3, [pc, #328]	; (8004090 <USB_ActivateEndpoint+0x2e0>)
 8003f48:	4323      	orrs	r3, r4
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	8013      	strh	r3, [r2, #0]
 8003f4e:	e215      	b.n	800437c <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f50:	687c      	ldr	r4, [r7, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	441c      	add	r4, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	4423      	add	r3, r4
 8003f64:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f68:	461c      	mov	r4, r3
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	88db      	ldrh	r3, [r3, #6]
 8003f6e:	085b      	lsrs	r3, r3, #1
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f78:	687c      	ldr	r4, [r7, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	441c      	add	r4, r3
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	4423      	add	r3, r4
 8003f8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f90:	461c      	mov	r4, r3
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10e      	bne.n	8003fb8 <USB_ActivateEndpoint+0x208>
 8003f9a:	8823      	ldrh	r3, [r4, #0]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	8023      	strh	r3, [r4, #0]
 8003fa6:	8823      	ldrh	r3, [r4, #0]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	8023      	strh	r3, [r4, #0]
 8003fb6:	e02d      	b.n	8004014 <USB_ActivateEndpoint+0x264>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	2b3e      	cmp	r3, #62	; 0x3e
 8003fbe:	d812      	bhi.n	8003fe6 <USB_ActivateEndpoint+0x236>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	085b      	lsrs	r3, r3, #1
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <USB_ActivateEndpoint+0x22a>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	029b      	lsls	r3, r3, #10
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	8023      	strh	r3, [r4, #0]
 8003fe4:	e016      	b.n	8004014 <USB_ActivateEndpoint+0x264>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d102      	bne.n	8004000 <USB_ActivateEndpoint+0x250>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	60bb      	str	r3, [r7, #8]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	b29b      	uxth	r3, r3
 8004004:	029b      	lsls	r3, r3, #10
 8004006:	b29b      	uxth	r3, r3
 8004008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800400c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004010:	b29b      	uxth	r3, r3
 8004012:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29c      	uxth	r4, r3
 8004022:	4623      	mov	r3, r4
 8004024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d014      	beq.n	8004056 <USB_ActivateEndpoint+0x2a6>
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	b29b      	uxth	r3, r3
 800403a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004042:	b29c      	uxth	r4, r3
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	441a      	add	r2, r3
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <USB_ActivateEndpoint+0x2e8>)
 8004050:	4323      	orrs	r3, r4
 8004052:	b29b      	uxth	r3, r3
 8004054:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406c:	b29c      	uxth	r4, r3
 800406e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004072:	b29c      	uxth	r4, r3
 8004074:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004078:	b29c      	uxth	r4, r3
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	441a      	add	r2, r3
 8004084:	4b02      	ldr	r3, [pc, #8]	; (8004090 <USB_ActivateEndpoint+0x2e0>)
 8004086:	4323      	orrs	r3, r4
 8004088:	b29b      	uxth	r3, r3
 800408a:	8013      	strh	r3, [r2, #0]
 800408c:	e176      	b.n	800437c <USB_ActivateEndpoint+0x5cc>
 800408e:	bf00      	nop
 8004090:	ffff8080 	.word	0xffff8080
 8004094:	ffff80c0 	.word	0xffff80c0
 8004098:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b2:	b29c      	uxth	r4, r3
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	441a      	add	r2, r3
 80040be:	4b96      	ldr	r3, [pc, #600]	; (8004318 <USB_ActivateEndpoint+0x568>)
 80040c0:	4323      	orrs	r3, r4
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80040c6:	687c      	ldr	r4, [r7, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	441c      	add	r4, r3
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	4423      	add	r3, r4
 80040da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040de:	461c      	mov	r4, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	891b      	ldrh	r3, [r3, #8]
 80040e4:	085b      	lsrs	r3, r3, #1
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	8023      	strh	r3, [r4, #0]
 80040ee:	687c      	ldr	r4, [r7, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	441c      	add	r4, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	4423      	add	r3, r4
 8004102:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004106:	461c      	mov	r4, r3
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	895b      	ldrh	r3, [r3, #10]
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	b29b      	uxth	r3, r3
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	b29b      	uxth	r3, r3
 8004114:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	785b      	ldrb	r3, [r3, #1]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f040 8088 	bne.w	8004230 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	b29c      	uxth	r4, r3
 800412e:	4623      	mov	r3, r4
 8004130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d014      	beq.n	8004162 <USB_ActivateEndpoint+0x3b2>
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	b29b      	uxth	r3, r3
 8004146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	b29c      	uxth	r4, r3
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	441a      	add	r2, r3
 800415a:	4b70      	ldr	r3, [pc, #448]	; (800431c <USB_ActivateEndpoint+0x56c>)
 800415c:	4323      	orrs	r3, r4
 800415e:	b29b      	uxth	r3, r3
 8004160:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29c      	uxth	r4, r3
 8004170:	4623      	mov	r3, r4
 8004172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d014      	beq.n	80041a4 <USB_ActivateEndpoint+0x3f4>
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004190:	b29c      	uxth	r4, r3
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	441a      	add	r2, r3
 800419c:	4b60      	ldr	r3, [pc, #384]	; (8004320 <USB_ActivateEndpoint+0x570>)
 800419e:	4323      	orrs	r3, r4
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	b29c      	uxth	r4, r3
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	441a      	add	r2, r3
 80041c6:	4b56      	ldr	r3, [pc, #344]	; (8004320 <USB_ActivateEndpoint+0x570>)
 80041c8:	4323      	orrs	r3, r4
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e4:	b29c      	uxth	r4, r3
 80041e6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80041ea:	b29c      	uxth	r4, r3
 80041ec:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80041f0:	b29c      	uxth	r4, r3
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	441a      	add	r2, r3
 80041fc:	4b49      	ldr	r3, [pc, #292]	; (8004324 <USB_ActivateEndpoint+0x574>)
 80041fe:	4323      	orrs	r3, r4
 8004200:	b29b      	uxth	r3, r3
 8004202:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421a:	b29c      	uxth	r4, r3
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	441a      	add	r2, r3
 8004226:	4b3f      	ldr	r3, [pc, #252]	; (8004324 <USB_ActivateEndpoint+0x574>)
 8004228:	4323      	orrs	r3, r4
 800422a:	b29b      	uxth	r3, r3
 800422c:	8013      	strh	r3, [r2, #0]
 800422e:	e0a5      	b.n	800437c <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	b29c      	uxth	r4, r3
 800423e:	4623      	mov	r3, r4
 8004240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d014      	beq.n	8004272 <USB_ActivateEndpoint+0x4c2>
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800425a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425e:	b29c      	uxth	r4, r3
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	441a      	add	r2, r3
 800426a:	4b2c      	ldr	r3, [pc, #176]	; (800431c <USB_ActivateEndpoint+0x56c>)
 800426c:	4323      	orrs	r3, r4
 800426e:	b29b      	uxth	r3, r3
 8004270:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29c      	uxth	r4, r3
 8004280:	4623      	mov	r3, r4
 8004282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d014      	beq.n	80042b4 <USB_ActivateEndpoint+0x504>
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29b      	uxth	r3, r3
 8004298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a0:	b29c      	uxth	r4, r3
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	441a      	add	r2, r3
 80042ac:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <USB_ActivateEndpoint+0x570>)
 80042ae:	4323      	orrs	r3, r4
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ca:	b29c      	uxth	r4, r3
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	441a      	add	r2, r3
 80042d6:	4b11      	ldr	r3, [pc, #68]	; (800431c <USB_ActivateEndpoint+0x56c>)
 80042d8:	4323      	orrs	r3, r4
 80042da:	b29b      	uxth	r3, r3
 80042dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	78db      	ldrb	r3, [r3, #3]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d020      	beq.n	8004328 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042fc:	b29c      	uxth	r4, r3
 80042fe:	f084 0320 	eor.w	r3, r4, #32
 8004302:	b29c      	uxth	r4, r3
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	441a      	add	r2, r3
 800430e:	4b05      	ldr	r3, [pc, #20]	; (8004324 <USB_ActivateEndpoint+0x574>)
 8004310:	4323      	orrs	r3, r4
 8004312:	b29b      	uxth	r3, r3
 8004314:	8013      	strh	r3, [r2, #0]
 8004316:	e01c      	b.n	8004352 <USB_ActivateEndpoint+0x5a2>
 8004318:	ffff8180 	.word	0xffff8180
 800431c:	ffffc080 	.word	0xffffc080
 8004320:	ffff80c0 	.word	0xffff80c0
 8004324:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b29b      	uxth	r3, r3
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800433e:	b29c      	uxth	r4, r3
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	441a      	add	r2, r3
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <USB_ActivateEndpoint+0x5d8>)
 800434c:	4323      	orrs	r3, r4
 800434e:	b29b      	uxth	r3, r3
 8004350:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004368:	b29c      	uxth	r4, r3
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	441a      	add	r2, r3
 8004374:	4b04      	ldr	r3, [pc, #16]	; (8004388 <USB_ActivateEndpoint+0x5d8>)
 8004376:	4323      	orrs	r3, r4
 8004378:	b29b      	uxth	r3, r3
 800437a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bc90      	pop	{r4, r7}
 8004386:	4770      	bx	lr
 8004388:	ffff8080 	.word	0xffff8080

0800438c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800438c:	b490      	push	{r4, r7}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	7b1b      	ldrb	r3, [r3, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d171      	bne.n	8004482 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	785b      	ldrb	r3, [r3, #1]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d036      	beq.n	8004414 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29c      	uxth	r4, r3
 80043b4:	4623      	mov	r3, r4
 80043b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d014      	beq.n	80043e8 <USB_DeactivateEndpoint+0x5c>
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d4:	b29c      	uxth	r4, r3
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	441a      	add	r2, r3
 80043e0:	4b6b      	ldr	r3, [pc, #428]	; (8004590 <USB_DeactivateEndpoint+0x204>)
 80043e2:	4323      	orrs	r3, r4
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043fe:	b29c      	uxth	r4, r3
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	441a      	add	r2, r3
 800440a:	4b62      	ldr	r3, [pc, #392]	; (8004594 <USB_DeactivateEndpoint+0x208>)
 800440c:	4323      	orrs	r3, r4
 800440e:	b29b      	uxth	r3, r3
 8004410:	8013      	strh	r3, [r2, #0]
 8004412:	e144      	b.n	800469e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	b29c      	uxth	r4, r3
 8004422:	4623      	mov	r3, r4
 8004424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d014      	beq.n	8004456 <USB_DeactivateEndpoint+0xca>
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	b29c      	uxth	r4, r3
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	441a      	add	r2, r3
 800444e:	4b52      	ldr	r3, [pc, #328]	; (8004598 <USB_DeactivateEndpoint+0x20c>)
 8004450:	4323      	orrs	r3, r4
 8004452:	b29b      	uxth	r3, r3
 8004454:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446c:	b29c      	uxth	r4, r3
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	441a      	add	r2, r3
 8004478:	4b46      	ldr	r3, [pc, #280]	; (8004594 <USB_DeactivateEndpoint+0x208>)
 800447a:	4323      	orrs	r3, r4
 800447c:	b29b      	uxth	r3, r3
 800447e:	8013      	strh	r3, [r2, #0]
 8004480:	e10d      	b.n	800469e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	785b      	ldrb	r3, [r3, #1]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f040 8088 	bne.w	800459c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29c      	uxth	r4, r3
 800449a:	4623      	mov	r3, r4
 800449c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d014      	beq.n	80044ce <USB_DeactivateEndpoint+0x142>
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ba:	b29c      	uxth	r4, r3
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	441a      	add	r2, r3
 80044c6:	4b34      	ldr	r3, [pc, #208]	; (8004598 <USB_DeactivateEndpoint+0x20c>)
 80044c8:	4323      	orrs	r3, r4
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29c      	uxth	r4, r3
 80044dc:	4623      	mov	r3, r4
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d014      	beq.n	8004510 <USB_DeactivateEndpoint+0x184>
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fc:	b29c      	uxth	r4, r3
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	441a      	add	r2, r3
 8004508:	4b21      	ldr	r3, [pc, #132]	; (8004590 <USB_DeactivateEndpoint+0x204>)
 800450a:	4323      	orrs	r3, r4
 800450c:	b29b      	uxth	r3, r3
 800450e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	b29b      	uxth	r3, r3
 800451e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004526:	b29c      	uxth	r4, r3
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	441a      	add	r2, r3
 8004532:	4b17      	ldr	r3, [pc, #92]	; (8004590 <USB_DeactivateEndpoint+0x204>)
 8004534:	4323      	orrs	r3, r4
 8004536:	b29b      	uxth	r3, r3
 8004538:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	b29b      	uxth	r3, r3
 8004548:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800454c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004550:	b29c      	uxth	r4, r3
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	441a      	add	r2, r3
 800455c:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <USB_DeactivateEndpoint+0x208>)
 800455e:	4323      	orrs	r3, r4
 8004560:	b29b      	uxth	r3, r3
 8004562:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	b29b      	uxth	r3, r3
 8004572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457a:	b29c      	uxth	r4, r3
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	441a      	add	r2, r3
 8004586:	4b03      	ldr	r3, [pc, #12]	; (8004594 <USB_DeactivateEndpoint+0x208>)
 8004588:	4323      	orrs	r3, r4
 800458a:	b29b      	uxth	r3, r3
 800458c:	8013      	strh	r3, [r2, #0]
 800458e:	e086      	b.n	800469e <USB_DeactivateEndpoint+0x312>
 8004590:	ffff80c0 	.word	0xffff80c0
 8004594:	ffff8080 	.word	0xffff8080
 8004598:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	b29c      	uxth	r4, r3
 80045aa:	4623      	mov	r3, r4
 80045ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d014      	beq.n	80045de <USB_DeactivateEndpoint+0x252>
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	b29c      	uxth	r4, r3
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	441a      	add	r2, r3
 80045d6:	4b35      	ldr	r3, [pc, #212]	; (80046ac <USB_DeactivateEndpoint+0x320>)
 80045d8:	4323      	orrs	r3, r4
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29c      	uxth	r4, r3
 80045ec:	4623      	mov	r3, r4
 80045ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d014      	beq.n	8004620 <USB_DeactivateEndpoint+0x294>
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	b29b      	uxth	r3, r3
 8004604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460c:	b29c      	uxth	r4, r3
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	441a      	add	r2, r3
 8004618:	4b25      	ldr	r3, [pc, #148]	; (80046b0 <USB_DeactivateEndpoint+0x324>)
 800461a:	4323      	orrs	r3, r4
 800461c:	b29b      	uxth	r3, r3
 800461e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b29b      	uxth	r3, r3
 800462e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004636:	b29c      	uxth	r4, r3
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <USB_DeactivateEndpoint+0x320>)
 8004644:	4323      	orrs	r3, r4
 8004646:	b29b      	uxth	r3, r3
 8004648:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004660:	b29c      	uxth	r4, r3
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	441a      	add	r2, r3
 800466c:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <USB_DeactivateEndpoint+0x328>)
 800466e:	4323      	orrs	r3, r4
 8004670:	b29b      	uxth	r3, r3
 8004672:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468a:	b29c      	uxth	r4, r3
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	441a      	add	r2, r3
 8004696:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <USB_DeactivateEndpoint+0x328>)
 8004698:	4323      	orrs	r3, r4
 800469a:	b29b      	uxth	r3, r3
 800469c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc90      	pop	{r4, r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	ffffc080 	.word	0xffffc080
 80046b0:	ffff80c0 	.word	0xffff80c0
 80046b4:	ffff8080 	.word	0xffff8080

080046b8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b08d      	sub	sp, #52	; 0x34
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	785b      	ldrb	r3, [r3, #1]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	f040 8160 	bne.w	800498c <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	699a      	ldr	r2, [r3, #24]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d909      	bls.n	80046ec <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	1ad2      	subs	r2, r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	619a      	str	r2, [r3, #24]
 80046ea:	e005      	b.n	80046f8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2200      	movs	r2, #0
 80046f6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	7b1b      	ldrb	r3, [r3, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d119      	bne.n	8004734 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6959      	ldr	r1, [r3, #20]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	88da      	ldrh	r2, [r3, #6]
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	b29b      	uxth	r3, r3
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fba2 	bl	8004e56 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004712:	687c      	ldr	r4, [r7, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800471a:	b29b      	uxth	r3, r3
 800471c:	441c      	add	r4, r3
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	4423      	add	r3, r4
 8004726:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800472a:	461c      	mov	r4, r3
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	b29b      	uxth	r3, r3
 8004730:	8023      	strh	r3, [r4, #0]
 8004732:	e10f      	b.n	8004954 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d065      	beq.n	8004816 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800474a:	687c      	ldr	r4, [r7, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	785b      	ldrb	r3, [r3, #1]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d148      	bne.n	80047e6 <USB_EPStartXfer+0x12e>
 8004754:	687c      	ldr	r4, [r7, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800475c:	b29b      	uxth	r3, r3
 800475e:	441c      	add	r4, r3
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	4423      	add	r3, r4
 8004768:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800476c:	461c      	mov	r4, r3
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10e      	bne.n	8004792 <USB_EPStartXfer+0xda>
 8004774:	8823      	ldrh	r3, [r4, #0]
 8004776:	b29b      	uxth	r3, r3
 8004778:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800477c:	b29b      	uxth	r3, r3
 800477e:	8023      	strh	r3, [r4, #0]
 8004780:	8823      	ldrh	r3, [r4, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800478c:	b29b      	uxth	r3, r3
 800478e:	8023      	strh	r3, [r4, #0]
 8004790:	e03d      	b.n	800480e <USB_EPStartXfer+0x156>
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	2b3e      	cmp	r3, #62	; 0x3e
 8004796:	d810      	bhi.n	80047ba <USB_EPStartXfer+0x102>
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	085b      	lsrs	r3, r3, #1
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <USB_EPStartXfer+0xf6>
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	3301      	adds	r3, #1
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	029b      	lsls	r3, r3, #10
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	8023      	strh	r3, [r4, #0]
 80047b8:	e029      	b.n	800480e <USB_EPStartXfer+0x156>
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <USB_EPStartXfer+0x118>
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	3b01      	subs	r3, #1
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	029b      	lsls	r3, r3, #10
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	8023      	strh	r3, [r4, #0]
 80047e4:	e013      	b.n	800480e <USB_EPStartXfer+0x156>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	785b      	ldrb	r3, [r3, #1]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d10f      	bne.n	800480e <USB_EPStartXfer+0x156>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	441c      	add	r4, r3
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	4423      	add	r3, r4
 8004800:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	895b      	ldrh	r3, [r3, #10]
 8004812:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004814:	e063      	b.n	80048de <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	785b      	ldrb	r3, [r3, #1]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d148      	bne.n	80048b0 <USB_EPStartXfer+0x1f8>
 800481e:	687c      	ldr	r4, [r7, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004826:	b29b      	uxth	r3, r3
 8004828:	441c      	add	r4, r3
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	4423      	add	r3, r4
 8004832:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004836:	461c      	mov	r4, r3
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10e      	bne.n	800485c <USB_EPStartXfer+0x1a4>
 800483e:	8823      	ldrh	r3, [r4, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004846:	b29b      	uxth	r3, r3
 8004848:	8023      	strh	r3, [r4, #0]
 800484a:	8823      	ldrh	r3, [r4, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004856:	b29b      	uxth	r3, r3
 8004858:	8023      	strh	r3, [r4, #0]
 800485a:	e03d      	b.n	80048d8 <USB_EPStartXfer+0x220>
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	2b3e      	cmp	r3, #62	; 0x3e
 8004860:	d810      	bhi.n	8004884 <USB_EPStartXfer+0x1cc>
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	085b      	lsrs	r3, r3, #1
 8004866:	623b      	str	r3, [r7, #32]
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <USB_EPStartXfer+0x1c0>
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	3301      	adds	r3, #1
 8004876:	623b      	str	r3, [r7, #32]
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	b29b      	uxth	r3, r3
 800487c:	029b      	lsls	r3, r3, #10
 800487e:	b29b      	uxth	r3, r3
 8004880:	8023      	strh	r3, [r4, #0]
 8004882:	e029      	b.n	80048d8 <USB_EPStartXfer+0x220>
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	623b      	str	r3, [r7, #32]
 800488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <USB_EPStartXfer+0x1e2>
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	3b01      	subs	r3, #1
 8004898:	623b      	str	r3, [r7, #32]
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	b29b      	uxth	r3, r3
 800489e:	029b      	lsls	r3, r3, #10
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	8023      	strh	r3, [r4, #0]
 80048ae:	e013      	b.n	80048d8 <USB_EPStartXfer+0x220>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	785b      	ldrb	r3, [r3, #1]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d10f      	bne.n	80048d8 <USB_EPStartXfer+0x220>
 80048b8:	687c      	ldr	r4, [r7, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	441c      	add	r4, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	4423      	add	r3, r4
 80048cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048d0:	461c      	mov	r4, r3
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	891b      	ldrh	r3, [r3, #8]
 80048dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6959      	ldr	r1, [r3, #20]
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fab4 	bl	8004e56 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	785b      	ldrb	r3, [r3, #1]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d115      	bne.n	8004922 <USB_EPStartXfer+0x26a>
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490c:	b29c      	uxth	r4, r3
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	441a      	add	r2, r3
 8004918:	4b9a      	ldr	r3, [pc, #616]	; (8004b84 <USB_EPStartXfer+0x4cc>)
 800491a:	4323      	orrs	r3, r4
 800491c:	b29b      	uxth	r3, r3
 800491e:	8013      	strh	r3, [r2, #0]
 8004920:	e018      	b.n	8004954 <USB_EPStartXfer+0x29c>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	785b      	ldrb	r3, [r3, #1]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d114      	bne.n	8004954 <USB_EPStartXfer+0x29c>
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800493c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004940:	b29c      	uxth	r4, r3
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	4b8e      	ldr	r3, [pc, #568]	; (8004b88 <USB_EPStartXfer+0x4d0>)
 800494e:	4323      	orrs	r3, r4
 8004950:	b29b      	uxth	r3, r3
 8004952:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800496a:	b29c      	uxth	r4, r3
 800496c:	f084 0310 	eor.w	r3, r4, #16
 8004970:	b29c      	uxth	r4, r3
 8004972:	f084 0320 	eor.w	r3, r4, #32
 8004976:	b29c      	uxth	r4, r3
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	441a      	add	r2, r3
 8004982:	4b82      	ldr	r3, [pc, #520]	; (8004b8c <USB_EPStartXfer+0x4d4>)
 8004984:	4323      	orrs	r3, r4
 8004986:	b29b      	uxth	r3, r3
 8004988:	8013      	strh	r3, [r2, #0]
 800498a:	e146      	b.n	8004c1a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	699a      	ldr	r2, [r3, #24]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	429a      	cmp	r2, r3
 8004996:	d909      	bls.n	80049ac <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	1ad2      	subs	r2, r2, r3
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	619a      	str	r2, [r3, #24]
 80049aa:	e005      	b.n	80049b8 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2200      	movs	r2, #0
 80049b6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	7b1b      	ldrb	r3, [r3, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d148      	bne.n	8004a52 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80049c0:	687c      	ldr	r4, [r7, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	441c      	add	r4, r3
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	4423      	add	r3, r4
 80049d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049d8:	461c      	mov	r4, r3
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10e      	bne.n	80049fe <USB_EPStartXfer+0x346>
 80049e0:	8823      	ldrh	r3, [r4, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	8023      	strh	r3, [r4, #0]
 80049ec:	8823      	ldrh	r3, [r4, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	8023      	strh	r3, [r4, #0]
 80049fc:	e0f2      	b.n	8004be4 <USB_EPStartXfer+0x52c>
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	2b3e      	cmp	r3, #62	; 0x3e
 8004a02:	d810      	bhi.n	8004a26 <USB_EPStartXfer+0x36e>
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <USB_EPStartXfer+0x362>
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	3301      	adds	r3, #1
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	029b      	lsls	r3, r3, #10
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	8023      	strh	r3, [r4, #0]
 8004a24:	e0de      	b.n	8004be4 <USB_EPStartXfer+0x52c>
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	61fb      	str	r3, [r7, #28]
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	f003 031f 	and.w	r3, r3, #31
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d102      	bne.n	8004a3c <USB_EPStartXfer+0x384>
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	61fb      	str	r3, [r7, #28]
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	029b      	lsls	r3, r3, #10
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	8023      	strh	r3, [r4, #0]
 8004a50:	e0c8      	b.n	8004be4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d148      	bne.n	8004aec <USB_EPStartXfer+0x434>
 8004a5a:	687c      	ldr	r4, [r7, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	441c      	add	r4, r3
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	4423      	add	r3, r4
 8004a6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a72:	461c      	mov	r4, r3
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10e      	bne.n	8004a98 <USB_EPStartXfer+0x3e0>
 8004a7a:	8823      	ldrh	r3, [r4, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	8023      	strh	r3, [r4, #0]
 8004a86:	8823      	ldrh	r3, [r4, #0]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8023      	strh	r3, [r4, #0]
 8004a96:	e03d      	b.n	8004b14 <USB_EPStartXfer+0x45c>
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a9c:	d810      	bhi.n	8004ac0 <USB_EPStartXfer+0x408>
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	085b      	lsrs	r3, r3, #1
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <USB_EPStartXfer+0x3fc>
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	61bb      	str	r3, [r7, #24]
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	029b      	lsls	r3, r3, #10
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	8023      	strh	r3, [r4, #0]
 8004abe:	e029      	b.n	8004b14 <USB_EPStartXfer+0x45c>
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	f003 031f 	and.w	r3, r3, #31
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d102      	bne.n	8004ad6 <USB_EPStartXfer+0x41e>
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	61bb      	str	r3, [r7, #24]
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	029b      	lsls	r3, r3, #10
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	8023      	strh	r3, [r4, #0]
 8004aea:	e013      	b.n	8004b14 <USB_EPStartXfer+0x45c>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	785b      	ldrb	r3, [r3, #1]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d10f      	bne.n	8004b14 <USB_EPStartXfer+0x45c>
 8004af4:	687c      	ldr	r4, [r7, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	441c      	add	r4, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	4423      	add	r3, r4
 8004b08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b0c:	461c      	mov	r4, r3
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	8023      	strh	r3, [r4, #0]
 8004b14:	687c      	ldr	r4, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	785b      	ldrb	r3, [r3, #1]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d14e      	bne.n	8004bbc <USB_EPStartXfer+0x504>
 8004b1e:	687c      	ldr	r4, [r7, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	441c      	add	r4, r3
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	4423      	add	r3, r4
 8004b32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b36:	461c      	mov	r4, r3
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10e      	bne.n	8004b5c <USB_EPStartXfer+0x4a4>
 8004b3e:	8823      	ldrh	r3, [r4, #0]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	8023      	strh	r3, [r4, #0]
 8004b4a:	8823      	ldrh	r3, [r4, #0]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	8023      	strh	r3, [r4, #0]
 8004b5a:	e043      	b.n	8004be4 <USB_EPStartXfer+0x52c>
 8004b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b60:	d816      	bhi.n	8004b90 <USB_EPStartXfer+0x4d8>
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <USB_EPStartXfer+0x4c0>
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	3301      	adds	r3, #1
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	029b      	lsls	r3, r3, #10
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	8023      	strh	r3, [r4, #0]
 8004b82:	e02f      	b.n	8004be4 <USB_EPStartXfer+0x52c>
 8004b84:	ffff80c0 	.word	0xffff80c0
 8004b88:	ffffc080 	.word	0xffffc080
 8004b8c:	ffff8080 	.word	0xffff8080
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	f003 031f 	and.w	r3, r3, #31
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d102      	bne.n	8004ba6 <USB_EPStartXfer+0x4ee>
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	029b      	lsls	r3, r3, #10
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	8023      	strh	r3, [r4, #0]
 8004bba:	e013      	b.n	8004be4 <USB_EPStartXfer+0x52c>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d10f      	bne.n	8004be4 <USB_EPStartXfer+0x52c>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	441c      	add	r4, r3
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	4423      	add	r3, r4
 8004bd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfa:	b29c      	uxth	r4, r3
 8004bfc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004c00:	b29c      	uxth	r4, r3
 8004c02:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004c06:	b29c      	uxth	r4, r3
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	441a      	add	r2, r3
 8004c12:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <USB_EPStartXfer+0x56c>)
 8004c14:	4323      	orrs	r3, r4
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3734      	adds	r7, #52	; 0x34
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd90      	pop	{r4, r7, pc}
 8004c24:	ffff8080 	.word	0xffff8080

08004c28 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c28:	b490      	push	{r4, r7}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	785b      	ldrb	r3, [r3, #1]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d018      	beq.n	8004c6c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c50:	b29c      	uxth	r4, r3
 8004c52:	f084 0310 	eor.w	r3, r4, #16
 8004c56:	b29c      	uxth	r4, r3
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	441a      	add	r2, r3
 8004c62:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <USB_EPSetStall+0x80>)
 8004c64:	4323      	orrs	r3, r4
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	8013      	strh	r3, [r2, #0]
 8004c6a:	e017      	b.n	8004c9c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	b29c      	uxth	r4, r3
 8004c84:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004c88:	b29c      	uxth	r4, r3
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	441a      	add	r2, r3
 8004c94:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <USB_EPSetStall+0x80>)
 8004c96:	4323      	orrs	r3, r4
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc90      	pop	{r4, r7}
 8004ca6:	4770      	bx	lr
 8004ca8:	ffff8080 	.word	0xffff8080

08004cac <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cac:	b490      	push	{r4, r7}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	7b1b      	ldrb	r3, [r3, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d17d      	bne.n	8004dba <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	785b      	ldrb	r3, [r3, #1]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d03d      	beq.n	8004d42 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29c      	uxth	r4, r3
 8004cd4:	4623      	mov	r3, r4
 8004cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d014      	beq.n	8004d08 <USB_EPClearStall+0x5c>
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf4:	b29c      	uxth	r4, r3
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	441a      	add	r2, r3
 8004d00:	4b31      	ldr	r3, [pc, #196]	; (8004dc8 <USB_EPClearStall+0x11c>)
 8004d02:	4323      	orrs	r3, r4
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	78db      	ldrb	r3, [r3, #3]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d054      	beq.n	8004dba <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d26:	b29c      	uxth	r4, r3
 8004d28:	f084 0320 	eor.w	r3, r4, #32
 8004d2c:	b29c      	uxth	r4, r3
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	441a      	add	r2, r3
 8004d38:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <USB_EPClearStall+0x120>)
 8004d3a:	4323      	orrs	r3, r4
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	8013      	strh	r3, [r2, #0]
 8004d40:	e03b      	b.n	8004dba <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	b29c      	uxth	r4, r3
 8004d50:	4623      	mov	r3, r4
 8004d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d014      	beq.n	8004d84 <USB_EPClearStall+0xd8>
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d70:	b29c      	uxth	r4, r3
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	441a      	add	r2, r3
 8004d7c:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <USB_EPClearStall+0x124>)
 8004d7e:	4323      	orrs	r3, r4
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	b29c      	uxth	r4, r3
 8004d9c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004da0:	b29c      	uxth	r4, r3
 8004da2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004da6:	b29c      	uxth	r4, r3
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	441a      	add	r2, r3
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <USB_EPClearStall+0x120>)
 8004db4:	4323      	orrs	r3, r4
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc90      	pop	{r4, r7}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	ffff80c0 	.word	0xffff80c0
 8004dcc:	ffff8080 	.word	0xffff8080
 8004dd0:	ffffc080 	.word	0xffffc080

08004dd4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2280      	movs	r2, #128	; 0x80
 8004dea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr

08004dfa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bc80      	pop	{r7}
 8004e0c:	4770      	bx	lr

08004e0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr

08004e22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b085      	sub	sp, #20
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004e34:	68fb      	ldr	r3, [r7, #12]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr

08004e56 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b08d      	sub	sp, #52	; 0x34
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	4611      	mov	r1, r2
 8004e62:	461a      	mov	r2, r3
 8004e64:	460b      	mov	r3, r1
 8004e66:	80fb      	strh	r3, [r7, #6]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004e6c:	88bb      	ldrh	r3, [r7, #4]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	085b      	lsrs	r3, r3, #1
 8004e72:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	005a      	lsls	r2, r3, #1
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e88:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e8e:	e01e      	b.n	8004ece <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	3301      	adds	r3, #1
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	3302      	adds	r3, #2
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	3302      	adds	r3, #2
 8004ec0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1dd      	bne.n	8004e90 <USB_WritePMA+0x3a>
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	3734      	adds	r7, #52	; 0x34
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr

08004ede <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b08b      	sub	sp, #44	; 0x2c
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	4611      	mov	r1, r2
 8004eea:	461a      	mov	r2, r3
 8004eec:	460b      	mov	r3, r1
 8004eee:	80fb      	strh	r3, [r7, #6]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004ef4:	88bb      	ldrh	r3, [r7, #4]
 8004ef6:	085b      	lsrs	r3, r3, #1
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	005a      	lsls	r2, r3, #1
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f10:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
 8004f16:	e01b      	b.n	8004f50 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	3302      	adds	r3, #2
 8004f24:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	3301      	adds	r3, #1
 8004f32:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	3301      	adds	r3, #1
 8004f42:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	3302      	adds	r3, #2
 8004f48:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e0      	bne.n	8004f18 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004f56:	88bb      	ldrh	r3, [r7, #4]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d007      	beq.n	8004f72 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	701a      	strb	r2, [r3, #0]
  }
}
 8004f72:	bf00      	nop
 8004f74:	372c      	adds	r7, #44	; 0x2c
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr

08004f7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	7c1b      	ldrb	r3, [r3, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d115      	bne.n	8004fc0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f98:	2202      	movs	r2, #2
 8004f9a:	2181      	movs	r1, #129	; 0x81
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f001 fed6 	bl	8006d4e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fac:	2202      	movs	r2, #2
 8004fae:	2101      	movs	r1, #1
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f001 fecc 	bl	8006d4e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004fbe:	e012      	b.n	8004fe6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004fc0:	2340      	movs	r3, #64	; 0x40
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	2181      	movs	r1, #129	; 0x81
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f001 fec1 	bl	8006d4e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004fd2:	2340      	movs	r3, #64	; 0x40
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f001 feb8 	bl	8006d4e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	2203      	movs	r2, #3
 8004fea:	2182      	movs	r1, #130	; 0x82
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f001 feae 	bl	8006d4e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ff8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004ffc:	f001 ffc8 	bl	8006f90 <USBD_static_malloc>
 8005000:	4602      	mov	r2, r0
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d102      	bne.n	8005018 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005012:	2301      	movs	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
 8005016:	e026      	b.n	8005066 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800501e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2200      	movs	r2, #0
 800502e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2200      	movs	r2, #0
 8005036:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	7c1b      	ldrb	r3, [r3, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d109      	bne.n	8005056 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800504c:	2101      	movs	r1, #1
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f001 ff67 	bl	8006f22 <USBD_LL_PrepareReceive>
 8005054:	e007      	b.n	8005066 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800505c:	2340      	movs	r3, #64	; 0x40
 800505e:	2101      	movs	r1, #1
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f001 ff5e 	bl	8006f22 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005066:	7bfb      	ldrb	r3, [r7, #15]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005080:	2181      	movs	r1, #129	; 0x81
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f001 fe89 	bl	8006d9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800508e:	2101      	movs	r1, #1
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f001 fe82 	bl	8006d9a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800509e:	2182      	movs	r1, #130	; 0x82
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f001 fe7a 	bl	8006d9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00e      	beq.n	80050d4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050c6:	4618      	mov	r0, r3
 80050c8:	f001 ff6e 	bl	8006fa8 <USBD_static_free>
    pdev->pClassData = NULL;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b086      	sub	sp, #24
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050ee:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005104:	2b00      	cmp	r3, #0
 8005106:	d039      	beq.n	800517c <USBD_CDC_Setup+0x9e>
 8005108:	2b20      	cmp	r3, #32
 800510a:	d17c      	bne.n	8005206 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	88db      	ldrh	r3, [r3, #6]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d029      	beq.n	8005168 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	b25b      	sxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	da11      	bge.n	8005142 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800512a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	88d2      	ldrh	r2, [r2, #6]
 8005130:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005132:	6939      	ldr	r1, [r7, #16]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	88db      	ldrh	r3, [r3, #6]
 8005138:	461a      	mov	r2, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f001 f9f6 	bl	800652c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005140:	e068      	b.n	8005214 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	785a      	ldrb	r2, [r3, #1]
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	88db      	ldrh	r3, [r3, #6]
 8005150:	b2da      	uxtb	r2, r3
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005158:	6939      	ldr	r1, [r7, #16]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	88db      	ldrh	r3, [r3, #6]
 800515e:	461a      	mov	r2, r3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f001 fa11 	bl	8006588 <USBD_CtlPrepareRx>
      break;
 8005166:	e055      	b.n	8005214 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	7850      	ldrb	r0, [r2, #1]
 8005174:	2200      	movs	r2, #0
 8005176:	6839      	ldr	r1, [r7, #0]
 8005178:	4798      	blx	r3
      break;
 800517a:	e04b      	b.n	8005214 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	2b0a      	cmp	r3, #10
 8005182:	d017      	beq.n	80051b4 <USBD_CDC_Setup+0xd6>
 8005184:	2b0b      	cmp	r3, #11
 8005186:	d029      	beq.n	80051dc <USBD_CDC_Setup+0xfe>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d133      	bne.n	80051f4 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005192:	2b03      	cmp	r3, #3
 8005194:	d107      	bne.n	80051a6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005196:	f107 030c 	add.w	r3, r7, #12
 800519a:	2202      	movs	r2, #2
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f001 f9c4 	bl	800652c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051a4:	e02e      	b.n	8005204 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80051a6:	6839      	ldr	r1, [r7, #0]
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f001 f955 	bl	8006458 <USBD_CtlError>
            ret = USBD_FAIL;
 80051ae:	2302      	movs	r3, #2
 80051b0:	75fb      	strb	r3, [r7, #23]
          break;
 80051b2:	e027      	b.n	8005204 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d107      	bne.n	80051ce <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80051be:	f107 030f 	add.w	r3, r7, #15
 80051c2:	2201      	movs	r2, #1
 80051c4:	4619      	mov	r1, r3
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f001 f9b0 	bl	800652c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051cc:	e01a      	b.n	8005204 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80051ce:	6839      	ldr	r1, [r7, #0]
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f001 f941 	bl	8006458 <USBD_CtlError>
            ret = USBD_FAIL;
 80051d6:	2302      	movs	r3, #2
 80051d8:	75fb      	strb	r3, [r7, #23]
          break;
 80051da:	e013      	b.n	8005204 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d00d      	beq.n	8005202 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80051e6:	6839      	ldr	r1, [r7, #0]
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f001 f935 	bl	8006458 <USBD_CtlError>
            ret = USBD_FAIL;
 80051ee:	2302      	movs	r3, #2
 80051f0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80051f2:	e006      	b.n	8005202 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f001 f92e 	bl	8006458 <USBD_CtlError>
          ret = USBD_FAIL;
 80051fc:	2302      	movs	r3, #2
 80051fe:	75fb      	strb	r3, [r7, #23]
          break;
 8005200:	e000      	b.n	8005204 <USBD_CDC_Setup+0x126>
          break;
 8005202:	bf00      	nop
      }
      break;
 8005204:	e006      	b.n	8005214 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005206:	6839      	ldr	r1, [r7, #0]
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f001 f925 	bl	8006458 <USBD_CtlError>
      ret = USBD_FAIL;
 800520e:	2302      	movs	r3, #2
 8005210:	75fb      	strb	r3, [r7, #23]
      break;
 8005212:	bf00      	nop
  }

  return ret;
 8005214:	7dfb      	ldrb	r3, [r7, #23]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005230:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005238:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d037      	beq.n	80052b4 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005244:	78fa      	ldrb	r2, [r7, #3]
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	331c      	adds	r3, #28
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d026      	beq.n	80052a8 <USBD_CDC_DataIn+0x8a>
 800525a:	78fa      	ldrb	r2, [r7, #3]
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	440b      	add	r3, r1
 8005268:	331c      	adds	r3, #28
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	78fa      	ldrb	r2, [r7, #3]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	0152      	lsls	r2, r2, #5
 8005272:	440a      	add	r2, r1
 8005274:	3238      	adds	r2, #56	; 0x38
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	fbb3 f1f2 	udiv	r1, r3, r2
 800527c:	fb02 f201 	mul.w	r2, r2, r1
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d110      	bne.n	80052a8 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	331c      	adds	r3, #28
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800529a:	78f9      	ldrb	r1, [r7, #3]
 800529c:	2300      	movs	r3, #0
 800529e:	2200      	movs	r2, #0
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f001 fe1b 	bl	8006edc <USBD_LL_Transmit>
 80052a6:	e003      	b.n	80052b0 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	e000      	b.n	80052b6 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80052b4:	2302      	movs	r3, #2
  }
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	460b      	mov	r3, r1
 80052c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80052d2:	78fb      	ldrb	r3, [r7, #3]
 80052d4:	4619      	mov	r1, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f001 fe46 	bl	8006f68 <USBD_LL_GetRxDataSize>
 80052dc:	4602      	mov	r2, r0
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00d      	beq.n	800530a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005302:	4611      	mov	r1, r2
 8005304:	4798      	blx	r3

    return USBD_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	e000      	b.n	800530c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800530a:	2302      	movs	r3, #2
  }
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005322:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800532a:	2b00      	cmp	r3, #0
 800532c:	d015      	beq.n	800535a <USBD_CDC_EP0_RxReady+0x46>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005334:	2bff      	cmp	r3, #255	; 0xff
 8005336:	d010      	beq.n	800535a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005346:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800534e:	b292      	uxth	r2, r2
 8005350:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	22ff      	movs	r2, #255	; 0xff
 8005356:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2243      	movs	r2, #67	; 0x43
 8005370:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005372:	4b03      	ldr	r3, [pc, #12]	; (8005380 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005374:	4618      	mov	r0, r3
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	20000094 	.word	0x20000094

08005384 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2243      	movs	r2, #67	; 0x43
 8005390:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005392:	4b03      	ldr	r3, [pc, #12]	; (80053a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000050 	.word	0x20000050

080053a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2243      	movs	r2, #67	; 0x43
 80053b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80053b2:	4b03      	ldr	r3, [pc, #12]	; (80053c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	200000d8 	.word	0x200000d8

080053c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	220a      	movs	r2, #10
 80053d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80053d2:	4b03      	ldr	r3, [pc, #12]	; (80053e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	bc80      	pop	{r7}
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	2000000c 	.word	0x2000000c

080053e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80053ee:	2302      	movs	r3, #2
 80053f0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d005      	beq.n	8005404 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005404:	7bfb      	ldrb	r3, [r7, #15]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	4613      	mov	r3, r2
 800541c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005424:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800542e:	88fa      	ldrh	r2, [r7, #6]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr

08005442 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005442:	b480      	push	{r7}
 8005444:	b085      	sub	sp, #20
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005452:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr

08005468 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005476:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01c      	beq.n	80054bc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005488:	2b00      	cmp	r3, #0
 800548a:	d115      	bne.n	80054b8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2181      	movs	r1, #129	; 0x81
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f001 fd14 	bl	8006edc <USBD_LL_Transmit>

      return USBD_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	e002      	b.n	80054be <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e000      	b.n	80054be <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80054bc:	2302      	movs	r3, #2
  }
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d017      	beq.n	8005510 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	7c1b      	ldrb	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d109      	bne.n	80054fc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054f2:	2101      	movs	r1, #1
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f001 fd14 	bl	8006f22 <USBD_LL_PrepareReceive>
 80054fa:	e007      	b.n	800550c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005502:	2340      	movs	r3, #64	; 0x40
 8005504:	2101      	movs	r1, #1
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f001 fd0b 	bl	8006f22 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	e000      	b.n	8005512 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005510:	2302      	movs	r3, #2
  }
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	4613      	mov	r3, r2
 8005526:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800552e:	2302      	movs	r3, #2
 8005530:	e01a      	b.n	8005568 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	79fa      	ldrb	r2, [r7, #7]
 800555e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f001 fb7f 	bl	8006c64 <USBD_LL_Init>

  return USBD_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d006      	beq.n	8005592 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	73fb      	strb	r3, [r7, #15]
 8005590:	e001      	b.n	8005596 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005592:	2302      	movs	r3, #2
 8005594:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	bc80      	pop	{r7}
 80055a0:	4770      	bx	lr

080055a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f001 fbb4 	bl	8006d18 <USBD_LL_Start>

  return USBD_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr

080055ce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	460b      	mov	r3, r1
 80055d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80055da:	2302      	movs	r3, #2
 80055dc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00c      	beq.n	8005602 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	78fa      	ldrb	r2, [r7, #3]
 80055f2:	4611      	mov	r1, r2
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	4798      	blx	r3
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	78fa      	ldrb	r2, [r7, #3]
 8005622:	4611      	mov	r1, r2
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	4798      	blx	r3

  return USBD_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005642:	6839      	ldr	r1, [r7, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fecb 	bl	80063e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005658:	461a      	mov	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	2b01      	cmp	r3, #1
 800566c:	d00c      	beq.n	8005688 <USBD_LL_SetupStage+0x56>
 800566e:	2b01      	cmp	r3, #1
 8005670:	d302      	bcc.n	8005678 <USBD_LL_SetupStage+0x46>
 8005672:	2b02      	cmp	r3, #2
 8005674:	d010      	beq.n	8005698 <USBD_LL_SetupStage+0x66>
 8005676:	e017      	b.n	80056a8 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f9cb 	bl	8005a1c <USBD_StdDevReq>
      break;
 8005686:	e01a      	b.n	80056be <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fa2d 	bl	8005af0 <USBD_StdItfReq>
      break;
 8005696:	e012      	b.n	80056be <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800569e:	4619      	mov	r1, r3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fa6b 	bl	8005b7c <USBD_StdEPReq>
      break;
 80056a6:	e00a      	b.n	80056be <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80056ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f001 fb8e 	bl	8006dd8 <USBD_LL_StallEP>
      break;
 80056bc:	bf00      	nop
  }

  return USBD_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	460b      	mov	r3, r1
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80056d6:	7afb      	ldrb	r3, [r7, #11]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d14b      	bne.n	8005774 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80056e2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d134      	bne.n	8005758 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d919      	bls.n	800572e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	1ad2      	subs	r2, r2, r3
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005710:	429a      	cmp	r2, r3
 8005712:	d203      	bcs.n	800571c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005718:	b29b      	uxth	r3, r3
 800571a:	e002      	b.n	8005722 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005720:	b29b      	uxth	r3, r3
 8005722:	461a      	mov	r2, r3
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 ff4c 	bl	80065c4 <USBD_CtlContinueRx>
 800572c:	e038      	b.n	80057a0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005740:	2b03      	cmp	r3, #3
 8005742:	d105      	bne.n	8005750 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 ff49 	bl	80065e8 <USBD_CtlSendStatus>
 8005756:	e023      	b.n	80057a0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800575e:	2b05      	cmp	r3, #5
 8005760:	d11e      	bne.n	80057a0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800576a:	2100      	movs	r1, #0
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f001 fb33 	bl	8006dd8 <USBD_LL_StallEP>
 8005772:	e015      	b.n	80057a0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00d      	beq.n	800579c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005786:	2b03      	cmp	r3, #3
 8005788:	d108      	bne.n	800579c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	7afa      	ldrb	r2, [r7, #11]
 8005794:	4611      	mov	r1, r2
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	4798      	blx	r3
 800579a:	e001      	b.n	80057a0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800579c:	2302      	movs	r3, #2
 800579e:	e000      	b.n	80057a2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b086      	sub	sp, #24
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	460b      	mov	r3, r1
 80057b4:	607a      	str	r2, [r7, #4]
 80057b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80057b8:	7afb      	ldrb	r3, [r7, #11]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d17f      	bne.n	80058be <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3314      	adds	r3, #20
 80057c2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d15c      	bne.n	8005888 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d915      	bls.n	8005806 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	1ad2      	subs	r2, r2, r3
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	461a      	mov	r2, r3
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 feb6 	bl	8006564 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057f8:	2300      	movs	r3, #0
 80057fa:	2200      	movs	r2, #0
 80057fc:	2100      	movs	r1, #0
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f001 fb8f 	bl	8006f22 <USBD_LL_PrepareReceive>
 8005804:	e04e      	b.n	80058a4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	6912      	ldr	r2, [r2, #16]
 800580e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005812:	fb02 f201 	mul.w	r2, r2, r1
 8005816:	1a9b      	subs	r3, r3, r2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d11c      	bne.n	8005856 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005824:	429a      	cmp	r2, r3
 8005826:	d316      	bcc.n	8005856 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005832:	429a      	cmp	r2, r3
 8005834:	d20f      	bcs.n	8005856 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005836:	2200      	movs	r2, #0
 8005838:	2100      	movs	r1, #0
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 fe92 	bl	8006564 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005848:	2300      	movs	r3, #0
 800584a:	2200      	movs	r2, #0
 800584c:	2100      	movs	r1, #0
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f001 fb67 	bl	8006f22 <USBD_LL_PrepareReceive>
 8005854:	e026      	b.n	80058a4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005868:	2b03      	cmp	r3, #3
 800586a:	d105      	bne.n	8005878 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005878:	2180      	movs	r1, #128	; 0x80
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f001 faac 	bl	8006dd8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 fec4 	bl	800660e <USBD_CtlReceiveStatus>
 8005886:	e00d      	b.n	80058a4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800588e:	2b04      	cmp	r3, #4
 8005890:	d004      	beq.n	800589c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005898:	2b00      	cmp	r3, #0
 800589a:	d103      	bne.n	80058a4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800589c:	2180      	movs	r1, #128	; 0x80
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f001 fa9a 	bl	8006dd8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d11d      	bne.n	80058ea <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f7ff fe83 	bl	80055ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80058bc:	e015      	b.n	80058ea <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00d      	beq.n	80058e6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d108      	bne.n	80058e6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	7afa      	ldrb	r2, [r7, #11]
 80058de:	4611      	mov	r1, r2
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	4798      	blx	r3
 80058e4:	e001      	b.n	80058ea <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80058e6:	2302      	movs	r3, #2
 80058e8:	e000      	b.n	80058ec <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058fc:	2340      	movs	r3, #64	; 0x40
 80058fe:	2200      	movs	r2, #0
 8005900:	2100      	movs	r1, #0
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f001 fa23 	bl	8006d4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2240      	movs	r2, #64	; 0x40
 8005914:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005918:	2340      	movs	r3, #64	; 0x40
 800591a:	2200      	movs	r2, #0
 800591c:	2180      	movs	r1, #128	; 0x80
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f001 fa15 	bl	8006d4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2240      	movs	r2, #64	; 0x40
 800592e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005954:	2b00      	cmp	r3, #0
 8005956:	d009      	beq.n	800596c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6852      	ldr	r2, [r2, #4]
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	4611      	mov	r1, r2
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	4798      	blx	r3
  }

  return USBD_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	78fa      	ldrb	r2, [r7, #3]
 8005986:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	bc80      	pop	{r7}
 8005992:	4770      	bx	lr

08005994 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2204      	movs	r2, #4
 80059ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d105      	bne.n	80059da <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr

080059e6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b082      	sub	sp, #8
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f4:	2b03      	cmp	r3, #3
 80059f6:	d10b      	bne.n	8005a10 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
	...

08005a1c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a32:	2b20      	cmp	r3, #32
 8005a34:	d004      	beq.n	8005a40 <USBD_StdDevReq+0x24>
 8005a36:	2b40      	cmp	r3, #64	; 0x40
 8005a38:	d002      	beq.n	8005a40 <USBD_StdDevReq+0x24>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d008      	beq.n	8005a50 <USBD_StdDevReq+0x34>
 8005a3e:	e04c      	b.n	8005ada <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	6839      	ldr	r1, [r7, #0]
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
      break;
 8005a4e:	e049      	b.n	8005ae4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	785b      	ldrb	r3, [r3, #1]
 8005a54:	2b09      	cmp	r3, #9
 8005a56:	d83a      	bhi.n	8005ace <USBD_StdDevReq+0xb2>
 8005a58:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <USBD_StdDevReq+0x44>)
 8005a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5e:	bf00      	nop
 8005a60:	08005ab1 	.word	0x08005ab1
 8005a64:	08005ac5 	.word	0x08005ac5
 8005a68:	08005acf 	.word	0x08005acf
 8005a6c:	08005abb 	.word	0x08005abb
 8005a70:	08005acf 	.word	0x08005acf
 8005a74:	08005a93 	.word	0x08005a93
 8005a78:	08005a89 	.word	0x08005a89
 8005a7c:	08005acf 	.word	0x08005acf
 8005a80:	08005aa7 	.word	0x08005aa7
 8005a84:	08005a9d 	.word	0x08005a9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005a88:	6839      	ldr	r1, [r7, #0]
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f9d4 	bl	8005e38 <USBD_GetDescriptor>
          break;
 8005a90:	e022      	b.n	8005ad8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fb37 	bl	8006108 <USBD_SetAddress>
          break;
 8005a9a:	e01d      	b.n	8005ad8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fb74 	bl	800618c <USBD_SetConfig>
          break;
 8005aa4:	e018      	b.n	8005ad8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005aa6:	6839      	ldr	r1, [r7, #0]
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fbfd 	bl	80062a8 <USBD_GetConfig>
          break;
 8005aae:	e013      	b.n	8005ad8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fc2c 	bl	8006310 <USBD_GetStatus>
          break;
 8005ab8:	e00e      	b.n	8005ad8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005aba:	6839      	ldr	r1, [r7, #0]
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fc5a 	bl	8006376 <USBD_SetFeature>
          break;
 8005ac2:	e009      	b.n	8005ad8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fc69 	bl	800639e <USBD_ClrFeature>
          break;
 8005acc:	e004      	b.n	8005ad8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fcc1 	bl	8006458 <USBD_CtlError>
          break;
 8005ad6:	bf00      	nop
      }
      break;
 8005ad8:	e004      	b.n	8005ae4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005ada:	6839      	ldr	r1, [r7, #0]
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fcbb 	bl	8006458 <USBD_CtlError>
      break;
 8005ae2:	bf00      	nop
  }

  return ret;
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop

08005af0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d003      	beq.n	8005b12 <USBD_StdItfReq+0x22>
 8005b0a:	2b40      	cmp	r3, #64	; 0x40
 8005b0c:	d001      	beq.n	8005b12 <USBD_StdItfReq+0x22>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d12a      	bne.n	8005b68 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d81d      	bhi.n	8005b5a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	889b      	ldrh	r3, [r3, #4]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d813      	bhi.n	8005b50 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	4798      	blx	r3
 8005b36:	4603      	mov	r3, r0
 8005b38:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	88db      	ldrh	r3, [r3, #6]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d110      	bne.n	8005b64 <USBD_StdItfReq+0x74>
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10d      	bne.n	8005b64 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fd4d 	bl	80065e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005b4e:	e009      	b.n	8005b64 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fc80 	bl	8006458 <USBD_CtlError>
          break;
 8005b58:	e004      	b.n	8005b64 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005b5a:	6839      	ldr	r1, [r7, #0]
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fc7b 	bl	8006458 <USBD_CtlError>
          break;
 8005b62:	e000      	b.n	8005b66 <USBD_StdItfReq+0x76>
          break;
 8005b64:	bf00      	nop
      }
      break;
 8005b66:	e004      	b.n	8005b72 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fc74 	bl	8006458 <USBD_CtlError>
      break;
 8005b70:	bf00      	nop
  }

  return USBD_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	889b      	ldrh	r3, [r3, #4]
 8005b8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b98:	2b20      	cmp	r3, #32
 8005b9a:	d004      	beq.n	8005ba6 <USBD_StdEPReq+0x2a>
 8005b9c:	2b40      	cmp	r3, #64	; 0x40
 8005b9e:	d002      	beq.n	8005ba6 <USBD_StdEPReq+0x2a>
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d008      	beq.n	8005bb6 <USBD_StdEPReq+0x3a>
 8005ba4:	e13d      	b.n	8005e22 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	6839      	ldr	r1, [r7, #0]
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	4798      	blx	r3
      break;
 8005bb4:	e13a      	b.n	8005e2c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	d10a      	bne.n	8005bd8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	4798      	blx	r3
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	e12a      	b.n	8005e2e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	785b      	ldrb	r3, [r3, #1]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d03e      	beq.n	8005c5e <USBD_StdEPReq+0xe2>
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d002      	beq.n	8005bea <USBD_StdEPReq+0x6e>
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d070      	beq.n	8005cca <USBD_StdEPReq+0x14e>
 8005be8:	e115      	b.n	8005e16 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d002      	beq.n	8005bfa <USBD_StdEPReq+0x7e>
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	d015      	beq.n	8005c24 <USBD_StdEPReq+0xa8>
 8005bf8:	e02b      	b.n	8005c52 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bfa:	7bbb      	ldrb	r3, [r7, #14]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00c      	beq.n	8005c1a <USBD_StdEPReq+0x9e>
 8005c00:	7bbb      	ldrb	r3, [r7, #14]
 8005c02:	2b80      	cmp	r3, #128	; 0x80
 8005c04:	d009      	beq.n	8005c1a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005c06:	7bbb      	ldrb	r3, [r7, #14]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f001 f8e4 	bl	8006dd8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005c10:	2180      	movs	r1, #128	; 0x80
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f001 f8e0 	bl	8006dd8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c18:	e020      	b.n	8005c5c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fc1b 	bl	8006458 <USBD_CtlError>
              break;
 8005c22:	e01b      	b.n	8005c5c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	885b      	ldrh	r3, [r3, #2]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10e      	bne.n	8005c4a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005c2c:	7bbb      	ldrb	r3, [r7, #14]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00b      	beq.n	8005c4a <USBD_StdEPReq+0xce>
 8005c32:	7bbb      	ldrb	r3, [r7, #14]
 8005c34:	2b80      	cmp	r3, #128	; 0x80
 8005c36:	d008      	beq.n	8005c4a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	88db      	ldrh	r3, [r3, #6]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d104      	bne.n	8005c4a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005c40:	7bbb      	ldrb	r3, [r7, #14]
 8005c42:	4619      	mov	r1, r3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f001 f8c7 	bl	8006dd8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fccc 	bl	80065e8 <USBD_CtlSendStatus>

              break;
 8005c50:	e004      	b.n	8005c5c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fbff 	bl	8006458 <USBD_CtlError>
              break;
 8005c5a:	bf00      	nop
          }
          break;
 8005c5c:	e0e0      	b.n	8005e20 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d002      	beq.n	8005c6e <USBD_StdEPReq+0xf2>
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d015      	beq.n	8005c98 <USBD_StdEPReq+0x11c>
 8005c6c:	e026      	b.n	8005cbc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c6e:	7bbb      	ldrb	r3, [r7, #14]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00c      	beq.n	8005c8e <USBD_StdEPReq+0x112>
 8005c74:	7bbb      	ldrb	r3, [r7, #14]
 8005c76:	2b80      	cmp	r3, #128	; 0x80
 8005c78:	d009      	beq.n	8005c8e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005c7a:	7bbb      	ldrb	r3, [r7, #14]
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f001 f8aa 	bl	8006dd8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005c84:	2180      	movs	r1, #128	; 0x80
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f001 f8a6 	bl	8006dd8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c8c:	e01c      	b.n	8005cc8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005c8e:	6839      	ldr	r1, [r7, #0]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fbe1 	bl	8006458 <USBD_CtlError>
              break;
 8005c96:	e017      	b.n	8005cc8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	885b      	ldrh	r3, [r3, #2]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d112      	bne.n	8005cc6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ca0:	7bbb      	ldrb	r3, [r7, #14]
 8005ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d004      	beq.n	8005cb4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005caa:	7bbb      	ldrb	r3, [r7, #14]
 8005cac:	4619      	mov	r1, r3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f001 f8b1 	bl	8006e16 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fc97 	bl	80065e8 <USBD_CtlSendStatus>
              }
              break;
 8005cba:	e004      	b.n	8005cc6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fbca 	bl	8006458 <USBD_CtlError>
              break;
 8005cc4:	e000      	b.n	8005cc8 <USBD_StdEPReq+0x14c>
              break;
 8005cc6:	bf00      	nop
          }
          break;
 8005cc8:	e0aa      	b.n	8005e20 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d002      	beq.n	8005cda <USBD_StdEPReq+0x15e>
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d032      	beq.n	8005d3e <USBD_StdEPReq+0x1c2>
 8005cd8:	e097      	b.n	8005e0a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cda:	7bbb      	ldrb	r3, [r7, #14]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d007      	beq.n	8005cf0 <USBD_StdEPReq+0x174>
 8005ce0:	7bbb      	ldrb	r3, [r7, #14]
 8005ce2:	2b80      	cmp	r3, #128	; 0x80
 8005ce4:	d004      	beq.n	8005cf0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fbb5 	bl	8006458 <USBD_CtlError>
                break;
 8005cee:	e091      	b.n	8005e14 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	da0b      	bge.n	8005d10 <USBD_StdEPReq+0x194>
 8005cf8:	7bbb      	ldrb	r3, [r7, #14]
 8005cfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	3310      	adds	r3, #16
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	e00b      	b.n	8005d28 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d10:	7bbb      	ldrb	r3, [r7, #14]
 8005d12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	4413      	add	r3, r2
 8005d26:	3304      	adds	r3, #4
 8005d28:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2202      	movs	r2, #2
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fbf8 	bl	800652c <USBD_CtlSendData>
              break;
 8005d3c:	e06a      	b.n	8005e14 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005d3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	da11      	bge.n	8005d6a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d46:	7bbb      	ldrb	r3, [r7, #14]
 8005d48:	f003 020f 	and.w	r2, r3, #15
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	440b      	add	r3, r1
 8005d58:	3318      	adds	r3, #24
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d117      	bne.n	8005d90 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fb78 	bl	8006458 <USBD_CtlError>
                  break;
 8005d68:	e054      	b.n	8005e14 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005d6a:	7bbb      	ldrb	r3, [r7, #14]
 8005d6c:	f003 020f 	and.w	r2, r3, #15
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d104      	bne.n	8005d90 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fb65 	bl	8006458 <USBD_CtlError>
                  break;
 8005d8e:	e041      	b.n	8005e14 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	da0b      	bge.n	8005db0 <USBD_StdEPReq+0x234>
 8005d98:	7bbb      	ldrb	r3, [r7, #14]
 8005d9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	3310      	adds	r3, #16
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	4413      	add	r3, r2
 8005dac:	3304      	adds	r3, #4
 8005dae:	e00b      	b.n	8005dc8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005db0:	7bbb      	ldrb	r3, [r7, #14]
 8005db2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005dca:	7bbb      	ldrb	r3, [r7, #14]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <USBD_StdEPReq+0x25a>
 8005dd0:	7bbb      	ldrb	r3, [r7, #14]
 8005dd2:	2b80      	cmp	r3, #128	; 0x80
 8005dd4:	d103      	bne.n	8005dde <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	e00e      	b.n	8005dfc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005dde:	7bbb      	ldrb	r3, [r7, #14]
 8005de0:	4619      	mov	r1, r3
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f001 f836 	bl	8006e54 <USBD_LL_IsStallEP>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2201      	movs	r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	e002      	b.n	8005dfc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fb92 	bl	800652c <USBD_CtlSendData>
              break;
 8005e08:	e004      	b.n	8005e14 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fb23 	bl	8006458 <USBD_CtlError>
              break;
 8005e12:	bf00      	nop
          }
          break;
 8005e14:	e004      	b.n	8005e20 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fb1d 	bl	8006458 <USBD_CtlError>
          break;
 8005e1e:	bf00      	nop
      }
      break;
 8005e20:	e004      	b.n	8005e2c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fb17 	bl	8006458 <USBD_CtlError>
      break;
 8005e2a:	bf00      	nop
  }

  return ret;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	885b      	ldrh	r3, [r3, #2]
 8005e52:	0a1b      	lsrs	r3, r3, #8
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	2b06      	cmp	r3, #6
 8005e5a:	f200 8128 	bhi.w	80060ae <USBD_GetDescriptor+0x276>
 8005e5e:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <USBD_GetDescriptor+0x2c>)
 8005e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e64:	08005e81 	.word	0x08005e81
 8005e68:	08005e99 	.word	0x08005e99
 8005e6c:	08005ed9 	.word	0x08005ed9
 8005e70:	080060af 	.word	0x080060af
 8005e74:	080060af 	.word	0x080060af
 8005e78:	0800604f 	.word	0x0800604f
 8005e7c:	0800607b 	.word	0x0800607b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	7c12      	ldrb	r2, [r2, #16]
 8005e8c:	f107 0108 	add.w	r1, r7, #8
 8005e90:	4610      	mov	r0, r2
 8005e92:	4798      	blx	r3
 8005e94:	60f8      	str	r0, [r7, #12]
      break;
 8005e96:	e112      	b.n	80060be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	7c1b      	ldrb	r3, [r3, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10d      	bne.n	8005ebc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea8:	f107 0208 	add.w	r2, r7, #8
 8005eac:	4610      	mov	r0, r2
 8005eae:	4798      	blx	r3
 8005eb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005eba:	e100      	b.n	80060be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	f107 0208 	add.w	r2, r7, #8
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4798      	blx	r3
 8005ecc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	701a      	strb	r2, [r3, #0]
      break;
 8005ed6:	e0f2      	b.n	80060be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	885b      	ldrh	r3, [r3, #2]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b05      	cmp	r3, #5
 8005ee0:	f200 80ac 	bhi.w	800603c <USBD_GetDescriptor+0x204>
 8005ee4:	a201      	add	r2, pc, #4	; (adr r2, 8005eec <USBD_GetDescriptor+0xb4>)
 8005ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eea:	bf00      	nop
 8005eec:	08005f05 	.word	0x08005f05
 8005ef0:	08005f39 	.word	0x08005f39
 8005ef4:	08005f6d 	.word	0x08005f6d
 8005ef8:	08005fa1 	.word	0x08005fa1
 8005efc:	08005fd5 	.word	0x08005fd5
 8005f00:	08006009 	.word	0x08006009
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00b      	beq.n	8005f28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	7c12      	ldrb	r2, [r2, #16]
 8005f1c:	f107 0108 	add.w	r1, r7, #8
 8005f20:	4610      	mov	r0, r2
 8005f22:	4798      	blx	r3
 8005f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f26:	e091      	b.n	800604c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fa94 	bl	8006458 <USBD_CtlError>
            err++;
 8005f30:	7afb      	ldrb	r3, [r7, #11]
 8005f32:	3301      	adds	r3, #1
 8005f34:	72fb      	strb	r3, [r7, #11]
          break;
 8005f36:	e089      	b.n	800604c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00b      	beq.n	8005f5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	7c12      	ldrb	r2, [r2, #16]
 8005f50:	f107 0108 	add.w	r1, r7, #8
 8005f54:	4610      	mov	r0, r2
 8005f56:	4798      	blx	r3
 8005f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f5a:	e077      	b.n	800604c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa7a 	bl	8006458 <USBD_CtlError>
            err++;
 8005f64:	7afb      	ldrb	r3, [r7, #11]
 8005f66:	3301      	adds	r3, #1
 8005f68:	72fb      	strb	r3, [r7, #11]
          break;
 8005f6a:	e06f      	b.n	800604c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00b      	beq.n	8005f90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	7c12      	ldrb	r2, [r2, #16]
 8005f84:	f107 0108 	add.w	r1, r7, #8
 8005f88:	4610      	mov	r0, r2
 8005f8a:	4798      	blx	r3
 8005f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f8e:	e05d      	b.n	800604c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f90:	6839      	ldr	r1, [r7, #0]
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa60 	bl	8006458 <USBD_CtlError>
            err++;
 8005f98:	7afb      	ldrb	r3, [r7, #11]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f9e:	e055      	b.n	800604c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00b      	beq.n	8005fc4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	7c12      	ldrb	r2, [r2, #16]
 8005fb8:	f107 0108 	add.w	r1, r7, #8
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	4798      	blx	r3
 8005fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fc2:	e043      	b.n	800604c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fa46 	bl	8006458 <USBD_CtlError>
            err++;
 8005fcc:	7afb      	ldrb	r3, [r7, #11]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8005fd2:	e03b      	b.n	800604c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00b      	beq.n	8005ff8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	7c12      	ldrb	r2, [r2, #16]
 8005fec:	f107 0108 	add.w	r1, r7, #8
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4798      	blx	r3
 8005ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ff6:	e029      	b.n	800604c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fa2c 	bl	8006458 <USBD_CtlError>
            err++;
 8006000:	7afb      	ldrb	r3, [r7, #11]
 8006002:	3301      	adds	r3, #1
 8006004:	72fb      	strb	r3, [r7, #11]
          break;
 8006006:	e021      	b.n	800604c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00b      	beq.n	800602c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	7c12      	ldrb	r2, [r2, #16]
 8006020:	f107 0108 	add.w	r1, r7, #8
 8006024:	4610      	mov	r0, r2
 8006026:	4798      	blx	r3
 8006028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800602a:	e00f      	b.n	800604c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800602c:	6839      	ldr	r1, [r7, #0]
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fa12 	bl	8006458 <USBD_CtlError>
            err++;
 8006034:	7afb      	ldrb	r3, [r7, #11]
 8006036:	3301      	adds	r3, #1
 8006038:	72fb      	strb	r3, [r7, #11]
          break;
 800603a:	e007      	b.n	800604c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800603c:	6839      	ldr	r1, [r7, #0]
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fa0a 	bl	8006458 <USBD_CtlError>
          err++;
 8006044:	7afb      	ldrb	r3, [r7, #11]
 8006046:	3301      	adds	r3, #1
 8006048:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800604a:	e038      	b.n	80060be <USBD_GetDescriptor+0x286>
 800604c:	e037      	b.n	80060be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	7c1b      	ldrb	r3, [r3, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d109      	bne.n	800606a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800605c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605e:	f107 0208 	add.w	r2, r7, #8
 8006062:	4610      	mov	r0, r2
 8006064:	4798      	blx	r3
 8006066:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006068:	e029      	b.n	80060be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f9f3 	bl	8006458 <USBD_CtlError>
        err++;
 8006072:	7afb      	ldrb	r3, [r7, #11]
 8006074:	3301      	adds	r3, #1
 8006076:	72fb      	strb	r3, [r7, #11]
      break;
 8006078:	e021      	b.n	80060be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	7c1b      	ldrb	r3, [r3, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10d      	bne.n	800609e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608a:	f107 0208 	add.w	r2, r7, #8
 800608e:	4610      	mov	r0, r2
 8006090:	4798      	blx	r3
 8006092:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3301      	adds	r3, #1
 8006098:	2207      	movs	r2, #7
 800609a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800609c:	e00f      	b.n	80060be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f9d9 	bl	8006458 <USBD_CtlError>
        err++;
 80060a6:	7afb      	ldrb	r3, [r7, #11]
 80060a8:	3301      	adds	r3, #1
 80060aa:	72fb      	strb	r3, [r7, #11]
      break;
 80060ac:	e007      	b.n	80060be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80060ae:	6839      	ldr	r1, [r7, #0]
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f9d1 	bl	8006458 <USBD_CtlError>
      err++;
 80060b6:	7afb      	ldrb	r3, [r7, #11]
 80060b8:	3301      	adds	r3, #1
 80060ba:	72fb      	strb	r3, [r7, #11]
      break;
 80060bc:	bf00      	nop
  }

  if (err != 0U)
 80060be:	7afb      	ldrb	r3, [r7, #11]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d11c      	bne.n	80060fe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80060c4:	893b      	ldrh	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d011      	beq.n	80060ee <USBD_GetDescriptor+0x2b6>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	88db      	ldrh	r3, [r3, #6]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00d      	beq.n	80060ee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	88da      	ldrh	r2, [r3, #6]
 80060d6:	893b      	ldrh	r3, [r7, #8]
 80060d8:	4293      	cmp	r3, r2
 80060da:	bf28      	it	cs
 80060dc:	4613      	movcs	r3, r2
 80060de:	b29b      	uxth	r3, r3
 80060e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80060e2:	893b      	ldrh	r3, [r7, #8]
 80060e4:	461a      	mov	r2, r3
 80060e6:	68f9      	ldr	r1, [r7, #12]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fa1f 	bl	800652c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	88db      	ldrh	r3, [r3, #6]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d104      	bne.n	8006100 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fa76 	bl	80065e8 <USBD_CtlSendStatus>
 80060fc:	e000      	b.n	8006100 <USBD_GetDescriptor+0x2c8>
    return;
 80060fe:	bf00      	nop
    }
  }
}
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop

08006108 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	889b      	ldrh	r3, [r3, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d130      	bne.n	800617c <USBD_SetAddress+0x74>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	88db      	ldrh	r3, [r3, #6]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d12c      	bne.n	800617c <USBD_SetAddress+0x74>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	885b      	ldrh	r3, [r3, #2]
 8006126:	2b7f      	cmp	r3, #127	; 0x7f
 8006128:	d828      	bhi.n	800617c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	885b      	ldrh	r3, [r3, #2]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006134:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800613c:	2b03      	cmp	r3, #3
 800613e:	d104      	bne.n	800614a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f988 	bl	8006458 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006148:	e01c      	b.n	8006184 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	7bfa      	ldrb	r2, [r7, #15]
 800614e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	4619      	mov	r1, r3
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fea1 	bl	8006e9e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fa43 	bl	80065e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d004      	beq.n	8006172 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006170:	e008      	b.n	8006184 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800617a:	e003      	b.n	8006184 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f96a 	bl	8006458 <USBD_CtlError>
  }
}
 8006184:	bf00      	nop
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	885b      	ldrh	r3, [r3, #2]
 800619a:	b2da      	uxtb	r2, r3
 800619c:	4b41      	ldr	r3, [pc, #260]	; (80062a4 <USBD_SetConfig+0x118>)
 800619e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80061a0:	4b40      	ldr	r3, [pc, #256]	; (80062a4 <USBD_SetConfig+0x118>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d904      	bls.n	80061b2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f954 	bl	8006458 <USBD_CtlError>
 80061b0:	e075      	b.n	800629e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d002      	beq.n	80061c2 <USBD_SetConfig+0x36>
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d023      	beq.n	8006208 <USBD_SetConfig+0x7c>
 80061c0:	e062      	b.n	8006288 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80061c2:	4b38      	ldr	r3, [pc, #224]	; (80062a4 <USBD_SetConfig+0x118>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d01a      	beq.n	8006200 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80061ca:	4b36      	ldr	r3, [pc, #216]	; (80062a4 <USBD_SetConfig+0x118>)
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2203      	movs	r2, #3
 80061d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80061dc:	4b31      	ldr	r3, [pc, #196]	; (80062a4 <USBD_SetConfig+0x118>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff f9f3 	bl	80055ce <USBD_SetClassConfig>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d104      	bne.n	80061f8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f931 	bl	8006458 <USBD_CtlError>
            return;
 80061f6:	e052      	b.n	800629e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f9f5 	bl	80065e8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80061fe:	e04e      	b.n	800629e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f9f1 	bl	80065e8 <USBD_CtlSendStatus>
        break;
 8006206:	e04a      	b.n	800629e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006208:	4b26      	ldr	r3, [pc, #152]	; (80062a4 <USBD_SetConfig+0x118>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d112      	bne.n	8006236 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006218:	4b22      	ldr	r3, [pc, #136]	; (80062a4 <USBD_SetConfig+0x118>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006222:	4b20      	ldr	r3, [pc, #128]	; (80062a4 <USBD_SetConfig+0x118>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff f9ef 	bl	800560c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f9da 	bl	80065e8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006234:	e033      	b.n	800629e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006236:	4b1b      	ldr	r3, [pc, #108]	; (80062a4 <USBD_SetConfig+0x118>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	429a      	cmp	r2, r3
 8006242:	d01d      	beq.n	8006280 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff f9dd 	bl	800560c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006252:	4b14      	ldr	r3, [pc, #80]	; (80062a4 <USBD_SetConfig+0x118>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800625c:	4b11      	ldr	r3, [pc, #68]	; (80062a4 <USBD_SetConfig+0x118>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff f9b3 	bl	80055ce <USBD_SetClassConfig>
 8006268:	4603      	mov	r3, r0
 800626a:	2b02      	cmp	r3, #2
 800626c:	d104      	bne.n	8006278 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800626e:	6839      	ldr	r1, [r7, #0]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f8f1 	bl	8006458 <USBD_CtlError>
            return;
 8006276:	e012      	b.n	800629e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f9b5 	bl	80065e8 <USBD_CtlSendStatus>
        break;
 800627e:	e00e      	b.n	800629e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f9b1 	bl	80065e8 <USBD_CtlSendStatus>
        break;
 8006286:	e00a      	b.n	800629e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f8e4 	bl	8006458 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006290:	4b04      	ldr	r3, [pc, #16]	; (80062a4 <USBD_SetConfig+0x118>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	4619      	mov	r1, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff f9b8 	bl	800560c <USBD_ClrClassConfig>
        break;
 800629c:	bf00      	nop
    }
  }
}
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20000b48 	.word	0x20000b48

080062a8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	88db      	ldrh	r3, [r3, #6]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d004      	beq.n	80062c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f8cb 	bl	8006458 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80062c2:	e021      	b.n	8006308 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	db17      	blt.n	80062fe <USBD_GetConfig+0x56>
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	dd02      	ble.n	80062d8 <USBD_GetConfig+0x30>
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d00b      	beq.n	80062ee <USBD_GetConfig+0x46>
 80062d6:	e012      	b.n	80062fe <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	3308      	adds	r3, #8
 80062e2:	2201      	movs	r2, #1
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f920 	bl	800652c <USBD_CtlSendData>
        break;
 80062ec:	e00c      	b.n	8006308 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3304      	adds	r3, #4
 80062f2:	2201      	movs	r2, #1
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f918 	bl	800652c <USBD_CtlSendData>
        break;
 80062fc:	e004      	b.n	8006308 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f8a9 	bl	8006458 <USBD_CtlError>
        break;
 8006306:	bf00      	nop
}
 8006308:	bf00      	nop
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006320:	3b01      	subs	r3, #1
 8006322:	2b02      	cmp	r3, #2
 8006324:	d81e      	bhi.n	8006364 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	88db      	ldrh	r3, [r3, #6]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d004      	beq.n	8006338 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f891 	bl	8006458 <USBD_CtlError>
        break;
 8006336:	e01a      	b.n	800636e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f043 0202 	orr.w	r2, r3, #2
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	330c      	adds	r3, #12
 8006358:	2202      	movs	r2, #2
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f8e5 	bl	800652c <USBD_CtlSendData>
      break;
 8006362:	e004      	b.n	800636e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f876 	bl	8006458 <USBD_CtlError>
      break;
 800636c:	bf00      	nop
  }
}
 800636e:	bf00      	nop
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	885b      	ldrh	r3, [r3, #2]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d106      	bne.n	8006396 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f929 	bl	80065e8 <USBD_CtlSendStatus>
  }
}
 8006396:	bf00      	nop
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b082      	sub	sp, #8
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ae:	3b01      	subs	r3, #1
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d80b      	bhi.n	80063cc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	885b      	ldrh	r3, [r3, #2]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d10c      	bne.n	80063d6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f90f 	bl	80065e8 <USBD_CtlSendStatus>
      }
      break;
 80063ca:	e004      	b.n	80063d6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f842 	bl	8006458 <USBD_CtlError>
      break;
 80063d4:	e000      	b.n	80063d8 <USBD_ClrFeature+0x3a>
      break;
 80063d6:	bf00      	nop
  }
}
 80063d8:	bf00      	nop
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781a      	ldrb	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	785a      	ldrb	r2, [r3, #1]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	3302      	adds	r3, #2
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	b29a      	uxth	r2, r3
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	3303      	adds	r3, #3
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	b29b      	uxth	r3, r3
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	b29b      	uxth	r3, r3
 800640e:	4413      	add	r3, r2
 8006410:	b29a      	uxth	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	3304      	adds	r3, #4
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	b29a      	uxth	r2, r3
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	3305      	adds	r3, #5
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	b29b      	uxth	r3, r3
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	b29b      	uxth	r3, r3
 800642a:	4413      	add	r3, r2
 800642c:	b29a      	uxth	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	3306      	adds	r3, #6
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	b29a      	uxth	r2, r3
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	3307      	adds	r3, #7
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	b29b      	uxth	r3, r3
 8006442:	021b      	lsls	r3, r3, #8
 8006444:	b29b      	uxth	r3, r3
 8006446:	4413      	add	r3, r2
 8006448:	b29a      	uxth	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	80da      	strh	r2, [r3, #6]

}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	4770      	bx	lr

08006458 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006462:	2180      	movs	r1, #128	; 0x80
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fcb7 	bl	8006dd8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800646a:	2100      	movs	r1, #0
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fcb3 	bl	8006dd8 <USBD_LL_StallEP>
}
 8006472:	bf00      	nop
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b086      	sub	sp, #24
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d032      	beq.n	80064f6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 f834 	bl	80064fe <USBD_GetLen>
 8006496:	4603      	mov	r3, r0
 8006498:	3301      	adds	r3, #1
 800649a:	b29b      	uxth	r3, r3
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	75fa      	strb	r2, [r7, #23]
 80064aa:	461a      	mov	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4413      	add	r3, r2
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	7812      	ldrb	r2, [r2, #0]
 80064b4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	75fa      	strb	r2, [r7, #23]
 80064bc:	461a      	mov	r2, r3
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4413      	add	r3, r2
 80064c2:	2203      	movs	r2, #3
 80064c4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80064c6:	e012      	b.n	80064ee <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	60fa      	str	r2, [r7, #12]
 80064ce:	7dfa      	ldrb	r2, [r7, #23]
 80064d0:	1c51      	adds	r1, r2, #1
 80064d2:	75f9      	strb	r1, [r7, #23]
 80064d4:	4611      	mov	r1, r2
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	440a      	add	r2, r1
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80064de:	7dfb      	ldrb	r3, [r7, #23]
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	75fa      	strb	r2, [r7, #23]
 80064e4:	461a      	mov	r2, r3
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	4413      	add	r3, r2
 80064ea:	2200      	movs	r2, #0
 80064ec:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1e8      	bne.n	80064c8 <USBD_GetString+0x4e>
    }
  }
}
 80064f6:	bf00      	nop
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80064fe:	b480      	push	{r7}
 8006500:	b085      	sub	sp, #20
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800650a:	e005      	b.n	8006518 <USBD_GetLen+0x1a>
  {
    len++;
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	3301      	adds	r3, #1
 8006510:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3301      	adds	r3, #1
 8006516:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1f5      	bne.n	800650c <USBD_GetLen+0xe>
  }

  return len;
 8006520:	7bfb      	ldrb	r3, [r7, #15]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr

0800652c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	4613      	mov	r3, r2
 8006538:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2202      	movs	r2, #2
 800653e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006542:	88fa      	ldrh	r2, [r7, #6]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006548:	88fa      	ldrh	r2, [r7, #6]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800654e:	88fb      	ldrh	r3, [r7, #6]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	2100      	movs	r1, #0
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 fcc1 	bl	8006edc <USBD_LL_Transmit>

  return USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	4613      	mov	r3, r2
 8006570:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006572:	88fb      	ldrh	r3, [r7, #6]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	2100      	movs	r1, #0
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 fcaf 	bl	8006edc <USBD_LL_Transmit>

  return USBD_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	4613      	mov	r3, r2
 8006594:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2203      	movs	r2, #3
 800659a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800659e:	88fa      	ldrh	r2, [r7, #6]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80065a6:	88fa      	ldrh	r2, [r7, #6]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065ae:	88fb      	ldrh	r3, [r7, #6]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	2100      	movs	r1, #0
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 fcb4 	bl	8006f22 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	4613      	mov	r3, r2
 80065d0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	2100      	movs	r1, #0
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 fca2 	bl	8006f22 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2204      	movs	r2, #4
 80065f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80065f8:	2300      	movs	r3, #0
 80065fa:	2200      	movs	r2, #0
 80065fc:	2100      	movs	r1, #0
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fc6c 	bl	8006edc <USBD_LL_Transmit>

  return USBD_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b082      	sub	sp, #8
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2205      	movs	r2, #5
 800661a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800661e:	2300      	movs	r3, #0
 8006620:	2200      	movs	r2, #0
 8006622:	2100      	movs	r1, #0
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fc7c 	bl	8006f22 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006638:	2200      	movs	r2, #0
 800663a:	4912      	ldr	r1, [pc, #72]	; (8006684 <MX_USB_DEVICE_Init+0x50>)
 800663c:	4812      	ldr	r0, [pc, #72]	; (8006688 <MX_USB_DEVICE_Init+0x54>)
 800663e:	f7fe ff6c 	bl	800551a <USBD_Init>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006648:	f7fa fef0 	bl	800142c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800664c:	490f      	ldr	r1, [pc, #60]	; (800668c <MX_USB_DEVICE_Init+0x58>)
 800664e:	480e      	ldr	r0, [pc, #56]	; (8006688 <MX_USB_DEVICE_Init+0x54>)
 8006650:	f7fe ff8e 	bl	8005570 <USBD_RegisterClass>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800665a:	f7fa fee7 	bl	800142c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800665e:	490c      	ldr	r1, [pc, #48]	; (8006690 <MX_USB_DEVICE_Init+0x5c>)
 8006660:	4809      	ldr	r0, [pc, #36]	; (8006688 <MX_USB_DEVICE_Init+0x54>)
 8006662:	f7fe febf 	bl	80053e4 <USBD_CDC_RegisterInterface>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800666c:	f7fa fede 	bl	800142c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006670:	4805      	ldr	r0, [pc, #20]	; (8006688 <MX_USB_DEVICE_Init+0x54>)
 8006672:	f7fe ff96 	bl	80055a2 <USBD_Start>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800667c:	f7fa fed6 	bl	800142c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006680:	bf00      	nop
 8006682:	bd80      	pop	{r7, pc}
 8006684:	2000012c 	.word	0x2000012c
 8006688:	20000fa8 	.word	0x20000fa8
 800668c:	20000018 	.word	0x20000018
 8006690:	2000011c 	.word	0x2000011c

08006694 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006698:	2200      	movs	r2, #0
 800669a:	4905      	ldr	r1, [pc, #20]	; (80066b0 <CDC_Init_FS+0x1c>)
 800669c:	4805      	ldr	r0, [pc, #20]	; (80066b4 <CDC_Init_FS+0x20>)
 800669e:	f7fe feb7 	bl	8005410 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80066a2:	4905      	ldr	r1, [pc, #20]	; (80066b8 <CDC_Init_FS+0x24>)
 80066a4:	4803      	ldr	r0, [pc, #12]	; (80066b4 <CDC_Init_FS+0x20>)
 80066a6:	f7fe fecc 	bl	8005442 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80066aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20001654 	.word	0x20001654
 80066b4:	20000fa8 	.word	0x20000fa8
 80066b8:	2000126c 	.word	0x2000126c

080066bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80066bc:	b480      	push	{r7}
 80066be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80066c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bc80      	pop	{r7}
 80066c8:	4770      	bx	lr
	...

080066cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4603      	mov	r3, r0
 80066d4:	6039      	str	r1, [r7, #0]
 80066d6:	71fb      	strb	r3, [r7, #7]
 80066d8:	4613      	mov	r3, r2
 80066da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	2b23      	cmp	r3, #35	; 0x23
 80066e0:	d84a      	bhi.n	8006778 <CDC_Control_FS+0xac>
 80066e2:	a201      	add	r2, pc, #4	; (adr r2, 80066e8 <CDC_Control_FS+0x1c>)
 80066e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e8:	08006779 	.word	0x08006779
 80066ec:	08006779 	.word	0x08006779
 80066f0:	08006779 	.word	0x08006779
 80066f4:	08006779 	.word	0x08006779
 80066f8:	08006779 	.word	0x08006779
 80066fc:	08006779 	.word	0x08006779
 8006700:	08006779 	.word	0x08006779
 8006704:	08006779 	.word	0x08006779
 8006708:	08006779 	.word	0x08006779
 800670c:	08006779 	.word	0x08006779
 8006710:	08006779 	.word	0x08006779
 8006714:	08006779 	.word	0x08006779
 8006718:	08006779 	.word	0x08006779
 800671c:	08006779 	.word	0x08006779
 8006720:	08006779 	.word	0x08006779
 8006724:	08006779 	.word	0x08006779
 8006728:	08006779 	.word	0x08006779
 800672c:	08006779 	.word	0x08006779
 8006730:	08006779 	.word	0x08006779
 8006734:	08006779 	.word	0x08006779
 8006738:	08006779 	.word	0x08006779
 800673c:	08006779 	.word	0x08006779
 8006740:	08006779 	.word	0x08006779
 8006744:	08006779 	.word	0x08006779
 8006748:	08006779 	.word	0x08006779
 800674c:	08006779 	.word	0x08006779
 8006750:	08006779 	.word	0x08006779
 8006754:	08006779 	.word	0x08006779
 8006758:	08006779 	.word	0x08006779
 800675c:	08006779 	.word	0x08006779
 8006760:	08006779 	.word	0x08006779
 8006764:	08006779 	.word	0x08006779
 8006768:	08006779 	.word	0x08006779
 800676c:	08006779 	.word	0x08006779
 8006770:	08006779 	.word	0x08006779
 8006774:	08006779 	.word	0x08006779
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006778:	bf00      	nop
  }

  return (USBD_OK);
 800677a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	bc80      	pop	{r7}
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop

08006788 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if(RxBuffPtr > APP_RX_DATA_SIZE)
 8006792:	4b21      	ldr	r3, [pc, #132]	; (8006818 <CDC_Receive_FS+0x90>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800679a:	d902      	bls.n	80067a2 <CDC_Receive_FS+0x1a>
    RxBuffPtr = 0;
 800679c:	4b1e      	ldr	r3, [pc, #120]	; (8006818 <CDC_Receive_FS+0x90>)
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]

  memcpy(RxBuffer + RxBuffPtr, Buf, *Len);
 80067a2:	4b1d      	ldr	r3, [pc, #116]	; (8006818 <CDC_Receive_FS+0x90>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a1d      	ldr	r2, [pc, #116]	; (800681c <CDC_Receive_FS+0x94>)
 80067a8:	1898      	adds	r0, r3, r2
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	f000 fc83 	bl	80070bc <memcpy>
  RxBuffPtr += *Len;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4b17      	ldr	r3, [pc, #92]	; (8006818 <CDC_Receive_FS+0x90>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4413      	add	r3, r2
 80067c0:	4a15      	ldr	r2, [pc, #84]	; (8006818 <CDC_Receive_FS+0x90>)
 80067c2:	6013      	str	r3, [r2, #0]

  char c= 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	72fb      	strb	r3, [r7, #11]
  for(int i = 0; i < *Len; i++)
 80067c8:	2300      	movs	r3, #0
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	e00d      	b.n	80067ea <CDC_Receive_FS+0x62>
  {
    c = Buf[i];
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	4413      	add	r3, r2
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	72fb      	strb	r3, [r7, #11]
    if(c == CDC_TERM_CHAR)
 80067d8:	7afb      	ldrb	r3, [r7, #11]
 80067da:	2b0a      	cmp	r3, #10
 80067dc:	d102      	bne.n	80067e4 <CDC_Receive_FS+0x5c>
      DataReceivedFlag = 1;
 80067de:	4b10      	ldr	r3, [pc, #64]	; (8006820 <CDC_Receive_FS+0x98>)
 80067e0:	2201      	movs	r2, #1
 80067e2:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < *Len; i++)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3301      	adds	r3, #1
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d8ec      	bhi.n	80067ce <CDC_Receive_FS+0x46>
  }

  if(!DataReceivedFlag)
 80067f4:	4b0a      	ldr	r3, [pc, #40]	; (8006820 <CDC_Receive_FS+0x98>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d106      	bne.n	800680c <CDC_Receive_FS+0x84>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	4808      	ldr	r0, [pc, #32]	; (8006824 <CDC_Receive_FS+0x9c>)
 8006802:	f7fe fe1e 	bl	8005442 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006806:	4807      	ldr	r0, [pc, #28]	; (8006824 <CDC_Receive_FS+0x9c>)
 8006808:	f7fe fe5d 	bl	80054c6 <USBD_CDC_ReceivePacket>
  }
  return (USBD_OK);
 800680c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20000b4c 	.word	0x20000b4c
 800681c:	20001a3c 	.word	0x20001a3c
 8006820:	20000b49 	.word	0x20000b49
 8006824:	20000fa8 	.word	0x20000fa8

08006828 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006838:	4b0d      	ldr	r3, [pc, #52]	; (8006870 <CDC_Transmit_FS+0x48>)
 800683a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800684a:	2301      	movs	r3, #1
 800684c:	e00b      	b.n	8006866 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800684e:	887b      	ldrh	r3, [r7, #2]
 8006850:	461a      	mov	r2, r3
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	4806      	ldr	r0, [pc, #24]	; (8006870 <CDC_Transmit_FS+0x48>)
 8006856:	f7fe fddb 	bl	8005410 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800685a:	4805      	ldr	r0, [pc, #20]	; (8006870 <CDC_Transmit_FS+0x48>)
 800685c:	f7fe fe04 	bl	8005468 <USBD_CDC_TransmitPacket>
 8006860:	4603      	mov	r3, r0
 8006862:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20000fa8 	.word	0x20000fa8

08006874 <CDC_Task_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Task_FS(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  if(UsbdUart.DataReceivedFlag)
 8006878:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <CDC_Task_FS+0x3c>)
 800687a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d014      	beq.n	80068ac <CDC_Task_FS+0x38>
  {
    UsbdUart.RxCounter++;
 8006882:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <CDC_Task_FS+0x3c>)
 8006884:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8006888:	3301      	adds	r3, #1
 800688a:	b2da      	uxtb	r2, r3
 800688c:	4b08      	ldr	r3, [pc, #32]	; (80068b0 <CDC_Task_FS+0x3c>)
 800688e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
    UsbdUart.DataReceivedFlag = 0;
 8006892:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <CDC_Task_FS+0x3c>)
 8006894:	2200      	movs	r2, #0
 8006896:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    USBD_CDC_DataRecivedCallback((char*)RxBuffer);
 800689a:	4806      	ldr	r0, [pc, #24]	; (80068b4 <CDC_Task_FS+0x40>)
 800689c:	f3af 8000 	nop.w
    RxBuffPtr = 0;
 80068a0:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <CDC_Task_FS+0x44>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80068a6:	4805      	ldr	r0, [pc, #20]	; (80068bc <CDC_Task_FS+0x48>)
 80068a8:	f7fe fe0d 	bl	80054c6 <USBD_CDC_ReceivePacket>
  }
}
 80068ac:	bf00      	nop
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	20001e24 	.word	0x20001e24
 80068b4:	20001a3c 	.word	0x20001a3c
 80068b8:	20000b4c 	.word	0x20000b4c
 80068bc:	20000fa8 	.word	0x20000fa8

080068c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	4603      	mov	r3, r0
 80068c8:	6039      	str	r1, [r7, #0]
 80068ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2212      	movs	r2, #18
 80068d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80068d2:	4b03      	ldr	r3, [pc, #12]	; (80068e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	bc80      	pop	{r7}
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	20000148 	.word	0x20000148

080068e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	4603      	mov	r3, r0
 80068ec:	6039      	str	r1, [r7, #0]
 80068ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2204      	movs	r2, #4
 80068f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80068f6:	4b03      	ldr	r3, [pc, #12]	; (8006904 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bc80      	pop	{r7}
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	2000015c 	.word	0x2000015c

08006908 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	6039      	str	r1, [r7, #0]
 8006912:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d105      	bne.n	8006926 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	4907      	ldr	r1, [pc, #28]	; (800693c <USBD_FS_ProductStrDescriptor+0x34>)
 800691e:	4808      	ldr	r0, [pc, #32]	; (8006940 <USBD_FS_ProductStrDescriptor+0x38>)
 8006920:	f7ff fdab 	bl	800647a <USBD_GetString>
 8006924:	e004      	b.n	8006930 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	4904      	ldr	r1, [pc, #16]	; (800693c <USBD_FS_ProductStrDescriptor+0x34>)
 800692a:	4805      	ldr	r0, [pc, #20]	; (8006940 <USBD_FS_ProductStrDescriptor+0x38>)
 800692c:	f7ff fda5 	bl	800647a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006930:	4b02      	ldr	r3, [pc, #8]	; (800693c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20001ed8 	.word	0x20001ed8
 8006940:	0800c74c 	.word	0x0800c74c

08006944 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	4603      	mov	r3, r0
 800694c:	6039      	str	r1, [r7, #0]
 800694e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	4904      	ldr	r1, [pc, #16]	; (8006964 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006954:	4804      	ldr	r0, [pc, #16]	; (8006968 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006956:	f7ff fd90 	bl	800647a <USBD_GetString>
  return USBD_StrDesc;
 800695a:	4b02      	ldr	r3, [pc, #8]	; (8006964 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	20001ed8 	.word	0x20001ed8
 8006968:	0800c764 	.word	0x0800c764

0800696c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	4603      	mov	r3, r0
 8006974:	6039      	str	r1, [r7, #0]
 8006976:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	221a      	movs	r2, #26
 800697c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800697e:	f000 f843 	bl	8006a08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006982:	4b02      	ldr	r3, [pc, #8]	; (800698c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006984:	4618      	mov	r0, r3
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20000160 	.word	0x20000160

08006990 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	6039      	str	r1, [r7, #0]
 800699a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d105      	bne.n	80069ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	4907      	ldr	r1, [pc, #28]	; (80069c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80069a6:	4808      	ldr	r0, [pc, #32]	; (80069c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069a8:	f7ff fd67 	bl	800647a <USBD_GetString>
 80069ac:	e004      	b.n	80069b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	4904      	ldr	r1, [pc, #16]	; (80069c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80069b2:	4805      	ldr	r0, [pc, #20]	; (80069c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069b4:	f7ff fd61 	bl	800647a <USBD_GetString>
  }
  return USBD_StrDesc;
 80069b8:	4b02      	ldr	r3, [pc, #8]	; (80069c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20001ed8 	.word	0x20001ed8
 80069c8:	0800c778 	.word	0x0800c778

080069cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	4603      	mov	r3, r0
 80069d4:	6039      	str	r1, [r7, #0]
 80069d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80069d8:	79fb      	ldrb	r3, [r7, #7]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d105      	bne.n	80069ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	4907      	ldr	r1, [pc, #28]	; (8006a00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80069e2:	4808      	ldr	r0, [pc, #32]	; (8006a04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80069e4:	f7ff fd49 	bl	800647a <USBD_GetString>
 80069e8:	e004      	b.n	80069f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	4904      	ldr	r1, [pc, #16]	; (8006a00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80069ee:	4805      	ldr	r0, [pc, #20]	; (8006a04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80069f0:	f7ff fd43 	bl	800647a <USBD_GetString>
  }
  return USBD_StrDesc;
 80069f4:	4b02      	ldr	r3, [pc, #8]	; (8006a00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20001ed8 	.word	0x20001ed8
 8006a04:	0800c784 	.word	0x0800c784

08006a08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a0e:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <Get_SerialNum+0x44>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a14:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <Get_SerialNum+0x48>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006a1a:	4b0e      	ldr	r3, [pc, #56]	; (8006a54 <Get_SerialNum+0x4c>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4413      	add	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d009      	beq.n	8006a42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a2e:	2208      	movs	r2, #8
 8006a30:	4909      	ldr	r1, [pc, #36]	; (8006a58 <Get_SerialNum+0x50>)
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 f814 	bl	8006a60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a38:	2204      	movs	r2, #4
 8006a3a:	4908      	ldr	r1, [pc, #32]	; (8006a5c <Get_SerialNum+0x54>)
 8006a3c:	68b8      	ldr	r0, [r7, #8]
 8006a3e:	f000 f80f 	bl	8006a60 <IntToUnicode>
  }
}
 8006a42:	bf00      	nop
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	1ffff7e8 	.word	0x1ffff7e8
 8006a50:	1ffff7ec 	.word	0x1ffff7ec
 8006a54:	1ffff7f0 	.word	0x1ffff7f0
 8006a58:	20000162 	.word	0x20000162
 8006a5c:	20000172 	.word	0x20000172

08006a60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006a72:	2300      	movs	r3, #0
 8006a74:	75fb      	strb	r3, [r7, #23]
 8006a76:	e027      	b.n	8006ac8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	0f1b      	lsrs	r3, r3, #28
 8006a7c:	2b09      	cmp	r3, #9
 8006a7e:	d80b      	bhi.n	8006a98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	0f1b      	lsrs	r3, r3, #28
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	440b      	add	r3, r1
 8006a90:	3230      	adds	r2, #48	; 0x30
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	e00a      	b.n	8006aae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	0f1b      	lsrs	r3, r3, #28
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	440b      	add	r3, r1
 8006aa8:	3237      	adds	r2, #55	; 0x37
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	011b      	lsls	r3, r3, #4
 8006ab2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	3301      	adds	r3, #1
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	4413      	add	r3, r2
 8006abe:	2200      	movs	r2, #0
 8006ac0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	75fb      	strb	r3, [r7, #23]
 8006ac8:	7dfa      	ldrb	r2, [r7, #23]
 8006aca:	79fb      	ldrb	r3, [r7, #7]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d3d3      	bcc.n	8006a78 <IntToUnicode+0x18>
  }
}
 8006ad0:	bf00      	nop
 8006ad2:	371c      	adds	r7, #28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bc80      	pop	{r7}
 8006ad8:	4770      	bx	lr
	...

08006adc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a11      	ldr	r2, [pc, #68]	; (8006b30 <HAL_PCD_MspInit+0x54>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d11b      	bne.n	8006b26 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006aee:	4b11      	ldr	r3, [pc, #68]	; (8006b34 <HAL_PCD_MspInit+0x58>)
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	4a10      	ldr	r2, [pc, #64]	; (8006b34 <HAL_PCD_MspInit+0x58>)
 8006af4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006af8:	61d3      	str	r3, [r2, #28]
 8006afa:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <HAL_PCD_MspInit+0x58>)
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8006b06:	2200      	movs	r2, #0
 8006b08:	2100      	movs	r1, #0
 8006b0a:	2013      	movs	r0, #19
 8006b0c:	f7fa fff3 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8006b10:	2013      	movs	r0, #19
 8006b12:	f7fb f80c 	bl	8001b2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006b16:	2200      	movs	r2, #0
 8006b18:	2100      	movs	r1, #0
 8006b1a:	2014      	movs	r0, #20
 8006b1c:	f7fa ffeb 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006b20:	2014      	movs	r0, #20
 8006b22:	f7fb f804 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006b26:	bf00      	nop
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	40005c00 	.word	0x40005c00
 8006b34:	40021000 	.word	0x40021000

08006b38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	f7fe fd6f 	bl	8005632 <USBD_LL_SetupStage>
}
 8006b54:	bf00      	nop
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006b6e:	78fb      	ldrb	r3, [r7, #3]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	015b      	lsls	r3, r3, #5
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	f7fe fda2 	bl	80056c8 <USBD_LL_DataOutStage>
}
 8006b84:	bf00      	nop
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	015b      	lsls	r3, r3, #5
 8006ba4:	4413      	add	r3, r2
 8006ba6:	333c      	adds	r3, #60	; 0x3c
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	4619      	mov	r1, r3
 8006bae:	f7fe fdfc 	bl	80057aa <USBD_LL_DataInStage>
}
 8006bb2:	bf00      	nop
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b082      	sub	sp, #8
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fe ff0c 	bl	80059e6 <USBD_LL_SOF>
}
 8006bce:	bf00      	nop
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006bde:	2301      	movs	r3, #1
 8006be0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d001      	beq.n	8006bee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006bea:	f7fa fc1f 	bl	800142c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006bf4:	7bfa      	ldrb	r2, [r7, #15]
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fe febc 	bl	8005976 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fe fe75 	bl	80058f4 <USBD_LL_Reset>
}
 8006c0a:	bf00      	nop
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fe feb6 	bl	8005994 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c30:	4b04      	ldr	r3, [pc, #16]	; (8006c44 <HAL_PCD_SuspendCallback+0x30>)
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	4a03      	ldr	r2, [pc, #12]	; (8006c44 <HAL_PCD_SuspendCallback+0x30>)
 8006c36:	f043 0306 	orr.w	r3, r3, #6
 8006c3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c3c:	bf00      	nop
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	e000ed00 	.word	0xe000ed00

08006c48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe feb0 	bl	80059bc <USBD_LL_Resume>
}
 8006c5c:	bf00      	nop
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006c6c:	4a28      	ldr	r2, [pc, #160]	; (8006d10 <USBD_LL_Init+0xac>)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a26      	ldr	r2, [pc, #152]	; (8006d10 <USBD_LL_Init+0xac>)
 8006c78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006c7c:	4b24      	ldr	r3, [pc, #144]	; (8006d10 <USBD_LL_Init+0xac>)
 8006c7e:	4a25      	ldr	r2, [pc, #148]	; (8006d14 <USBD_LL_Init+0xb0>)
 8006c80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006c82:	4b23      	ldr	r3, [pc, #140]	; (8006d10 <USBD_LL_Init+0xac>)
 8006c84:	2208      	movs	r2, #8
 8006c86:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006c88:	4b21      	ldr	r3, [pc, #132]	; (8006d10 <USBD_LL_Init+0xac>)
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006c8e:	4b20      	ldr	r3, [pc, #128]	; (8006d10 <USBD_LL_Init+0xac>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006c94:	4b1e      	ldr	r3, [pc, #120]	; (8006d10 <USBD_LL_Init+0xac>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006c9a:	4b1d      	ldr	r3, [pc, #116]	; (8006d10 <USBD_LL_Init+0xac>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006ca0:	481b      	ldr	r0, [pc, #108]	; (8006d10 <USBD_LL_Init+0xac>)
 8006ca2:	f7fb f8d1 	bl	8001e48 <HAL_PCD_Init>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006cac:	f7fa fbbe 	bl	800142c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006cb6:	2318      	movs	r3, #24
 8006cb8:	2200      	movs	r2, #0
 8006cba:	2100      	movs	r1, #0
 8006cbc:	f7fb ff6a 	bl	8002b94 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006cc6:	2358      	movs	r3, #88	; 0x58
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2180      	movs	r1, #128	; 0x80
 8006ccc:	f7fb ff62 	bl	8002b94 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006cd6:	23c0      	movs	r3, #192	; 0xc0
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2181      	movs	r1, #129	; 0x81
 8006cdc:	f7fb ff5a 	bl	8002b94 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ce6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006cea:	2200      	movs	r2, #0
 8006cec:	2101      	movs	r1, #1
 8006cee:	f7fb ff51 	bl	8002b94 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2182      	movs	r1, #130	; 0x82
 8006d00:	f7fb ff48 	bl	8002b94 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	200020d8 	.word	0x200020d8
 8006d14:	40005c00 	.word	0x40005c00

08006d18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fb f96b 	bl	800200a <HAL_PCD_Start>
 8006d34:	4603      	mov	r3, r0
 8006d36:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 f948 	bl	8006fd0 <USBD_Get_USB_Status>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	4608      	mov	r0, r1
 8006d58:	4611      	mov	r1, r2
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	70fb      	strb	r3, [r7, #3]
 8006d60:	460b      	mov	r3, r1
 8006d62:	70bb      	strb	r3, [r7, #2]
 8006d64:	4613      	mov	r3, r2
 8006d66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d76:	78bb      	ldrb	r3, [r7, #2]
 8006d78:	883a      	ldrh	r2, [r7, #0]
 8006d7a:	78f9      	ldrb	r1, [r7, #3]
 8006d7c:	f7fb fa9e 	bl	80022bc <HAL_PCD_EP_Open>
 8006d80:	4603      	mov	r3, r0
 8006d82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f922 	bl	8006fd0 <USBD_Get_USB_Status>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	460b      	mov	r3, r1
 8006da4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006db4:	78fa      	ldrb	r2, [r7, #3]
 8006db6:	4611      	mov	r1, r2
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fb fadf 	bl	800237c <HAL_PCD_EP_Close>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 f903 	bl	8006fd0 <USBD_Get_USB_Status>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006df2:	78fa      	ldrb	r2, [r7, #3]
 8006df4:	4611      	mov	r1, r2
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fb fb89 	bl	800250e <HAL_PCD_EP_SetStall>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 f8e4 	bl	8006fd0 <USBD_Get_USB_Status>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e30:	78fa      	ldrb	r2, [r7, #3]
 8006e32:	4611      	mov	r1, r2
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fb fbc4 	bl	80025c2 <HAL_PCD_EP_ClrStall>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 f8c5 	bl	8006fd0 <USBD_Get_USB_Status>
 8006e46:	4603      	mov	r3, r0
 8006e48:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e66:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	da08      	bge.n	8006e82 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	015b      	lsls	r3, r3, #5
 8006e7a:	4413      	add	r3, r2
 8006e7c:	332a      	adds	r3, #42	; 0x2a
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	e008      	b.n	8006e94 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006e82:	78fb      	ldrb	r3, [r7, #3]
 8006e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	015b      	lsls	r3, r3, #5
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006e92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bc80      	pop	{r7}
 8006e9c:	4770      	bx	lr

08006e9e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eb8:	78fa      	ldrb	r2, [r7, #3]
 8006eba:	4611      	mov	r1, r2
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fb f9d8 	bl	8002272 <HAL_PCD_SetAddress>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 f881 	bl	8006fd0 <USBD_Get_USB_Status>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	607a      	str	r2, [r7, #4]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	460b      	mov	r3, r1
 8006eea:	72fb      	strb	r3, [r7, #11]
 8006eec:	4613      	mov	r3, r2
 8006eee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006efe:	893b      	ldrh	r3, [r7, #8]
 8006f00:	7af9      	ldrb	r1, [r7, #11]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	f7fb faca 	bl	800249c <HAL_PCD_EP_Transmit>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 f85e 	bl	8006fd0 <USBD_Get_USB_Status>
 8006f14:	4603      	mov	r3, r0
 8006f16:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006f18:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b086      	sub	sp, #24
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	60f8      	str	r0, [r7, #12]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	460b      	mov	r3, r1
 8006f30:	72fb      	strb	r3, [r7, #11]
 8006f32:	4613      	mov	r3, r2
 8006f34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f44:	893b      	ldrh	r3, [r7, #8]
 8006f46:	7af9      	ldrb	r1, [r7, #11]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	f7fb fa59 	bl	8002400 <HAL_PCD_EP_Receive>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 f83b 	bl	8006fd0 <USBD_Get_USB_Status>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8006f5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3718      	adds	r7, #24
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f7a:	78fa      	ldrb	r2, [r7, #3]
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fb fa78 	bl	8002474 <HAL_PCD_EP_GetRxCount>
 8006f84:	4603      	mov	r3, r0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
	...

08006f90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006f98:	4b02      	ldr	r3, [pc, #8]	; (8006fa4 <USBD_static_malloc+0x14>)
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bc80      	pop	{r7}
 8006fa2:	4770      	bx	lr
 8006fa4:	20000b50 	.word	0x20000b50

08006fa8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]

}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bc80      	pop	{r7}
 8006fb8:	4770      	bx	lr

08006fba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006fc6:	bf00      	nop
 8006fc8:	370c      	adds	r7, #12
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bc80      	pop	{r7}
 8006fce:	4770      	bx	lr

08006fd0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006fde:	79fb      	ldrb	r3, [r7, #7]
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	d817      	bhi.n	8007014 <USBD_Get_USB_Status+0x44>
 8006fe4:	a201      	add	r2, pc, #4	; (adr r2, 8006fec <USBD_Get_USB_Status+0x1c>)
 8006fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fea:	bf00      	nop
 8006fec:	08006ffd 	.word	0x08006ffd
 8006ff0:	08007003 	.word	0x08007003
 8006ff4:	08007009 	.word	0x08007009
 8006ff8:	0800700f 	.word	0x0800700f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8007000:	e00b      	b.n	800701a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007002:	2302      	movs	r3, #2
 8007004:	73fb      	strb	r3, [r7, #15]
    break;
 8007006:	e008      	b.n	800701a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007008:	2301      	movs	r3, #1
 800700a:	73fb      	strb	r3, [r7, #15]
    break;
 800700c:	e005      	b.n	800701a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800700e:	2302      	movs	r3, #2
 8007010:	73fb      	strb	r3, [r7, #15]
    break;
 8007012:	e002      	b.n	800701a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007014:	2302      	movs	r3, #2
 8007016:	73fb      	strb	r3, [r7, #15]
    break;
 8007018:	bf00      	nop
  }
  return usb_status;
 800701a:	7bfb      	ldrb	r3, [r7, #15]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop

08007028 <__errno>:
 8007028:	4b01      	ldr	r3, [pc, #4]	; (8007030 <__errno+0x8>)
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	2000017c 	.word	0x2000017c

08007034 <__libc_init_array>:
 8007034:	b570      	push	{r4, r5, r6, lr}
 8007036:	2500      	movs	r5, #0
 8007038:	4e0c      	ldr	r6, [pc, #48]	; (800706c <__libc_init_array+0x38>)
 800703a:	4c0d      	ldr	r4, [pc, #52]	; (8007070 <__libc_init_array+0x3c>)
 800703c:	1ba4      	subs	r4, r4, r6
 800703e:	10a4      	asrs	r4, r4, #2
 8007040:	42a5      	cmp	r5, r4
 8007042:	d109      	bne.n	8007058 <__libc_init_array+0x24>
 8007044:	f005 fa8c 	bl	800c560 <_init>
 8007048:	2500      	movs	r5, #0
 800704a:	4e0a      	ldr	r6, [pc, #40]	; (8007074 <__libc_init_array+0x40>)
 800704c:	4c0a      	ldr	r4, [pc, #40]	; (8007078 <__libc_init_array+0x44>)
 800704e:	1ba4      	subs	r4, r4, r6
 8007050:	10a4      	asrs	r4, r4, #2
 8007052:	42a5      	cmp	r5, r4
 8007054:	d105      	bne.n	8007062 <__libc_init_array+0x2e>
 8007056:	bd70      	pop	{r4, r5, r6, pc}
 8007058:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800705c:	4798      	blx	r3
 800705e:	3501      	adds	r5, #1
 8007060:	e7ee      	b.n	8007040 <__libc_init_array+0xc>
 8007062:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007066:	4798      	blx	r3
 8007068:	3501      	adds	r5, #1
 800706a:	e7f2      	b.n	8007052 <__libc_init_array+0x1e>
 800706c:	0800ca3c 	.word	0x0800ca3c
 8007070:	0800ca3c 	.word	0x0800ca3c
 8007074:	0800ca3c 	.word	0x0800ca3c
 8007078:	0800ca44 	.word	0x0800ca44

0800707c <__locale_mb_cur_max>:
 800707c:	4b04      	ldr	r3, [pc, #16]	; (8007090 <__locale_mb_cur_max+0x14>)
 800707e:	4a05      	ldr	r2, [pc, #20]	; (8007094 <__locale_mb_cur_max+0x18>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007084:	2b00      	cmp	r3, #0
 8007086:	bf08      	it	eq
 8007088:	4613      	moveq	r3, r2
 800708a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800708e:	4770      	bx	lr
 8007090:	2000017c 	.word	0x2000017c
 8007094:	200005a8 	.word	0x200005a8

08007098 <__ascii_mbtowc>:
 8007098:	b082      	sub	sp, #8
 800709a:	b901      	cbnz	r1, 800709e <__ascii_mbtowc+0x6>
 800709c:	a901      	add	r1, sp, #4
 800709e:	b142      	cbz	r2, 80070b2 <__ascii_mbtowc+0x1a>
 80070a0:	b14b      	cbz	r3, 80070b6 <__ascii_mbtowc+0x1e>
 80070a2:	7813      	ldrb	r3, [r2, #0]
 80070a4:	600b      	str	r3, [r1, #0]
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	1c10      	adds	r0, r2, #0
 80070aa:	bf18      	it	ne
 80070ac:	2001      	movne	r0, #1
 80070ae:	b002      	add	sp, #8
 80070b0:	4770      	bx	lr
 80070b2:	4610      	mov	r0, r2
 80070b4:	e7fb      	b.n	80070ae <__ascii_mbtowc+0x16>
 80070b6:	f06f 0001 	mvn.w	r0, #1
 80070ba:	e7f8      	b.n	80070ae <__ascii_mbtowc+0x16>

080070bc <memcpy>:
 80070bc:	b510      	push	{r4, lr}
 80070be:	1e43      	subs	r3, r0, #1
 80070c0:	440a      	add	r2, r1
 80070c2:	4291      	cmp	r1, r2
 80070c4:	d100      	bne.n	80070c8 <memcpy+0xc>
 80070c6:	bd10      	pop	{r4, pc}
 80070c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070d0:	e7f7      	b.n	80070c2 <memcpy+0x6>

080070d2 <memset>:
 80070d2:	4603      	mov	r3, r0
 80070d4:	4402      	add	r2, r0
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d100      	bne.n	80070dc <memset+0xa>
 80070da:	4770      	bx	lr
 80070dc:	f803 1b01 	strb.w	r1, [r3], #1
 80070e0:	e7f9      	b.n	80070d6 <memset+0x4>
	...

080070e4 <printf>:
 80070e4:	b40f      	push	{r0, r1, r2, r3}
 80070e6:	b507      	push	{r0, r1, r2, lr}
 80070e8:	4906      	ldr	r1, [pc, #24]	; (8007104 <printf+0x20>)
 80070ea:	ab04      	add	r3, sp, #16
 80070ec:	6808      	ldr	r0, [r1, #0]
 80070ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80070f2:	6881      	ldr	r1, [r0, #8]
 80070f4:	9301      	str	r3, [sp, #4]
 80070f6:	f001 fa83 	bl	8008600 <_vfprintf_r>
 80070fa:	b003      	add	sp, #12
 80070fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007100:	b004      	add	sp, #16
 8007102:	4770      	bx	lr
 8007104:	2000017c 	.word	0x2000017c

08007108 <_puts_r>:
 8007108:	b530      	push	{r4, r5, lr}
 800710a:	4605      	mov	r5, r0
 800710c:	b089      	sub	sp, #36	; 0x24
 800710e:	4608      	mov	r0, r1
 8007110:	460c      	mov	r4, r1
 8007112:	f7f9 f81d 	bl	8000150 <strlen>
 8007116:	4b1e      	ldr	r3, [pc, #120]	; (8007190 <_puts_r+0x88>)
 8007118:	e9cd 4004 	strd	r4, r0, [sp, #16]
 800711c:	9306      	str	r3, [sp, #24]
 800711e:	2301      	movs	r3, #1
 8007120:	4418      	add	r0, r3
 8007122:	9307      	str	r3, [sp, #28]
 8007124:	ab04      	add	r3, sp, #16
 8007126:	9301      	str	r3, [sp, #4]
 8007128:	2302      	movs	r3, #2
 800712a:	9302      	str	r3, [sp, #8]
 800712c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800712e:	9003      	str	r0, [sp, #12]
 8007130:	68ac      	ldr	r4, [r5, #8]
 8007132:	b913      	cbnz	r3, 800713a <_puts_r+0x32>
 8007134:	4628      	mov	r0, r5
 8007136:	f003 fca7 	bl	800aa88 <__sinit>
 800713a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800713c:	07db      	lsls	r3, r3, #31
 800713e:	d405      	bmi.n	800714c <_puts_r+0x44>
 8007140:	89a3      	ldrh	r3, [r4, #12]
 8007142:	0598      	lsls	r0, r3, #22
 8007144:	d402      	bmi.n	800714c <_puts_r+0x44>
 8007146:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007148:	f003 ff66 	bl	800b018 <__retarget_lock_acquire_recursive>
 800714c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007150:	0499      	lsls	r1, r3, #18
 8007152:	d406      	bmi.n	8007162 <_puts_r+0x5a>
 8007154:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007158:	81a3      	strh	r3, [r4, #12]
 800715a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800715c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007160:	6663      	str	r3, [r4, #100]	; 0x64
 8007162:	4628      	mov	r0, r5
 8007164:	aa01      	add	r2, sp, #4
 8007166:	4621      	mov	r1, r4
 8007168:	f003 fdda 	bl	800ad20 <__sfvwrite_r>
 800716c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800716e:	2800      	cmp	r0, #0
 8007170:	bf0c      	ite	eq
 8007172:	250a      	moveq	r5, #10
 8007174:	f04f 35ff 	movne.w	r5, #4294967295
 8007178:	07da      	lsls	r2, r3, #31
 800717a:	d405      	bmi.n	8007188 <_puts_r+0x80>
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	059b      	lsls	r3, r3, #22
 8007180:	d402      	bmi.n	8007188 <_puts_r+0x80>
 8007182:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007184:	f003 ff49 	bl	800b01a <__retarget_lock_release_recursive>
 8007188:	4628      	mov	r0, r5
 800718a:	b009      	add	sp, #36	; 0x24
 800718c:	bd30      	pop	{r4, r5, pc}
 800718e:	bf00      	nop
 8007190:	0800c7b2 	.word	0x0800c7b2

08007194 <puts>:
 8007194:	4b02      	ldr	r3, [pc, #8]	; (80071a0 <puts+0xc>)
 8007196:	4601      	mov	r1, r0
 8007198:	6818      	ldr	r0, [r3, #0]
 800719a:	f7ff bfb5 	b.w	8007108 <_puts_r>
 800719e:	bf00      	nop
 80071a0:	2000017c 	.word	0x2000017c

080071a4 <sprintf>:
 80071a4:	b40e      	push	{r1, r2, r3}
 80071a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071aa:	b500      	push	{lr}
 80071ac:	b09c      	sub	sp, #112	; 0x70
 80071ae:	ab1d      	add	r3, sp, #116	; 0x74
 80071b0:	9002      	str	r0, [sp, #8]
 80071b2:	9006      	str	r0, [sp, #24]
 80071b4:	9107      	str	r1, [sp, #28]
 80071b6:	9104      	str	r1, [sp, #16]
 80071b8:	4808      	ldr	r0, [pc, #32]	; (80071dc <sprintf+0x38>)
 80071ba:	4909      	ldr	r1, [pc, #36]	; (80071e0 <sprintf+0x3c>)
 80071bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80071c0:	9105      	str	r1, [sp, #20]
 80071c2:	6800      	ldr	r0, [r0, #0]
 80071c4:	a902      	add	r1, sp, #8
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	f000 f80c 	bl	80071e4 <_svfprintf_r>
 80071cc:	2200      	movs	r2, #0
 80071ce:	9b02      	ldr	r3, [sp, #8]
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	b01c      	add	sp, #112	; 0x70
 80071d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071d8:	b003      	add	sp, #12
 80071da:	4770      	bx	lr
 80071dc:	2000017c 	.word	0x2000017c
 80071e0:	ffff0208 	.word	0xffff0208

080071e4 <_svfprintf_r>:
 80071e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e8:	b0d5      	sub	sp, #340	; 0x154
 80071ea:	4689      	mov	r9, r1
 80071ec:	4693      	mov	fp, r2
 80071ee:	461e      	mov	r6, r3
 80071f0:	9007      	str	r0, [sp, #28]
 80071f2:	f003 ff01 	bl	800aff8 <_localeconv_r>
 80071f6:	6803      	ldr	r3, [r0, #0]
 80071f8:	4618      	mov	r0, r3
 80071fa:	931a      	str	r3, [sp, #104]	; 0x68
 80071fc:	f7f8 ffa8 	bl	8000150 <strlen>
 8007200:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007204:	900f      	str	r0, [sp, #60]	; 0x3c
 8007206:	0618      	lsls	r0, r3, #24
 8007208:	d518      	bpl.n	800723c <_svfprintf_r+0x58>
 800720a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800720e:	b9ab      	cbnz	r3, 800723c <_svfprintf_r+0x58>
 8007210:	2140      	movs	r1, #64	; 0x40
 8007212:	9807      	ldr	r0, [sp, #28]
 8007214:	f003 ff6e 	bl	800b0f4 <_malloc_r>
 8007218:	f8c9 0000 	str.w	r0, [r9]
 800721c:	f8c9 0010 	str.w	r0, [r9, #16]
 8007220:	b948      	cbnz	r0, 8007236 <_svfprintf_r+0x52>
 8007222:	230c      	movs	r3, #12
 8007224:	9a07      	ldr	r2, [sp, #28]
 8007226:	6013      	str	r3, [r2, #0]
 8007228:	f04f 33ff 	mov.w	r3, #4294967295
 800722c:	9310      	str	r3, [sp, #64]	; 0x40
 800722e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007230:	b055      	add	sp, #340	; 0x154
 8007232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007236:	2340      	movs	r3, #64	; 0x40
 8007238:	f8c9 3014 	str.w	r3, [r9, #20]
 800723c:	2300      	movs	r3, #0
 800723e:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8007242:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 8007246:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 800724a:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 800724e:	ac2b      	add	r4, sp, #172	; 0xac
 8007250:	9428      	str	r4, [sp, #160]	; 0xa0
 8007252:	9308      	str	r3, [sp, #32]
 8007254:	930d      	str	r3, [sp, #52]	; 0x34
 8007256:	9316      	str	r3, [sp, #88]	; 0x58
 8007258:	931d      	str	r3, [sp, #116]	; 0x74
 800725a:	9310      	str	r3, [sp, #64]	; 0x40
 800725c:	465d      	mov	r5, fp
 800725e:	462b      	mov	r3, r5
 8007260:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007264:	b112      	cbz	r2, 800726c <_svfprintf_r+0x88>
 8007266:	2a25      	cmp	r2, #37	; 0x25
 8007268:	f040 80e4 	bne.w	8007434 <_svfprintf_r+0x250>
 800726c:	ebb5 070b 	subs.w	r7, r5, fp
 8007270:	d00e      	beq.n	8007290 <_svfprintf_r+0xac>
 8007272:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007274:	e9c4 b700 	strd	fp, r7, [r4]
 8007278:	443b      	add	r3, r7
 800727a:	932a      	str	r3, [sp, #168]	; 0xa8
 800727c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800727e:	3301      	adds	r3, #1
 8007280:	2b07      	cmp	r3, #7
 8007282:	9329      	str	r3, [sp, #164]	; 0xa4
 8007284:	f300 80d8 	bgt.w	8007438 <_svfprintf_r+0x254>
 8007288:	3408      	adds	r4, #8
 800728a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800728c:	443b      	add	r3, r7
 800728e:	9310      	str	r3, [sp, #64]	; 0x40
 8007290:	782b      	ldrb	r3, [r5, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f001 81a4 	beq.w	80085e0 <_svfprintf_r+0x13fc>
 8007298:	1c6b      	adds	r3, r5, #1
 800729a:	930e      	str	r3, [sp, #56]	; 0x38
 800729c:	2300      	movs	r3, #0
 800729e:	f04f 35ff 	mov.w	r5, #4294967295
 80072a2:	469a      	mov	sl, r3
 80072a4:	270a      	movs	r7, #10
 80072a6:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80072aa:	9311      	str	r3, [sp, #68]	; 0x44
 80072ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	930a      	str	r3, [sp, #40]	; 0x28
 80072b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072b4:	3301      	adds	r3, #1
 80072b6:	930e      	str	r3, [sp, #56]	; 0x38
 80072b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ba:	3b20      	subs	r3, #32
 80072bc:	2b5a      	cmp	r3, #90	; 0x5a
 80072be:	f200 8614 	bhi.w	8007eea <_svfprintf_r+0xd06>
 80072c2:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <_svfprintf_r+0xe4>)
 80072c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c8:	080074cb 	.word	0x080074cb
 80072cc:	08007eeb 	.word	0x08007eeb
 80072d0:	08007eeb 	.word	0x08007eeb
 80072d4:	080074dd 	.word	0x080074dd
 80072d8:	08007eeb 	.word	0x08007eeb
 80072dc:	08007eeb 	.word	0x08007eeb
 80072e0:	08007eeb 	.word	0x08007eeb
 80072e4:	08007491 	.word	0x08007491
 80072e8:	08007eeb 	.word	0x08007eeb
 80072ec:	08007eeb 	.word	0x08007eeb
 80072f0:	080074e3 	.word	0x080074e3
 80072f4:	080074f9 	.word	0x080074f9
 80072f8:	08007eeb 	.word	0x08007eeb
 80072fc:	080074f3 	.word	0x080074f3
 8007300:	080074fd 	.word	0x080074fd
 8007304:	08007eeb 	.word	0x08007eeb
 8007308:	0800752f 	.word	0x0800752f
 800730c:	08007535 	.word	0x08007535
 8007310:	08007535 	.word	0x08007535
 8007314:	08007535 	.word	0x08007535
 8007318:	08007535 	.word	0x08007535
 800731c:	08007535 	.word	0x08007535
 8007320:	08007535 	.word	0x08007535
 8007324:	08007535 	.word	0x08007535
 8007328:	08007535 	.word	0x08007535
 800732c:	08007535 	.word	0x08007535
 8007330:	08007eeb 	.word	0x08007eeb
 8007334:	08007eeb 	.word	0x08007eeb
 8007338:	08007eeb 	.word	0x08007eeb
 800733c:	08007eeb 	.word	0x08007eeb
 8007340:	08007eeb 	.word	0x08007eeb
 8007344:	08007eeb 	.word	0x08007eeb
 8007348:	08007eeb 	.word	0x08007eeb
 800734c:	08007623 	.word	0x08007623
 8007350:	08007eeb 	.word	0x08007eeb
 8007354:	0800758f 	.word	0x0800758f
 8007358:	080075b1 	.word	0x080075b1
 800735c:	08007623 	.word	0x08007623
 8007360:	08007623 	.word	0x08007623
 8007364:	08007623 	.word	0x08007623
 8007368:	08007eeb 	.word	0x08007eeb
 800736c:	08007eeb 	.word	0x08007eeb
 8007370:	08007eeb 	.word	0x08007eeb
 8007374:	08007eeb 	.word	0x08007eeb
 8007378:	08007555 	.word	0x08007555
 800737c:	08007eeb 	.word	0x08007eeb
 8007380:	08007eeb 	.word	0x08007eeb
 8007384:	08007af1 	.word	0x08007af1
 8007388:	08007eeb 	.word	0x08007eeb
 800738c:	08007eeb 	.word	0x08007eeb
 8007390:	08007eeb 	.word	0x08007eeb
 8007394:	08007b7d 	.word	0x08007b7d
 8007398:	08007eeb 	.word	0x08007eeb
 800739c:	08007d59 	.word	0x08007d59
 80073a0:	08007eeb 	.word	0x08007eeb
 80073a4:	08007eeb 	.word	0x08007eeb
 80073a8:	08007451 	.word	0x08007451
 80073ac:	08007eeb 	.word	0x08007eeb
 80073b0:	08007eeb 	.word	0x08007eeb
 80073b4:	08007eeb 	.word	0x08007eeb
 80073b8:	08007eeb 	.word	0x08007eeb
 80073bc:	08007eeb 	.word	0x08007eeb
 80073c0:	08007eeb 	.word	0x08007eeb
 80073c4:	08007eeb 	.word	0x08007eeb
 80073c8:	08007eeb 	.word	0x08007eeb
 80073cc:	08007623 	.word	0x08007623
 80073d0:	08007eeb 	.word	0x08007eeb
 80073d4:	0800758f 	.word	0x0800758f
 80073d8:	080075b5 	.word	0x080075b5
 80073dc:	08007623 	.word	0x08007623
 80073e0:	08007623 	.word	0x08007623
 80073e4:	08007623 	.word	0x08007623
 80073e8:	0800755b 	.word	0x0800755b
 80073ec:	080075b5 	.word	0x080075b5
 80073f0:	08007583 	.word	0x08007583
 80073f4:	08007eeb 	.word	0x08007eeb
 80073f8:	08007575 	.word	0x08007575
 80073fc:	08007eeb 	.word	0x08007eeb
 8007400:	08007aab 	.word	0x08007aab
 8007404:	08007af5 	.word	0x08007af5
 8007408:	08007b5d 	.word	0x08007b5d
 800740c:	08007583 	.word	0x08007583
 8007410:	08007eeb 	.word	0x08007eeb
 8007414:	08007b7d 	.word	0x08007b7d
 8007418:	080072ad 	.word	0x080072ad
 800741c:	08007d5d 	.word	0x08007d5d
 8007420:	08007eeb 	.word	0x08007eeb
 8007424:	08007eeb 	.word	0x08007eeb
 8007428:	08007d9b 	.word	0x08007d9b
 800742c:	08007eeb 	.word	0x08007eeb
 8007430:	080072ad 	.word	0x080072ad
 8007434:	461d      	mov	r5, r3
 8007436:	e712      	b.n	800725e <_svfprintf_r+0x7a>
 8007438:	aa28      	add	r2, sp, #160	; 0xa0
 800743a:	4649      	mov	r1, r9
 800743c:	9807      	ldr	r0, [sp, #28]
 800743e:	f004 fdbb 	bl	800bfb8 <__ssprint_r>
 8007442:	2800      	cmp	r0, #0
 8007444:	f040 8157 	bne.w	80076f6 <_svfprintf_r+0x512>
 8007448:	ac2b      	add	r4, sp, #172	; 0xac
 800744a:	e71e      	b.n	800728a <_svfprintf_r+0xa6>
 800744c:	461e      	mov	r6, r3
 800744e:	e72d      	b.n	80072ac <_svfprintf_r+0xc8>
 8007450:	4bad      	ldr	r3, [pc, #692]	; (8007708 <_svfprintf_r+0x524>)
 8007452:	f01a 0f20 	tst.w	sl, #32
 8007456:	931c      	str	r3, [sp, #112]	; 0x70
 8007458:	f000 84a2 	beq.w	8007da0 <_svfprintf_r+0xbbc>
 800745c:	3607      	adds	r6, #7
 800745e:	f026 0607 	bic.w	r6, r6, #7
 8007462:	f106 0308 	add.w	r3, r6, #8
 8007466:	930c      	str	r3, [sp, #48]	; 0x30
 8007468:	e9d6 6700 	ldrd	r6, r7, [r6]
 800746c:	f01a 0f01 	tst.w	sl, #1
 8007470:	d00a      	beq.n	8007488 <_svfprintf_r+0x2a4>
 8007472:	ea56 0307 	orrs.w	r3, r6, r7
 8007476:	d007      	beq.n	8007488 <_svfprintf_r+0x2a4>
 8007478:	2330      	movs	r3, #48	; 0x30
 800747a:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800747e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007480:	f04a 0a02 	orr.w	sl, sl, #2
 8007484:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8007488:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800748c:	2302      	movs	r3, #2
 800748e:	e33f      	b.n	8007b10 <_svfprintf_r+0x92c>
 8007490:	9807      	ldr	r0, [sp, #28]
 8007492:	f003 fdb1 	bl	800aff8 <_localeconv_r>
 8007496:	6843      	ldr	r3, [r0, #4]
 8007498:	4618      	mov	r0, r3
 800749a:	931d      	str	r3, [sp, #116]	; 0x74
 800749c:	f7f8 fe58 	bl	8000150 <strlen>
 80074a0:	9016      	str	r0, [sp, #88]	; 0x58
 80074a2:	9807      	ldr	r0, [sp, #28]
 80074a4:	f003 fda8 	bl	800aff8 <_localeconv_r>
 80074a8:	6883      	ldr	r3, [r0, #8]
 80074aa:	930d      	str	r3, [sp, #52]	; 0x34
 80074ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f43f aefc 	beq.w	80072ac <_svfprintf_r+0xc8>
 80074b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f43f aef8 	beq.w	80072ac <_svfprintf_r+0xc8>
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f43f aef4 	beq.w	80072ac <_svfprintf_r+0xc8>
 80074c4:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80074c8:	e6f0      	b.n	80072ac <_svfprintf_r+0xc8>
 80074ca:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f47f aeec 	bne.w	80072ac <_svfprintf_r+0xc8>
 80074d4:	2320      	movs	r3, #32
 80074d6:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80074da:	e6e7      	b.n	80072ac <_svfprintf_r+0xc8>
 80074dc:	f04a 0a01 	orr.w	sl, sl, #1
 80074e0:	e6e4      	b.n	80072ac <_svfprintf_r+0xc8>
 80074e2:	6832      	ldr	r2, [r6, #0]
 80074e4:	1d33      	adds	r3, r6, #4
 80074e6:	2a00      	cmp	r2, #0
 80074e8:	9211      	str	r2, [sp, #68]	; 0x44
 80074ea:	daaf      	bge.n	800744c <_svfprintf_r+0x268>
 80074ec:	461e      	mov	r6, r3
 80074ee:	4252      	negs	r2, r2
 80074f0:	9211      	str	r2, [sp, #68]	; 0x44
 80074f2:	f04a 0a04 	orr.w	sl, sl, #4
 80074f6:	e6d9      	b.n	80072ac <_svfprintf_r+0xc8>
 80074f8:	232b      	movs	r3, #43	; 0x2b
 80074fa:	e7ec      	b.n	80074d6 <_svfprintf_r+0x2f2>
 80074fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007500:	7812      	ldrb	r2, [r2, #0]
 8007502:	3301      	adds	r3, #1
 8007504:	2a2a      	cmp	r2, #42	; 0x2a
 8007506:	920a      	str	r2, [sp, #40]	; 0x28
 8007508:	d10f      	bne.n	800752a <_svfprintf_r+0x346>
 800750a:	6835      	ldr	r5, [r6, #0]
 800750c:	930e      	str	r3, [sp, #56]	; 0x38
 800750e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8007512:	3604      	adds	r6, #4
 8007514:	e6ca      	b.n	80072ac <_svfprintf_r+0xc8>
 8007516:	fb07 2505 	mla	r5, r7, r5, r2
 800751a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800751e:	920a      	str	r2, [sp, #40]	; 0x28
 8007520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007522:	3a30      	subs	r2, #48	; 0x30
 8007524:	2a09      	cmp	r2, #9
 8007526:	d9f6      	bls.n	8007516 <_svfprintf_r+0x332>
 8007528:	e6c5      	b.n	80072b6 <_svfprintf_r+0xd2>
 800752a:	2500      	movs	r5, #0
 800752c:	e7f8      	b.n	8007520 <_svfprintf_r+0x33c>
 800752e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8007532:	e6bb      	b.n	80072ac <_svfprintf_r+0xc8>
 8007534:	2200      	movs	r2, #0
 8007536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007538:	9211      	str	r2, [sp, #68]	; 0x44
 800753a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800753c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800753e:	3a30      	subs	r2, #48	; 0x30
 8007540:	fb07 2201 	mla	r2, r7, r1, r2
 8007544:	9211      	str	r2, [sp, #68]	; 0x44
 8007546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800754a:	920a      	str	r2, [sp, #40]	; 0x28
 800754c:	3a30      	subs	r2, #48	; 0x30
 800754e:	2a09      	cmp	r2, #9
 8007550:	d9f3      	bls.n	800753a <_svfprintf_r+0x356>
 8007552:	e6b0      	b.n	80072b6 <_svfprintf_r+0xd2>
 8007554:	f04a 0a08 	orr.w	sl, sl, #8
 8007558:	e6a8      	b.n	80072ac <_svfprintf_r+0xc8>
 800755a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b68      	cmp	r3, #104	; 0x68
 8007560:	bf01      	itttt	eq
 8007562:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 8007564:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8007568:	3301      	addeq	r3, #1
 800756a:	930e      	streq	r3, [sp, #56]	; 0x38
 800756c:	bf18      	it	ne
 800756e:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8007572:	e69b      	b.n	80072ac <_svfprintf_r+0xc8>
 8007574:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	2b6c      	cmp	r3, #108	; 0x6c
 800757a:	d105      	bne.n	8007588 <_svfprintf_r+0x3a4>
 800757c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800757e:	3301      	adds	r3, #1
 8007580:	930e      	str	r3, [sp, #56]	; 0x38
 8007582:	f04a 0a20 	orr.w	sl, sl, #32
 8007586:	e691      	b.n	80072ac <_svfprintf_r+0xc8>
 8007588:	f04a 0a10 	orr.w	sl, sl, #16
 800758c:	e68e      	b.n	80072ac <_svfprintf_r+0xc8>
 800758e:	2000      	movs	r0, #0
 8007590:	1d33      	adds	r3, r6, #4
 8007592:	930c      	str	r3, [sp, #48]	; 0x30
 8007594:	6833      	ldr	r3, [r6, #0]
 8007596:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 800759a:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 800759e:	4680      	mov	r8, r0
 80075a0:	2501      	movs	r5, #1
 80075a2:	9012      	str	r0, [sp, #72]	; 0x48
 80075a4:	4607      	mov	r7, r0
 80075a6:	900b      	str	r0, [sp, #44]	; 0x2c
 80075a8:	4606      	mov	r6, r0
 80075aa:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 80075ae:	e2fe      	b.n	8007bae <_svfprintf_r+0x9ca>
 80075b0:	f04a 0a10 	orr.w	sl, sl, #16
 80075b4:	f01a 0f20 	tst.w	sl, #32
 80075b8:	d020      	beq.n	80075fc <_svfprintf_r+0x418>
 80075ba:	3607      	adds	r6, #7
 80075bc:	f026 0607 	bic.w	r6, r6, #7
 80075c0:	f106 0308 	add.w	r3, r6, #8
 80075c4:	930c      	str	r3, [sp, #48]	; 0x30
 80075c6:	e9d6 6700 	ldrd	r6, r7, [r6]
 80075ca:	2e00      	cmp	r6, #0
 80075cc:	f177 0300 	sbcs.w	r3, r7, #0
 80075d0:	da05      	bge.n	80075de <_svfprintf_r+0x3fa>
 80075d2:	232d      	movs	r3, #45	; 0x2d
 80075d4:	4276      	negs	r6, r6
 80075d6:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80075da:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80075de:	1c6b      	adds	r3, r5, #1
 80075e0:	f040 83f1 	bne.w	8007dc6 <_svfprintf_r+0xbe2>
 80075e4:	2f00      	cmp	r7, #0
 80075e6:	bf08      	it	eq
 80075e8:	2e0a      	cmpeq	r6, #10
 80075ea:	f080 8423 	bcs.w	8007e34 <_svfprintf_r+0xc50>
 80075ee:	3630      	adds	r6, #48	; 0x30
 80075f0:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 80075f4:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 80075f8:	f000 bc08 	b.w	8007e0c <_svfprintf_r+0xc28>
 80075fc:	1d33      	adds	r3, r6, #4
 80075fe:	f01a 0f10 	tst.w	sl, #16
 8007602:	930c      	str	r3, [sp, #48]	; 0x30
 8007604:	d002      	beq.n	800760c <_svfprintf_r+0x428>
 8007606:	6836      	ldr	r6, [r6, #0]
 8007608:	17f7      	asrs	r7, r6, #31
 800760a:	e7de      	b.n	80075ca <_svfprintf_r+0x3e6>
 800760c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007610:	6836      	ldr	r6, [r6, #0]
 8007612:	d001      	beq.n	8007618 <_svfprintf_r+0x434>
 8007614:	b236      	sxth	r6, r6
 8007616:	e7f7      	b.n	8007608 <_svfprintf_r+0x424>
 8007618:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800761c:	bf18      	it	ne
 800761e:	b276      	sxtbne	r6, r6
 8007620:	e7f2      	b.n	8007608 <_svfprintf_r+0x424>
 8007622:	3607      	adds	r6, #7
 8007624:	f026 0607 	bic.w	r6, r6, #7
 8007628:	f106 0308 	add.w	r3, r6, #8
 800762c:	930c      	str	r3, [sp, #48]	; 0x30
 800762e:	6833      	ldr	r3, [r6, #0]
 8007630:	f04f 32ff 	mov.w	r2, #4294967295
 8007634:	9314      	str	r3, [sp, #80]	; 0x50
 8007636:	6873      	ldr	r3, [r6, #4]
 8007638:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800763a:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800763e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007640:	4638      	mov	r0, r7
 8007642:	4b32      	ldr	r3, [pc, #200]	; (800770c <_svfprintf_r+0x528>)
 8007644:	4631      	mov	r1, r6
 8007646:	f7f9 f9e1 	bl	8000a0c <__aeabi_dcmpun>
 800764a:	bb00      	cbnz	r0, 800768e <_svfprintf_r+0x4aa>
 800764c:	f04f 32ff 	mov.w	r2, #4294967295
 8007650:	4b2e      	ldr	r3, [pc, #184]	; (800770c <_svfprintf_r+0x528>)
 8007652:	4638      	mov	r0, r7
 8007654:	4631      	mov	r1, r6
 8007656:	f7f9 f9bb 	bl	80009d0 <__aeabi_dcmple>
 800765a:	b9c0      	cbnz	r0, 800768e <_svfprintf_r+0x4aa>
 800765c:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007660:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8007664:	f7f9 f9aa 	bl	80009bc <__aeabi_dcmplt>
 8007668:	b110      	cbz	r0, 8007670 <_svfprintf_r+0x48c>
 800766a:	232d      	movs	r3, #45	; 0x2d
 800766c:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8007670:	4a27      	ldr	r2, [pc, #156]	; (8007710 <_svfprintf_r+0x52c>)
 8007672:	4b28      	ldr	r3, [pc, #160]	; (8007714 <_svfprintf_r+0x530>)
 8007674:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007676:	f04f 0800 	mov.w	r8, #0
 800767a:	2947      	cmp	r1, #71	; 0x47
 800767c:	bfcc      	ite	gt
 800767e:	4693      	movgt	fp, r2
 8007680:	469b      	movle	fp, r3
 8007682:	2503      	movs	r5, #3
 8007684:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8007688:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 800768c:	e3c4      	b.n	8007e18 <_svfprintf_r+0xc34>
 800768e:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8007692:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8007696:	f7f9 f9b9 	bl	8000a0c <__aeabi_dcmpun>
 800769a:	4680      	mov	r8, r0
 800769c:	b140      	cbz	r0, 80076b0 <_svfprintf_r+0x4cc>
 800769e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076a0:	4a1d      	ldr	r2, [pc, #116]	; (8007718 <_svfprintf_r+0x534>)
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	bfbc      	itt	lt
 80076a6:	232d      	movlt	r3, #45	; 0x2d
 80076a8:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
 80076ac:	4b1b      	ldr	r3, [pc, #108]	; (800771c <_svfprintf_r+0x538>)
 80076ae:	e7e1      	b.n	8007674 <_svfprintf_r+0x490>
 80076b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b2:	f023 0320 	bic.w	r3, r3, #32
 80076b6:	2b41      	cmp	r3, #65	; 0x41
 80076b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80076ba:	d131      	bne.n	8007720 <_svfprintf_r+0x53c>
 80076bc:	2330      	movs	r3, #48	; 0x30
 80076be:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80076c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c4:	f04a 0a02 	orr.w	sl, sl, #2
 80076c8:	2b61      	cmp	r3, #97	; 0x61
 80076ca:	bf14      	ite	ne
 80076cc:	2358      	movne	r3, #88	; 0x58
 80076ce:	2378      	moveq	r3, #120	; 0x78
 80076d0:	2d63      	cmp	r5, #99	; 0x63
 80076d2:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 80076d6:	f340 8111 	ble.w	80078fc <_svfprintf_r+0x718>
 80076da:	1c69      	adds	r1, r5, #1
 80076dc:	9807      	ldr	r0, [sp, #28]
 80076de:	f003 fd09 	bl	800b0f4 <_malloc_r>
 80076e2:	4683      	mov	fp, r0
 80076e4:	2800      	cmp	r0, #0
 80076e6:	f040 810c 	bne.w	8007902 <_svfprintf_r+0x71e>
 80076ea:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80076ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076f2:	f8a9 300c 	strh.w	r3, [r9, #12]
 80076f6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80076fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80076fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007700:	bf18      	it	ne
 8007702:	f04f 33ff 	movne.w	r3, #4294967295
 8007706:	e591      	b.n	800722c <_svfprintf_r+0x48>
 8007708:	0800c7d5 	.word	0x0800c7d5
 800770c:	7fefffff 	.word	0x7fefffff
 8007710:	0800c7b8 	.word	0x0800c7b8
 8007714:	0800c7b4 	.word	0x0800c7b4
 8007718:	0800c7c0 	.word	0x0800c7c0
 800771c:	0800c7bc 	.word	0x0800c7bc
 8007720:	1c69      	adds	r1, r5, #1
 8007722:	f000 80f0 	beq.w	8007906 <_svfprintf_r+0x722>
 8007726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007728:	2b47      	cmp	r3, #71	; 0x47
 800772a:	d102      	bne.n	8007732 <_svfprintf_r+0x54e>
 800772c:	2d00      	cmp	r5, #0
 800772e:	f000 80ec 	beq.w	800790a <_svfprintf_r+0x726>
 8007732:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8007736:	9315      	str	r3, [sp, #84]	; 0x54
 8007738:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800773a:	1e1e      	subs	r6, r3, #0
 800773c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800773e:	9308      	str	r3, [sp, #32]
 8007740:	bfb7      	itett	lt
 8007742:	4633      	movlt	r3, r6
 8007744:	2300      	movge	r3, #0
 8007746:	f103 4600 	addlt.w	r6, r3, #2147483648	; 0x80000000
 800774a:	232d      	movlt	r3, #45	; 0x2d
 800774c:	9319      	str	r3, [sp, #100]	; 0x64
 800774e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007750:	2b41      	cmp	r3, #65	; 0x41
 8007752:	f040 80eb 	bne.w	800792c <_svfprintf_r+0x748>
 8007756:	aa22      	add	r2, sp, #136	; 0x88
 8007758:	9808      	ldr	r0, [sp, #32]
 800775a:	4631      	mov	r1, r6
 800775c:	f004 fb92 	bl	800be84 <frexp>
 8007760:	2200      	movs	r2, #0
 8007762:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007766:	f7f8 feb7 	bl	80004d8 <__aeabi_dmul>
 800776a:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 800776e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007772:	f7f9 f919 	bl	80009a8 <__aeabi_dcmpeq>
 8007776:	b108      	cbz	r0, 800777c <_svfprintf_r+0x598>
 8007778:	2301      	movs	r3, #1
 800777a:	9322      	str	r3, [sp, #136]	; 0x88
 800777c:	4fac      	ldr	r7, [pc, #688]	; (8007a30 <_svfprintf_r+0x84c>)
 800777e:	4bad      	ldr	r3, [pc, #692]	; (8007a34 <_svfprintf_r+0x850>)
 8007780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007782:	465e      	mov	r6, fp
 8007784:	2a61      	cmp	r2, #97	; 0x61
 8007786:	bf08      	it	eq
 8007788:	461f      	moveq	r7, r3
 800778a:	9712      	str	r7, [sp, #72]	; 0x48
 800778c:	1e6f      	subs	r7, r5, #1
 800778e:	2200      	movs	r2, #0
 8007790:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007794:	4ba8      	ldr	r3, [pc, #672]	; (8007a38 <_svfprintf_r+0x854>)
 8007796:	f7f8 fe9f 	bl	80004d8 <__aeabi_dmul>
 800779a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800779e:	f7f9 f94b 	bl	8000a38 <__aeabi_d2iz>
 80077a2:	901e      	str	r0, [sp, #120]	; 0x78
 80077a4:	f7f8 fe2e 	bl	8000404 <__aeabi_i2d>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80077b0:	f7f8 fcda 	bl	8000168 <__aeabi_dsub>
 80077b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80077b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80077bc:	5c9b      	ldrb	r3, [r3, r2]
 80077be:	1c7a      	adds	r2, r7, #1
 80077c0:	f806 3b01 	strb.w	r3, [r6], #1
 80077c4:	971f      	str	r7, [sp, #124]	; 0x7c
 80077c6:	d006      	beq.n	80077d6 <_svfprintf_r+0x5f2>
 80077c8:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80077cc:	3f01      	subs	r7, #1
 80077ce:	f7f9 f8eb 	bl	80009a8 <__aeabi_dcmpeq>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d0db      	beq.n	800778e <_svfprintf_r+0x5aa>
 80077d6:	2200      	movs	r2, #0
 80077d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80077dc:	4b97      	ldr	r3, [pc, #604]	; (8007a3c <_svfprintf_r+0x858>)
 80077de:	f7f9 f90b 	bl	80009f8 <__aeabi_dcmpgt>
 80077e2:	b960      	cbnz	r0, 80077fe <_svfprintf_r+0x61a>
 80077e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80077e8:	2200      	movs	r2, #0
 80077ea:	4b94      	ldr	r3, [pc, #592]	; (8007a3c <_svfprintf_r+0x858>)
 80077ec:	f7f9 f8dc 	bl	80009a8 <__aeabi_dcmpeq>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	f000 8096 	beq.w	8007922 <_svfprintf_r+0x73e>
 80077f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80077f8:	07db      	lsls	r3, r3, #31
 80077fa:	f140 8092 	bpl.w	8007922 <_svfprintf_r+0x73e>
 80077fe:	2030      	movs	r0, #48	; 0x30
 8007800:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007802:	9626      	str	r6, [sp, #152]	; 0x98
 8007804:	7bd9      	ldrb	r1, [r3, #15]
 8007806:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007808:	1e53      	subs	r3, r2, #1
 800780a:	9326      	str	r3, [sp, #152]	; 0x98
 800780c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8007810:	428b      	cmp	r3, r1
 8007812:	d07d      	beq.n	8007910 <_svfprintf_r+0x72c>
 8007814:	2b39      	cmp	r3, #57	; 0x39
 8007816:	bf0b      	itete	eq
 8007818:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 800781a:	3301      	addne	r3, #1
 800781c:	7a9b      	ldrbeq	r3, [r3, #10]
 800781e:	b2db      	uxtbne	r3, r3
 8007820:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007824:	4633      	mov	r3, r6
 8007826:	eba3 030b 	sub.w	r3, r3, fp
 800782a:	9308      	str	r3, [sp, #32]
 800782c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800782e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007830:	2b47      	cmp	r3, #71	; 0x47
 8007832:	f040 80c7 	bne.w	80079c4 <_svfprintf_r+0x7e0>
 8007836:	1cf7      	adds	r7, r6, #3
 8007838:	db02      	blt.n	8007840 <_svfprintf_r+0x65c>
 800783a:	42b5      	cmp	r5, r6
 800783c:	f280 80ed 	bge.w	8007a1a <_svfprintf_r+0x836>
 8007840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007842:	3b02      	subs	r3, #2
 8007844:	930a      	str	r3, [sp, #40]	; 0x28
 8007846:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007848:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800784c:	f021 0120 	bic.w	r1, r1, #32
 8007850:	2941      	cmp	r1, #65	; 0x41
 8007852:	bf08      	it	eq
 8007854:	320f      	addeq	r2, #15
 8007856:	f106 33ff 	add.w	r3, r6, #4294967295
 800785a:	bf06      	itte	eq
 800785c:	b2d2      	uxtbeq	r2, r2
 800785e:	2101      	moveq	r1, #1
 8007860:	2100      	movne	r1, #0
 8007862:	2b00      	cmp	r3, #0
 8007864:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8007868:	bfb4      	ite	lt
 800786a:	222d      	movlt	r2, #45	; 0x2d
 800786c:	222b      	movge	r2, #43	; 0x2b
 800786e:	9322      	str	r3, [sp, #136]	; 0x88
 8007870:	bfb8      	it	lt
 8007872:	f1c6 0301 	rsblt	r3, r6, #1
 8007876:	2b09      	cmp	r3, #9
 8007878:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 800787c:	f340 80b9 	ble.w	80079f2 <_svfprintf_r+0x80e>
 8007880:	250a      	movs	r5, #10
 8007882:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8007886:	fb93 f0f5 	sdiv	r0, r3, r5
 800788a:	fb05 3310 	mls	r3, r5, r0, r3
 800788e:	2809      	cmp	r0, #9
 8007890:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8007894:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007898:	f102 31ff 	add.w	r1, r2, #4294967295
 800789c:	4603      	mov	r3, r0
 800789e:	f300 80a1 	bgt.w	80079e4 <_svfprintf_r+0x800>
 80078a2:	3330      	adds	r3, #48	; 0x30
 80078a4:	f801 3c01 	strb.w	r3, [r1, #-1]
 80078a8:	3a02      	subs	r2, #2
 80078aa:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 80078ae:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 80078b2:	4282      	cmp	r2, r0
 80078b4:	4619      	mov	r1, r3
 80078b6:	f0c0 8097 	bcc.w	80079e8 <_svfprintf_r+0x804>
 80078ba:	9a08      	ldr	r2, [sp, #32]
 80078bc:	ab24      	add	r3, sp, #144	; 0x90
 80078be:	1acb      	subs	r3, r1, r3
 80078c0:	2a01      	cmp	r2, #1
 80078c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80078c4:	eb03 0502 	add.w	r5, r3, r2
 80078c8:	dc02      	bgt.n	80078d0 <_svfprintf_r+0x6ec>
 80078ca:	f01a 0f01 	tst.w	sl, #1
 80078ce:	d001      	beq.n	80078d4 <_svfprintf_r+0x6f0>
 80078d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078d2:	441d      	add	r5, r3
 80078d4:	2700      	movs	r7, #0
 80078d6:	463e      	mov	r6, r7
 80078d8:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 80078dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e0:	9315      	str	r3, [sp, #84]	; 0x54
 80078e2:	970b      	str	r7, [sp, #44]	; 0x2c
 80078e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 830b 	beq.w	8007f02 <_svfprintf_r+0xd1e>
 80078ec:	232d      	movs	r3, #45	; 0x2d
 80078ee:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80078f2:	2300      	movs	r3, #0
 80078f4:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80078f8:	9312      	str	r3, [sp, #72]	; 0x48
 80078fa:	e158      	b.n	8007bae <_svfprintf_r+0x9ca>
 80078fc:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 8007900:	e717      	b.n	8007732 <_svfprintf_r+0x54e>
 8007902:	4680      	mov	r8, r0
 8007904:	e715      	b.n	8007732 <_svfprintf_r+0x54e>
 8007906:	2506      	movs	r5, #6
 8007908:	e713      	b.n	8007732 <_svfprintf_r+0x54e>
 800790a:	46a8      	mov	r8, r5
 800790c:	2501      	movs	r5, #1
 800790e:	e710      	b.n	8007732 <_svfprintf_r+0x54e>
 8007910:	f802 0c01 	strb.w	r0, [r2, #-1]
 8007914:	e777      	b.n	8007806 <_svfprintf_r+0x622>
 8007916:	f803 1b01 	strb.w	r1, [r3], #1
 800791a:	1af2      	subs	r2, r6, r3
 800791c:	2a00      	cmp	r2, #0
 800791e:	dafa      	bge.n	8007916 <_svfprintf_r+0x732>
 8007920:	e781      	b.n	8007826 <_svfprintf_r+0x642>
 8007922:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007924:	4633      	mov	r3, r6
 8007926:	2130      	movs	r1, #48	; 0x30
 8007928:	4416      	add	r6, r2
 800792a:	e7f6      	b.n	800791a <_svfprintf_r+0x736>
 800792c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800792e:	2b46      	cmp	r3, #70	; 0x46
 8007930:	d004      	beq.n	800793c <_svfprintf_r+0x758>
 8007932:	2b45      	cmp	r3, #69	; 0x45
 8007934:	d140      	bne.n	80079b8 <_svfprintf_r+0x7d4>
 8007936:	1c6f      	adds	r7, r5, #1
 8007938:	2302      	movs	r3, #2
 800793a:	e001      	b.n	8007940 <_svfprintf_r+0x75c>
 800793c:	462f      	mov	r7, r5
 800793e:	2303      	movs	r3, #3
 8007940:	aa26      	add	r2, sp, #152	; 0x98
 8007942:	9204      	str	r2, [sp, #16]
 8007944:	aa23      	add	r2, sp, #140	; 0x8c
 8007946:	9203      	str	r2, [sp, #12]
 8007948:	aa22      	add	r2, sp, #136	; 0x88
 800794a:	e9cd 7201 	strd	r7, r2, [sp, #4]
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	9a08      	ldr	r2, [sp, #32]
 8007952:	4633      	mov	r3, r6
 8007954:	9807      	ldr	r0, [sp, #28]
 8007956:	f002 f9fb 	bl	8009d50 <_dtoa_r>
 800795a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800795c:	4683      	mov	fp, r0
 800795e:	2b47      	cmp	r3, #71	; 0x47
 8007960:	d102      	bne.n	8007968 <_svfprintf_r+0x784>
 8007962:	f01a 0f01 	tst.w	sl, #1
 8007966:	d02b      	beq.n	80079c0 <_svfprintf_r+0x7dc>
 8007968:	eb0b 0307 	add.w	r3, fp, r7
 800796c:	9312      	str	r3, [sp, #72]	; 0x48
 800796e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007970:	2b46      	cmp	r3, #70	; 0x46
 8007972:	d111      	bne.n	8007998 <_svfprintf_r+0x7b4>
 8007974:	f89b 3000 	ldrb.w	r3, [fp]
 8007978:	2b30      	cmp	r3, #48	; 0x30
 800797a:	d109      	bne.n	8007990 <_svfprintf_r+0x7ac>
 800797c:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007980:	9808      	ldr	r0, [sp, #32]
 8007982:	4631      	mov	r1, r6
 8007984:	f7f9 f810 	bl	80009a8 <__aeabi_dcmpeq>
 8007988:	b910      	cbnz	r0, 8007990 <_svfprintf_r+0x7ac>
 800798a:	f1c7 0701 	rsb	r7, r7, #1
 800798e:	9722      	str	r7, [sp, #136]	; 0x88
 8007990:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007992:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007994:	441a      	add	r2, r3
 8007996:	9212      	str	r2, [sp, #72]	; 0x48
 8007998:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 800799c:	9808      	ldr	r0, [sp, #32]
 800799e:	4631      	mov	r1, r6
 80079a0:	f7f9 f802 	bl	80009a8 <__aeabi_dcmpeq>
 80079a4:	b950      	cbnz	r0, 80079bc <_svfprintf_r+0x7d8>
 80079a6:	2230      	movs	r2, #48	; 0x30
 80079a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 80079ac:	4299      	cmp	r1, r3
 80079ae:	d907      	bls.n	80079c0 <_svfprintf_r+0x7dc>
 80079b0:	1c59      	adds	r1, r3, #1
 80079b2:	9126      	str	r1, [sp, #152]	; 0x98
 80079b4:	701a      	strb	r2, [r3, #0]
 80079b6:	e7f7      	b.n	80079a8 <_svfprintf_r+0x7c4>
 80079b8:	462f      	mov	r7, r5
 80079ba:	e7bd      	b.n	8007938 <_svfprintf_r+0x754>
 80079bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079be:	9326      	str	r3, [sp, #152]	; 0x98
 80079c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079c2:	e730      	b.n	8007826 <_svfprintf_r+0x642>
 80079c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c6:	2b46      	cmp	r3, #70	; 0x46
 80079c8:	f47f af3d 	bne.w	8007846 <_svfprintf_r+0x662>
 80079cc:	2e00      	cmp	r6, #0
 80079ce:	dd1d      	ble.n	8007a0c <_svfprintf_r+0x828>
 80079d0:	b915      	cbnz	r5, 80079d8 <_svfprintf_r+0x7f4>
 80079d2:	f01a 0f01 	tst.w	sl, #1
 80079d6:	d03d      	beq.n	8007a54 <_svfprintf_r+0x870>
 80079d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079da:	18f3      	adds	r3, r6, r3
 80079dc:	441d      	add	r5, r3
 80079de:	2366      	movs	r3, #102	; 0x66
 80079e0:	930a      	str	r3, [sp, #40]	; 0x28
 80079e2:	e03c      	b.n	8007a5e <_svfprintf_r+0x87a>
 80079e4:	460a      	mov	r2, r1
 80079e6:	e74e      	b.n	8007886 <_svfprintf_r+0x6a2>
 80079e8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80079ec:	f803 1b01 	strb.w	r1, [r3], #1
 80079f0:	e75f      	b.n	80078b2 <_svfprintf_r+0x6ce>
 80079f2:	b941      	cbnz	r1, 8007a06 <_svfprintf_r+0x822>
 80079f4:	2230      	movs	r2, #48	; 0x30
 80079f6:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 80079fa:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 80079fe:	3330      	adds	r3, #48	; 0x30
 8007a00:	1c51      	adds	r1, r2, #1
 8007a02:	7013      	strb	r3, [r2, #0]
 8007a04:	e759      	b.n	80078ba <_svfprintf_r+0x6d6>
 8007a06:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 8007a0a:	e7f8      	b.n	80079fe <_svfprintf_r+0x81a>
 8007a0c:	b915      	cbnz	r5, 8007a14 <_svfprintf_r+0x830>
 8007a0e:	f01a 0f01 	tst.w	sl, #1
 8007a12:	d021      	beq.n	8007a58 <_svfprintf_r+0x874>
 8007a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a16:	3301      	adds	r3, #1
 8007a18:	e7e0      	b.n	80079dc <_svfprintf_r+0x7f8>
 8007a1a:	9b08      	ldr	r3, [sp, #32]
 8007a1c:	42b3      	cmp	r3, r6
 8007a1e:	dc0f      	bgt.n	8007a40 <_svfprintf_r+0x85c>
 8007a20:	f01a 0f01 	tst.w	sl, #1
 8007a24:	d02e      	beq.n	8007a84 <_svfprintf_r+0x8a0>
 8007a26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a28:	18f5      	adds	r5, r6, r3
 8007a2a:	2367      	movs	r3, #103	; 0x67
 8007a2c:	e7d8      	b.n	80079e0 <_svfprintf_r+0x7fc>
 8007a2e:	bf00      	nop
 8007a30:	0800c7d5 	.word	0x0800c7d5
 8007a34:	0800c7c4 	.word	0x0800c7c4
 8007a38:	40300000 	.word	0x40300000
 8007a3c:	3fe00000 	.word	0x3fe00000
 8007a40:	9b08      	ldr	r3, [sp, #32]
 8007a42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a44:	2e00      	cmp	r6, #0
 8007a46:	eb03 0502 	add.w	r5, r3, r2
 8007a4a:	dcee      	bgt.n	8007a2a <_svfprintf_r+0x846>
 8007a4c:	f1c6 0301 	rsb	r3, r6, #1
 8007a50:	441d      	add	r5, r3
 8007a52:	e7ea      	b.n	8007a2a <_svfprintf_r+0x846>
 8007a54:	4635      	mov	r5, r6
 8007a56:	e7c2      	b.n	80079de <_svfprintf_r+0x7fa>
 8007a58:	2366      	movs	r3, #102	; 0x66
 8007a5a:	2501      	movs	r5, #1
 8007a5c:	930a      	str	r3, [sp, #40]	; 0x28
 8007a5e:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8007a62:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a64:	d01f      	beq.n	8007aa6 <_svfprintf_r+0x8c2>
 8007a66:	2700      	movs	r7, #0
 8007a68:	2e00      	cmp	r6, #0
 8007a6a:	970b      	str	r7, [sp, #44]	; 0x2c
 8007a6c:	f77f af3a 	ble.w	80078e4 <_svfprintf_r+0x700>
 8007a70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2bff      	cmp	r3, #255	; 0xff
 8007a76:	d107      	bne.n	8007a88 <_svfprintf_r+0x8a4>
 8007a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007a7c:	443b      	add	r3, r7
 8007a7e:	fb02 5503 	mla	r5, r2, r3, r5
 8007a82:	e72f      	b.n	80078e4 <_svfprintf_r+0x700>
 8007a84:	4635      	mov	r5, r6
 8007a86:	e7d0      	b.n	8007a2a <_svfprintf_r+0x846>
 8007a88:	42b3      	cmp	r3, r6
 8007a8a:	daf5      	bge.n	8007a78 <_svfprintf_r+0x894>
 8007a8c:	1af6      	subs	r6, r6, r3
 8007a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a90:	785b      	ldrb	r3, [r3, #1]
 8007a92:	b133      	cbz	r3, 8007aa2 <_svfprintf_r+0x8be>
 8007a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a96:	3301      	adds	r3, #1
 8007a98:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	930d      	str	r3, [sp, #52]	; 0x34
 8007aa0:	e7e6      	b.n	8007a70 <_svfprintf_r+0x88c>
 8007aa2:	3701      	adds	r7, #1
 8007aa4:	e7e4      	b.n	8007a70 <_svfprintf_r+0x88c>
 8007aa6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007aa8:	e71c      	b.n	80078e4 <_svfprintf_r+0x700>
 8007aaa:	4632      	mov	r2, r6
 8007aac:	f852 3b04 	ldr.w	r3, [r2], #4
 8007ab0:	f01a 0f20 	tst.w	sl, #32
 8007ab4:	920c      	str	r2, [sp, #48]	; 0x30
 8007ab6:	d009      	beq.n	8007acc <_svfprintf_r+0x8e8>
 8007ab8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007aba:	4610      	mov	r0, r2
 8007abc:	17d1      	asrs	r1, r2, #31
 8007abe:	e9c3 0100 	strd	r0, r1, [r3]
 8007ac2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ac4:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8007ac8:	f7ff bbc8 	b.w	800725c <_svfprintf_r+0x78>
 8007acc:	f01a 0f10 	tst.w	sl, #16
 8007ad0:	d002      	beq.n	8007ad8 <_svfprintf_r+0x8f4>
 8007ad2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	e7f4      	b.n	8007ac2 <_svfprintf_r+0x8de>
 8007ad8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007adc:	d002      	beq.n	8007ae4 <_svfprintf_r+0x900>
 8007ade:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ae0:	801a      	strh	r2, [r3, #0]
 8007ae2:	e7ee      	b.n	8007ac2 <_svfprintf_r+0x8de>
 8007ae4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007ae8:	d0f3      	beq.n	8007ad2 <_svfprintf_r+0x8ee>
 8007aea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	e7e8      	b.n	8007ac2 <_svfprintf_r+0x8de>
 8007af0:	f04a 0a10 	orr.w	sl, sl, #16
 8007af4:	f01a 0f20 	tst.w	sl, #32
 8007af8:	d01e      	beq.n	8007b38 <_svfprintf_r+0x954>
 8007afa:	3607      	adds	r6, #7
 8007afc:	f026 0607 	bic.w	r6, r6, #7
 8007b00:	f106 0308 	add.w	r3, r6, #8
 8007b04:	930c      	str	r3, [sp, #48]	; 0x30
 8007b06:	e9d6 6700 	ldrd	r6, r7, [r6]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8007b10:	2200      	movs	r2, #0
 8007b12:	1c69      	adds	r1, r5, #1
 8007b14:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8007b18:	f000 8158 	beq.w	8007dcc <_svfprintf_r+0xbe8>
 8007b1c:	4652      	mov	r2, sl
 8007b1e:	ea56 0107 	orrs.w	r1, r6, r7
 8007b22:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8007b26:	f040 8151 	bne.w	8007dcc <_svfprintf_r+0xbe8>
 8007b2a:	2d00      	cmp	r5, #0
 8007b2c:	f000 81d3 	beq.w	8007ed6 <_svfprintf_r+0xcf2>
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	f040 814e 	bne.w	8007dd2 <_svfprintf_r+0xbee>
 8007b36:	e55a      	b.n	80075ee <_svfprintf_r+0x40a>
 8007b38:	1d33      	adds	r3, r6, #4
 8007b3a:	f01a 0f10 	tst.w	sl, #16
 8007b3e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b40:	d001      	beq.n	8007b46 <_svfprintf_r+0x962>
 8007b42:	6836      	ldr	r6, [r6, #0]
 8007b44:	e003      	b.n	8007b4e <_svfprintf_r+0x96a>
 8007b46:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007b4a:	d002      	beq.n	8007b52 <_svfprintf_r+0x96e>
 8007b4c:	8836      	ldrh	r6, [r6, #0]
 8007b4e:	2700      	movs	r7, #0
 8007b50:	e7db      	b.n	8007b0a <_svfprintf_r+0x926>
 8007b52:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007b56:	d0f4      	beq.n	8007b42 <_svfprintf_r+0x95e>
 8007b58:	7836      	ldrb	r6, [r6, #0]
 8007b5a:	e7f8      	b.n	8007b4e <_svfprintf_r+0x96a>
 8007b5c:	1d33      	adds	r3, r6, #4
 8007b5e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b60:	f647 0330 	movw	r3, #30768	; 0x7830
 8007b64:	2278      	movs	r2, #120	; 0x78
 8007b66:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 8007b6a:	4baf      	ldr	r3, [pc, #700]	; (8007e28 <_svfprintf_r+0xc44>)
 8007b6c:	6836      	ldr	r6, [r6, #0]
 8007b6e:	931c      	str	r3, [sp, #112]	; 0x70
 8007b70:	2700      	movs	r7, #0
 8007b72:	f04a 0a02 	orr.w	sl, sl, #2
 8007b76:	2302      	movs	r3, #2
 8007b78:	920a      	str	r2, [sp, #40]	; 0x28
 8007b7a:	e7c9      	b.n	8007b10 <_svfprintf_r+0x92c>
 8007b7c:	1d33      	adds	r3, r6, #4
 8007b7e:	f8d6 b000 	ldr.w	fp, [r6]
 8007b82:	2600      	movs	r6, #0
 8007b84:	1c68      	adds	r0, r5, #1
 8007b86:	930c      	str	r3, [sp, #48]	; 0x30
 8007b88:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 8007b8c:	f000 80de 	beq.w	8007d4c <_svfprintf_r+0xb68>
 8007b90:	462a      	mov	r2, r5
 8007b92:	4631      	mov	r1, r6
 8007b94:	4658      	mov	r0, fp
 8007b96:	f003 fce3 	bl	800b560 <memchr>
 8007b9a:	4680      	mov	r8, r0
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	f43f ad73 	beq.w	8007688 <_svfprintf_r+0x4a4>
 8007ba2:	46b0      	mov	r8, r6
 8007ba4:	4637      	mov	r7, r6
 8007ba6:	eba0 050b 	sub.w	r5, r0, fp
 8007baa:	9612      	str	r6, [sp, #72]	; 0x48
 8007bac:	960b      	str	r6, [sp, #44]	; 0x2c
 8007bae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bb0:	42ab      	cmp	r3, r5
 8007bb2:	bfb8      	it	lt
 8007bb4:	462b      	movlt	r3, r5
 8007bb6:	9315      	str	r3, [sp, #84]	; 0x54
 8007bb8:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8007bbc:	b113      	cbz	r3, 8007bc4 <_svfprintf_r+0x9e0>
 8007bbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	9315      	str	r3, [sp, #84]	; 0x54
 8007bc4:	f01a 0302 	ands.w	r3, sl, #2
 8007bc8:	931e      	str	r3, [sp, #120]	; 0x78
 8007bca:	bf1e      	ittt	ne
 8007bcc:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 8007bce:	3302      	addne	r3, #2
 8007bd0:	9315      	strne	r3, [sp, #84]	; 0x54
 8007bd2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8007bd6:	931f      	str	r3, [sp, #124]	; 0x7c
 8007bd8:	d121      	bne.n	8007c1e <_svfprintf_r+0xa3a>
 8007bda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bdc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007bde:	1a9b      	subs	r3, r3, r2
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	9319      	str	r3, [sp, #100]	; 0x64
 8007be4:	dd1b      	ble.n	8007c1e <_svfprintf_r+0xa3a>
 8007be6:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8007bea:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007bec:	3201      	adds	r2, #1
 8007bee:	2810      	cmp	r0, #16
 8007bf0:	488e      	ldr	r0, [pc, #568]	; (8007e2c <_svfprintf_r+0xc48>)
 8007bf2:	f104 0108 	add.w	r1, r4, #8
 8007bf6:	6020      	str	r0, [r4, #0]
 8007bf8:	f300 8187 	bgt.w	8007f0a <_svfprintf_r+0xd26>
 8007bfc:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007bfe:	2a07      	cmp	r2, #7
 8007c00:	4403      	add	r3, r0
 8007c02:	6060      	str	r0, [r4, #4]
 8007c04:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007c08:	f340 8194 	ble.w	8007f34 <_svfprintf_r+0xd50>
 8007c0c:	aa28      	add	r2, sp, #160	; 0xa0
 8007c0e:	4649      	mov	r1, r9
 8007c10:	9807      	ldr	r0, [sp, #28]
 8007c12:	f004 f9d1 	bl	800bfb8 <__ssprint_r>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	f040 84c0 	bne.w	800859c <_svfprintf_r+0x13b8>
 8007c1c:	ac2b      	add	r4, sp, #172	; 0xac
 8007c1e:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8007c22:	b173      	cbz	r3, 8007c42 <_svfprintf_r+0xa5e>
 8007c24:	f10d 0383 	add.w	r3, sp, #131	; 0x83
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	6063      	str	r3, [r4, #4]
 8007c2e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007c30:	3301      	adds	r3, #1
 8007c32:	932a      	str	r3, [sp, #168]	; 0xa8
 8007c34:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007c36:	3301      	adds	r3, #1
 8007c38:	2b07      	cmp	r3, #7
 8007c3a:	9329      	str	r3, [sp, #164]	; 0xa4
 8007c3c:	f300 817c 	bgt.w	8007f38 <_svfprintf_r+0xd54>
 8007c40:	3408      	adds	r4, #8
 8007c42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c44:	b16b      	cbz	r3, 8007c62 <_svfprintf_r+0xa7e>
 8007c46:	ab21      	add	r3, sp, #132	; 0x84
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	6063      	str	r3, [r4, #4]
 8007c4e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007c50:	3302      	adds	r3, #2
 8007c52:	932a      	str	r3, [sp, #168]	; 0xa8
 8007c54:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007c56:	3301      	adds	r3, #1
 8007c58:	2b07      	cmp	r3, #7
 8007c5a:	9329      	str	r3, [sp, #164]	; 0xa4
 8007c5c:	f300 8176 	bgt.w	8007f4c <_svfprintf_r+0xd68>
 8007c60:	3408      	adds	r4, #8
 8007c62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c64:	2b80      	cmp	r3, #128	; 0x80
 8007c66:	d121      	bne.n	8007cac <_svfprintf_r+0xac8>
 8007c68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007c6c:	1a9b      	subs	r3, r3, r2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	9319      	str	r3, [sp, #100]	; 0x64
 8007c72:	dd1b      	ble.n	8007cac <_svfprintf_r+0xac8>
 8007c74:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8007c78:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007c7a:	3201      	adds	r2, #1
 8007c7c:	2810      	cmp	r0, #16
 8007c7e:	486c      	ldr	r0, [pc, #432]	; (8007e30 <_svfprintf_r+0xc4c>)
 8007c80:	f104 0108 	add.w	r1, r4, #8
 8007c84:	6020      	str	r0, [r4, #0]
 8007c86:	f300 816b 	bgt.w	8007f60 <_svfprintf_r+0xd7c>
 8007c8a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007c8c:	2a07      	cmp	r2, #7
 8007c8e:	4403      	add	r3, r0
 8007c90:	6060      	str	r0, [r4, #4]
 8007c92:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007c96:	f340 8178 	ble.w	8007f8a <_svfprintf_r+0xda6>
 8007c9a:	aa28      	add	r2, sp, #160	; 0xa0
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	9807      	ldr	r0, [sp, #28]
 8007ca0:	f004 f98a 	bl	800bfb8 <__ssprint_r>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	f040 8479 	bne.w	800859c <_svfprintf_r+0x13b8>
 8007caa:	ac2b      	add	r4, sp, #172	; 0xac
 8007cac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cae:	1b5b      	subs	r3, r3, r5
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	9312      	str	r3, [sp, #72]	; 0x48
 8007cb4:	dd1b      	ble.n	8007cee <_svfprintf_r+0xb0a>
 8007cb6:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8007cba:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007cbc:	3201      	adds	r2, #1
 8007cbe:	2810      	cmp	r0, #16
 8007cc0:	485b      	ldr	r0, [pc, #364]	; (8007e30 <_svfprintf_r+0xc4c>)
 8007cc2:	f104 0108 	add.w	r1, r4, #8
 8007cc6:	6020      	str	r0, [r4, #0]
 8007cc8:	f300 8161 	bgt.w	8007f8e <_svfprintf_r+0xdaa>
 8007ccc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007cce:	2a07      	cmp	r2, #7
 8007cd0:	4403      	add	r3, r0
 8007cd2:	6060      	str	r0, [r4, #4]
 8007cd4:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007cd8:	f340 816e 	ble.w	8007fb8 <_svfprintf_r+0xdd4>
 8007cdc:	aa28      	add	r2, sp, #160	; 0xa0
 8007cde:	4649      	mov	r1, r9
 8007ce0:	9807      	ldr	r0, [sp, #28]
 8007ce2:	f004 f969 	bl	800bfb8 <__ssprint_r>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	f040 8458 	bne.w	800859c <_svfprintf_r+0x13b8>
 8007cec:	ac2b      	add	r4, sp, #172	; 0xac
 8007cee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007cf0:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007cf4:	9312      	str	r3, [sp, #72]	; 0x48
 8007cf6:	f040 8161 	bne.w	8007fbc <_svfprintf_r+0xdd8>
 8007cfa:	e9c4 b500 	strd	fp, r5, [r4]
 8007cfe:	441d      	add	r5, r3
 8007d00:	952a      	str	r5, [sp, #168]	; 0xa8
 8007d02:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007d04:	3301      	adds	r3, #1
 8007d06:	2b07      	cmp	r3, #7
 8007d08:	9329      	str	r3, [sp, #164]	; 0xa4
 8007d0a:	f300 819d 	bgt.w	8008048 <_svfprintf_r+0xe64>
 8007d0e:	3408      	adds	r4, #8
 8007d10:	f01a 0f04 	tst.w	sl, #4
 8007d14:	f040 8424 	bne.w	8008560 <_svfprintf_r+0x137c>
 8007d18:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8007d1c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007d1e:	428a      	cmp	r2, r1
 8007d20:	bfac      	ite	ge
 8007d22:	189b      	addge	r3, r3, r2
 8007d24:	185b      	addlt	r3, r3, r1
 8007d26:	9310      	str	r3, [sp, #64]	; 0x40
 8007d28:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007d2a:	b13b      	cbz	r3, 8007d3c <_svfprintf_r+0xb58>
 8007d2c:	aa28      	add	r2, sp, #160	; 0xa0
 8007d2e:	4649      	mov	r1, r9
 8007d30:	9807      	ldr	r0, [sp, #28]
 8007d32:	f004 f941 	bl	800bfb8 <__ssprint_r>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	f040 8430 	bne.w	800859c <_svfprintf_r+0x13b8>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	9329      	str	r3, [sp, #164]	; 0xa4
 8007d40:	f1b8 0f00 	cmp.w	r8, #0
 8007d44:	f040 8446 	bne.w	80085d4 <_svfprintf_r+0x13f0>
 8007d48:	ac2b      	add	r4, sp, #172	; 0xac
 8007d4a:	e6ba      	b.n	8007ac2 <_svfprintf_r+0x8de>
 8007d4c:	4658      	mov	r0, fp
 8007d4e:	f7f8 f9ff 	bl	8000150 <strlen>
 8007d52:	46b0      	mov	r8, r6
 8007d54:	4605      	mov	r5, r0
 8007d56:	e497      	b.n	8007688 <_svfprintf_r+0x4a4>
 8007d58:	f04a 0a10 	orr.w	sl, sl, #16
 8007d5c:	f01a 0f20 	tst.w	sl, #32
 8007d60:	d009      	beq.n	8007d76 <_svfprintf_r+0xb92>
 8007d62:	3607      	adds	r6, #7
 8007d64:	f026 0607 	bic.w	r6, r6, #7
 8007d68:	f106 0308 	add.w	r3, r6, #8
 8007d6c:	930c      	str	r3, [sp, #48]	; 0x30
 8007d6e:	e9d6 6700 	ldrd	r6, r7, [r6]
 8007d72:	2301      	movs	r3, #1
 8007d74:	e6cc      	b.n	8007b10 <_svfprintf_r+0x92c>
 8007d76:	1d33      	adds	r3, r6, #4
 8007d78:	f01a 0f10 	tst.w	sl, #16
 8007d7c:	930c      	str	r3, [sp, #48]	; 0x30
 8007d7e:	d001      	beq.n	8007d84 <_svfprintf_r+0xba0>
 8007d80:	6836      	ldr	r6, [r6, #0]
 8007d82:	e003      	b.n	8007d8c <_svfprintf_r+0xba8>
 8007d84:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007d88:	d002      	beq.n	8007d90 <_svfprintf_r+0xbac>
 8007d8a:	8836      	ldrh	r6, [r6, #0]
 8007d8c:	2700      	movs	r7, #0
 8007d8e:	e7f0      	b.n	8007d72 <_svfprintf_r+0xb8e>
 8007d90:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007d94:	d0f4      	beq.n	8007d80 <_svfprintf_r+0xb9c>
 8007d96:	7836      	ldrb	r6, [r6, #0]
 8007d98:	e7f8      	b.n	8007d8c <_svfprintf_r+0xba8>
 8007d9a:	4b23      	ldr	r3, [pc, #140]	; (8007e28 <_svfprintf_r+0xc44>)
 8007d9c:	f7ff bb59 	b.w	8007452 <_svfprintf_r+0x26e>
 8007da0:	1d33      	adds	r3, r6, #4
 8007da2:	f01a 0f10 	tst.w	sl, #16
 8007da6:	930c      	str	r3, [sp, #48]	; 0x30
 8007da8:	d001      	beq.n	8007dae <_svfprintf_r+0xbca>
 8007daa:	6836      	ldr	r6, [r6, #0]
 8007dac:	e003      	b.n	8007db6 <_svfprintf_r+0xbd2>
 8007dae:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007db2:	d003      	beq.n	8007dbc <_svfprintf_r+0xbd8>
 8007db4:	8836      	ldrh	r6, [r6, #0]
 8007db6:	2700      	movs	r7, #0
 8007db8:	f7ff bb58 	b.w	800746c <_svfprintf_r+0x288>
 8007dbc:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007dc0:	d0f3      	beq.n	8007daa <_svfprintf_r+0xbc6>
 8007dc2:	7836      	ldrb	r6, [r6, #0]
 8007dc4:	e7f7      	b.n	8007db6 <_svfprintf_r+0xbd2>
 8007dc6:	4652      	mov	r2, sl
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e6a8      	b.n	8007b1e <_svfprintf_r+0x93a>
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	f43f ac09 	beq.w	80075e4 <_svfprintf_r+0x400>
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d06d      	beq.n	8007eb2 <_svfprintf_r+0xcce>
 8007dd6:	ab54      	add	r3, sp, #336	; 0x150
 8007dd8:	08f1      	lsrs	r1, r6, #3
 8007dda:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8007dde:	08f8      	lsrs	r0, r7, #3
 8007de0:	f006 0207 	and.w	r2, r6, #7
 8007de4:	4607      	mov	r7, r0
 8007de6:	460e      	mov	r6, r1
 8007de8:	3230      	adds	r2, #48	; 0x30
 8007dea:	ea56 0107 	orrs.w	r1, r6, r7
 8007dee:	f103 3bff 	add.w	fp, r3, #4294967295
 8007df2:	f803 2c01 	strb.w	r2, [r3, #-1]
 8007df6:	d114      	bne.n	8007e22 <_svfprintf_r+0xc3e>
 8007df8:	f01a 0f01 	tst.w	sl, #1
 8007dfc:	d006      	beq.n	8007e0c <_svfprintf_r+0xc28>
 8007dfe:	2a30      	cmp	r2, #48	; 0x30
 8007e00:	d004      	beq.n	8007e0c <_svfprintf_r+0xc28>
 8007e02:	2230      	movs	r2, #48	; 0x30
 8007e04:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8007e08:	f1a3 0b02 	sub.w	fp, r3, #2
 8007e0c:	f04f 0800 	mov.w	r8, #0
 8007e10:	ab54      	add	r3, sp, #336	; 0x150
 8007e12:	9512      	str	r5, [sp, #72]	; 0x48
 8007e14:	eba3 050b 	sub.w	r5, r3, fp
 8007e18:	4647      	mov	r7, r8
 8007e1a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8007e1e:	4646      	mov	r6, r8
 8007e20:	e6c5      	b.n	8007bae <_svfprintf_r+0x9ca>
 8007e22:	465b      	mov	r3, fp
 8007e24:	e7d8      	b.n	8007dd8 <_svfprintf_r+0xbf4>
 8007e26:	bf00      	nop
 8007e28:	0800c7c4 	.word	0x0800c7c4
 8007e2c:	0800c7e8 	.word	0x0800c7e8
 8007e30:	0800c7f8 	.word	0x0800c7f8
 8007e34:	2300      	movs	r3, #0
 8007e36:	9308      	str	r3, [sp, #32]
 8007e38:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8007e3c:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 8007e40:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e42:	220a      	movs	r2, #10
 8007e44:	2300      	movs	r3, #0
 8007e46:	4630      	mov	r0, r6
 8007e48:	4639      	mov	r1, r7
 8007e4a:	f7f8 fe1d 	bl	8000a88 <__aeabi_uldivmod>
 8007e4e:	9b08      	ldr	r3, [sp, #32]
 8007e50:	3230      	adds	r2, #48	; 0x30
 8007e52:	3301      	adds	r3, #1
 8007e54:	9308      	str	r3, [sp, #32]
 8007e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e58:	f108 3bff 	add.w	fp, r8, #4294967295
 8007e5c:	f808 2c01 	strb.w	r2, [r8, #-1]
 8007e60:	b1d3      	cbz	r3, 8007e98 <_svfprintf_r+0xcb4>
 8007e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e64:	9a08      	ldr	r2, [sp, #32]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d115      	bne.n	8007e98 <_svfprintf_r+0xcb4>
 8007e6c:	2aff      	cmp	r2, #255	; 0xff
 8007e6e:	d013      	beq.n	8007e98 <_svfprintf_r+0xcb4>
 8007e70:	2f00      	cmp	r7, #0
 8007e72:	bf08      	it	eq
 8007e74:	2e0a      	cmpeq	r6, #10
 8007e76:	d30f      	bcc.n	8007e98 <_svfprintf_r+0xcb4>
 8007e78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007e7a:	991d      	ldr	r1, [sp, #116]	; 0x74
 8007e7c:	ebab 0b03 	sub.w	fp, fp, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	4658      	mov	r0, fp
 8007e84:	f004 f883 	bl	800bf8e <strncpy>
 8007e88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e8a:	785b      	ldrb	r3, [r3, #1]
 8007e8c:	b11b      	cbz	r3, 8007e96 <_svfprintf_r+0xcb2>
 8007e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e90:	3301      	adds	r3, #1
 8007e92:	930d      	str	r3, [sp, #52]	; 0x34
 8007e94:	2300      	movs	r3, #0
 8007e96:	9308      	str	r3, [sp, #32]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	220a      	movs	r2, #10
 8007ea0:	f7f8 fdf2 	bl	8000a88 <__aeabi_uldivmod>
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	460f      	mov	r7, r1
 8007ea8:	ea56 0307 	orrs.w	r3, r6, r7
 8007eac:	d0ae      	beq.n	8007e0c <_svfprintf_r+0xc28>
 8007eae:	46d8      	mov	r8, fp
 8007eb0:	e7c7      	b.n	8007e42 <_svfprintf_r+0xc5e>
 8007eb2:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 8007eb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007eb8:	f006 030f 	and.w	r3, r6, #15
 8007ebc:	5cd3      	ldrb	r3, [r2, r3]
 8007ebe:	093a      	lsrs	r2, r7, #4
 8007ec0:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8007ec4:	0933      	lsrs	r3, r6, #4
 8007ec6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8007eca:	461e      	mov	r6, r3
 8007ecc:	4617      	mov	r7, r2
 8007ece:	ea56 0307 	orrs.w	r3, r6, r7
 8007ed2:	d1f0      	bne.n	8007eb6 <_svfprintf_r+0xcd2>
 8007ed4:	e79a      	b.n	8007e0c <_svfprintf_r+0xc28>
 8007ed6:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d196      	bne.n	8007e0c <_svfprintf_r+0xc28>
 8007ede:	07d2      	lsls	r2, r2, #31
 8007ee0:	bf44      	itt	mi
 8007ee2:	2330      	movmi	r3, #48	; 0x30
 8007ee4:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8007ee8:	e790      	b.n	8007e0c <_svfprintf_r+0xc28>
 8007eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 8377 	beq.w	80085e0 <_svfprintf_r+0x13fc>
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8007ef8:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8007efc:	960c      	str	r6, [sp, #48]	; 0x30
 8007efe:	f7ff bb4e 	b.w	800759e <_svfprintf_r+0x3ba>
 8007f02:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8007f06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f08:	e4f6      	b.n	80078f8 <_svfprintf_r+0x714>
 8007f0a:	2010      	movs	r0, #16
 8007f0c:	2a07      	cmp	r2, #7
 8007f0e:	4403      	add	r3, r0
 8007f10:	6060      	str	r0, [r4, #4]
 8007f12:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007f16:	dd08      	ble.n	8007f2a <_svfprintf_r+0xd46>
 8007f18:	aa28      	add	r2, sp, #160	; 0xa0
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	9807      	ldr	r0, [sp, #28]
 8007f1e:	f004 f84b 	bl	800bfb8 <__ssprint_r>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	f040 833a 	bne.w	800859c <_svfprintf_r+0x13b8>
 8007f28:	a92b      	add	r1, sp, #172	; 0xac
 8007f2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	3b10      	subs	r3, #16
 8007f30:	9319      	str	r3, [sp, #100]	; 0x64
 8007f32:	e658      	b.n	8007be6 <_svfprintf_r+0xa02>
 8007f34:	460c      	mov	r4, r1
 8007f36:	e672      	b.n	8007c1e <_svfprintf_r+0xa3a>
 8007f38:	aa28      	add	r2, sp, #160	; 0xa0
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	9807      	ldr	r0, [sp, #28]
 8007f3e:	f004 f83b 	bl	800bfb8 <__ssprint_r>
 8007f42:	2800      	cmp	r0, #0
 8007f44:	f040 832a 	bne.w	800859c <_svfprintf_r+0x13b8>
 8007f48:	ac2b      	add	r4, sp, #172	; 0xac
 8007f4a:	e67a      	b.n	8007c42 <_svfprintf_r+0xa5e>
 8007f4c:	aa28      	add	r2, sp, #160	; 0xa0
 8007f4e:	4649      	mov	r1, r9
 8007f50:	9807      	ldr	r0, [sp, #28]
 8007f52:	f004 f831 	bl	800bfb8 <__ssprint_r>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f040 8320 	bne.w	800859c <_svfprintf_r+0x13b8>
 8007f5c:	ac2b      	add	r4, sp, #172	; 0xac
 8007f5e:	e680      	b.n	8007c62 <_svfprintf_r+0xa7e>
 8007f60:	2010      	movs	r0, #16
 8007f62:	2a07      	cmp	r2, #7
 8007f64:	4403      	add	r3, r0
 8007f66:	6060      	str	r0, [r4, #4]
 8007f68:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007f6c:	dd08      	ble.n	8007f80 <_svfprintf_r+0xd9c>
 8007f6e:	aa28      	add	r2, sp, #160	; 0xa0
 8007f70:	4649      	mov	r1, r9
 8007f72:	9807      	ldr	r0, [sp, #28]
 8007f74:	f004 f820 	bl	800bfb8 <__ssprint_r>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	f040 830f 	bne.w	800859c <_svfprintf_r+0x13b8>
 8007f7e:	a92b      	add	r1, sp, #172	; 0xac
 8007f80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f82:	460c      	mov	r4, r1
 8007f84:	3b10      	subs	r3, #16
 8007f86:	9319      	str	r3, [sp, #100]	; 0x64
 8007f88:	e674      	b.n	8007c74 <_svfprintf_r+0xa90>
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	e68e      	b.n	8007cac <_svfprintf_r+0xac8>
 8007f8e:	2010      	movs	r0, #16
 8007f90:	2a07      	cmp	r2, #7
 8007f92:	4403      	add	r3, r0
 8007f94:	6060      	str	r0, [r4, #4]
 8007f96:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007f9a:	dd08      	ble.n	8007fae <_svfprintf_r+0xdca>
 8007f9c:	aa28      	add	r2, sp, #160	; 0xa0
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	9807      	ldr	r0, [sp, #28]
 8007fa2:	f004 f809 	bl	800bfb8 <__ssprint_r>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	f040 82f8 	bne.w	800859c <_svfprintf_r+0x13b8>
 8007fac:	a92b      	add	r1, sp, #172	; 0xac
 8007fae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	3b10      	subs	r3, #16
 8007fb4:	9312      	str	r3, [sp, #72]	; 0x48
 8007fb6:	e67e      	b.n	8007cb6 <_svfprintf_r+0xad2>
 8007fb8:	460c      	mov	r4, r1
 8007fba:	e698      	b.n	8007cee <_svfprintf_r+0xb0a>
 8007fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fbe:	2b65      	cmp	r3, #101	; 0x65
 8007fc0:	f340 8234 	ble.w	800842c <_svfprintf_r+0x1248>
 8007fc4:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007fc8:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8007fcc:	f7f8 fcec 	bl	80009a8 <__aeabi_dcmpeq>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d069      	beq.n	80080a8 <_svfprintf_r+0xec4>
 8007fd4:	4b6e      	ldr	r3, [pc, #440]	; (8008190 <_svfprintf_r+0xfac>)
 8007fd6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	2301      	movs	r3, #1
 8007fdc:	441d      	add	r5, r3
 8007fde:	6063      	str	r3, [r4, #4]
 8007fe0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007fe2:	952a      	str	r5, [sp, #168]	; 0xa8
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	2b07      	cmp	r3, #7
 8007fe8:	9329      	str	r3, [sp, #164]	; 0xa4
 8007fea:	dc37      	bgt.n	800805c <_svfprintf_r+0xe78>
 8007fec:	3408      	adds	r4, #8
 8007fee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ff0:	9a08      	ldr	r2, [sp, #32]
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	db03      	blt.n	8007ffe <_svfprintf_r+0xe1a>
 8007ff6:	f01a 0f01 	tst.w	sl, #1
 8007ffa:	f43f ae89 	beq.w	8007d10 <_svfprintf_r+0xb2c>
 8007ffe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008002:	6023      	str	r3, [r4, #0]
 8008004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008006:	6063      	str	r3, [r4, #4]
 8008008:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800800a:	4413      	add	r3, r2
 800800c:	932a      	str	r3, [sp, #168]	; 0xa8
 800800e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008010:	3301      	adds	r3, #1
 8008012:	2b07      	cmp	r3, #7
 8008014:	9329      	str	r3, [sp, #164]	; 0xa4
 8008016:	dc2b      	bgt.n	8008070 <_svfprintf_r+0xe8c>
 8008018:	3408      	adds	r4, #8
 800801a:	9b08      	ldr	r3, [sp, #32]
 800801c:	1e5d      	subs	r5, r3, #1
 800801e:	2d00      	cmp	r5, #0
 8008020:	f77f ae76 	ble.w	8007d10 <_svfprintf_r+0xb2c>
 8008024:	2710      	movs	r7, #16
 8008026:	4e5b      	ldr	r6, [pc, #364]	; (8008194 <_svfprintf_r+0xfb0>)
 8008028:	2d10      	cmp	r5, #16
 800802a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800802e:	f104 0108 	add.w	r1, r4, #8
 8008032:	f103 0301 	add.w	r3, r3, #1
 8008036:	6026      	str	r6, [r4, #0]
 8008038:	dc24      	bgt.n	8008084 <_svfprintf_r+0xea0>
 800803a:	6065      	str	r5, [r4, #4]
 800803c:	2b07      	cmp	r3, #7
 800803e:	4415      	add	r5, r2
 8008040:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8008044:	f340 8289 	ble.w	800855a <_svfprintf_r+0x1376>
 8008048:	aa28      	add	r2, sp, #160	; 0xa0
 800804a:	4649      	mov	r1, r9
 800804c:	9807      	ldr	r0, [sp, #28]
 800804e:	f003 ffb3 	bl	800bfb8 <__ssprint_r>
 8008052:	2800      	cmp	r0, #0
 8008054:	f040 82a2 	bne.w	800859c <_svfprintf_r+0x13b8>
 8008058:	ac2b      	add	r4, sp, #172	; 0xac
 800805a:	e659      	b.n	8007d10 <_svfprintf_r+0xb2c>
 800805c:	aa28      	add	r2, sp, #160	; 0xa0
 800805e:	4649      	mov	r1, r9
 8008060:	9807      	ldr	r0, [sp, #28]
 8008062:	f003 ffa9 	bl	800bfb8 <__ssprint_r>
 8008066:	2800      	cmp	r0, #0
 8008068:	f040 8298 	bne.w	800859c <_svfprintf_r+0x13b8>
 800806c:	ac2b      	add	r4, sp, #172	; 0xac
 800806e:	e7be      	b.n	8007fee <_svfprintf_r+0xe0a>
 8008070:	aa28      	add	r2, sp, #160	; 0xa0
 8008072:	4649      	mov	r1, r9
 8008074:	9807      	ldr	r0, [sp, #28]
 8008076:	f003 ff9f 	bl	800bfb8 <__ssprint_r>
 800807a:	2800      	cmp	r0, #0
 800807c:	f040 828e 	bne.w	800859c <_svfprintf_r+0x13b8>
 8008080:	ac2b      	add	r4, sp, #172	; 0xac
 8008082:	e7ca      	b.n	800801a <_svfprintf_r+0xe36>
 8008084:	3210      	adds	r2, #16
 8008086:	2b07      	cmp	r3, #7
 8008088:	6067      	str	r7, [r4, #4]
 800808a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 800808e:	dd08      	ble.n	80080a2 <_svfprintf_r+0xebe>
 8008090:	aa28      	add	r2, sp, #160	; 0xa0
 8008092:	4649      	mov	r1, r9
 8008094:	9807      	ldr	r0, [sp, #28]
 8008096:	f003 ff8f 	bl	800bfb8 <__ssprint_r>
 800809a:	2800      	cmp	r0, #0
 800809c:	f040 827e 	bne.w	800859c <_svfprintf_r+0x13b8>
 80080a0:	a92b      	add	r1, sp, #172	; 0xac
 80080a2:	3d10      	subs	r5, #16
 80080a4:	460c      	mov	r4, r1
 80080a6:	e7bf      	b.n	8008028 <_svfprintf_r+0xe44>
 80080a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	dc74      	bgt.n	8008198 <_svfprintf_r+0xfb4>
 80080ae:	4b38      	ldr	r3, [pc, #224]	; (8008190 <_svfprintf_r+0xfac>)
 80080b0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80080b2:	6023      	str	r3, [r4, #0]
 80080b4:	2301      	movs	r3, #1
 80080b6:	441d      	add	r5, r3
 80080b8:	6063      	str	r3, [r4, #4]
 80080ba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80080bc:	952a      	str	r5, [sp, #168]	; 0xa8
 80080be:	3301      	adds	r3, #1
 80080c0:	2b07      	cmp	r3, #7
 80080c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80080c4:	dc3e      	bgt.n	8008144 <_svfprintf_r+0xf60>
 80080c6:	3408      	adds	r4, #8
 80080c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080ca:	b92b      	cbnz	r3, 80080d8 <_svfprintf_r+0xef4>
 80080cc:	9b08      	ldr	r3, [sp, #32]
 80080ce:	b91b      	cbnz	r3, 80080d8 <_svfprintf_r+0xef4>
 80080d0:	f01a 0f01 	tst.w	sl, #1
 80080d4:	f43f ae1c 	beq.w	8007d10 <_svfprintf_r+0xb2c>
 80080d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80080da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080e0:	6063      	str	r3, [r4, #4]
 80080e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80080e4:	4413      	add	r3, r2
 80080e6:	932a      	str	r3, [sp, #168]	; 0xa8
 80080e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80080ea:	3301      	adds	r3, #1
 80080ec:	2b07      	cmp	r3, #7
 80080ee:	9329      	str	r3, [sp, #164]	; 0xa4
 80080f0:	dc32      	bgt.n	8008158 <_svfprintf_r+0xf74>
 80080f2:	3408      	adds	r4, #8
 80080f4:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80080f6:	2d00      	cmp	r5, #0
 80080f8:	da1b      	bge.n	8008132 <_svfprintf_r+0xf4e>
 80080fa:	4623      	mov	r3, r4
 80080fc:	2710      	movs	r7, #16
 80080fe:	4e25      	ldr	r6, [pc, #148]	; (8008194 <_svfprintf_r+0xfb0>)
 8008100:	426d      	negs	r5, r5
 8008102:	2d10      	cmp	r5, #16
 8008104:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 8008108:	f104 0408 	add.w	r4, r4, #8
 800810c:	f102 0201 	add.w	r2, r2, #1
 8008110:	601e      	str	r6, [r3, #0]
 8008112:	dc2b      	bgt.n	800816c <_svfprintf_r+0xf88>
 8008114:	605d      	str	r5, [r3, #4]
 8008116:	2a07      	cmp	r2, #7
 8008118:	440d      	add	r5, r1
 800811a:	e9cd 2529 	strd	r2, r5, [sp, #164]	; 0xa4
 800811e:	dd08      	ble.n	8008132 <_svfprintf_r+0xf4e>
 8008120:	aa28      	add	r2, sp, #160	; 0xa0
 8008122:	4649      	mov	r1, r9
 8008124:	9807      	ldr	r0, [sp, #28]
 8008126:	f003 ff47 	bl	800bfb8 <__ssprint_r>
 800812a:	2800      	cmp	r0, #0
 800812c:	f040 8236 	bne.w	800859c <_svfprintf_r+0x13b8>
 8008130:	ac2b      	add	r4, sp, #172	; 0xac
 8008132:	9b08      	ldr	r3, [sp, #32]
 8008134:	9a08      	ldr	r2, [sp, #32]
 8008136:	6063      	str	r3, [r4, #4]
 8008138:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800813a:	f8c4 b000 	str.w	fp, [r4]
 800813e:	4413      	add	r3, r2
 8008140:	932a      	str	r3, [sp, #168]	; 0xa8
 8008142:	e5de      	b.n	8007d02 <_svfprintf_r+0xb1e>
 8008144:	aa28      	add	r2, sp, #160	; 0xa0
 8008146:	4649      	mov	r1, r9
 8008148:	9807      	ldr	r0, [sp, #28]
 800814a:	f003 ff35 	bl	800bfb8 <__ssprint_r>
 800814e:	2800      	cmp	r0, #0
 8008150:	f040 8224 	bne.w	800859c <_svfprintf_r+0x13b8>
 8008154:	ac2b      	add	r4, sp, #172	; 0xac
 8008156:	e7b7      	b.n	80080c8 <_svfprintf_r+0xee4>
 8008158:	aa28      	add	r2, sp, #160	; 0xa0
 800815a:	4649      	mov	r1, r9
 800815c:	9807      	ldr	r0, [sp, #28]
 800815e:	f003 ff2b 	bl	800bfb8 <__ssprint_r>
 8008162:	2800      	cmp	r0, #0
 8008164:	f040 821a 	bne.w	800859c <_svfprintf_r+0x13b8>
 8008168:	ac2b      	add	r4, sp, #172	; 0xac
 800816a:	e7c3      	b.n	80080f4 <_svfprintf_r+0xf10>
 800816c:	3110      	adds	r1, #16
 800816e:	2a07      	cmp	r2, #7
 8008170:	605f      	str	r7, [r3, #4]
 8008172:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 8008176:	dd08      	ble.n	800818a <_svfprintf_r+0xfa6>
 8008178:	aa28      	add	r2, sp, #160	; 0xa0
 800817a:	4649      	mov	r1, r9
 800817c:	9807      	ldr	r0, [sp, #28]
 800817e:	f003 ff1b 	bl	800bfb8 <__ssprint_r>
 8008182:	2800      	cmp	r0, #0
 8008184:	f040 820a 	bne.w	800859c <_svfprintf_r+0x13b8>
 8008188:	ac2b      	add	r4, sp, #172	; 0xac
 800818a:	3d10      	subs	r5, #16
 800818c:	4623      	mov	r3, r4
 800818e:	e7b8      	b.n	8008102 <_svfprintf_r+0xf1e>
 8008190:	0800c7e6 	.word	0x0800c7e6
 8008194:	0800c7f8 	.word	0x0800c7f8
 8008198:	9b08      	ldr	r3, [sp, #32]
 800819a:	42b3      	cmp	r3, r6
 800819c:	bfa8      	it	ge
 800819e:	4633      	movge	r3, r6
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	461d      	mov	r5, r3
 80081a4:	dd0b      	ble.n	80081be <_svfprintf_r+0xfda>
 80081a6:	e9c4 b300 	strd	fp, r3, [r4]
 80081aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081ac:	442b      	add	r3, r5
 80081ae:	932a      	str	r3, [sp, #168]	; 0xa8
 80081b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80081b2:	3301      	adds	r3, #1
 80081b4:	2b07      	cmp	r3, #7
 80081b6:	9329      	str	r3, [sp, #164]	; 0xa4
 80081b8:	f300 8086 	bgt.w	80082c8 <_svfprintf_r+0x10e4>
 80081bc:	3408      	adds	r4, #8
 80081be:	2d00      	cmp	r5, #0
 80081c0:	bfb4      	ite	lt
 80081c2:	4635      	movlt	r5, r6
 80081c4:	1b75      	subge	r5, r6, r5
 80081c6:	2d00      	cmp	r5, #0
 80081c8:	dd19      	ble.n	80081fe <_svfprintf_r+0x101a>
 80081ca:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80081ce:	4896      	ldr	r0, [pc, #600]	; (8008428 <_svfprintf_r+0x1244>)
 80081d0:	2d10      	cmp	r5, #16
 80081d2:	f103 0301 	add.w	r3, r3, #1
 80081d6:	f104 0108 	add.w	r1, r4, #8
 80081da:	6020      	str	r0, [r4, #0]
 80081dc:	dc7e      	bgt.n	80082dc <_svfprintf_r+0x10f8>
 80081de:	6065      	str	r5, [r4, #4]
 80081e0:	2b07      	cmp	r3, #7
 80081e2:	4415      	add	r5, r2
 80081e4:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80081e8:	f340 808b 	ble.w	8008302 <_svfprintf_r+0x111e>
 80081ec:	aa28      	add	r2, sp, #160	; 0xa0
 80081ee:	4649      	mov	r1, r9
 80081f0:	9807      	ldr	r0, [sp, #28]
 80081f2:	f003 fee1 	bl	800bfb8 <__ssprint_r>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	f040 81d0 	bne.w	800859c <_svfprintf_r+0x13b8>
 80081fc:	ac2b      	add	r4, sp, #172	; 0xac
 80081fe:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8008202:	445e      	add	r6, fp
 8008204:	d009      	beq.n	800821a <_svfprintf_r+0x1036>
 8008206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008208:	2b00      	cmp	r3, #0
 800820a:	d17c      	bne.n	8008306 <_svfprintf_r+0x1122>
 800820c:	2f00      	cmp	r7, #0
 800820e:	d17c      	bne.n	800830a <_svfprintf_r+0x1126>
 8008210:	9b08      	ldr	r3, [sp, #32]
 8008212:	445b      	add	r3, fp
 8008214:	429e      	cmp	r6, r3
 8008216:	bf28      	it	cs
 8008218:	461e      	movcs	r6, r3
 800821a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800821c:	9a08      	ldr	r2, [sp, #32]
 800821e:	4293      	cmp	r3, r2
 8008220:	db02      	blt.n	8008228 <_svfprintf_r+0x1044>
 8008222:	f01a 0f01 	tst.w	sl, #1
 8008226:	d00e      	beq.n	8008246 <_svfprintf_r+0x1062>
 8008228:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800822a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008230:	6063      	str	r3, [r4, #4]
 8008232:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008234:	4413      	add	r3, r2
 8008236:	932a      	str	r3, [sp, #168]	; 0xa8
 8008238:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800823a:	3301      	adds	r3, #1
 800823c:	2b07      	cmp	r3, #7
 800823e:	9329      	str	r3, [sp, #164]	; 0xa4
 8008240:	f300 80dd 	bgt.w	80083fe <_svfprintf_r+0x121a>
 8008244:	3408      	adds	r4, #8
 8008246:	9b08      	ldr	r3, [sp, #32]
 8008248:	9a08      	ldr	r2, [sp, #32]
 800824a:	eb0b 0503 	add.w	r5, fp, r3
 800824e:	1bab      	subs	r3, r5, r6
 8008250:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8008252:	1b55      	subs	r5, r2, r5
 8008254:	429d      	cmp	r5, r3
 8008256:	bfa8      	it	ge
 8008258:	461d      	movge	r5, r3
 800825a:	2d00      	cmp	r5, #0
 800825c:	dd0b      	ble.n	8008276 <_svfprintf_r+0x1092>
 800825e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008260:	e9c4 6500 	strd	r6, r5, [r4]
 8008264:	442b      	add	r3, r5
 8008266:	932a      	str	r3, [sp, #168]	; 0xa8
 8008268:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800826a:	3301      	adds	r3, #1
 800826c:	2b07      	cmp	r3, #7
 800826e:	9329      	str	r3, [sp, #164]	; 0xa4
 8008270:	f300 80cf 	bgt.w	8008412 <_svfprintf_r+0x122e>
 8008274:	3408      	adds	r4, #8
 8008276:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008278:	9a08      	ldr	r2, [sp, #32]
 800827a:	2d00      	cmp	r5, #0
 800827c:	eba2 0303 	sub.w	r3, r2, r3
 8008280:	bfb4      	ite	lt
 8008282:	461d      	movlt	r5, r3
 8008284:	1b5d      	subge	r5, r3, r5
 8008286:	2d00      	cmp	r5, #0
 8008288:	f77f ad42 	ble.w	8007d10 <_svfprintf_r+0xb2c>
 800828c:	2710      	movs	r7, #16
 800828e:	4e66      	ldr	r6, [pc, #408]	; (8008428 <_svfprintf_r+0x1244>)
 8008290:	2d10      	cmp	r5, #16
 8008292:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8008296:	f104 0108 	add.w	r1, r4, #8
 800829a:	f103 0301 	add.w	r3, r3, #1
 800829e:	6026      	str	r6, [r4, #0]
 80082a0:	f77f aecb 	ble.w	800803a <_svfprintf_r+0xe56>
 80082a4:	3210      	adds	r2, #16
 80082a6:	2b07      	cmp	r3, #7
 80082a8:	6067      	str	r7, [r4, #4]
 80082aa:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80082ae:	dd08      	ble.n	80082c2 <_svfprintf_r+0x10de>
 80082b0:	aa28      	add	r2, sp, #160	; 0xa0
 80082b2:	4649      	mov	r1, r9
 80082b4:	9807      	ldr	r0, [sp, #28]
 80082b6:	f003 fe7f 	bl	800bfb8 <__ssprint_r>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	f040 816e 	bne.w	800859c <_svfprintf_r+0x13b8>
 80082c0:	a92b      	add	r1, sp, #172	; 0xac
 80082c2:	3d10      	subs	r5, #16
 80082c4:	460c      	mov	r4, r1
 80082c6:	e7e3      	b.n	8008290 <_svfprintf_r+0x10ac>
 80082c8:	aa28      	add	r2, sp, #160	; 0xa0
 80082ca:	4649      	mov	r1, r9
 80082cc:	9807      	ldr	r0, [sp, #28]
 80082ce:	f003 fe73 	bl	800bfb8 <__ssprint_r>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	f040 8162 	bne.w	800859c <_svfprintf_r+0x13b8>
 80082d8:	ac2b      	add	r4, sp, #172	; 0xac
 80082da:	e770      	b.n	80081be <_svfprintf_r+0xfda>
 80082dc:	2010      	movs	r0, #16
 80082de:	2b07      	cmp	r3, #7
 80082e0:	4402      	add	r2, r0
 80082e2:	6060      	str	r0, [r4, #4]
 80082e4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80082e8:	dd08      	ble.n	80082fc <_svfprintf_r+0x1118>
 80082ea:	aa28      	add	r2, sp, #160	; 0xa0
 80082ec:	4649      	mov	r1, r9
 80082ee:	9807      	ldr	r0, [sp, #28]
 80082f0:	f003 fe62 	bl	800bfb8 <__ssprint_r>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	f040 8151 	bne.w	800859c <_svfprintf_r+0x13b8>
 80082fa:	a92b      	add	r1, sp, #172	; 0xac
 80082fc:	3d10      	subs	r5, #16
 80082fe:	460c      	mov	r4, r1
 8008300:	e763      	b.n	80081ca <_svfprintf_r+0xfe6>
 8008302:	460c      	mov	r4, r1
 8008304:	e77b      	b.n	80081fe <_svfprintf_r+0x101a>
 8008306:	2f00      	cmp	r7, #0
 8008308:	d049      	beq.n	800839e <_svfprintf_r+0x11ba>
 800830a:	3f01      	subs	r7, #1
 800830c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800830e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008310:	6023      	str	r3, [r4, #0]
 8008312:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008314:	6063      	str	r3, [r4, #4]
 8008316:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008318:	4413      	add	r3, r2
 800831a:	932a      	str	r3, [sp, #168]	; 0xa8
 800831c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800831e:	3301      	adds	r3, #1
 8008320:	2b07      	cmp	r3, #7
 8008322:	9329      	str	r3, [sp, #164]	; 0xa4
 8008324:	dc42      	bgt.n	80083ac <_svfprintf_r+0x11c8>
 8008326:	3408      	adds	r4, #8
 8008328:	9b08      	ldr	r3, [sp, #32]
 800832a:	445b      	add	r3, fp
 800832c:	1b9a      	subs	r2, r3, r6
 800832e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	4293      	cmp	r3, r2
 8008334:	bfa8      	it	ge
 8008336:	4613      	movge	r3, r2
 8008338:	2b00      	cmp	r3, #0
 800833a:	461d      	mov	r5, r3
 800833c:	dd0a      	ble.n	8008354 <_svfprintf_r+0x1170>
 800833e:	e9c4 6300 	strd	r6, r3, [r4]
 8008342:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008344:	442b      	add	r3, r5
 8008346:	932a      	str	r3, [sp, #168]	; 0xa8
 8008348:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800834a:	3301      	adds	r3, #1
 800834c:	2b07      	cmp	r3, #7
 800834e:	9329      	str	r3, [sp, #164]	; 0xa4
 8008350:	dc36      	bgt.n	80083c0 <_svfprintf_r+0x11dc>
 8008352:	3408      	adds	r4, #8
 8008354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008356:	2d00      	cmp	r5, #0
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	bfb4      	ite	lt
 800835c:	461d      	movlt	r5, r3
 800835e:	1b5d      	subge	r5, r3, r5
 8008360:	2d00      	cmp	r5, #0
 8008362:	dd18      	ble.n	8008396 <_svfprintf_r+0x11b2>
 8008364:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8008368:	482f      	ldr	r0, [pc, #188]	; (8008428 <_svfprintf_r+0x1244>)
 800836a:	2d10      	cmp	r5, #16
 800836c:	f102 0201 	add.w	r2, r2, #1
 8008370:	f104 0108 	add.w	r1, r4, #8
 8008374:	6020      	str	r0, [r4, #0]
 8008376:	dc2d      	bgt.n	80083d4 <_svfprintf_r+0x11f0>
 8008378:	442b      	add	r3, r5
 800837a:	2a07      	cmp	r2, #7
 800837c:	6065      	str	r5, [r4, #4]
 800837e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008382:	dd3a      	ble.n	80083fa <_svfprintf_r+0x1216>
 8008384:	aa28      	add	r2, sp, #160	; 0xa0
 8008386:	4649      	mov	r1, r9
 8008388:	9807      	ldr	r0, [sp, #28]
 800838a:	f003 fe15 	bl	800bfb8 <__ssprint_r>
 800838e:	2800      	cmp	r0, #0
 8008390:	f040 8104 	bne.w	800859c <_svfprintf_r+0x13b8>
 8008394:	ac2b      	add	r4, sp, #172	; 0xac
 8008396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	441e      	add	r6, r3
 800839c:	e733      	b.n	8008206 <_svfprintf_r+0x1022>
 800839e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083a0:	3b01      	subs	r3, #1
 80083a2:	930d      	str	r3, [sp, #52]	; 0x34
 80083a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083a6:	3b01      	subs	r3, #1
 80083a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80083aa:	e7af      	b.n	800830c <_svfprintf_r+0x1128>
 80083ac:	aa28      	add	r2, sp, #160	; 0xa0
 80083ae:	4649      	mov	r1, r9
 80083b0:	9807      	ldr	r0, [sp, #28]
 80083b2:	f003 fe01 	bl	800bfb8 <__ssprint_r>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	f040 80f0 	bne.w	800859c <_svfprintf_r+0x13b8>
 80083bc:	ac2b      	add	r4, sp, #172	; 0xac
 80083be:	e7b3      	b.n	8008328 <_svfprintf_r+0x1144>
 80083c0:	aa28      	add	r2, sp, #160	; 0xa0
 80083c2:	4649      	mov	r1, r9
 80083c4:	9807      	ldr	r0, [sp, #28]
 80083c6:	f003 fdf7 	bl	800bfb8 <__ssprint_r>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	f040 80e6 	bne.w	800859c <_svfprintf_r+0x13b8>
 80083d0:	ac2b      	add	r4, sp, #172	; 0xac
 80083d2:	e7bf      	b.n	8008354 <_svfprintf_r+0x1170>
 80083d4:	2010      	movs	r0, #16
 80083d6:	2a07      	cmp	r2, #7
 80083d8:	4403      	add	r3, r0
 80083da:	6060      	str	r0, [r4, #4]
 80083dc:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80083e0:	dd08      	ble.n	80083f4 <_svfprintf_r+0x1210>
 80083e2:	aa28      	add	r2, sp, #160	; 0xa0
 80083e4:	4649      	mov	r1, r9
 80083e6:	9807      	ldr	r0, [sp, #28]
 80083e8:	f003 fde6 	bl	800bfb8 <__ssprint_r>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	f040 80d5 	bne.w	800859c <_svfprintf_r+0x13b8>
 80083f2:	a92b      	add	r1, sp, #172	; 0xac
 80083f4:	3d10      	subs	r5, #16
 80083f6:	460c      	mov	r4, r1
 80083f8:	e7b4      	b.n	8008364 <_svfprintf_r+0x1180>
 80083fa:	460c      	mov	r4, r1
 80083fc:	e7cb      	b.n	8008396 <_svfprintf_r+0x11b2>
 80083fe:	aa28      	add	r2, sp, #160	; 0xa0
 8008400:	4649      	mov	r1, r9
 8008402:	9807      	ldr	r0, [sp, #28]
 8008404:	f003 fdd8 	bl	800bfb8 <__ssprint_r>
 8008408:	2800      	cmp	r0, #0
 800840a:	f040 80c7 	bne.w	800859c <_svfprintf_r+0x13b8>
 800840e:	ac2b      	add	r4, sp, #172	; 0xac
 8008410:	e719      	b.n	8008246 <_svfprintf_r+0x1062>
 8008412:	aa28      	add	r2, sp, #160	; 0xa0
 8008414:	4649      	mov	r1, r9
 8008416:	9807      	ldr	r0, [sp, #28]
 8008418:	f003 fdce 	bl	800bfb8 <__ssprint_r>
 800841c:	2800      	cmp	r0, #0
 800841e:	f040 80bd 	bne.w	800859c <_svfprintf_r+0x13b8>
 8008422:	ac2b      	add	r4, sp, #172	; 0xac
 8008424:	e727      	b.n	8008276 <_svfprintf_r+0x1092>
 8008426:	bf00      	nop
 8008428:	0800c7f8 	.word	0x0800c7f8
 800842c:	9a08      	ldr	r2, [sp, #32]
 800842e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8008430:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008432:	2a01      	cmp	r2, #1
 8008434:	f105 0501 	add.w	r5, r5, #1
 8008438:	f103 0301 	add.w	r3, r3, #1
 800843c:	f104 0608 	add.w	r6, r4, #8
 8008440:	dc02      	bgt.n	8008448 <_svfprintf_r+0x1264>
 8008442:	f01a 0f01 	tst.w	sl, #1
 8008446:	d07d      	beq.n	8008544 <_svfprintf_r+0x1360>
 8008448:	2201      	movs	r2, #1
 800844a:	2b07      	cmp	r3, #7
 800844c:	f8c4 b000 	str.w	fp, [r4]
 8008450:	6062      	str	r2, [r4, #4]
 8008452:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8008456:	dd08      	ble.n	800846a <_svfprintf_r+0x1286>
 8008458:	aa28      	add	r2, sp, #160	; 0xa0
 800845a:	4649      	mov	r1, r9
 800845c:	9807      	ldr	r0, [sp, #28]
 800845e:	f003 fdab 	bl	800bfb8 <__ssprint_r>
 8008462:	2800      	cmp	r0, #0
 8008464:	f040 809a 	bne.w	800859c <_svfprintf_r+0x13b8>
 8008468:	ae2b      	add	r6, sp, #172	; 0xac
 800846a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800846c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800846e:	6033      	str	r3, [r6, #0]
 8008470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008472:	6073      	str	r3, [r6, #4]
 8008474:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008476:	4413      	add	r3, r2
 8008478:	932a      	str	r3, [sp, #168]	; 0xa8
 800847a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800847c:	3301      	adds	r3, #1
 800847e:	2b07      	cmp	r3, #7
 8008480:	9329      	str	r3, [sp, #164]	; 0xa4
 8008482:	dc31      	bgt.n	80084e8 <_svfprintf_r+0x1304>
 8008484:	3608      	adds	r6, #8
 8008486:	9b08      	ldr	r3, [sp, #32]
 8008488:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 800848c:	1e5c      	subs	r4, r3, #1
 800848e:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008492:	f7f8 fa89 	bl	80009a8 <__aeabi_dcmpeq>
 8008496:	2800      	cmp	r0, #0
 8008498:	d12f      	bne.n	80084fa <_svfprintf_r+0x1316>
 800849a:	f10b 0301 	add.w	r3, fp, #1
 800849e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80084a0:	e9c6 3400 	strd	r3, r4, [r6]
 80084a4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80084a6:	9908      	ldr	r1, [sp, #32]
 80084a8:	3201      	adds	r2, #1
 80084aa:	3b01      	subs	r3, #1
 80084ac:	440b      	add	r3, r1
 80084ae:	2a07      	cmp	r2, #7
 80084b0:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80084b4:	dd4f      	ble.n	8008556 <_svfprintf_r+0x1372>
 80084b6:	aa28      	add	r2, sp, #160	; 0xa0
 80084b8:	4649      	mov	r1, r9
 80084ba:	9807      	ldr	r0, [sp, #28]
 80084bc:	f003 fd7c 	bl	800bfb8 <__ssprint_r>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d16b      	bne.n	800859c <_svfprintf_r+0x13b8>
 80084c4:	ae2b      	add	r6, sp, #172	; 0xac
 80084c6:	ab24      	add	r3, sp, #144	; 0x90
 80084c8:	6033      	str	r3, [r6, #0]
 80084ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80084ce:	6073      	str	r3, [r6, #4]
 80084d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80084d2:	4413      	add	r3, r2
 80084d4:	932a      	str	r3, [sp, #168]	; 0xa8
 80084d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80084d8:	3301      	adds	r3, #1
 80084da:	2b07      	cmp	r3, #7
 80084dc:	9329      	str	r3, [sp, #164]	; 0xa4
 80084de:	f73f adb3 	bgt.w	8008048 <_svfprintf_r+0xe64>
 80084e2:	f106 0408 	add.w	r4, r6, #8
 80084e6:	e413      	b.n	8007d10 <_svfprintf_r+0xb2c>
 80084e8:	aa28      	add	r2, sp, #160	; 0xa0
 80084ea:	4649      	mov	r1, r9
 80084ec:	9807      	ldr	r0, [sp, #28]
 80084ee:	f003 fd63 	bl	800bfb8 <__ssprint_r>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d152      	bne.n	800859c <_svfprintf_r+0x13b8>
 80084f6:	ae2b      	add	r6, sp, #172	; 0xac
 80084f8:	e7c5      	b.n	8008486 <_svfprintf_r+0x12a2>
 80084fa:	2c00      	cmp	r4, #0
 80084fc:	dde3      	ble.n	80084c6 <_svfprintf_r+0x12e2>
 80084fe:	2710      	movs	r7, #16
 8008500:	4d3d      	ldr	r5, [pc, #244]	; (80085f8 <_svfprintf_r+0x1414>)
 8008502:	2c10      	cmp	r4, #16
 8008504:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8008508:	f106 0108 	add.w	r1, r6, #8
 800850c:	f103 0301 	add.w	r3, r3, #1
 8008510:	6035      	str	r5, [r6, #0]
 8008512:	dc07      	bgt.n	8008524 <_svfprintf_r+0x1340>
 8008514:	6074      	str	r4, [r6, #4]
 8008516:	2b07      	cmp	r3, #7
 8008518:	4414      	add	r4, r2
 800851a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 800851e:	dcca      	bgt.n	80084b6 <_svfprintf_r+0x12d2>
 8008520:	460e      	mov	r6, r1
 8008522:	e7d0      	b.n	80084c6 <_svfprintf_r+0x12e2>
 8008524:	3210      	adds	r2, #16
 8008526:	2b07      	cmp	r3, #7
 8008528:	6077      	str	r7, [r6, #4]
 800852a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 800852e:	dd06      	ble.n	800853e <_svfprintf_r+0x135a>
 8008530:	aa28      	add	r2, sp, #160	; 0xa0
 8008532:	4649      	mov	r1, r9
 8008534:	9807      	ldr	r0, [sp, #28]
 8008536:	f003 fd3f 	bl	800bfb8 <__ssprint_r>
 800853a:	bb78      	cbnz	r0, 800859c <_svfprintf_r+0x13b8>
 800853c:	a92b      	add	r1, sp, #172	; 0xac
 800853e:	3c10      	subs	r4, #16
 8008540:	460e      	mov	r6, r1
 8008542:	e7de      	b.n	8008502 <_svfprintf_r+0x131e>
 8008544:	2201      	movs	r2, #1
 8008546:	2b07      	cmp	r3, #7
 8008548:	f8c4 b000 	str.w	fp, [r4]
 800854c:	6062      	str	r2, [r4, #4]
 800854e:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8008552:	ddb8      	ble.n	80084c6 <_svfprintf_r+0x12e2>
 8008554:	e7af      	b.n	80084b6 <_svfprintf_r+0x12d2>
 8008556:	3608      	adds	r6, #8
 8008558:	e7b5      	b.n	80084c6 <_svfprintf_r+0x12e2>
 800855a:	460c      	mov	r4, r1
 800855c:	f7ff bbd8 	b.w	8007d10 <_svfprintf_r+0xb2c>
 8008560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008562:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008564:	1a9d      	subs	r5, r3, r2
 8008566:	2d00      	cmp	r5, #0
 8008568:	f77f abd6 	ble.w	8007d18 <_svfprintf_r+0xb34>
 800856c:	2710      	movs	r7, #16
 800856e:	4e23      	ldr	r6, [pc, #140]	; (80085fc <_svfprintf_r+0x1418>)
 8008570:	2d10      	cmp	r5, #16
 8008572:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8008576:	6026      	str	r6, [r4, #0]
 8008578:	f103 0301 	add.w	r3, r3, #1
 800857c:	dc18      	bgt.n	80085b0 <_svfprintf_r+0x13cc>
 800857e:	6065      	str	r5, [r4, #4]
 8008580:	2b07      	cmp	r3, #7
 8008582:	4415      	add	r5, r2
 8008584:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8008588:	f77f abc6 	ble.w	8007d18 <_svfprintf_r+0xb34>
 800858c:	aa28      	add	r2, sp, #160	; 0xa0
 800858e:	4649      	mov	r1, r9
 8008590:	9807      	ldr	r0, [sp, #28]
 8008592:	f003 fd11 	bl	800bfb8 <__ssprint_r>
 8008596:	2800      	cmp	r0, #0
 8008598:	f43f abbe 	beq.w	8007d18 <_svfprintf_r+0xb34>
 800859c:	f1b8 0f00 	cmp.w	r8, #0
 80085a0:	f43f a8a9 	beq.w	80076f6 <_svfprintf_r+0x512>
 80085a4:	4641      	mov	r1, r8
 80085a6:	9807      	ldr	r0, [sp, #28]
 80085a8:	f002 fafe 	bl	800aba8 <_free_r>
 80085ac:	f7ff b8a3 	b.w	80076f6 <_svfprintf_r+0x512>
 80085b0:	3210      	adds	r2, #16
 80085b2:	2b07      	cmp	r3, #7
 80085b4:	6067      	str	r7, [r4, #4]
 80085b6:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80085ba:	dc02      	bgt.n	80085c2 <_svfprintf_r+0x13de>
 80085bc:	3408      	adds	r4, #8
 80085be:	3d10      	subs	r5, #16
 80085c0:	e7d6      	b.n	8008570 <_svfprintf_r+0x138c>
 80085c2:	aa28      	add	r2, sp, #160	; 0xa0
 80085c4:	4649      	mov	r1, r9
 80085c6:	9807      	ldr	r0, [sp, #28]
 80085c8:	f003 fcf6 	bl	800bfb8 <__ssprint_r>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d1e5      	bne.n	800859c <_svfprintf_r+0x13b8>
 80085d0:	ac2b      	add	r4, sp, #172	; 0xac
 80085d2:	e7f4      	b.n	80085be <_svfprintf_r+0x13da>
 80085d4:	4641      	mov	r1, r8
 80085d6:	9807      	ldr	r0, [sp, #28]
 80085d8:	f002 fae6 	bl	800aba8 <_free_r>
 80085dc:	f7ff bbb4 	b.w	8007d48 <_svfprintf_r+0xb64>
 80085e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f43f a887 	beq.w	80076f6 <_svfprintf_r+0x512>
 80085e8:	aa28      	add	r2, sp, #160	; 0xa0
 80085ea:	4649      	mov	r1, r9
 80085ec:	9807      	ldr	r0, [sp, #28]
 80085ee:	f003 fce3 	bl	800bfb8 <__ssprint_r>
 80085f2:	f7ff b880 	b.w	80076f6 <_svfprintf_r+0x512>
 80085f6:	bf00      	nop
 80085f8:	0800c7f8 	.word	0x0800c7f8
 80085fc:	0800c7e8 	.word	0x0800c7e8

08008600 <_vfprintf_r>:
 8008600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	b0d5      	sub	sp, #340	; 0x154
 8008606:	4689      	mov	r9, r1
 8008608:	9207      	str	r2, [sp, #28]
 800860a:	461c      	mov	r4, r3
 800860c:	461e      	mov	r6, r3
 800860e:	4683      	mov	fp, r0
 8008610:	f002 fcf2 	bl	800aff8 <_localeconv_r>
 8008614:	6803      	ldr	r3, [r0, #0]
 8008616:	4618      	mov	r0, r3
 8008618:	931a      	str	r3, [sp, #104]	; 0x68
 800861a:	f7f7 fd99 	bl	8000150 <strlen>
 800861e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008620:	f1bb 0f00 	cmp.w	fp, #0
 8008624:	d005      	beq.n	8008632 <_vfprintf_r+0x32>
 8008626:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800862a:	b913      	cbnz	r3, 8008632 <_vfprintf_r+0x32>
 800862c:	4658      	mov	r0, fp
 800862e:	f002 fa2b 	bl	800aa88 <__sinit>
 8008632:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8008636:	07d8      	lsls	r0, r3, #31
 8008638:	d407      	bmi.n	800864a <_vfprintf_r+0x4a>
 800863a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800863e:	0599      	lsls	r1, r3, #22
 8008640:	d403      	bmi.n	800864a <_vfprintf_r+0x4a>
 8008642:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8008646:	f002 fce7 	bl	800b018 <__retarget_lock_acquire_recursive>
 800864a:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 800864e:	049a      	lsls	r2, r3, #18
 8008650:	d409      	bmi.n	8008666 <_vfprintf_r+0x66>
 8008652:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008656:	f8a9 300c 	strh.w	r3, [r9, #12]
 800865a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800865e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008662:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 8008666:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800866a:	071f      	lsls	r7, r3, #28
 800866c:	d502      	bpl.n	8008674 <_vfprintf_r+0x74>
 800866e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008672:	b9a3      	cbnz	r3, 800869e <_vfprintf_r+0x9e>
 8008674:	4649      	mov	r1, r9
 8008676:	4658      	mov	r0, fp
 8008678:	f001 fa74 	bl	8009b64 <__swsetup_r>
 800867c:	b178      	cbz	r0, 800869e <_vfprintf_r+0x9e>
 800867e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8008682:	07dd      	lsls	r5, r3, #31
 8008684:	d407      	bmi.n	8008696 <_vfprintf_r+0x96>
 8008686:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800868a:	059c      	lsls	r4, r3, #22
 800868c:	d403      	bmi.n	8008696 <_vfprintf_r+0x96>
 800868e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8008692:	f002 fcc2 	bl	800b01a <__retarget_lock_release_recursive>
 8008696:	f04f 33ff 	mov.w	r3, #4294967295
 800869a:	9310      	str	r3, [sp, #64]	; 0x40
 800869c:	e01a      	b.n	80086d4 <_vfprintf_r+0xd4>
 800869e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80086a2:	f003 021a 	and.w	r2, r3, #26
 80086a6:	2a0a      	cmp	r2, #10
 80086a8:	d118      	bne.n	80086dc <_vfprintf_r+0xdc>
 80086aa:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 80086ae:	2a00      	cmp	r2, #0
 80086b0:	db14      	blt.n	80086dc <_vfprintf_r+0xdc>
 80086b2:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 80086b6:	07d0      	lsls	r0, r2, #31
 80086b8:	d405      	bmi.n	80086c6 <_vfprintf_r+0xc6>
 80086ba:	0599      	lsls	r1, r3, #22
 80086bc:	d403      	bmi.n	80086c6 <_vfprintf_r+0xc6>
 80086be:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80086c2:	f002 fcaa 	bl	800b01a <__retarget_lock_release_recursive>
 80086c6:	4623      	mov	r3, r4
 80086c8:	9a07      	ldr	r2, [sp, #28]
 80086ca:	4649      	mov	r1, r9
 80086cc:	4658      	mov	r0, fp
 80086ce:	f001 f9fb 	bl	8009ac8 <__sbprintf>
 80086d2:	9010      	str	r0, [sp, #64]	; 0x40
 80086d4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80086d6:	b055      	add	sp, #340	; 0x154
 80086d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086dc:	2300      	movs	r3, #0
 80086de:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 80086e2:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 80086e6:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 80086ea:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 80086ee:	ac2b      	add	r4, sp, #172	; 0xac
 80086f0:	9428      	str	r4, [sp, #160]	; 0xa0
 80086f2:	9308      	str	r3, [sp, #32]
 80086f4:	930c      	str	r3, [sp, #48]	; 0x30
 80086f6:	9316      	str	r3, [sp, #88]	; 0x58
 80086f8:	931d      	str	r3, [sp, #116]	; 0x74
 80086fa:	9310      	str	r3, [sp, #64]	; 0x40
 80086fc:	9d07      	ldr	r5, [sp, #28]
 80086fe:	462b      	mov	r3, r5
 8008700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008704:	b112      	cbz	r2, 800870c <_vfprintf_r+0x10c>
 8008706:	2a25      	cmp	r2, #37	; 0x25
 8008708:	f040 80e4 	bne.w	80088d4 <_vfprintf_r+0x2d4>
 800870c:	9b07      	ldr	r3, [sp, #28]
 800870e:	1aef      	subs	r7, r5, r3
 8008710:	d00e      	beq.n	8008730 <_vfprintf_r+0x130>
 8008712:	e9c4 3700 	strd	r3, r7, [r4]
 8008716:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008718:	443b      	add	r3, r7
 800871a:	932a      	str	r3, [sp, #168]	; 0xa8
 800871c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800871e:	3301      	adds	r3, #1
 8008720:	2b07      	cmp	r3, #7
 8008722:	9329      	str	r3, [sp, #164]	; 0xa4
 8008724:	f300 80d8 	bgt.w	80088d8 <_vfprintf_r+0x2d8>
 8008728:	3408      	adds	r4, #8
 800872a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800872c:	443b      	add	r3, r7
 800872e:	9310      	str	r3, [sp, #64]	; 0x40
 8008730:	782b      	ldrb	r3, [r5, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	f001 81b5 	beq.w	8009aa2 <_vfprintf_r+0x14a2>
 8008738:	1c6b      	adds	r3, r5, #1
 800873a:	930e      	str	r3, [sp, #56]	; 0x38
 800873c:	2300      	movs	r3, #0
 800873e:	f04f 35ff 	mov.w	r5, #4294967295
 8008742:	469a      	mov	sl, r3
 8008744:	270a      	movs	r7, #10
 8008746:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 800874a:	9311      	str	r3, [sp, #68]	; 0x44
 800874c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	930a      	str	r3, [sp, #40]	; 0x28
 8008752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008754:	3301      	adds	r3, #1
 8008756:	930e      	str	r3, [sp, #56]	; 0x38
 8008758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800875a:	3b20      	subs	r3, #32
 800875c:	2b5a      	cmp	r3, #90	; 0x5a
 800875e:	f200 8627 	bhi.w	80093b0 <_vfprintf_r+0xdb0>
 8008762:	a201      	add	r2, pc, #4	; (adr r2, 8008768 <_vfprintf_r+0x168>)
 8008764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008768:	0800896b 	.word	0x0800896b
 800876c:	080093b1 	.word	0x080093b1
 8008770:	080093b1 	.word	0x080093b1
 8008774:	0800897d 	.word	0x0800897d
 8008778:	080093b1 	.word	0x080093b1
 800877c:	080093b1 	.word	0x080093b1
 8008780:	080093b1 	.word	0x080093b1
 8008784:	08008931 	.word	0x08008931
 8008788:	080093b1 	.word	0x080093b1
 800878c:	080093b1 	.word	0x080093b1
 8008790:	08008983 	.word	0x08008983
 8008794:	08008999 	.word	0x08008999
 8008798:	080093b1 	.word	0x080093b1
 800879c:	08008993 	.word	0x08008993
 80087a0:	0800899d 	.word	0x0800899d
 80087a4:	080093b1 	.word	0x080093b1
 80087a8:	080089cf 	.word	0x080089cf
 80087ac:	080089d5 	.word	0x080089d5
 80087b0:	080089d5 	.word	0x080089d5
 80087b4:	080089d5 	.word	0x080089d5
 80087b8:	080089d5 	.word	0x080089d5
 80087bc:	080089d5 	.word	0x080089d5
 80087c0:	080089d5 	.word	0x080089d5
 80087c4:	080089d5 	.word	0x080089d5
 80087c8:	080089d5 	.word	0x080089d5
 80087cc:	080089d5 	.word	0x080089d5
 80087d0:	080093b1 	.word	0x080093b1
 80087d4:	080093b1 	.word	0x080093b1
 80087d8:	080093b1 	.word	0x080093b1
 80087dc:	080093b1 	.word	0x080093b1
 80087e0:	080093b1 	.word	0x080093b1
 80087e4:	080093b1 	.word	0x080093b1
 80087e8:	080093b1 	.word	0x080093b1
 80087ec:	08008ac1 	.word	0x08008ac1
 80087f0:	080093b1 	.word	0x080093b1
 80087f4:	08008a2f 	.word	0x08008a2f
 80087f8:	08008a51 	.word	0x08008a51
 80087fc:	08008ac1 	.word	0x08008ac1
 8008800:	08008ac1 	.word	0x08008ac1
 8008804:	08008ac1 	.word	0x08008ac1
 8008808:	080093b1 	.word	0x080093b1
 800880c:	080093b1 	.word	0x080093b1
 8008810:	080093b1 	.word	0x080093b1
 8008814:	080093b1 	.word	0x080093b1
 8008818:	080089f5 	.word	0x080089f5
 800881c:	080093b1 	.word	0x080093b1
 8008820:	080093b1 	.word	0x080093b1
 8008824:	08008fa5 	.word	0x08008fa5
 8008828:	080093b1 	.word	0x080093b1
 800882c:	080093b1 	.word	0x080093b1
 8008830:	080093b1 	.word	0x080093b1
 8008834:	08009031 	.word	0x08009031
 8008838:	080093b1 	.word	0x080093b1
 800883c:	08009211 	.word	0x08009211
 8008840:	080093b1 	.word	0x080093b1
 8008844:	080093b1 	.word	0x080093b1
 8008848:	080088f1 	.word	0x080088f1
 800884c:	080093b1 	.word	0x080093b1
 8008850:	080093b1 	.word	0x080093b1
 8008854:	080093b1 	.word	0x080093b1
 8008858:	080093b1 	.word	0x080093b1
 800885c:	080093b1 	.word	0x080093b1
 8008860:	080093b1 	.word	0x080093b1
 8008864:	080093b1 	.word	0x080093b1
 8008868:	080093b1 	.word	0x080093b1
 800886c:	08008ac1 	.word	0x08008ac1
 8008870:	080093b1 	.word	0x080093b1
 8008874:	08008a2f 	.word	0x08008a2f
 8008878:	08008a55 	.word	0x08008a55
 800887c:	08008ac1 	.word	0x08008ac1
 8008880:	08008ac1 	.word	0x08008ac1
 8008884:	08008ac1 	.word	0x08008ac1
 8008888:	080089fb 	.word	0x080089fb
 800888c:	08008a55 	.word	0x08008a55
 8008890:	08008a23 	.word	0x08008a23
 8008894:	080093b1 	.word	0x080093b1
 8008898:	08008a15 	.word	0x08008a15
 800889c:	080093b1 	.word	0x080093b1
 80088a0:	08008f5f 	.word	0x08008f5f
 80088a4:	08008fa9 	.word	0x08008fa9
 80088a8:	08009011 	.word	0x08009011
 80088ac:	08008a23 	.word	0x08008a23
 80088b0:	080093b1 	.word	0x080093b1
 80088b4:	08009031 	.word	0x08009031
 80088b8:	0800874d 	.word	0x0800874d
 80088bc:	08009215 	.word	0x08009215
 80088c0:	080093b1 	.word	0x080093b1
 80088c4:	080093b1 	.word	0x080093b1
 80088c8:	08009253 	.word	0x08009253
 80088cc:	080093b1 	.word	0x080093b1
 80088d0:	0800874d 	.word	0x0800874d
 80088d4:	461d      	mov	r5, r3
 80088d6:	e712      	b.n	80086fe <_vfprintf_r+0xfe>
 80088d8:	aa28      	add	r2, sp, #160	; 0xa0
 80088da:	4649      	mov	r1, r9
 80088dc:	4658      	mov	r0, fp
 80088de:	f003 fbf0 	bl	800c0c2 <__sprint_r>
 80088e2:	2800      	cmp	r0, #0
 80088e4:	f040 8157 	bne.w	8008b96 <_vfprintf_r+0x596>
 80088e8:	ac2b      	add	r4, sp, #172	; 0xac
 80088ea:	e71e      	b.n	800872a <_vfprintf_r+0x12a>
 80088ec:	461e      	mov	r6, r3
 80088ee:	e72d      	b.n	800874c <_vfprintf_r+0x14c>
 80088f0:	4bb2      	ldr	r3, [pc, #712]	; (8008bbc <_vfprintf_r+0x5bc>)
 80088f2:	f01a 0f20 	tst.w	sl, #32
 80088f6:	931c      	str	r3, [sp, #112]	; 0x70
 80088f8:	f000 84ae 	beq.w	8009258 <_vfprintf_r+0xc58>
 80088fc:	3607      	adds	r6, #7
 80088fe:	f026 0607 	bic.w	r6, r6, #7
 8008902:	f106 0308 	add.w	r3, r6, #8
 8008906:	930d      	str	r3, [sp, #52]	; 0x34
 8008908:	e9d6 6700 	ldrd	r6, r7, [r6]
 800890c:	f01a 0f01 	tst.w	sl, #1
 8008910:	d00a      	beq.n	8008928 <_vfprintf_r+0x328>
 8008912:	ea56 0307 	orrs.w	r3, r6, r7
 8008916:	d007      	beq.n	8008928 <_vfprintf_r+0x328>
 8008918:	2330      	movs	r3, #48	; 0x30
 800891a:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800891e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008920:	f04a 0a02 	orr.w	sl, sl, #2
 8008924:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8008928:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800892c:	2302      	movs	r3, #2
 800892e:	e349      	b.n	8008fc4 <_vfprintf_r+0x9c4>
 8008930:	4658      	mov	r0, fp
 8008932:	f002 fb61 	bl	800aff8 <_localeconv_r>
 8008936:	6843      	ldr	r3, [r0, #4]
 8008938:	4618      	mov	r0, r3
 800893a:	931d      	str	r3, [sp, #116]	; 0x74
 800893c:	f7f7 fc08 	bl	8000150 <strlen>
 8008940:	9016      	str	r0, [sp, #88]	; 0x58
 8008942:	4658      	mov	r0, fp
 8008944:	f002 fb58 	bl	800aff8 <_localeconv_r>
 8008948:	6883      	ldr	r3, [r0, #8]
 800894a:	930c      	str	r3, [sp, #48]	; 0x30
 800894c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800894e:	2b00      	cmp	r3, #0
 8008950:	f43f aefc 	beq.w	800874c <_vfprintf_r+0x14c>
 8008954:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008956:	2b00      	cmp	r3, #0
 8008958:	f43f aef8 	beq.w	800874c <_vfprintf_r+0x14c>
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	f43f aef4 	beq.w	800874c <_vfprintf_r+0x14c>
 8008964:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8008968:	e6f0      	b.n	800874c <_vfprintf_r+0x14c>
 800896a:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 800896e:	2b00      	cmp	r3, #0
 8008970:	f47f aeec 	bne.w	800874c <_vfprintf_r+0x14c>
 8008974:	2320      	movs	r3, #32
 8008976:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 800897a:	e6e7      	b.n	800874c <_vfprintf_r+0x14c>
 800897c:	f04a 0a01 	orr.w	sl, sl, #1
 8008980:	e6e4      	b.n	800874c <_vfprintf_r+0x14c>
 8008982:	6832      	ldr	r2, [r6, #0]
 8008984:	1d33      	adds	r3, r6, #4
 8008986:	2a00      	cmp	r2, #0
 8008988:	9211      	str	r2, [sp, #68]	; 0x44
 800898a:	daaf      	bge.n	80088ec <_vfprintf_r+0x2ec>
 800898c:	461e      	mov	r6, r3
 800898e:	4252      	negs	r2, r2
 8008990:	9211      	str	r2, [sp, #68]	; 0x44
 8008992:	f04a 0a04 	orr.w	sl, sl, #4
 8008996:	e6d9      	b.n	800874c <_vfprintf_r+0x14c>
 8008998:	232b      	movs	r3, #43	; 0x2b
 800899a:	e7ec      	b.n	8008976 <_vfprintf_r+0x376>
 800899c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800899e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089a0:	7812      	ldrb	r2, [r2, #0]
 80089a2:	3301      	adds	r3, #1
 80089a4:	2a2a      	cmp	r2, #42	; 0x2a
 80089a6:	920a      	str	r2, [sp, #40]	; 0x28
 80089a8:	d10f      	bne.n	80089ca <_vfprintf_r+0x3ca>
 80089aa:	6835      	ldr	r5, [r6, #0]
 80089ac:	930e      	str	r3, [sp, #56]	; 0x38
 80089ae:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80089b2:	3604      	adds	r6, #4
 80089b4:	e6ca      	b.n	800874c <_vfprintf_r+0x14c>
 80089b6:	fb07 2505 	mla	r5, r7, r5, r2
 80089ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089be:	920a      	str	r2, [sp, #40]	; 0x28
 80089c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089c2:	3a30      	subs	r2, #48	; 0x30
 80089c4:	2a09      	cmp	r2, #9
 80089c6:	d9f6      	bls.n	80089b6 <_vfprintf_r+0x3b6>
 80089c8:	e6c5      	b.n	8008756 <_vfprintf_r+0x156>
 80089ca:	2500      	movs	r5, #0
 80089cc:	e7f8      	b.n	80089c0 <_vfprintf_r+0x3c0>
 80089ce:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80089d2:	e6bb      	b.n	800874c <_vfprintf_r+0x14c>
 80089d4:	2200      	movs	r2, #0
 80089d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089d8:	9211      	str	r2, [sp, #68]	; 0x44
 80089da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80089de:	3a30      	subs	r2, #48	; 0x30
 80089e0:	fb07 2201 	mla	r2, r7, r1, r2
 80089e4:	9211      	str	r2, [sp, #68]	; 0x44
 80089e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089ea:	920a      	str	r2, [sp, #40]	; 0x28
 80089ec:	3a30      	subs	r2, #48	; 0x30
 80089ee:	2a09      	cmp	r2, #9
 80089f0:	d9f3      	bls.n	80089da <_vfprintf_r+0x3da>
 80089f2:	e6b0      	b.n	8008756 <_vfprintf_r+0x156>
 80089f4:	f04a 0a08 	orr.w	sl, sl, #8
 80089f8:	e6a8      	b.n	800874c <_vfprintf_r+0x14c>
 80089fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	2b68      	cmp	r3, #104	; 0x68
 8008a00:	bf01      	itttt	eq
 8008a02:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 8008a04:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8008a08:	3301      	addeq	r3, #1
 8008a0a:	930e      	streq	r3, [sp, #56]	; 0x38
 8008a0c:	bf18      	it	ne
 8008a0e:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8008a12:	e69b      	b.n	800874c <_vfprintf_r+0x14c>
 8008a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	2b6c      	cmp	r3, #108	; 0x6c
 8008a1a:	d105      	bne.n	8008a28 <_vfprintf_r+0x428>
 8008a1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a1e:	3301      	adds	r3, #1
 8008a20:	930e      	str	r3, [sp, #56]	; 0x38
 8008a22:	f04a 0a20 	orr.w	sl, sl, #32
 8008a26:	e691      	b.n	800874c <_vfprintf_r+0x14c>
 8008a28:	f04a 0a10 	orr.w	sl, sl, #16
 8008a2c:	e68e      	b.n	800874c <_vfprintf_r+0x14c>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	1d33      	adds	r3, r6, #4
 8008a32:	930d      	str	r3, [sp, #52]	; 0x34
 8008a34:	6833      	ldr	r3, [r6, #0]
 8008a36:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8008a3a:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8008a3e:	ab3b      	add	r3, sp, #236	; 0xec
 8008a40:	4680      	mov	r8, r0
 8008a42:	2501      	movs	r5, #1
 8008a44:	9012      	str	r0, [sp, #72]	; 0x48
 8008a46:	4607      	mov	r7, r0
 8008a48:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	9307      	str	r3, [sp, #28]
 8008a4e:	e308      	b.n	8009062 <_vfprintf_r+0xa62>
 8008a50:	f04a 0a10 	orr.w	sl, sl, #16
 8008a54:	f01a 0f20 	tst.w	sl, #32
 8008a58:	d01f      	beq.n	8008a9a <_vfprintf_r+0x49a>
 8008a5a:	3607      	adds	r6, #7
 8008a5c:	f026 0607 	bic.w	r6, r6, #7
 8008a60:	f106 0308 	add.w	r3, r6, #8
 8008a64:	930d      	str	r3, [sp, #52]	; 0x34
 8008a66:	e9d6 6700 	ldrd	r6, r7, [r6]
 8008a6a:	2e00      	cmp	r6, #0
 8008a6c:	f177 0300 	sbcs.w	r3, r7, #0
 8008a70:	da05      	bge.n	8008a7e <_vfprintf_r+0x47e>
 8008a72:	232d      	movs	r3, #45	; 0x2d
 8008a74:	4276      	negs	r6, r6
 8008a76:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8008a7a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8008a7e:	1c6b      	adds	r3, r5, #1
 8008a80:	f040 83fd 	bne.w	800927e <_vfprintf_r+0xc7e>
 8008a84:	2f00      	cmp	r7, #0
 8008a86:	bf08      	it	eq
 8008a88:	2e0a      	cmpeq	r6, #10
 8008a8a:	f080 8425 	bcs.w	80092d8 <_vfprintf_r+0xcd8>
 8008a8e:	3630      	adds	r6, #48	; 0x30
 8008a90:	ab54      	add	r3, sp, #336	; 0x150
 8008a92:	f803 6d01 	strb.w	r6, [r3, #-1]!
 8008a96:	f000 bc15 	b.w	80092c4 <_vfprintf_r+0xcc4>
 8008a9a:	1d33      	adds	r3, r6, #4
 8008a9c:	f01a 0f10 	tst.w	sl, #16
 8008aa0:	930d      	str	r3, [sp, #52]	; 0x34
 8008aa2:	d002      	beq.n	8008aaa <_vfprintf_r+0x4aa>
 8008aa4:	6836      	ldr	r6, [r6, #0]
 8008aa6:	17f7      	asrs	r7, r6, #31
 8008aa8:	e7df      	b.n	8008a6a <_vfprintf_r+0x46a>
 8008aaa:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008aae:	6836      	ldr	r6, [r6, #0]
 8008ab0:	d001      	beq.n	8008ab6 <_vfprintf_r+0x4b6>
 8008ab2:	b236      	sxth	r6, r6
 8008ab4:	e7f7      	b.n	8008aa6 <_vfprintf_r+0x4a6>
 8008ab6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008aba:	bf18      	it	ne
 8008abc:	b276      	sxtbne	r6, r6
 8008abe:	e7f2      	b.n	8008aa6 <_vfprintf_r+0x4a6>
 8008ac0:	3607      	adds	r6, #7
 8008ac2:	f026 0607 	bic.w	r6, r6, #7
 8008ac6:	f106 0308 	add.w	r3, r6, #8
 8008aca:	930d      	str	r3, [sp, #52]	; 0x34
 8008acc:	6833      	ldr	r3, [r6, #0]
 8008ace:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad2:	9314      	str	r3, [sp, #80]	; 0x50
 8008ad4:	6873      	ldr	r3, [r6, #4]
 8008ad6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008ad8:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8008adc:	9313      	str	r3, [sp, #76]	; 0x4c
 8008ade:	4638      	mov	r0, r7
 8008ae0:	4b37      	ldr	r3, [pc, #220]	; (8008bc0 <_vfprintf_r+0x5c0>)
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	f7f7 ff92 	bl	8000a0c <__aeabi_dcmpun>
 8008ae8:	bb08      	cbnz	r0, 8008b2e <_vfprintf_r+0x52e>
 8008aea:	f04f 32ff 	mov.w	r2, #4294967295
 8008aee:	4b34      	ldr	r3, [pc, #208]	; (8008bc0 <_vfprintf_r+0x5c0>)
 8008af0:	4638      	mov	r0, r7
 8008af2:	4631      	mov	r1, r6
 8008af4:	f7f7 ff6c 	bl	80009d0 <__aeabi_dcmple>
 8008af8:	b9c8      	cbnz	r0, 8008b2e <_vfprintf_r+0x52e>
 8008afa:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008afe:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8008b02:	f7f7 ff5b 	bl	80009bc <__aeabi_dcmplt>
 8008b06:	b110      	cbz	r0, 8008b0e <_vfprintf_r+0x50e>
 8008b08:	232d      	movs	r3, #45	; 0x2d
 8008b0a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8008b0e:	4a2d      	ldr	r2, [pc, #180]	; (8008bc4 <_vfprintf_r+0x5c4>)
 8008b10:	4b2d      	ldr	r3, [pc, #180]	; (8008bc8 <_vfprintf_r+0x5c8>)
 8008b12:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b14:	f04f 0800 	mov.w	r8, #0
 8008b18:	2947      	cmp	r1, #71	; 0x47
 8008b1a:	bfd8      	it	le
 8008b1c:	461a      	movle	r2, r3
 8008b1e:	2503      	movs	r5, #3
 8008b20:	9207      	str	r2, [sp, #28]
 8008b22:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8008b26:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8008b2a:	f000 bc19 	b.w	8009360 <_vfprintf_r+0xd60>
 8008b2e:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8008b32:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8008b36:	f7f7 ff69 	bl	8000a0c <__aeabi_dcmpun>
 8008b3a:	4680      	mov	r8, r0
 8008b3c:	b140      	cbz	r0, 8008b50 <_vfprintf_r+0x550>
 8008b3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b40:	4a22      	ldr	r2, [pc, #136]	; (8008bcc <_vfprintf_r+0x5cc>)
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	bfbc      	itt	lt
 8008b46:	232d      	movlt	r3, #45	; 0x2d
 8008b48:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
 8008b4c:	4b20      	ldr	r3, [pc, #128]	; (8008bd0 <_vfprintf_r+0x5d0>)
 8008b4e:	e7e0      	b.n	8008b12 <_vfprintf_r+0x512>
 8008b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b52:	f023 0320 	bic.w	r3, r3, #32
 8008b56:	2b41      	cmp	r3, #65	; 0x41
 8008b58:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b5a:	d13b      	bne.n	8008bd4 <_vfprintf_r+0x5d4>
 8008b5c:	2330      	movs	r3, #48	; 0x30
 8008b5e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8008b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b64:	f04a 0a02 	orr.w	sl, sl, #2
 8008b68:	2b61      	cmp	r3, #97	; 0x61
 8008b6a:	bf14      	ite	ne
 8008b6c:	2358      	movne	r3, #88	; 0x58
 8008b6e:	2378      	moveq	r3, #120	; 0x78
 8008b70:	2d63      	cmp	r5, #99	; 0x63
 8008b72:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8008b76:	f340 811b 	ble.w	8008db0 <_vfprintf_r+0x7b0>
 8008b7a:	1c69      	adds	r1, r5, #1
 8008b7c:	4658      	mov	r0, fp
 8008b7e:	f002 fab9 	bl	800b0f4 <_malloc_r>
 8008b82:	9007      	str	r0, [sp, #28]
 8008b84:	2800      	cmp	r0, #0
 8008b86:	f040 8116 	bne.w	8008db6 <_vfprintf_r+0x7b6>
 8008b8a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b92:	f8a9 300c 	strh.w	r3, [r9, #12]
 8008b96:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8008b9a:	07d8      	lsls	r0, r3, #31
 8008b9c:	d407      	bmi.n	8008bae <_vfprintf_r+0x5ae>
 8008b9e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008ba2:	0599      	lsls	r1, r3, #22
 8008ba4:	d403      	bmi.n	8008bae <_vfprintf_r+0x5ae>
 8008ba6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8008baa:	f002 fa36 	bl	800b01a <__retarget_lock_release_recursive>
 8008bae:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008bb2:	065a      	lsls	r2, r3, #25
 8008bb4:	f57f ad8e 	bpl.w	80086d4 <_vfprintf_r+0xd4>
 8008bb8:	e56d      	b.n	8008696 <_vfprintf_r+0x96>
 8008bba:	bf00      	nop
 8008bbc:	0800c7d5 	.word	0x0800c7d5
 8008bc0:	7fefffff 	.word	0x7fefffff
 8008bc4:	0800c7b8 	.word	0x0800c7b8
 8008bc8:	0800c7b4 	.word	0x0800c7b4
 8008bcc:	0800c7c0 	.word	0x0800c7c0
 8008bd0:	0800c7bc 	.word	0x0800c7bc
 8008bd4:	1c6a      	adds	r2, r5, #1
 8008bd6:	f000 80f1 	beq.w	8008dbc <_vfprintf_r+0x7bc>
 8008bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bdc:	2b47      	cmp	r3, #71	; 0x47
 8008bde:	d102      	bne.n	8008be6 <_vfprintf_r+0x5e6>
 8008be0:	2d00      	cmp	r5, #0
 8008be2:	f000 80ed 	beq.w	8008dc0 <_vfprintf_r+0x7c0>
 8008be6:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8008bea:	9315      	str	r3, [sp, #84]	; 0x54
 8008bec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bee:	1e1e      	subs	r6, r3, #0
 8008bf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bf2:	9308      	str	r3, [sp, #32]
 8008bf4:	bfb7      	itett	lt
 8008bf6:	4633      	movlt	r3, r6
 8008bf8:	2300      	movge	r3, #0
 8008bfa:	f103 4600 	addlt.w	r6, r3, #2147483648	; 0x80000000
 8008bfe:	232d      	movlt	r3, #45	; 0x2d
 8008c00:	9319      	str	r3, [sp, #100]	; 0x64
 8008c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c04:	2b41      	cmp	r3, #65	; 0x41
 8008c06:	f040 80ec 	bne.w	8008de2 <_vfprintf_r+0x7e2>
 8008c0a:	aa22      	add	r2, sp, #136	; 0x88
 8008c0c:	9808      	ldr	r0, [sp, #32]
 8008c0e:	4631      	mov	r1, r6
 8008c10:	f003 f938 	bl	800be84 <frexp>
 8008c14:	2200      	movs	r2, #0
 8008c16:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008c1a:	f7f7 fc5d 	bl	80004d8 <__aeabi_dmul>
 8008c1e:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008c22:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c26:	f7f7 febf 	bl	80009a8 <__aeabi_dcmpeq>
 8008c2a:	b108      	cbz	r0, 8008c30 <_vfprintf_r+0x630>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	9322      	str	r3, [sp, #136]	; 0x88
 8008c30:	4fa7      	ldr	r7, [pc, #668]	; (8008ed0 <_vfprintf_r+0x8d0>)
 8008c32:	4ba8      	ldr	r3, [pc, #672]	; (8008ed4 <_vfprintf_r+0x8d4>)
 8008c34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c36:	9e07      	ldr	r6, [sp, #28]
 8008c38:	2a61      	cmp	r2, #97	; 0x61
 8008c3a:	bf08      	it	eq
 8008c3c:	461f      	moveq	r7, r3
 8008c3e:	9712      	str	r7, [sp, #72]	; 0x48
 8008c40:	1e6f      	subs	r7, r5, #1
 8008c42:	2200      	movs	r2, #0
 8008c44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c48:	4ba3      	ldr	r3, [pc, #652]	; (8008ed8 <_vfprintf_r+0x8d8>)
 8008c4a:	f7f7 fc45 	bl	80004d8 <__aeabi_dmul>
 8008c4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c52:	f7f7 fef1 	bl	8000a38 <__aeabi_d2iz>
 8008c56:	901e      	str	r0, [sp, #120]	; 0x78
 8008c58:	f7f7 fbd4 	bl	8000404 <__aeabi_i2d>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c64:	f7f7 fa80 	bl	8000168 <__aeabi_dsub>
 8008c68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008c6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c70:	5c9b      	ldrb	r3, [r3, r2]
 8008c72:	971f      	str	r7, [sp, #124]	; 0x7c
 8008c74:	f806 3b01 	strb.w	r3, [r6], #1
 8008c78:	1c7b      	adds	r3, r7, #1
 8008c7a:	d006      	beq.n	8008c8a <_vfprintf_r+0x68a>
 8008c7c:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008c80:	3f01      	subs	r7, #1
 8008c82:	f7f7 fe91 	bl	80009a8 <__aeabi_dcmpeq>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	d0db      	beq.n	8008c42 <_vfprintf_r+0x642>
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c90:	4b92      	ldr	r3, [pc, #584]	; (8008edc <_vfprintf_r+0x8dc>)
 8008c92:	f7f7 feb1 	bl	80009f8 <__aeabi_dcmpgt>
 8008c96:	b960      	cbnz	r0, 8008cb2 <_vfprintf_r+0x6b2>
 8008c98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	4b8f      	ldr	r3, [pc, #572]	; (8008edc <_vfprintf_r+0x8dc>)
 8008ca0:	f7f7 fe82 	bl	80009a8 <__aeabi_dcmpeq>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	f000 8097 	beq.w	8008dd8 <_vfprintf_r+0x7d8>
 8008caa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008cac:	07df      	lsls	r7, r3, #31
 8008cae:	f140 8093 	bpl.w	8008dd8 <_vfprintf_r+0x7d8>
 8008cb2:	2030      	movs	r0, #48	; 0x30
 8008cb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cb6:	9626      	str	r6, [sp, #152]	; 0x98
 8008cb8:	7bd9      	ldrb	r1, [r3, #15]
 8008cba:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008cbc:	1e53      	subs	r3, r2, #1
 8008cbe:	9326      	str	r3, [sp, #152]	; 0x98
 8008cc0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8008cc4:	428b      	cmp	r3, r1
 8008cc6:	d07e      	beq.n	8008dc6 <_vfprintf_r+0x7c6>
 8008cc8:	2b39      	cmp	r3, #57	; 0x39
 8008cca:	bf0b      	itete	eq
 8008ccc:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 8008cce:	3301      	addne	r3, #1
 8008cd0:	7a9b      	ldrbeq	r3, [r3, #10]
 8008cd2:	b2db      	uxtbne	r3, r3
 8008cd4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008cd8:	4633      	mov	r3, r6
 8008cda:	9a07      	ldr	r2, [sp, #28]
 8008cdc:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8008cde:	1a9b      	subs	r3, r3, r2
 8008ce0:	9308      	str	r3, [sp, #32]
 8008ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ce4:	2b47      	cmp	r3, #71	; 0x47
 8008ce6:	f040 80c8 	bne.w	8008e7a <_vfprintf_r+0x87a>
 8008cea:	1cf0      	adds	r0, r6, #3
 8008cec:	db02      	blt.n	8008cf4 <_vfprintf_r+0x6f4>
 8008cee:	42b5      	cmp	r5, r6
 8008cf0:	f280 80f6 	bge.w	8008ee0 <_vfprintf_r+0x8e0>
 8008cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf6:	3b02      	subs	r3, #2
 8008cf8:	930a      	str	r3, [sp, #40]	; 0x28
 8008cfa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008cfc:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8008d00:	f021 0120 	bic.w	r1, r1, #32
 8008d04:	2941      	cmp	r1, #65	; 0x41
 8008d06:	bf08      	it	eq
 8008d08:	320f      	addeq	r2, #15
 8008d0a:	f106 33ff 	add.w	r3, r6, #4294967295
 8008d0e:	bf06      	itte	eq
 8008d10:	b2d2      	uxtbeq	r2, r2
 8008d12:	2101      	moveq	r1, #1
 8008d14:	2100      	movne	r1, #0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8008d1c:	bfb4      	ite	lt
 8008d1e:	222d      	movlt	r2, #45	; 0x2d
 8008d20:	222b      	movge	r2, #43	; 0x2b
 8008d22:	9322      	str	r3, [sp, #136]	; 0x88
 8008d24:	bfb8      	it	lt
 8008d26:	f1c6 0301 	rsblt	r3, r6, #1
 8008d2a:	2b09      	cmp	r3, #9
 8008d2c:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8008d30:	f340 80ba 	ble.w	8008ea8 <_vfprintf_r+0x8a8>
 8008d34:	250a      	movs	r5, #10
 8008d36:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8008d3a:	fb93 f0f5 	sdiv	r0, r3, r5
 8008d3e:	fb05 3310 	mls	r3, r5, r0, r3
 8008d42:	2809      	cmp	r0, #9
 8008d44:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8008d48:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008d4c:	f102 31ff 	add.w	r1, r2, #4294967295
 8008d50:	4603      	mov	r3, r0
 8008d52:	f300 80a2 	bgt.w	8008e9a <_vfprintf_r+0x89a>
 8008d56:	3330      	adds	r3, #48	; 0x30
 8008d58:	f801 3c01 	strb.w	r3, [r1, #-1]
 8008d5c:	3a02      	subs	r2, #2
 8008d5e:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 8008d62:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8008d66:	4282      	cmp	r2, r0
 8008d68:	4619      	mov	r1, r3
 8008d6a:	f0c0 8098 	bcc.w	8008e9e <_vfprintf_r+0x89e>
 8008d6e:	9a08      	ldr	r2, [sp, #32]
 8008d70:	ab24      	add	r3, sp, #144	; 0x90
 8008d72:	1acb      	subs	r3, r1, r3
 8008d74:	2a01      	cmp	r2, #1
 8008d76:	931b      	str	r3, [sp, #108]	; 0x6c
 8008d78:	eb03 0502 	add.w	r5, r3, r2
 8008d7c:	dc02      	bgt.n	8008d84 <_vfprintf_r+0x784>
 8008d7e:	f01a 0f01 	tst.w	sl, #1
 8008d82:	d001      	beq.n	8008d88 <_vfprintf_r+0x788>
 8008d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d86:	441d      	add	r5, r3
 8008d88:	2700      	movs	r7, #0
 8008d8a:	463e      	mov	r6, r7
 8008d8c:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8008d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d94:	9315      	str	r3, [sp, #84]	; 0x54
 8008d96:	970b      	str	r7, [sp, #44]	; 0x2c
 8008d98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 8314 	beq.w	80093c8 <_vfprintf_r+0xdc8>
 8008da0:	232d      	movs	r3, #45	; 0x2d
 8008da2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8008da6:	2300      	movs	r3, #0
 8008da8:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8008dac:	9312      	str	r3, [sp, #72]	; 0x48
 8008dae:	e158      	b.n	8009062 <_vfprintf_r+0xa62>
 8008db0:	ab3b      	add	r3, sp, #236	; 0xec
 8008db2:	9307      	str	r3, [sp, #28]
 8008db4:	e717      	b.n	8008be6 <_vfprintf_r+0x5e6>
 8008db6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8008dba:	e714      	b.n	8008be6 <_vfprintf_r+0x5e6>
 8008dbc:	2506      	movs	r5, #6
 8008dbe:	e712      	b.n	8008be6 <_vfprintf_r+0x5e6>
 8008dc0:	46a8      	mov	r8, r5
 8008dc2:	2501      	movs	r5, #1
 8008dc4:	e70f      	b.n	8008be6 <_vfprintf_r+0x5e6>
 8008dc6:	f802 0c01 	strb.w	r0, [r2, #-1]
 8008dca:	e776      	b.n	8008cba <_vfprintf_r+0x6ba>
 8008dcc:	f803 1b01 	strb.w	r1, [r3], #1
 8008dd0:	1af2      	subs	r2, r6, r3
 8008dd2:	2a00      	cmp	r2, #0
 8008dd4:	dafa      	bge.n	8008dcc <_vfprintf_r+0x7cc>
 8008dd6:	e780      	b.n	8008cda <_vfprintf_r+0x6da>
 8008dd8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008dda:	4633      	mov	r3, r6
 8008ddc:	2130      	movs	r1, #48	; 0x30
 8008dde:	4416      	add	r6, r2
 8008de0:	e7f6      	b.n	8008dd0 <_vfprintf_r+0x7d0>
 8008de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008de4:	2b46      	cmp	r3, #70	; 0x46
 8008de6:	d004      	beq.n	8008df2 <_vfprintf_r+0x7f2>
 8008de8:	2b45      	cmp	r3, #69	; 0x45
 8008dea:	d140      	bne.n	8008e6e <_vfprintf_r+0x86e>
 8008dec:	1c6f      	adds	r7, r5, #1
 8008dee:	2302      	movs	r3, #2
 8008df0:	e001      	b.n	8008df6 <_vfprintf_r+0x7f6>
 8008df2:	462f      	mov	r7, r5
 8008df4:	2303      	movs	r3, #3
 8008df6:	aa26      	add	r2, sp, #152	; 0x98
 8008df8:	9204      	str	r2, [sp, #16]
 8008dfa:	aa23      	add	r2, sp, #140	; 0x8c
 8008dfc:	9203      	str	r2, [sp, #12]
 8008dfe:	aa22      	add	r2, sp, #136	; 0x88
 8008e00:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	9a08      	ldr	r2, [sp, #32]
 8008e08:	4633      	mov	r3, r6
 8008e0a:	4658      	mov	r0, fp
 8008e0c:	f000 ffa0 	bl	8009d50 <_dtoa_r>
 8008e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e12:	9007      	str	r0, [sp, #28]
 8008e14:	2b47      	cmp	r3, #71	; 0x47
 8008e16:	d102      	bne.n	8008e1e <_vfprintf_r+0x81e>
 8008e18:	f01a 0f01 	tst.w	sl, #1
 8008e1c:	d02b      	beq.n	8008e76 <_vfprintf_r+0x876>
 8008e1e:	9b07      	ldr	r3, [sp, #28]
 8008e20:	443b      	add	r3, r7
 8008e22:	9312      	str	r3, [sp, #72]	; 0x48
 8008e24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e26:	2b46      	cmp	r3, #70	; 0x46
 8008e28:	d111      	bne.n	8008e4e <_vfprintf_r+0x84e>
 8008e2a:	9b07      	ldr	r3, [sp, #28]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	2b30      	cmp	r3, #48	; 0x30
 8008e30:	d109      	bne.n	8008e46 <_vfprintf_r+0x846>
 8008e32:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008e36:	9808      	ldr	r0, [sp, #32]
 8008e38:	4631      	mov	r1, r6
 8008e3a:	f7f7 fdb5 	bl	80009a8 <__aeabi_dcmpeq>
 8008e3e:	b910      	cbnz	r0, 8008e46 <_vfprintf_r+0x846>
 8008e40:	f1c7 0701 	rsb	r7, r7, #1
 8008e44:	9722      	str	r7, [sp, #136]	; 0x88
 8008e46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e4a:	441a      	add	r2, r3
 8008e4c:	9212      	str	r2, [sp, #72]	; 0x48
 8008e4e:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008e52:	9808      	ldr	r0, [sp, #32]
 8008e54:	4631      	mov	r1, r6
 8008e56:	f7f7 fda7 	bl	80009a8 <__aeabi_dcmpeq>
 8008e5a:	b950      	cbnz	r0, 8008e72 <_vfprintf_r+0x872>
 8008e5c:	2230      	movs	r2, #48	; 0x30
 8008e5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e60:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008e62:	4299      	cmp	r1, r3
 8008e64:	d907      	bls.n	8008e76 <_vfprintf_r+0x876>
 8008e66:	1c59      	adds	r1, r3, #1
 8008e68:	9126      	str	r1, [sp, #152]	; 0x98
 8008e6a:	701a      	strb	r2, [r3, #0]
 8008e6c:	e7f7      	b.n	8008e5e <_vfprintf_r+0x85e>
 8008e6e:	462f      	mov	r7, r5
 8008e70:	e7bd      	b.n	8008dee <_vfprintf_r+0x7ee>
 8008e72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e74:	9326      	str	r3, [sp, #152]	; 0x98
 8008e76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e78:	e72f      	b.n	8008cda <_vfprintf_r+0x6da>
 8008e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e7c:	2b46      	cmp	r3, #70	; 0x46
 8008e7e:	f47f af3c 	bne.w	8008cfa <_vfprintf_r+0x6fa>
 8008e82:	2e00      	cmp	r6, #0
 8008e84:	dd1d      	ble.n	8008ec2 <_vfprintf_r+0x8c2>
 8008e86:	b915      	cbnz	r5, 8008e8e <_vfprintf_r+0x88e>
 8008e88:	f01a 0f01 	tst.w	sl, #1
 8008e8c:	d03c      	beq.n	8008f08 <_vfprintf_r+0x908>
 8008e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e90:	18f3      	adds	r3, r6, r3
 8008e92:	441d      	add	r5, r3
 8008e94:	2366      	movs	r3, #102	; 0x66
 8008e96:	930a      	str	r3, [sp, #40]	; 0x28
 8008e98:	e03b      	b.n	8008f12 <_vfprintf_r+0x912>
 8008e9a:	460a      	mov	r2, r1
 8008e9c:	e74d      	b.n	8008d3a <_vfprintf_r+0x73a>
 8008e9e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ea6:	e75e      	b.n	8008d66 <_vfprintf_r+0x766>
 8008ea8:	b941      	cbnz	r1, 8008ebc <_vfprintf_r+0x8bc>
 8008eaa:	2230      	movs	r2, #48	; 0x30
 8008eac:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 8008eb0:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 8008eb4:	3330      	adds	r3, #48	; 0x30
 8008eb6:	1c51      	adds	r1, r2, #1
 8008eb8:	7013      	strb	r3, [r2, #0]
 8008eba:	e758      	b.n	8008d6e <_vfprintf_r+0x76e>
 8008ebc:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 8008ec0:	e7f8      	b.n	8008eb4 <_vfprintf_r+0x8b4>
 8008ec2:	b915      	cbnz	r5, 8008eca <_vfprintf_r+0x8ca>
 8008ec4:	f01a 0f01 	tst.w	sl, #1
 8008ec8:	d020      	beq.n	8008f0c <_vfprintf_r+0x90c>
 8008eca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ecc:	3301      	adds	r3, #1
 8008ece:	e7e0      	b.n	8008e92 <_vfprintf_r+0x892>
 8008ed0:	0800c7d5 	.word	0x0800c7d5
 8008ed4:	0800c7c4 	.word	0x0800c7c4
 8008ed8:	40300000 	.word	0x40300000
 8008edc:	3fe00000 	.word	0x3fe00000
 8008ee0:	9b08      	ldr	r3, [sp, #32]
 8008ee2:	42b3      	cmp	r3, r6
 8008ee4:	dc06      	bgt.n	8008ef4 <_vfprintf_r+0x8f4>
 8008ee6:	f01a 0f01 	tst.w	sl, #1
 8008eea:	d025      	beq.n	8008f38 <_vfprintf_r+0x938>
 8008eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008eee:	18f5      	adds	r5, r6, r3
 8008ef0:	2367      	movs	r3, #103	; 0x67
 8008ef2:	e7d0      	b.n	8008e96 <_vfprintf_r+0x896>
 8008ef4:	9b08      	ldr	r3, [sp, #32]
 8008ef6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ef8:	2e00      	cmp	r6, #0
 8008efa:	eb03 0502 	add.w	r5, r3, r2
 8008efe:	dcf7      	bgt.n	8008ef0 <_vfprintf_r+0x8f0>
 8008f00:	f1c6 0301 	rsb	r3, r6, #1
 8008f04:	441d      	add	r5, r3
 8008f06:	e7f3      	b.n	8008ef0 <_vfprintf_r+0x8f0>
 8008f08:	4635      	mov	r5, r6
 8008f0a:	e7c3      	b.n	8008e94 <_vfprintf_r+0x894>
 8008f0c:	2366      	movs	r3, #102	; 0x66
 8008f0e:	2501      	movs	r5, #1
 8008f10:	930a      	str	r3, [sp, #40]	; 0x28
 8008f12:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8008f16:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f18:	d01f      	beq.n	8008f5a <_vfprintf_r+0x95a>
 8008f1a:	2700      	movs	r7, #0
 8008f1c:	2e00      	cmp	r6, #0
 8008f1e:	970b      	str	r7, [sp, #44]	; 0x2c
 8008f20:	f77f af3a 	ble.w	8008d98 <_vfprintf_r+0x798>
 8008f24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2bff      	cmp	r3, #255	; 0xff
 8008f2a:	d107      	bne.n	8008f3c <_vfprintf_r+0x93c>
 8008f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008f30:	443b      	add	r3, r7
 8008f32:	fb02 5503 	mla	r5, r2, r3, r5
 8008f36:	e72f      	b.n	8008d98 <_vfprintf_r+0x798>
 8008f38:	4635      	mov	r5, r6
 8008f3a:	e7d9      	b.n	8008ef0 <_vfprintf_r+0x8f0>
 8008f3c:	42b3      	cmp	r3, r6
 8008f3e:	daf5      	bge.n	8008f2c <_vfprintf_r+0x92c>
 8008f40:	1af6      	subs	r6, r6, r3
 8008f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f44:	785b      	ldrb	r3, [r3, #1]
 8008f46:	b133      	cbz	r3, 8008f56 <_vfprintf_r+0x956>
 8008f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f50:	3301      	adds	r3, #1
 8008f52:	930c      	str	r3, [sp, #48]	; 0x30
 8008f54:	e7e6      	b.n	8008f24 <_vfprintf_r+0x924>
 8008f56:	3701      	adds	r7, #1
 8008f58:	e7e4      	b.n	8008f24 <_vfprintf_r+0x924>
 8008f5a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008f5c:	e71c      	b.n	8008d98 <_vfprintf_r+0x798>
 8008f5e:	4632      	mov	r2, r6
 8008f60:	f852 3b04 	ldr.w	r3, [r2], #4
 8008f64:	f01a 0f20 	tst.w	sl, #32
 8008f68:	920d      	str	r2, [sp, #52]	; 0x34
 8008f6a:	d009      	beq.n	8008f80 <_vfprintf_r+0x980>
 8008f6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f6e:	4610      	mov	r0, r2
 8008f70:	17d1      	asrs	r1, r2, #31
 8008f72:	e9c3 0100 	strd	r0, r1, [r3]
 8008f76:	e9dd 630d 	ldrd	r6, r3, [sp, #52]	; 0x34
 8008f7a:	9307      	str	r3, [sp, #28]
 8008f7c:	f7ff bbbe 	b.w	80086fc <_vfprintf_r+0xfc>
 8008f80:	f01a 0f10 	tst.w	sl, #16
 8008f84:	d002      	beq.n	8008f8c <_vfprintf_r+0x98c>
 8008f86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f88:	601a      	str	r2, [r3, #0]
 8008f8a:	e7f4      	b.n	8008f76 <_vfprintf_r+0x976>
 8008f8c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008f90:	d002      	beq.n	8008f98 <_vfprintf_r+0x998>
 8008f92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f94:	801a      	strh	r2, [r3, #0]
 8008f96:	e7ee      	b.n	8008f76 <_vfprintf_r+0x976>
 8008f98:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008f9c:	d0f3      	beq.n	8008f86 <_vfprintf_r+0x986>
 8008f9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008fa0:	701a      	strb	r2, [r3, #0]
 8008fa2:	e7e8      	b.n	8008f76 <_vfprintf_r+0x976>
 8008fa4:	f04a 0a10 	orr.w	sl, sl, #16
 8008fa8:	f01a 0f20 	tst.w	sl, #32
 8008fac:	d01e      	beq.n	8008fec <_vfprintf_r+0x9ec>
 8008fae:	3607      	adds	r6, #7
 8008fb0:	f026 0607 	bic.w	r6, r6, #7
 8008fb4:	f106 0308 	add.w	r3, r6, #8
 8008fb8:	930d      	str	r3, [sp, #52]	; 0x34
 8008fba:	e9d6 6700 	ldrd	r6, r7, [r6]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8008fca:	1c6a      	adds	r2, r5, #1
 8008fcc:	f000 815a 	beq.w	8009284 <_vfprintf_r+0xc84>
 8008fd0:	4652      	mov	r2, sl
 8008fd2:	ea56 0107 	orrs.w	r1, r6, r7
 8008fd6:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8008fda:	f040 8153 	bne.w	8009284 <_vfprintf_r+0xc84>
 8008fde:	2d00      	cmp	r5, #0
 8008fe0:	f000 81d9 	beq.w	8009396 <_vfprintf_r+0xd96>
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	f040 8150 	bne.w	800928a <_vfprintf_r+0xc8a>
 8008fea:	e550      	b.n	8008a8e <_vfprintf_r+0x48e>
 8008fec:	1d33      	adds	r3, r6, #4
 8008fee:	f01a 0f10 	tst.w	sl, #16
 8008ff2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ff4:	d001      	beq.n	8008ffa <_vfprintf_r+0x9fa>
 8008ff6:	6836      	ldr	r6, [r6, #0]
 8008ff8:	e003      	b.n	8009002 <_vfprintf_r+0xa02>
 8008ffa:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008ffe:	d002      	beq.n	8009006 <_vfprintf_r+0xa06>
 8009000:	8836      	ldrh	r6, [r6, #0]
 8009002:	2700      	movs	r7, #0
 8009004:	e7db      	b.n	8008fbe <_vfprintf_r+0x9be>
 8009006:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800900a:	d0f4      	beq.n	8008ff6 <_vfprintf_r+0x9f6>
 800900c:	7836      	ldrb	r6, [r6, #0]
 800900e:	e7f8      	b.n	8009002 <_vfprintf_r+0xa02>
 8009010:	1d33      	adds	r3, r6, #4
 8009012:	930d      	str	r3, [sp, #52]	; 0x34
 8009014:	f647 0330 	movw	r3, #30768	; 0x7830
 8009018:	2278      	movs	r2, #120	; 0x78
 800901a:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 800901e:	4bab      	ldr	r3, [pc, #684]	; (80092cc <_vfprintf_r+0xccc>)
 8009020:	6836      	ldr	r6, [r6, #0]
 8009022:	931c      	str	r3, [sp, #112]	; 0x70
 8009024:	2700      	movs	r7, #0
 8009026:	f04a 0a02 	orr.w	sl, sl, #2
 800902a:	2302      	movs	r3, #2
 800902c:	920a      	str	r2, [sp, #40]	; 0x28
 800902e:	e7c9      	b.n	8008fc4 <_vfprintf_r+0x9c4>
 8009030:	1d33      	adds	r3, r6, #4
 8009032:	930d      	str	r3, [sp, #52]	; 0x34
 8009034:	6833      	ldr	r3, [r6, #0]
 8009036:	2600      	movs	r6, #0
 8009038:	1c69      	adds	r1, r5, #1
 800903a:	9307      	str	r3, [sp, #28]
 800903c:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 8009040:	f000 80e0 	beq.w	8009204 <_vfprintf_r+0xc04>
 8009044:	462a      	mov	r2, r5
 8009046:	4631      	mov	r1, r6
 8009048:	4618      	mov	r0, r3
 800904a:	f002 fa89 	bl	800b560 <memchr>
 800904e:	4680      	mov	r8, r0
 8009050:	2800      	cmp	r0, #0
 8009052:	f43f ad68 	beq.w	8008b26 <_vfprintf_r+0x526>
 8009056:	46b0      	mov	r8, r6
 8009058:	4637      	mov	r7, r6
 800905a:	9b07      	ldr	r3, [sp, #28]
 800905c:	9612      	str	r6, [sp, #72]	; 0x48
 800905e:	1ac5      	subs	r5, r0, r3
 8009060:	960b      	str	r6, [sp, #44]	; 0x2c
 8009062:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009064:	42ab      	cmp	r3, r5
 8009066:	bfb8      	it	lt
 8009068:	462b      	movlt	r3, r5
 800906a:	9315      	str	r3, [sp, #84]	; 0x54
 800906c:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8009070:	b113      	cbz	r3, 8009078 <_vfprintf_r+0xa78>
 8009072:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009074:	3301      	adds	r3, #1
 8009076:	9315      	str	r3, [sp, #84]	; 0x54
 8009078:	f01a 0302 	ands.w	r3, sl, #2
 800907c:	931e      	str	r3, [sp, #120]	; 0x78
 800907e:	bf1e      	ittt	ne
 8009080:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 8009082:	3302      	addne	r3, #2
 8009084:	9315      	strne	r3, [sp, #84]	; 0x54
 8009086:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800908a:	931f      	str	r3, [sp, #124]	; 0x7c
 800908c:	d121      	bne.n	80090d2 <_vfprintf_r+0xad2>
 800908e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009090:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009092:	1a9b      	subs	r3, r3, r2
 8009094:	2b00      	cmp	r3, #0
 8009096:	9319      	str	r3, [sp, #100]	; 0x64
 8009098:	dd1b      	ble.n	80090d2 <_vfprintf_r+0xad2>
 800909a:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 800909e:	9819      	ldr	r0, [sp, #100]	; 0x64
 80090a0:	3201      	adds	r2, #1
 80090a2:	2810      	cmp	r0, #16
 80090a4:	488a      	ldr	r0, [pc, #552]	; (80092d0 <_vfprintf_r+0xcd0>)
 80090a6:	f104 0108 	add.w	r1, r4, #8
 80090aa:	6020      	str	r0, [r4, #0]
 80090ac:	f300 8190 	bgt.w	80093d0 <_vfprintf_r+0xdd0>
 80090b0:	9819      	ldr	r0, [sp, #100]	; 0x64
 80090b2:	2a07      	cmp	r2, #7
 80090b4:	4403      	add	r3, r0
 80090b6:	6060      	str	r0, [r4, #4]
 80090b8:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80090bc:	f340 819d 	ble.w	80093fa <_vfprintf_r+0xdfa>
 80090c0:	aa28      	add	r2, sp, #160	; 0xa0
 80090c2:	4649      	mov	r1, r9
 80090c4:	4658      	mov	r0, fp
 80090c6:	f002 fffc 	bl	800c0c2 <__sprint_r>
 80090ca:	2800      	cmp	r0, #0
 80090cc:	f040 84c7 	bne.w	8009a5e <_vfprintf_r+0x145e>
 80090d0:	ac2b      	add	r4, sp, #172	; 0xac
 80090d2:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 80090d6:	b173      	cbz	r3, 80090f6 <_vfprintf_r+0xaf6>
 80090d8:	f10d 0383 	add.w	r3, sp, #131	; 0x83
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	2301      	movs	r3, #1
 80090e0:	6063      	str	r3, [r4, #4]
 80090e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80090e4:	3301      	adds	r3, #1
 80090e6:	932a      	str	r3, [sp, #168]	; 0xa8
 80090e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80090ea:	3301      	adds	r3, #1
 80090ec:	2b07      	cmp	r3, #7
 80090ee:	9329      	str	r3, [sp, #164]	; 0xa4
 80090f0:	f300 8185 	bgt.w	80093fe <_vfprintf_r+0xdfe>
 80090f4:	3408      	adds	r4, #8
 80090f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80090f8:	b16b      	cbz	r3, 8009116 <_vfprintf_r+0xb16>
 80090fa:	ab21      	add	r3, sp, #132	; 0x84
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	2302      	movs	r3, #2
 8009100:	6063      	str	r3, [r4, #4]
 8009102:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009104:	3302      	adds	r3, #2
 8009106:	932a      	str	r3, [sp, #168]	; 0xa8
 8009108:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800910a:	3301      	adds	r3, #1
 800910c:	2b07      	cmp	r3, #7
 800910e:	9329      	str	r3, [sp, #164]	; 0xa4
 8009110:	f300 817f 	bgt.w	8009412 <_vfprintf_r+0xe12>
 8009114:	3408      	adds	r4, #8
 8009116:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009118:	2b80      	cmp	r3, #128	; 0x80
 800911a:	d121      	bne.n	8009160 <_vfprintf_r+0xb60>
 800911c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800911e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009120:	1a9b      	subs	r3, r3, r2
 8009122:	2b00      	cmp	r3, #0
 8009124:	9319      	str	r3, [sp, #100]	; 0x64
 8009126:	dd1b      	ble.n	8009160 <_vfprintf_r+0xb60>
 8009128:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 800912c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800912e:	3201      	adds	r2, #1
 8009130:	2810      	cmp	r0, #16
 8009132:	4868      	ldr	r0, [pc, #416]	; (80092d4 <_vfprintf_r+0xcd4>)
 8009134:	f104 0108 	add.w	r1, r4, #8
 8009138:	6020      	str	r0, [r4, #0]
 800913a:	f300 8174 	bgt.w	8009426 <_vfprintf_r+0xe26>
 800913e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009140:	2a07      	cmp	r2, #7
 8009142:	4403      	add	r3, r0
 8009144:	6060      	str	r0, [r4, #4]
 8009146:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 800914a:	f340 8181 	ble.w	8009450 <_vfprintf_r+0xe50>
 800914e:	aa28      	add	r2, sp, #160	; 0xa0
 8009150:	4649      	mov	r1, r9
 8009152:	4658      	mov	r0, fp
 8009154:	f002 ffb5 	bl	800c0c2 <__sprint_r>
 8009158:	2800      	cmp	r0, #0
 800915a:	f040 8480 	bne.w	8009a5e <_vfprintf_r+0x145e>
 800915e:	ac2b      	add	r4, sp, #172	; 0xac
 8009160:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009162:	1b5b      	subs	r3, r3, r5
 8009164:	2b00      	cmp	r3, #0
 8009166:	9312      	str	r3, [sp, #72]	; 0x48
 8009168:	dd1b      	ble.n	80091a2 <_vfprintf_r+0xba2>
 800916a:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 800916e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009170:	3201      	adds	r2, #1
 8009172:	2810      	cmp	r0, #16
 8009174:	4857      	ldr	r0, [pc, #348]	; (80092d4 <_vfprintf_r+0xcd4>)
 8009176:	f104 0108 	add.w	r1, r4, #8
 800917a:	6020      	str	r0, [r4, #0]
 800917c:	f300 816a 	bgt.w	8009454 <_vfprintf_r+0xe54>
 8009180:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009182:	2a07      	cmp	r2, #7
 8009184:	4403      	add	r3, r0
 8009186:	6060      	str	r0, [r4, #4]
 8009188:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 800918c:	f340 8177 	ble.w	800947e <_vfprintf_r+0xe7e>
 8009190:	aa28      	add	r2, sp, #160	; 0xa0
 8009192:	4649      	mov	r1, r9
 8009194:	4658      	mov	r0, fp
 8009196:	f002 ff94 	bl	800c0c2 <__sprint_r>
 800919a:	2800      	cmp	r0, #0
 800919c:	f040 845f 	bne.w	8009a5e <_vfprintf_r+0x145e>
 80091a0:	ac2b      	add	r4, sp, #172	; 0xac
 80091a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80091a4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80091a8:	9312      	str	r3, [sp, #72]	; 0x48
 80091aa:	f040 816a 	bne.w	8009482 <_vfprintf_r+0xe82>
 80091ae:	9b07      	ldr	r3, [sp, #28]
 80091b0:	e9c4 3500 	strd	r3, r5, [r4]
 80091b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091b6:	441d      	add	r5, r3
 80091b8:	952a      	str	r5, [sp, #168]	; 0xa8
 80091ba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80091bc:	3301      	adds	r3, #1
 80091be:	2b07      	cmp	r3, #7
 80091c0:	9329      	str	r3, [sp, #164]	; 0xa4
 80091c2:	f300 81a4 	bgt.w	800950e <_vfprintf_r+0xf0e>
 80091c6:	3408      	adds	r4, #8
 80091c8:	f01a 0f04 	tst.w	sl, #4
 80091cc:	f040 8429 	bne.w	8009a22 <_vfprintf_r+0x1422>
 80091d0:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80091d4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80091d6:	428a      	cmp	r2, r1
 80091d8:	bfac      	ite	ge
 80091da:	189b      	addge	r3, r3, r2
 80091dc:	185b      	addlt	r3, r3, r1
 80091de:	9310      	str	r3, [sp, #64]	; 0x40
 80091e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80091e2:	b13b      	cbz	r3, 80091f4 <_vfprintf_r+0xbf4>
 80091e4:	aa28      	add	r2, sp, #160	; 0xa0
 80091e6:	4649      	mov	r1, r9
 80091e8:	4658      	mov	r0, fp
 80091ea:	f002 ff6a 	bl	800c0c2 <__sprint_r>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	f040 8435 	bne.w	8009a5e <_vfprintf_r+0x145e>
 80091f4:	2300      	movs	r3, #0
 80091f6:	9329      	str	r3, [sp, #164]	; 0xa4
 80091f8:	f1b8 0f00 	cmp.w	r8, #0
 80091fc:	f040 844b 	bne.w	8009a96 <_vfprintf_r+0x1496>
 8009200:	ac2b      	add	r4, sp, #172	; 0xac
 8009202:	e6b8      	b.n	8008f76 <_vfprintf_r+0x976>
 8009204:	9807      	ldr	r0, [sp, #28]
 8009206:	f7f6 ffa3 	bl	8000150 <strlen>
 800920a:	46b0      	mov	r8, r6
 800920c:	4605      	mov	r5, r0
 800920e:	e48a      	b.n	8008b26 <_vfprintf_r+0x526>
 8009210:	f04a 0a10 	orr.w	sl, sl, #16
 8009214:	f01a 0f20 	tst.w	sl, #32
 8009218:	d009      	beq.n	800922e <_vfprintf_r+0xc2e>
 800921a:	3607      	adds	r6, #7
 800921c:	f026 0607 	bic.w	r6, r6, #7
 8009220:	f106 0308 	add.w	r3, r6, #8
 8009224:	930d      	str	r3, [sp, #52]	; 0x34
 8009226:	e9d6 6700 	ldrd	r6, r7, [r6]
 800922a:	2301      	movs	r3, #1
 800922c:	e6ca      	b.n	8008fc4 <_vfprintf_r+0x9c4>
 800922e:	1d33      	adds	r3, r6, #4
 8009230:	f01a 0f10 	tst.w	sl, #16
 8009234:	930d      	str	r3, [sp, #52]	; 0x34
 8009236:	d001      	beq.n	800923c <_vfprintf_r+0xc3c>
 8009238:	6836      	ldr	r6, [r6, #0]
 800923a:	e003      	b.n	8009244 <_vfprintf_r+0xc44>
 800923c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009240:	d002      	beq.n	8009248 <_vfprintf_r+0xc48>
 8009242:	8836      	ldrh	r6, [r6, #0]
 8009244:	2700      	movs	r7, #0
 8009246:	e7f0      	b.n	800922a <_vfprintf_r+0xc2a>
 8009248:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800924c:	d0f4      	beq.n	8009238 <_vfprintf_r+0xc38>
 800924e:	7836      	ldrb	r6, [r6, #0]
 8009250:	e7f8      	b.n	8009244 <_vfprintf_r+0xc44>
 8009252:	4b1e      	ldr	r3, [pc, #120]	; (80092cc <_vfprintf_r+0xccc>)
 8009254:	f7ff bb4d 	b.w	80088f2 <_vfprintf_r+0x2f2>
 8009258:	1d33      	adds	r3, r6, #4
 800925a:	f01a 0f10 	tst.w	sl, #16
 800925e:	930d      	str	r3, [sp, #52]	; 0x34
 8009260:	d001      	beq.n	8009266 <_vfprintf_r+0xc66>
 8009262:	6836      	ldr	r6, [r6, #0]
 8009264:	e003      	b.n	800926e <_vfprintf_r+0xc6e>
 8009266:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800926a:	d003      	beq.n	8009274 <_vfprintf_r+0xc74>
 800926c:	8836      	ldrh	r6, [r6, #0]
 800926e:	2700      	movs	r7, #0
 8009270:	f7ff bb4c 	b.w	800890c <_vfprintf_r+0x30c>
 8009274:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009278:	d0f3      	beq.n	8009262 <_vfprintf_r+0xc62>
 800927a:	7836      	ldrb	r6, [r6, #0]
 800927c:	e7f7      	b.n	800926e <_vfprintf_r+0xc6e>
 800927e:	4652      	mov	r2, sl
 8009280:	2301      	movs	r3, #1
 8009282:	e6a6      	b.n	8008fd2 <_vfprintf_r+0x9d2>
 8009284:	2b01      	cmp	r3, #1
 8009286:	f43f abfd 	beq.w	8008a84 <_vfprintf_r+0x484>
 800928a:	2b02      	cmp	r3, #2
 800928c:	ab54      	add	r3, sp, #336	; 0x150
 800928e:	d06f      	beq.n	8009370 <_vfprintf_r+0xd70>
 8009290:	08f1      	lsrs	r1, r6, #3
 8009292:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8009296:	1e5a      	subs	r2, r3, #1
 8009298:	08f8      	lsrs	r0, r7, #3
 800929a:	9207      	str	r2, [sp, #28]
 800929c:	4607      	mov	r7, r0
 800929e:	f006 0207 	and.w	r2, r6, #7
 80092a2:	460e      	mov	r6, r1
 80092a4:	3230      	adds	r2, #48	; 0x30
 80092a6:	ea56 0107 	orrs.w	r1, r6, r7
 80092aa:	f803 2c01 	strb.w	r2, [r3, #-1]
 80092ae:	d10b      	bne.n	80092c8 <_vfprintf_r+0xcc8>
 80092b0:	f01a 0f01 	tst.w	sl, #1
 80092b4:	d04e      	beq.n	8009354 <_vfprintf_r+0xd54>
 80092b6:	2a30      	cmp	r2, #48	; 0x30
 80092b8:	d04c      	beq.n	8009354 <_vfprintf_r+0xd54>
 80092ba:	2230      	movs	r2, #48	; 0x30
 80092bc:	9907      	ldr	r1, [sp, #28]
 80092be:	3b02      	subs	r3, #2
 80092c0:	f801 2c01 	strb.w	r2, [r1, #-1]
 80092c4:	9307      	str	r3, [sp, #28]
 80092c6:	e045      	b.n	8009354 <_vfprintf_r+0xd54>
 80092c8:	9b07      	ldr	r3, [sp, #28]
 80092ca:	e7e1      	b.n	8009290 <_vfprintf_r+0xc90>
 80092cc:	0800c7c4 	.word	0x0800c7c4
 80092d0:	0800c808 	.word	0x0800c808
 80092d4:	0800c818 	.word	0x0800c818
 80092d8:	2300      	movs	r3, #0
 80092da:	9308      	str	r3, [sp, #32]
 80092dc:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 80092e0:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 80092e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80092e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80092ea:	9307      	str	r3, [sp, #28]
 80092ec:	220a      	movs	r2, #10
 80092ee:	2300      	movs	r3, #0
 80092f0:	4630      	mov	r0, r6
 80092f2:	4639      	mov	r1, r7
 80092f4:	f7f7 fbc8 	bl	8000a88 <__aeabi_uldivmod>
 80092f8:	9b08      	ldr	r3, [sp, #32]
 80092fa:	3230      	adds	r2, #48	; 0x30
 80092fc:	3301      	adds	r3, #1
 80092fe:	9308      	str	r3, [sp, #32]
 8009300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009302:	f808 2c01 	strb.w	r2, [r8, #-1]
 8009306:	b1d3      	cbz	r3, 800933e <_vfprintf_r+0xd3e>
 8009308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800930a:	9a08      	ldr	r2, [sp, #32]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	429a      	cmp	r2, r3
 8009310:	d115      	bne.n	800933e <_vfprintf_r+0xd3e>
 8009312:	2aff      	cmp	r2, #255	; 0xff
 8009314:	d013      	beq.n	800933e <_vfprintf_r+0xd3e>
 8009316:	2f00      	cmp	r7, #0
 8009318:	bf08      	it	eq
 800931a:	2e0a      	cmpeq	r6, #10
 800931c:	d30f      	bcc.n	800933e <_vfprintf_r+0xd3e>
 800931e:	9b07      	ldr	r3, [sp, #28]
 8009320:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009322:	991d      	ldr	r1, [sp, #116]	; 0x74
 8009324:	1a9b      	subs	r3, r3, r2
 8009326:	4618      	mov	r0, r3
 8009328:	9307      	str	r3, [sp, #28]
 800932a:	f002 fe30 	bl	800bf8e <strncpy>
 800932e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009330:	785b      	ldrb	r3, [r3, #1]
 8009332:	b11b      	cbz	r3, 800933c <_vfprintf_r+0xd3c>
 8009334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009336:	3301      	adds	r3, #1
 8009338:	930c      	str	r3, [sp, #48]	; 0x30
 800933a:	2300      	movs	r3, #0
 800933c:	9308      	str	r3, [sp, #32]
 800933e:	2300      	movs	r3, #0
 8009340:	4630      	mov	r0, r6
 8009342:	4639      	mov	r1, r7
 8009344:	220a      	movs	r2, #10
 8009346:	f7f7 fb9f 	bl	8000a88 <__aeabi_uldivmod>
 800934a:	4606      	mov	r6, r0
 800934c:	460f      	mov	r7, r1
 800934e:	ea56 0307 	orrs.w	r3, r6, r7
 8009352:	d10a      	bne.n	800936a <_vfprintf_r+0xd6a>
 8009354:	f04f 0800 	mov.w	r8, #0
 8009358:	9a07      	ldr	r2, [sp, #28]
 800935a:	ab54      	add	r3, sp, #336	; 0x150
 800935c:	9512      	str	r5, [sp, #72]	; 0x48
 800935e:	1a9d      	subs	r5, r3, r2
 8009360:	4647      	mov	r7, r8
 8009362:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8009366:	4646      	mov	r6, r8
 8009368:	e67b      	b.n	8009062 <_vfprintf_r+0xa62>
 800936a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800936e:	e7ba      	b.n	80092e6 <_vfprintf_r+0xce6>
 8009370:	9307      	str	r3, [sp, #28]
 8009372:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009374:	f006 030f 	and.w	r3, r6, #15
 8009378:	5cd3      	ldrb	r3, [r2, r3]
 800937a:	9a07      	ldr	r2, [sp, #28]
 800937c:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8009380:	0933      	lsrs	r3, r6, #4
 8009382:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8009386:	9207      	str	r2, [sp, #28]
 8009388:	093a      	lsrs	r2, r7, #4
 800938a:	461e      	mov	r6, r3
 800938c:	4617      	mov	r7, r2
 800938e:	ea56 0307 	orrs.w	r3, r6, r7
 8009392:	d1ee      	bne.n	8009372 <_vfprintf_r+0xd72>
 8009394:	e7de      	b.n	8009354 <_vfprintf_r+0xd54>
 8009396:	b94b      	cbnz	r3, 80093ac <_vfprintf_r+0xdac>
 8009398:	ab54      	add	r3, sp, #336	; 0x150
 800939a:	07d6      	lsls	r6, r2, #31
 800939c:	9307      	str	r3, [sp, #28]
 800939e:	d5d9      	bpl.n	8009354 <_vfprintf_r+0xd54>
 80093a0:	2330      	movs	r3, #48	; 0x30
 80093a2:	9a07      	ldr	r2, [sp, #28]
 80093a4:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80093a8:	4613      	mov	r3, r2
 80093aa:	e78b      	b.n	80092c4 <_vfprintf_r+0xcc4>
 80093ac:	ab54      	add	r3, sp, #336	; 0x150
 80093ae:	e789      	b.n	80092c4 <_vfprintf_r+0xcc4>
 80093b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f000 8375 	beq.w	8009aa2 <_vfprintf_r+0x14a2>
 80093b8:	2000      	movs	r0, #0
 80093ba:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 80093be:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 80093c2:	960d      	str	r6, [sp, #52]	; 0x34
 80093c4:	f7ff bb3b 	b.w	8008a3e <_vfprintf_r+0x43e>
 80093c8:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80093cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80093ce:	e4ed      	b.n	8008dac <_vfprintf_r+0x7ac>
 80093d0:	2010      	movs	r0, #16
 80093d2:	2a07      	cmp	r2, #7
 80093d4:	4403      	add	r3, r0
 80093d6:	6060      	str	r0, [r4, #4]
 80093d8:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80093dc:	dd08      	ble.n	80093f0 <_vfprintf_r+0xdf0>
 80093de:	aa28      	add	r2, sp, #160	; 0xa0
 80093e0:	4649      	mov	r1, r9
 80093e2:	4658      	mov	r0, fp
 80093e4:	f002 fe6d 	bl	800c0c2 <__sprint_r>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	f040 8338 	bne.w	8009a5e <_vfprintf_r+0x145e>
 80093ee:	a92b      	add	r1, sp, #172	; 0xac
 80093f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80093f2:	460c      	mov	r4, r1
 80093f4:	3b10      	subs	r3, #16
 80093f6:	9319      	str	r3, [sp, #100]	; 0x64
 80093f8:	e64f      	b.n	800909a <_vfprintf_r+0xa9a>
 80093fa:	460c      	mov	r4, r1
 80093fc:	e669      	b.n	80090d2 <_vfprintf_r+0xad2>
 80093fe:	aa28      	add	r2, sp, #160	; 0xa0
 8009400:	4649      	mov	r1, r9
 8009402:	4658      	mov	r0, fp
 8009404:	f002 fe5d 	bl	800c0c2 <__sprint_r>
 8009408:	2800      	cmp	r0, #0
 800940a:	f040 8328 	bne.w	8009a5e <_vfprintf_r+0x145e>
 800940e:	ac2b      	add	r4, sp, #172	; 0xac
 8009410:	e671      	b.n	80090f6 <_vfprintf_r+0xaf6>
 8009412:	aa28      	add	r2, sp, #160	; 0xa0
 8009414:	4649      	mov	r1, r9
 8009416:	4658      	mov	r0, fp
 8009418:	f002 fe53 	bl	800c0c2 <__sprint_r>
 800941c:	2800      	cmp	r0, #0
 800941e:	f040 831e 	bne.w	8009a5e <_vfprintf_r+0x145e>
 8009422:	ac2b      	add	r4, sp, #172	; 0xac
 8009424:	e677      	b.n	8009116 <_vfprintf_r+0xb16>
 8009426:	2010      	movs	r0, #16
 8009428:	2a07      	cmp	r2, #7
 800942a:	4403      	add	r3, r0
 800942c:	6060      	str	r0, [r4, #4]
 800942e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8009432:	dd08      	ble.n	8009446 <_vfprintf_r+0xe46>
 8009434:	aa28      	add	r2, sp, #160	; 0xa0
 8009436:	4649      	mov	r1, r9
 8009438:	4658      	mov	r0, fp
 800943a:	f002 fe42 	bl	800c0c2 <__sprint_r>
 800943e:	2800      	cmp	r0, #0
 8009440:	f040 830d 	bne.w	8009a5e <_vfprintf_r+0x145e>
 8009444:	a92b      	add	r1, sp, #172	; 0xac
 8009446:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009448:	460c      	mov	r4, r1
 800944a:	3b10      	subs	r3, #16
 800944c:	9319      	str	r3, [sp, #100]	; 0x64
 800944e:	e66b      	b.n	8009128 <_vfprintf_r+0xb28>
 8009450:	460c      	mov	r4, r1
 8009452:	e685      	b.n	8009160 <_vfprintf_r+0xb60>
 8009454:	2010      	movs	r0, #16
 8009456:	2a07      	cmp	r2, #7
 8009458:	4403      	add	r3, r0
 800945a:	6060      	str	r0, [r4, #4]
 800945c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8009460:	dd08      	ble.n	8009474 <_vfprintf_r+0xe74>
 8009462:	aa28      	add	r2, sp, #160	; 0xa0
 8009464:	4649      	mov	r1, r9
 8009466:	4658      	mov	r0, fp
 8009468:	f002 fe2b 	bl	800c0c2 <__sprint_r>
 800946c:	2800      	cmp	r0, #0
 800946e:	f040 82f6 	bne.w	8009a5e <_vfprintf_r+0x145e>
 8009472:	a92b      	add	r1, sp, #172	; 0xac
 8009474:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009476:	460c      	mov	r4, r1
 8009478:	3b10      	subs	r3, #16
 800947a:	9312      	str	r3, [sp, #72]	; 0x48
 800947c:	e675      	b.n	800916a <_vfprintf_r+0xb6a>
 800947e:	460c      	mov	r4, r1
 8009480:	e68f      	b.n	80091a2 <_vfprintf_r+0xba2>
 8009482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009484:	2b65      	cmp	r3, #101	; 0x65
 8009486:	f340 8237 	ble.w	80098f8 <_vfprintf_r+0x12f8>
 800948a:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 800948e:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8009492:	f7f7 fa89 	bl	80009a8 <__aeabi_dcmpeq>
 8009496:	2800      	cmp	r0, #0
 8009498:	d069      	beq.n	800956e <_vfprintf_r+0xf6e>
 800949a:	4b6f      	ldr	r3, [pc, #444]	; (8009658 <_vfprintf_r+0x1058>)
 800949c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800949e:	6023      	str	r3, [r4, #0]
 80094a0:	2301      	movs	r3, #1
 80094a2:	441d      	add	r5, r3
 80094a4:	6063      	str	r3, [r4, #4]
 80094a6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80094a8:	952a      	str	r5, [sp, #168]	; 0xa8
 80094aa:	3301      	adds	r3, #1
 80094ac:	2b07      	cmp	r3, #7
 80094ae:	9329      	str	r3, [sp, #164]	; 0xa4
 80094b0:	dc37      	bgt.n	8009522 <_vfprintf_r+0xf22>
 80094b2:	3408      	adds	r4, #8
 80094b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094b6:	9a08      	ldr	r2, [sp, #32]
 80094b8:	4293      	cmp	r3, r2
 80094ba:	db03      	blt.n	80094c4 <_vfprintf_r+0xec4>
 80094bc:	f01a 0f01 	tst.w	sl, #1
 80094c0:	f43f ae82 	beq.w	80091c8 <_vfprintf_r+0xbc8>
 80094c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80094c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094cc:	6063      	str	r3, [r4, #4]
 80094ce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80094d0:	4413      	add	r3, r2
 80094d2:	932a      	str	r3, [sp, #168]	; 0xa8
 80094d4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80094d6:	3301      	adds	r3, #1
 80094d8:	2b07      	cmp	r3, #7
 80094da:	9329      	str	r3, [sp, #164]	; 0xa4
 80094dc:	dc2b      	bgt.n	8009536 <_vfprintf_r+0xf36>
 80094de:	3408      	adds	r4, #8
 80094e0:	9b08      	ldr	r3, [sp, #32]
 80094e2:	1e5d      	subs	r5, r3, #1
 80094e4:	2d00      	cmp	r5, #0
 80094e6:	f77f ae6f 	ble.w	80091c8 <_vfprintf_r+0xbc8>
 80094ea:	2710      	movs	r7, #16
 80094ec:	4e5b      	ldr	r6, [pc, #364]	; (800965c <_vfprintf_r+0x105c>)
 80094ee:	2d10      	cmp	r5, #16
 80094f0:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80094f4:	f104 0108 	add.w	r1, r4, #8
 80094f8:	f103 0301 	add.w	r3, r3, #1
 80094fc:	6026      	str	r6, [r4, #0]
 80094fe:	dc24      	bgt.n	800954a <_vfprintf_r+0xf4a>
 8009500:	6065      	str	r5, [r4, #4]
 8009502:	2b07      	cmp	r3, #7
 8009504:	4415      	add	r5, r2
 8009506:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 800950a:	f340 8287 	ble.w	8009a1c <_vfprintf_r+0x141c>
 800950e:	aa28      	add	r2, sp, #160	; 0xa0
 8009510:	4649      	mov	r1, r9
 8009512:	4658      	mov	r0, fp
 8009514:	f002 fdd5 	bl	800c0c2 <__sprint_r>
 8009518:	2800      	cmp	r0, #0
 800951a:	f040 82a0 	bne.w	8009a5e <_vfprintf_r+0x145e>
 800951e:	ac2b      	add	r4, sp, #172	; 0xac
 8009520:	e652      	b.n	80091c8 <_vfprintf_r+0xbc8>
 8009522:	aa28      	add	r2, sp, #160	; 0xa0
 8009524:	4649      	mov	r1, r9
 8009526:	4658      	mov	r0, fp
 8009528:	f002 fdcb 	bl	800c0c2 <__sprint_r>
 800952c:	2800      	cmp	r0, #0
 800952e:	f040 8296 	bne.w	8009a5e <_vfprintf_r+0x145e>
 8009532:	ac2b      	add	r4, sp, #172	; 0xac
 8009534:	e7be      	b.n	80094b4 <_vfprintf_r+0xeb4>
 8009536:	aa28      	add	r2, sp, #160	; 0xa0
 8009538:	4649      	mov	r1, r9
 800953a:	4658      	mov	r0, fp
 800953c:	f002 fdc1 	bl	800c0c2 <__sprint_r>
 8009540:	2800      	cmp	r0, #0
 8009542:	f040 828c 	bne.w	8009a5e <_vfprintf_r+0x145e>
 8009546:	ac2b      	add	r4, sp, #172	; 0xac
 8009548:	e7ca      	b.n	80094e0 <_vfprintf_r+0xee0>
 800954a:	3210      	adds	r2, #16
 800954c:	2b07      	cmp	r3, #7
 800954e:	6067      	str	r7, [r4, #4]
 8009550:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8009554:	dd08      	ble.n	8009568 <_vfprintf_r+0xf68>
 8009556:	aa28      	add	r2, sp, #160	; 0xa0
 8009558:	4649      	mov	r1, r9
 800955a:	4658      	mov	r0, fp
 800955c:	f002 fdb1 	bl	800c0c2 <__sprint_r>
 8009560:	2800      	cmp	r0, #0
 8009562:	f040 827c 	bne.w	8009a5e <_vfprintf_r+0x145e>
 8009566:	a92b      	add	r1, sp, #172	; 0xac
 8009568:	3d10      	subs	r5, #16
 800956a:	460c      	mov	r4, r1
 800956c:	e7bf      	b.n	80094ee <_vfprintf_r+0xeee>
 800956e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009570:	2b00      	cmp	r3, #0
 8009572:	dc75      	bgt.n	8009660 <_vfprintf_r+0x1060>
 8009574:	4b38      	ldr	r3, [pc, #224]	; (8009658 <_vfprintf_r+0x1058>)
 8009576:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	2301      	movs	r3, #1
 800957c:	441d      	add	r5, r3
 800957e:	6063      	str	r3, [r4, #4]
 8009580:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009582:	952a      	str	r5, [sp, #168]	; 0xa8
 8009584:	3301      	adds	r3, #1
 8009586:	2b07      	cmp	r3, #7
 8009588:	9329      	str	r3, [sp, #164]	; 0xa4
 800958a:	dc3e      	bgt.n	800960a <_vfprintf_r+0x100a>
 800958c:	3408      	adds	r4, #8
 800958e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009590:	b92b      	cbnz	r3, 800959e <_vfprintf_r+0xf9e>
 8009592:	9b08      	ldr	r3, [sp, #32]
 8009594:	b91b      	cbnz	r3, 800959e <_vfprintf_r+0xf9e>
 8009596:	f01a 0f01 	tst.w	sl, #1
 800959a:	f43f ae15 	beq.w	80091c8 <_vfprintf_r+0xbc8>
 800959e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80095a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095a2:	6023      	str	r3, [r4, #0]
 80095a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095a6:	6063      	str	r3, [r4, #4]
 80095a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80095aa:	4413      	add	r3, r2
 80095ac:	932a      	str	r3, [sp, #168]	; 0xa8
 80095ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80095b0:	3301      	adds	r3, #1
 80095b2:	2b07      	cmp	r3, #7
 80095b4:	9329      	str	r3, [sp, #164]	; 0xa4
 80095b6:	dc32      	bgt.n	800961e <_vfprintf_r+0x101e>
 80095b8:	3408      	adds	r4, #8
 80095ba:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80095bc:	2d00      	cmp	r5, #0
 80095be:	da1b      	bge.n	80095f8 <_vfprintf_r+0xff8>
 80095c0:	4623      	mov	r3, r4
 80095c2:	2710      	movs	r7, #16
 80095c4:	4e25      	ldr	r6, [pc, #148]	; (800965c <_vfprintf_r+0x105c>)
 80095c6:	426d      	negs	r5, r5
 80095c8:	2d10      	cmp	r5, #16
 80095ca:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 80095ce:	f104 0408 	add.w	r4, r4, #8
 80095d2:	f102 0201 	add.w	r2, r2, #1
 80095d6:	601e      	str	r6, [r3, #0]
 80095d8:	dc2b      	bgt.n	8009632 <_vfprintf_r+0x1032>
 80095da:	605d      	str	r5, [r3, #4]
 80095dc:	2a07      	cmp	r2, #7
 80095de:	440d      	add	r5, r1
 80095e0:	e9cd 2529 	strd	r2, r5, [sp, #164]	; 0xa4
 80095e4:	dd08      	ble.n	80095f8 <_vfprintf_r+0xff8>
 80095e6:	aa28      	add	r2, sp, #160	; 0xa0
 80095e8:	4649      	mov	r1, r9
 80095ea:	4658      	mov	r0, fp
 80095ec:	f002 fd69 	bl	800c0c2 <__sprint_r>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	f040 8234 	bne.w	8009a5e <_vfprintf_r+0x145e>
 80095f6:	ac2b      	add	r4, sp, #172	; 0xac
 80095f8:	9b07      	ldr	r3, [sp, #28]
 80095fa:	9a08      	ldr	r2, [sp, #32]
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	9b08      	ldr	r3, [sp, #32]
 8009600:	6063      	str	r3, [r4, #4]
 8009602:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009604:	4413      	add	r3, r2
 8009606:	932a      	str	r3, [sp, #168]	; 0xa8
 8009608:	e5d7      	b.n	80091ba <_vfprintf_r+0xbba>
 800960a:	aa28      	add	r2, sp, #160	; 0xa0
 800960c:	4649      	mov	r1, r9
 800960e:	4658      	mov	r0, fp
 8009610:	f002 fd57 	bl	800c0c2 <__sprint_r>
 8009614:	2800      	cmp	r0, #0
 8009616:	f040 8222 	bne.w	8009a5e <_vfprintf_r+0x145e>
 800961a:	ac2b      	add	r4, sp, #172	; 0xac
 800961c:	e7b7      	b.n	800958e <_vfprintf_r+0xf8e>
 800961e:	aa28      	add	r2, sp, #160	; 0xa0
 8009620:	4649      	mov	r1, r9
 8009622:	4658      	mov	r0, fp
 8009624:	f002 fd4d 	bl	800c0c2 <__sprint_r>
 8009628:	2800      	cmp	r0, #0
 800962a:	f040 8218 	bne.w	8009a5e <_vfprintf_r+0x145e>
 800962e:	ac2b      	add	r4, sp, #172	; 0xac
 8009630:	e7c3      	b.n	80095ba <_vfprintf_r+0xfba>
 8009632:	3110      	adds	r1, #16
 8009634:	2a07      	cmp	r2, #7
 8009636:	605f      	str	r7, [r3, #4]
 8009638:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 800963c:	dd08      	ble.n	8009650 <_vfprintf_r+0x1050>
 800963e:	aa28      	add	r2, sp, #160	; 0xa0
 8009640:	4649      	mov	r1, r9
 8009642:	4658      	mov	r0, fp
 8009644:	f002 fd3d 	bl	800c0c2 <__sprint_r>
 8009648:	2800      	cmp	r0, #0
 800964a:	f040 8208 	bne.w	8009a5e <_vfprintf_r+0x145e>
 800964e:	ac2b      	add	r4, sp, #172	; 0xac
 8009650:	3d10      	subs	r5, #16
 8009652:	4623      	mov	r3, r4
 8009654:	e7b8      	b.n	80095c8 <_vfprintf_r+0xfc8>
 8009656:	bf00      	nop
 8009658:	0800c7e6 	.word	0x0800c7e6
 800965c:	0800c818 	.word	0x0800c818
 8009660:	9b08      	ldr	r3, [sp, #32]
 8009662:	42b3      	cmp	r3, r6
 8009664:	bfa8      	it	ge
 8009666:	4633      	movge	r3, r6
 8009668:	2b00      	cmp	r3, #0
 800966a:	461d      	mov	r5, r3
 800966c:	dd0c      	ble.n	8009688 <_vfprintf_r+0x1088>
 800966e:	9b07      	ldr	r3, [sp, #28]
 8009670:	e9c4 3500 	strd	r3, r5, [r4]
 8009674:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009676:	442b      	add	r3, r5
 8009678:	932a      	str	r3, [sp, #168]	; 0xa8
 800967a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800967c:	3301      	adds	r3, #1
 800967e:	2b07      	cmp	r3, #7
 8009680:	9329      	str	r3, [sp, #164]	; 0xa4
 8009682:	f300 8087 	bgt.w	8009794 <_vfprintf_r+0x1194>
 8009686:	3408      	adds	r4, #8
 8009688:	2d00      	cmp	r5, #0
 800968a:	bfb4      	ite	lt
 800968c:	4635      	movlt	r5, r6
 800968e:	1b75      	subge	r5, r6, r5
 8009690:	2d00      	cmp	r5, #0
 8009692:	dd19      	ble.n	80096c8 <_vfprintf_r+0x10c8>
 8009694:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8009698:	4896      	ldr	r0, [pc, #600]	; (80098f4 <_vfprintf_r+0x12f4>)
 800969a:	2d10      	cmp	r5, #16
 800969c:	f103 0301 	add.w	r3, r3, #1
 80096a0:	f104 0108 	add.w	r1, r4, #8
 80096a4:	6020      	str	r0, [r4, #0]
 80096a6:	dc7f      	bgt.n	80097a8 <_vfprintf_r+0x11a8>
 80096a8:	6065      	str	r5, [r4, #4]
 80096aa:	2b07      	cmp	r3, #7
 80096ac:	4415      	add	r5, r2
 80096ae:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80096b2:	f340 808c 	ble.w	80097ce <_vfprintf_r+0x11ce>
 80096b6:	aa28      	add	r2, sp, #160	; 0xa0
 80096b8:	4649      	mov	r1, r9
 80096ba:	4658      	mov	r0, fp
 80096bc:	f002 fd01 	bl	800c0c2 <__sprint_r>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	f040 81cc 	bne.w	8009a5e <_vfprintf_r+0x145e>
 80096c6:	ac2b      	add	r4, sp, #172	; 0xac
 80096c8:	9b07      	ldr	r3, [sp, #28]
 80096ca:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 80096ce:	441e      	add	r6, r3
 80096d0:	d00a      	beq.n	80096e8 <_vfprintf_r+0x10e8>
 80096d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d17c      	bne.n	80097d2 <_vfprintf_r+0x11d2>
 80096d8:	2f00      	cmp	r7, #0
 80096da:	d17c      	bne.n	80097d6 <_vfprintf_r+0x11d6>
 80096dc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80096e0:	4413      	add	r3, r2
 80096e2:	429e      	cmp	r6, r3
 80096e4:	bf28      	it	cs
 80096e6:	461e      	movcs	r6, r3
 80096e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096ea:	9a08      	ldr	r2, [sp, #32]
 80096ec:	4293      	cmp	r3, r2
 80096ee:	db02      	blt.n	80096f6 <_vfprintf_r+0x10f6>
 80096f0:	f01a 0f01 	tst.w	sl, #1
 80096f4:	d00e      	beq.n	8009714 <_vfprintf_r+0x1114>
 80096f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80096f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096fa:	6023      	str	r3, [r4, #0]
 80096fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096fe:	6063      	str	r3, [r4, #4]
 8009700:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009702:	4413      	add	r3, r2
 8009704:	932a      	str	r3, [sp, #168]	; 0xa8
 8009706:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009708:	3301      	adds	r3, #1
 800970a:	2b07      	cmp	r3, #7
 800970c:	9329      	str	r3, [sp, #164]	; 0xa4
 800970e:	f300 80dd 	bgt.w	80098cc <_vfprintf_r+0x12cc>
 8009712:	3408      	adds	r4, #8
 8009714:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8009716:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800971a:	4413      	add	r3, r2
 800971c:	1b55      	subs	r5, r2, r5
 800971e:	1b9b      	subs	r3, r3, r6
 8009720:	429d      	cmp	r5, r3
 8009722:	bfa8      	it	ge
 8009724:	461d      	movge	r5, r3
 8009726:	2d00      	cmp	r5, #0
 8009728:	dd0b      	ble.n	8009742 <_vfprintf_r+0x1142>
 800972a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800972c:	e9c4 6500 	strd	r6, r5, [r4]
 8009730:	442b      	add	r3, r5
 8009732:	932a      	str	r3, [sp, #168]	; 0xa8
 8009734:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009736:	3301      	adds	r3, #1
 8009738:	2b07      	cmp	r3, #7
 800973a:	9329      	str	r3, [sp, #164]	; 0xa4
 800973c:	f300 80d0 	bgt.w	80098e0 <_vfprintf_r+0x12e0>
 8009740:	3408      	adds	r4, #8
 8009742:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009744:	9a08      	ldr	r2, [sp, #32]
 8009746:	2d00      	cmp	r5, #0
 8009748:	eba2 0303 	sub.w	r3, r2, r3
 800974c:	bfb4      	ite	lt
 800974e:	461d      	movlt	r5, r3
 8009750:	1b5d      	subge	r5, r3, r5
 8009752:	2d00      	cmp	r5, #0
 8009754:	f77f ad38 	ble.w	80091c8 <_vfprintf_r+0xbc8>
 8009758:	2710      	movs	r7, #16
 800975a:	4e66      	ldr	r6, [pc, #408]	; (80098f4 <_vfprintf_r+0x12f4>)
 800975c:	2d10      	cmp	r5, #16
 800975e:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8009762:	f104 0108 	add.w	r1, r4, #8
 8009766:	f103 0301 	add.w	r3, r3, #1
 800976a:	6026      	str	r6, [r4, #0]
 800976c:	f77f aec8 	ble.w	8009500 <_vfprintf_r+0xf00>
 8009770:	3210      	adds	r2, #16
 8009772:	2b07      	cmp	r3, #7
 8009774:	6067      	str	r7, [r4, #4]
 8009776:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 800977a:	dd08      	ble.n	800978e <_vfprintf_r+0x118e>
 800977c:	aa28      	add	r2, sp, #160	; 0xa0
 800977e:	4649      	mov	r1, r9
 8009780:	4658      	mov	r0, fp
 8009782:	f002 fc9e 	bl	800c0c2 <__sprint_r>
 8009786:	2800      	cmp	r0, #0
 8009788:	f040 8169 	bne.w	8009a5e <_vfprintf_r+0x145e>
 800978c:	a92b      	add	r1, sp, #172	; 0xac
 800978e:	3d10      	subs	r5, #16
 8009790:	460c      	mov	r4, r1
 8009792:	e7e3      	b.n	800975c <_vfprintf_r+0x115c>
 8009794:	aa28      	add	r2, sp, #160	; 0xa0
 8009796:	4649      	mov	r1, r9
 8009798:	4658      	mov	r0, fp
 800979a:	f002 fc92 	bl	800c0c2 <__sprint_r>
 800979e:	2800      	cmp	r0, #0
 80097a0:	f040 815d 	bne.w	8009a5e <_vfprintf_r+0x145e>
 80097a4:	ac2b      	add	r4, sp, #172	; 0xac
 80097a6:	e76f      	b.n	8009688 <_vfprintf_r+0x1088>
 80097a8:	2010      	movs	r0, #16
 80097aa:	2b07      	cmp	r3, #7
 80097ac:	4402      	add	r2, r0
 80097ae:	6060      	str	r0, [r4, #4]
 80097b0:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80097b4:	dd08      	ble.n	80097c8 <_vfprintf_r+0x11c8>
 80097b6:	aa28      	add	r2, sp, #160	; 0xa0
 80097b8:	4649      	mov	r1, r9
 80097ba:	4658      	mov	r0, fp
 80097bc:	f002 fc81 	bl	800c0c2 <__sprint_r>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	f040 814c 	bne.w	8009a5e <_vfprintf_r+0x145e>
 80097c6:	a92b      	add	r1, sp, #172	; 0xac
 80097c8:	3d10      	subs	r5, #16
 80097ca:	460c      	mov	r4, r1
 80097cc:	e762      	b.n	8009694 <_vfprintf_r+0x1094>
 80097ce:	460c      	mov	r4, r1
 80097d0:	e77a      	b.n	80096c8 <_vfprintf_r+0x10c8>
 80097d2:	2f00      	cmp	r7, #0
 80097d4:	d04a      	beq.n	800986c <_vfprintf_r+0x126c>
 80097d6:	3f01      	subs	r7, #1
 80097d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80097e0:	6063      	str	r3, [r4, #4]
 80097e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80097e4:	4413      	add	r3, r2
 80097e6:	932a      	str	r3, [sp, #168]	; 0xa8
 80097e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80097ea:	3301      	adds	r3, #1
 80097ec:	2b07      	cmp	r3, #7
 80097ee:	9329      	str	r3, [sp, #164]	; 0xa4
 80097f0:	dc43      	bgt.n	800987a <_vfprintf_r+0x127a>
 80097f2:	3408      	adds	r4, #8
 80097f4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80097f8:	4413      	add	r3, r2
 80097fa:	1b9a      	subs	r2, r3, r6
 80097fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	4293      	cmp	r3, r2
 8009802:	bfa8      	it	ge
 8009804:	4613      	movge	r3, r2
 8009806:	2b00      	cmp	r3, #0
 8009808:	461d      	mov	r5, r3
 800980a:	dd0a      	ble.n	8009822 <_vfprintf_r+0x1222>
 800980c:	e9c4 6300 	strd	r6, r3, [r4]
 8009810:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009812:	442b      	add	r3, r5
 8009814:	932a      	str	r3, [sp, #168]	; 0xa8
 8009816:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009818:	3301      	adds	r3, #1
 800981a:	2b07      	cmp	r3, #7
 800981c:	9329      	str	r3, [sp, #164]	; 0xa4
 800981e:	dc36      	bgt.n	800988e <_vfprintf_r+0x128e>
 8009820:	3408      	adds	r4, #8
 8009822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009824:	2d00      	cmp	r5, #0
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	bfb4      	ite	lt
 800982a:	461d      	movlt	r5, r3
 800982c:	1b5d      	subge	r5, r3, r5
 800982e:	2d00      	cmp	r5, #0
 8009830:	dd18      	ble.n	8009864 <_vfprintf_r+0x1264>
 8009832:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8009836:	482f      	ldr	r0, [pc, #188]	; (80098f4 <_vfprintf_r+0x12f4>)
 8009838:	2d10      	cmp	r5, #16
 800983a:	f102 0201 	add.w	r2, r2, #1
 800983e:	f104 0108 	add.w	r1, r4, #8
 8009842:	6020      	str	r0, [r4, #0]
 8009844:	dc2d      	bgt.n	80098a2 <_vfprintf_r+0x12a2>
 8009846:	442b      	add	r3, r5
 8009848:	2a07      	cmp	r2, #7
 800984a:	6065      	str	r5, [r4, #4]
 800984c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8009850:	dd3a      	ble.n	80098c8 <_vfprintf_r+0x12c8>
 8009852:	aa28      	add	r2, sp, #160	; 0xa0
 8009854:	4649      	mov	r1, r9
 8009856:	4658      	mov	r0, fp
 8009858:	f002 fc33 	bl	800c0c2 <__sprint_r>
 800985c:	2800      	cmp	r0, #0
 800985e:	f040 80fe 	bne.w	8009a5e <_vfprintf_r+0x145e>
 8009862:	ac2b      	add	r4, sp, #172	; 0xac
 8009864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	441e      	add	r6, r3
 800986a:	e732      	b.n	80096d2 <_vfprintf_r+0x10d2>
 800986c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800986e:	3b01      	subs	r3, #1
 8009870:	930c      	str	r3, [sp, #48]	; 0x30
 8009872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009874:	3b01      	subs	r3, #1
 8009876:	930b      	str	r3, [sp, #44]	; 0x2c
 8009878:	e7ae      	b.n	80097d8 <_vfprintf_r+0x11d8>
 800987a:	aa28      	add	r2, sp, #160	; 0xa0
 800987c:	4649      	mov	r1, r9
 800987e:	4658      	mov	r0, fp
 8009880:	f002 fc1f 	bl	800c0c2 <__sprint_r>
 8009884:	2800      	cmp	r0, #0
 8009886:	f040 80ea 	bne.w	8009a5e <_vfprintf_r+0x145e>
 800988a:	ac2b      	add	r4, sp, #172	; 0xac
 800988c:	e7b2      	b.n	80097f4 <_vfprintf_r+0x11f4>
 800988e:	aa28      	add	r2, sp, #160	; 0xa0
 8009890:	4649      	mov	r1, r9
 8009892:	4658      	mov	r0, fp
 8009894:	f002 fc15 	bl	800c0c2 <__sprint_r>
 8009898:	2800      	cmp	r0, #0
 800989a:	f040 80e0 	bne.w	8009a5e <_vfprintf_r+0x145e>
 800989e:	ac2b      	add	r4, sp, #172	; 0xac
 80098a0:	e7bf      	b.n	8009822 <_vfprintf_r+0x1222>
 80098a2:	2010      	movs	r0, #16
 80098a4:	2a07      	cmp	r2, #7
 80098a6:	4403      	add	r3, r0
 80098a8:	6060      	str	r0, [r4, #4]
 80098aa:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80098ae:	dd08      	ble.n	80098c2 <_vfprintf_r+0x12c2>
 80098b0:	aa28      	add	r2, sp, #160	; 0xa0
 80098b2:	4649      	mov	r1, r9
 80098b4:	4658      	mov	r0, fp
 80098b6:	f002 fc04 	bl	800c0c2 <__sprint_r>
 80098ba:	2800      	cmp	r0, #0
 80098bc:	f040 80cf 	bne.w	8009a5e <_vfprintf_r+0x145e>
 80098c0:	a92b      	add	r1, sp, #172	; 0xac
 80098c2:	3d10      	subs	r5, #16
 80098c4:	460c      	mov	r4, r1
 80098c6:	e7b4      	b.n	8009832 <_vfprintf_r+0x1232>
 80098c8:	460c      	mov	r4, r1
 80098ca:	e7cb      	b.n	8009864 <_vfprintf_r+0x1264>
 80098cc:	aa28      	add	r2, sp, #160	; 0xa0
 80098ce:	4649      	mov	r1, r9
 80098d0:	4658      	mov	r0, fp
 80098d2:	f002 fbf6 	bl	800c0c2 <__sprint_r>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	f040 80c1 	bne.w	8009a5e <_vfprintf_r+0x145e>
 80098dc:	ac2b      	add	r4, sp, #172	; 0xac
 80098de:	e719      	b.n	8009714 <_vfprintf_r+0x1114>
 80098e0:	aa28      	add	r2, sp, #160	; 0xa0
 80098e2:	4649      	mov	r1, r9
 80098e4:	4658      	mov	r0, fp
 80098e6:	f002 fbec 	bl	800c0c2 <__sprint_r>
 80098ea:	2800      	cmp	r0, #0
 80098ec:	f040 80b7 	bne.w	8009a5e <_vfprintf_r+0x145e>
 80098f0:	ac2b      	add	r4, sp, #172	; 0xac
 80098f2:	e726      	b.n	8009742 <_vfprintf_r+0x1142>
 80098f4:	0800c818 	.word	0x0800c818
 80098f8:	9a08      	ldr	r2, [sp, #32]
 80098fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80098fc:	2a01      	cmp	r2, #1
 80098fe:	9a07      	ldr	r2, [sp, #28]
 8009900:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009902:	6022      	str	r2, [r4, #0]
 8009904:	f04f 0201 	mov.w	r2, #1
 8009908:	f105 0501 	add.w	r5, r5, #1
 800990c:	f103 0301 	add.w	r3, r3, #1
 8009910:	f104 0608 	add.w	r6, r4, #8
 8009914:	6062      	str	r2, [r4, #4]
 8009916:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 800991a:	dc02      	bgt.n	8009922 <_vfprintf_r+0x1322>
 800991c:	f01a 0f01 	tst.w	sl, #1
 8009920:	d077      	beq.n	8009a12 <_vfprintf_r+0x1412>
 8009922:	2b07      	cmp	r3, #7
 8009924:	dd08      	ble.n	8009938 <_vfprintf_r+0x1338>
 8009926:	aa28      	add	r2, sp, #160	; 0xa0
 8009928:	4649      	mov	r1, r9
 800992a:	4658      	mov	r0, fp
 800992c:	f002 fbc9 	bl	800c0c2 <__sprint_r>
 8009930:	2800      	cmp	r0, #0
 8009932:	f040 8094 	bne.w	8009a5e <_vfprintf_r+0x145e>
 8009936:	ae2b      	add	r6, sp, #172	; 0xac
 8009938:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800993a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800993c:	6033      	str	r3, [r6, #0]
 800993e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009940:	6073      	str	r3, [r6, #4]
 8009942:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009944:	4413      	add	r3, r2
 8009946:	932a      	str	r3, [sp, #168]	; 0xa8
 8009948:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800994a:	3301      	adds	r3, #1
 800994c:	2b07      	cmp	r3, #7
 800994e:	9329      	str	r3, [sp, #164]	; 0xa4
 8009950:	dc31      	bgt.n	80099b6 <_vfprintf_r+0x13b6>
 8009952:	3608      	adds	r6, #8
 8009954:	9b08      	ldr	r3, [sp, #32]
 8009956:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 800995a:	1e5c      	subs	r4, r3, #1
 800995c:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8009960:	f7f7 f822 	bl	80009a8 <__aeabi_dcmpeq>
 8009964:	2800      	cmp	r0, #0
 8009966:	d12f      	bne.n	80099c8 <_vfprintf_r+0x13c8>
 8009968:	9b07      	ldr	r3, [sp, #28]
 800996a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800996c:	3301      	adds	r3, #1
 800996e:	e9c6 3400 	strd	r3, r4, [r6]
 8009972:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009974:	9908      	ldr	r1, [sp, #32]
 8009976:	3201      	adds	r2, #1
 8009978:	3b01      	subs	r3, #1
 800997a:	440b      	add	r3, r1
 800997c:	2a07      	cmp	r2, #7
 800997e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8009982:	dd49      	ble.n	8009a18 <_vfprintf_r+0x1418>
 8009984:	aa28      	add	r2, sp, #160	; 0xa0
 8009986:	4649      	mov	r1, r9
 8009988:	4658      	mov	r0, fp
 800998a:	f002 fb9a 	bl	800c0c2 <__sprint_r>
 800998e:	2800      	cmp	r0, #0
 8009990:	d165      	bne.n	8009a5e <_vfprintf_r+0x145e>
 8009992:	ae2b      	add	r6, sp, #172	; 0xac
 8009994:	ab24      	add	r3, sp, #144	; 0x90
 8009996:	6033      	str	r3, [r6, #0]
 8009998:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800999a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800999c:	6073      	str	r3, [r6, #4]
 800999e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80099a0:	4413      	add	r3, r2
 80099a2:	932a      	str	r3, [sp, #168]	; 0xa8
 80099a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80099a6:	3301      	adds	r3, #1
 80099a8:	2b07      	cmp	r3, #7
 80099aa:	9329      	str	r3, [sp, #164]	; 0xa4
 80099ac:	f73f adaf 	bgt.w	800950e <_vfprintf_r+0xf0e>
 80099b0:	f106 0408 	add.w	r4, r6, #8
 80099b4:	e408      	b.n	80091c8 <_vfprintf_r+0xbc8>
 80099b6:	aa28      	add	r2, sp, #160	; 0xa0
 80099b8:	4649      	mov	r1, r9
 80099ba:	4658      	mov	r0, fp
 80099bc:	f002 fb81 	bl	800c0c2 <__sprint_r>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d14c      	bne.n	8009a5e <_vfprintf_r+0x145e>
 80099c4:	ae2b      	add	r6, sp, #172	; 0xac
 80099c6:	e7c5      	b.n	8009954 <_vfprintf_r+0x1354>
 80099c8:	2c00      	cmp	r4, #0
 80099ca:	dde3      	ble.n	8009994 <_vfprintf_r+0x1394>
 80099cc:	2710      	movs	r7, #16
 80099ce:	4d3c      	ldr	r5, [pc, #240]	; (8009ac0 <_vfprintf_r+0x14c0>)
 80099d0:	2c10      	cmp	r4, #16
 80099d2:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80099d6:	f106 0108 	add.w	r1, r6, #8
 80099da:	f103 0301 	add.w	r3, r3, #1
 80099de:	6035      	str	r5, [r6, #0]
 80099e0:	dc07      	bgt.n	80099f2 <_vfprintf_r+0x13f2>
 80099e2:	6074      	str	r4, [r6, #4]
 80099e4:	2b07      	cmp	r3, #7
 80099e6:	4414      	add	r4, r2
 80099e8:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 80099ec:	dcca      	bgt.n	8009984 <_vfprintf_r+0x1384>
 80099ee:	460e      	mov	r6, r1
 80099f0:	e7d0      	b.n	8009994 <_vfprintf_r+0x1394>
 80099f2:	3210      	adds	r2, #16
 80099f4:	2b07      	cmp	r3, #7
 80099f6:	6077      	str	r7, [r6, #4]
 80099f8:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80099fc:	dd06      	ble.n	8009a0c <_vfprintf_r+0x140c>
 80099fe:	aa28      	add	r2, sp, #160	; 0xa0
 8009a00:	4649      	mov	r1, r9
 8009a02:	4658      	mov	r0, fp
 8009a04:	f002 fb5d 	bl	800c0c2 <__sprint_r>
 8009a08:	bb48      	cbnz	r0, 8009a5e <_vfprintf_r+0x145e>
 8009a0a:	a92b      	add	r1, sp, #172	; 0xac
 8009a0c:	3c10      	subs	r4, #16
 8009a0e:	460e      	mov	r6, r1
 8009a10:	e7de      	b.n	80099d0 <_vfprintf_r+0x13d0>
 8009a12:	2b07      	cmp	r3, #7
 8009a14:	ddbe      	ble.n	8009994 <_vfprintf_r+0x1394>
 8009a16:	e7b5      	b.n	8009984 <_vfprintf_r+0x1384>
 8009a18:	3608      	adds	r6, #8
 8009a1a:	e7bb      	b.n	8009994 <_vfprintf_r+0x1394>
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	f7ff bbd3 	b.w	80091c8 <_vfprintf_r+0xbc8>
 8009a22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a24:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009a26:	1a9d      	subs	r5, r3, r2
 8009a28:	2d00      	cmp	r5, #0
 8009a2a:	f77f abd1 	ble.w	80091d0 <_vfprintf_r+0xbd0>
 8009a2e:	2710      	movs	r7, #16
 8009a30:	4e24      	ldr	r6, [pc, #144]	; (8009ac4 <_vfprintf_r+0x14c4>)
 8009a32:	2d10      	cmp	r5, #16
 8009a34:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8009a38:	6026      	str	r6, [r4, #0]
 8009a3a:	f103 0301 	add.w	r3, r3, #1
 8009a3e:	dc18      	bgt.n	8009a72 <_vfprintf_r+0x1472>
 8009a40:	6065      	str	r5, [r4, #4]
 8009a42:	2b07      	cmp	r3, #7
 8009a44:	4415      	add	r5, r2
 8009a46:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8009a4a:	f77f abc1 	ble.w	80091d0 <_vfprintf_r+0xbd0>
 8009a4e:	aa28      	add	r2, sp, #160	; 0xa0
 8009a50:	4649      	mov	r1, r9
 8009a52:	4658      	mov	r0, fp
 8009a54:	f002 fb35 	bl	800c0c2 <__sprint_r>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	f43f abb9 	beq.w	80091d0 <_vfprintf_r+0xbd0>
 8009a5e:	f1b8 0f00 	cmp.w	r8, #0
 8009a62:	f43f a898 	beq.w	8008b96 <_vfprintf_r+0x596>
 8009a66:	4641      	mov	r1, r8
 8009a68:	4658      	mov	r0, fp
 8009a6a:	f001 f89d 	bl	800aba8 <_free_r>
 8009a6e:	f7ff b892 	b.w	8008b96 <_vfprintf_r+0x596>
 8009a72:	3210      	adds	r2, #16
 8009a74:	2b07      	cmp	r3, #7
 8009a76:	6067      	str	r7, [r4, #4]
 8009a78:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8009a7c:	dc02      	bgt.n	8009a84 <_vfprintf_r+0x1484>
 8009a7e:	3408      	adds	r4, #8
 8009a80:	3d10      	subs	r5, #16
 8009a82:	e7d6      	b.n	8009a32 <_vfprintf_r+0x1432>
 8009a84:	aa28      	add	r2, sp, #160	; 0xa0
 8009a86:	4649      	mov	r1, r9
 8009a88:	4658      	mov	r0, fp
 8009a8a:	f002 fb1a 	bl	800c0c2 <__sprint_r>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d1e5      	bne.n	8009a5e <_vfprintf_r+0x145e>
 8009a92:	ac2b      	add	r4, sp, #172	; 0xac
 8009a94:	e7f4      	b.n	8009a80 <_vfprintf_r+0x1480>
 8009a96:	4641      	mov	r1, r8
 8009a98:	4658      	mov	r0, fp
 8009a9a:	f001 f885 	bl	800aba8 <_free_r>
 8009a9e:	f7ff bbaf 	b.w	8009200 <_vfprintf_r+0xc00>
 8009aa2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009aa4:	b91b      	cbnz	r3, 8009aae <_vfprintf_r+0x14ae>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	9329      	str	r3, [sp, #164]	; 0xa4
 8009aaa:	f7ff b874 	b.w	8008b96 <_vfprintf_r+0x596>
 8009aae:	aa28      	add	r2, sp, #160	; 0xa0
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	4658      	mov	r0, fp
 8009ab4:	f002 fb05 	bl	800c0c2 <__sprint_r>
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	f47f a86c 	bne.w	8008b96 <_vfprintf_r+0x596>
 8009abe:	e7f2      	b.n	8009aa6 <_vfprintf_r+0x14a6>
 8009ac0:	0800c818 	.word	0x0800c818
 8009ac4:	0800c808 	.word	0x0800c808

08009ac8 <__sbprintf>:
 8009ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aca:	460c      	mov	r4, r1
 8009acc:	461f      	mov	r7, r3
 8009ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ad0:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8009ad4:	9319      	str	r3, [sp, #100]	; 0x64
 8009ad6:	89e3      	ldrh	r3, [r4, #14]
 8009ad8:	8989      	ldrh	r1, [r1, #12]
 8009ada:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009ade:	69e3      	ldr	r3, [r4, #28]
 8009ae0:	f021 0102 	bic.w	r1, r1, #2
 8009ae4:	9307      	str	r3, [sp, #28]
 8009ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ae8:	f8ad 100c 	strh.w	r1, [sp, #12]
 8009aec:	a91a      	add	r1, sp, #104	; 0x68
 8009aee:	4615      	mov	r5, r2
 8009af0:	4606      	mov	r6, r0
 8009af2:	9309      	str	r3, [sp, #36]	; 0x24
 8009af4:	9100      	str	r1, [sp, #0]
 8009af6:	2300      	movs	r3, #0
 8009af8:	9104      	str	r1, [sp, #16]
 8009afa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009afe:	a816      	add	r0, sp, #88	; 0x58
 8009b00:	9102      	str	r1, [sp, #8]
 8009b02:	9105      	str	r1, [sp, #20]
 8009b04:	9306      	str	r3, [sp, #24]
 8009b06:	f001 fa85 	bl	800b014 <__retarget_lock_init_recursive>
 8009b0a:	462a      	mov	r2, r5
 8009b0c:	463b      	mov	r3, r7
 8009b0e:	4669      	mov	r1, sp
 8009b10:	4630      	mov	r0, r6
 8009b12:	f7fe fd75 	bl	8008600 <_vfprintf_r>
 8009b16:	1e05      	subs	r5, r0, #0
 8009b18:	db07      	blt.n	8009b2a <__sbprintf+0x62>
 8009b1a:	4669      	mov	r1, sp
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	f000 ff47 	bl	800a9b0 <_fflush_r>
 8009b22:	2800      	cmp	r0, #0
 8009b24:	bf18      	it	ne
 8009b26:	f04f 35ff 	movne.w	r5, #4294967295
 8009b2a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009b2e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009b30:	065b      	lsls	r3, r3, #25
 8009b32:	bf42      	ittt	mi
 8009b34:	89a3      	ldrhmi	r3, [r4, #12]
 8009b36:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8009b3a:	81a3      	strhmi	r3, [r4, #12]
 8009b3c:	f001 fa6b 	bl	800b016 <__retarget_lock_close_recursive>
 8009b40:	4628      	mov	r0, r5
 8009b42:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8009b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b48 <__ascii_wctomb>:
 8009b48:	b149      	cbz	r1, 8009b5e <__ascii_wctomb+0x16>
 8009b4a:	2aff      	cmp	r2, #255	; 0xff
 8009b4c:	bf8b      	itete	hi
 8009b4e:	238a      	movhi	r3, #138	; 0x8a
 8009b50:	700a      	strbls	r2, [r1, #0]
 8009b52:	6003      	strhi	r3, [r0, #0]
 8009b54:	2001      	movls	r0, #1
 8009b56:	bf88      	it	hi
 8009b58:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b5c:	4770      	bx	lr
 8009b5e:	4608      	mov	r0, r1
 8009b60:	4770      	bx	lr
	...

08009b64 <__swsetup_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	4b2a      	ldr	r3, [pc, #168]	; (8009c10 <__swsetup_r+0xac>)
 8009b68:	4605      	mov	r5, r0
 8009b6a:	6818      	ldr	r0, [r3, #0]
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	b118      	cbz	r0, 8009b78 <__swsetup_r+0x14>
 8009b70:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009b72:	b90b      	cbnz	r3, 8009b78 <__swsetup_r+0x14>
 8009b74:	f000 ff88 	bl	800aa88 <__sinit>
 8009b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	0711      	lsls	r1, r2, #28
 8009b80:	d422      	bmi.n	8009bc8 <__swsetup_r+0x64>
 8009b82:	06d0      	lsls	r0, r2, #27
 8009b84:	d407      	bmi.n	8009b96 <__swsetup_r+0x32>
 8009b86:	2209      	movs	r2, #9
 8009b88:	602a      	str	r2, [r5, #0]
 8009b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b8e:	81a3      	strh	r3, [r4, #12]
 8009b90:	f04f 30ff 	mov.w	r0, #4294967295
 8009b94:	e034      	b.n	8009c00 <__swsetup_r+0x9c>
 8009b96:	0751      	lsls	r1, r2, #29
 8009b98:	d512      	bpl.n	8009bc0 <__swsetup_r+0x5c>
 8009b9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009b9c:	b141      	cbz	r1, 8009bb0 <__swsetup_r+0x4c>
 8009b9e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009ba2:	4299      	cmp	r1, r3
 8009ba4:	d002      	beq.n	8009bac <__swsetup_r+0x48>
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	f000 fffe 	bl	800aba8 <_free_r>
 8009bac:	2300      	movs	r3, #0
 8009bae:	6323      	str	r3, [r4, #48]	; 0x30
 8009bb0:	89a3      	ldrh	r3, [r4, #12]
 8009bb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bb6:	81a3      	strh	r3, [r4, #12]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	6063      	str	r3, [r4, #4]
 8009bbc:	6923      	ldr	r3, [r4, #16]
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	f043 0308 	orr.w	r3, r3, #8
 8009bc6:	81a3      	strh	r3, [r4, #12]
 8009bc8:	6923      	ldr	r3, [r4, #16]
 8009bca:	b94b      	cbnz	r3, 8009be0 <__swsetup_r+0x7c>
 8009bcc:	89a3      	ldrh	r3, [r4, #12]
 8009bce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bd6:	d003      	beq.n	8009be0 <__swsetup_r+0x7c>
 8009bd8:	4621      	mov	r1, r4
 8009bda:	4628      	mov	r0, r5
 8009bdc:	f001 fa4a 	bl	800b074 <__smakebuf_r>
 8009be0:	89a2      	ldrh	r2, [r4, #12]
 8009be2:	f012 0301 	ands.w	r3, r2, #1
 8009be6:	d00c      	beq.n	8009c02 <__swsetup_r+0x9e>
 8009be8:	2300      	movs	r3, #0
 8009bea:	60a3      	str	r3, [r4, #8]
 8009bec:	6963      	ldr	r3, [r4, #20]
 8009bee:	425b      	negs	r3, r3
 8009bf0:	61a3      	str	r3, [r4, #24]
 8009bf2:	6923      	ldr	r3, [r4, #16]
 8009bf4:	b953      	cbnz	r3, 8009c0c <__swsetup_r+0xa8>
 8009bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bfa:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009bfe:	d1c4      	bne.n	8009b8a <__swsetup_r+0x26>
 8009c00:	bd38      	pop	{r3, r4, r5, pc}
 8009c02:	0792      	lsls	r2, r2, #30
 8009c04:	bf58      	it	pl
 8009c06:	6963      	ldrpl	r3, [r4, #20]
 8009c08:	60a3      	str	r3, [r4, #8]
 8009c0a:	e7f2      	b.n	8009bf2 <__swsetup_r+0x8e>
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	e7f7      	b.n	8009c00 <__swsetup_r+0x9c>
 8009c10:	2000017c 	.word	0x2000017c

08009c14 <register_fini>:
 8009c14:	4b02      	ldr	r3, [pc, #8]	; (8009c20 <register_fini+0xc>)
 8009c16:	b113      	cbz	r3, 8009c1e <register_fini+0xa>
 8009c18:	4802      	ldr	r0, [pc, #8]	; (8009c24 <register_fini+0x10>)
 8009c1a:	f000 b805 	b.w	8009c28 <atexit>
 8009c1e:	4770      	bx	lr
 8009c20:	00000000 	.word	0x00000000
 8009c24:	0800aad9 	.word	0x0800aad9

08009c28 <atexit>:
 8009c28:	2300      	movs	r3, #0
 8009c2a:	4601      	mov	r1, r0
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f002 ba8c 	b.w	800c14c <__register_exitproc>

08009c34 <quorem>:
 8009c34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c38:	6903      	ldr	r3, [r0, #16]
 8009c3a:	690c      	ldr	r4, [r1, #16]
 8009c3c:	4680      	mov	r8, r0
 8009c3e:	42a3      	cmp	r3, r4
 8009c40:	f2c0 8084 	blt.w	8009d4c <quorem+0x118>
 8009c44:	3c01      	subs	r4, #1
 8009c46:	f101 0714 	add.w	r7, r1, #20
 8009c4a:	f100 0614 	add.w	r6, r0, #20
 8009c4e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009c52:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009c56:	3501      	adds	r5, #1
 8009c58:	fbb0 f5f5 	udiv	r5, r0, r5
 8009c5c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009c60:	eb06 030c 	add.w	r3, r6, ip
 8009c64:	eb07 090c 	add.w	r9, r7, ip
 8009c68:	9301      	str	r3, [sp, #4]
 8009c6a:	b39d      	cbz	r5, 8009cd4 <quorem+0xa0>
 8009c6c:	f04f 0a00 	mov.w	sl, #0
 8009c70:	4638      	mov	r0, r7
 8009c72:	46b6      	mov	lr, r6
 8009c74:	46d3      	mov	fp, sl
 8009c76:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c7a:	b293      	uxth	r3, r2
 8009c7c:	fb05 a303 	mla	r3, r5, r3, sl
 8009c80:	0c12      	lsrs	r2, r2, #16
 8009c82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c86:	fb05 a202 	mla	r2, r5, r2, sl
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	ebab 0303 	sub.w	r3, fp, r3
 8009c90:	f8de b000 	ldr.w	fp, [lr]
 8009c94:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009c98:	fa1f fb8b 	uxth.w	fp, fp
 8009c9c:	445b      	add	r3, fp
 8009c9e:	fa1f fb82 	uxth.w	fp, r2
 8009ca2:	f8de 2000 	ldr.w	r2, [lr]
 8009ca6:	4581      	cmp	r9, r0
 8009ca8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009cac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cb6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009cba:	f84e 3b04 	str.w	r3, [lr], #4
 8009cbe:	d2da      	bcs.n	8009c76 <quorem+0x42>
 8009cc0:	f856 300c 	ldr.w	r3, [r6, ip]
 8009cc4:	b933      	cbnz	r3, 8009cd4 <quorem+0xa0>
 8009cc6:	9b01      	ldr	r3, [sp, #4]
 8009cc8:	3b04      	subs	r3, #4
 8009cca:	429e      	cmp	r6, r3
 8009ccc:	461a      	mov	r2, r3
 8009cce:	d331      	bcc.n	8009d34 <quorem+0x100>
 8009cd0:	f8c8 4010 	str.w	r4, [r8, #16]
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	f001 fe61 	bl	800b99c <__mcmp>
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	db26      	blt.n	8009d2c <quorem+0xf8>
 8009cde:	4630      	mov	r0, r6
 8009ce0:	f04f 0c00 	mov.w	ip, #0
 8009ce4:	3501      	adds	r5, #1
 8009ce6:	f857 1b04 	ldr.w	r1, [r7], #4
 8009cea:	f8d0 e000 	ldr.w	lr, [r0]
 8009cee:	b28b      	uxth	r3, r1
 8009cf0:	ebac 0303 	sub.w	r3, ip, r3
 8009cf4:	fa1f f28e 	uxth.w	r2, lr
 8009cf8:	4413      	add	r3, r2
 8009cfa:	0c0a      	lsrs	r2, r1, #16
 8009cfc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d0a:	45b9      	cmp	r9, r7
 8009d0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009d10:	f840 3b04 	str.w	r3, [r0], #4
 8009d14:	d2e7      	bcs.n	8009ce6 <quorem+0xb2>
 8009d16:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009d1a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009d1e:	b92a      	cbnz	r2, 8009d2c <quorem+0xf8>
 8009d20:	3b04      	subs	r3, #4
 8009d22:	429e      	cmp	r6, r3
 8009d24:	461a      	mov	r2, r3
 8009d26:	d30b      	bcc.n	8009d40 <quorem+0x10c>
 8009d28:	f8c8 4010 	str.w	r4, [r8, #16]
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	b003      	add	sp, #12
 8009d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d34:	6812      	ldr	r2, [r2, #0]
 8009d36:	3b04      	subs	r3, #4
 8009d38:	2a00      	cmp	r2, #0
 8009d3a:	d1c9      	bne.n	8009cd0 <quorem+0x9c>
 8009d3c:	3c01      	subs	r4, #1
 8009d3e:	e7c4      	b.n	8009cca <quorem+0x96>
 8009d40:	6812      	ldr	r2, [r2, #0]
 8009d42:	3b04      	subs	r3, #4
 8009d44:	2a00      	cmp	r2, #0
 8009d46:	d1ef      	bne.n	8009d28 <quorem+0xf4>
 8009d48:	3c01      	subs	r4, #1
 8009d4a:	e7ea      	b.n	8009d22 <quorem+0xee>
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	e7ee      	b.n	8009d2e <quorem+0xfa>

08009d50 <_dtoa_r>:
 8009d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	4616      	mov	r6, r2
 8009d56:	461f      	mov	r7, r3
 8009d58:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8009d5a:	b095      	sub	sp, #84	; 0x54
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8009d60:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009d64:	b141      	cbz	r1, 8009d78 <_dtoa_r+0x28>
 8009d66:	2301      	movs	r3, #1
 8009d68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d6a:	4093      	lsls	r3, r2
 8009d6c:	608b      	str	r3, [r1, #8]
 8009d6e:	604a      	str	r2, [r1, #4]
 8009d70:	f001 fc4f 	bl	800b612 <_Bfree>
 8009d74:	2300      	movs	r3, #0
 8009d76:	6423      	str	r3, [r4, #64]	; 0x40
 8009d78:	1e3b      	subs	r3, r7, #0
 8009d7a:	bfaf      	iteee	ge
 8009d7c:	2300      	movge	r3, #0
 8009d7e:	2201      	movlt	r2, #1
 8009d80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d84:	9303      	strlt	r3, [sp, #12]
 8009d86:	bfa8      	it	ge
 8009d88:	602b      	strge	r3, [r5, #0]
 8009d8a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009d8e:	4bb0      	ldr	r3, [pc, #704]	; (800a050 <_dtoa_r+0x300>)
 8009d90:	bfb8      	it	lt
 8009d92:	602a      	strlt	r2, [r5, #0]
 8009d94:	ea33 0308 	bics.w	r3, r3, r8
 8009d98:	d116      	bne.n	8009dc8 <_dtoa_r+0x78>
 8009d9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d9e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009da0:	6013      	str	r3, [r2, #0]
 8009da2:	9b02      	ldr	r3, [sp, #8]
 8009da4:	b923      	cbnz	r3, 8009db0 <_dtoa_r+0x60>
 8009da6:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009daa:	2800      	cmp	r0, #0
 8009dac:	f000 853f 	beq.w	800a82e <_dtoa_r+0xade>
 8009db0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009db2:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 800a064 <_dtoa_r+0x314>
 8009db6:	b11b      	cbz	r3, 8009dc0 <_dtoa_r+0x70>
 8009db8:	f10b 0303 	add.w	r3, fp, #3
 8009dbc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	4658      	mov	r0, fp
 8009dc2:	b015      	add	sp, #84	; 0x54
 8009dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2300      	movs	r3, #0
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	f7f6 fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8009dd8:	4682      	mov	sl, r0
 8009dda:	b160      	cbz	r0, 8009df6 <_dtoa_r+0xa6>
 8009ddc:	2301      	movs	r3, #1
 8009dde:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009de0:	6013      	str	r3, [r2, #0]
 8009de2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f000 851e 	beq.w	800a826 <_dtoa_r+0xad6>
 8009dea:	4b9a      	ldr	r3, [pc, #616]	; (800a054 <_dtoa_r+0x304>)
 8009dec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009dee:	f103 3bff 	add.w	fp, r3, #4294967295
 8009df2:	6013      	str	r3, [r2, #0]
 8009df4:	e7e4      	b.n	8009dc0 <_dtoa_r+0x70>
 8009df6:	ab12      	add	r3, sp, #72	; 0x48
 8009df8:	9301      	str	r3, [sp, #4]
 8009dfa:	ab13      	add	r3, sp, #76	; 0x4c
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	4632      	mov	r2, r6
 8009e00:	463b      	mov	r3, r7
 8009e02:	4620      	mov	r0, r4
 8009e04:	f001 fe42 	bl	800ba8c <__d2b>
 8009e08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009e0c:	9006      	str	r0, [sp, #24]
 8009e0e:	2d00      	cmp	r5, #0
 8009e10:	d07d      	beq.n	8009f0e <_dtoa_r+0x1be>
 8009e12:	46b0      	mov	r8, r6
 8009e14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e18:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8009e1c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8009e20:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e24:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8009e28:	2200      	movs	r2, #0
 8009e2a:	4b8b      	ldr	r3, [pc, #556]	; (800a058 <_dtoa_r+0x308>)
 8009e2c:	4640      	mov	r0, r8
 8009e2e:	4649      	mov	r1, r9
 8009e30:	f7f6 f99a 	bl	8000168 <__aeabi_dsub>
 8009e34:	a380      	add	r3, pc, #512	; (adr r3, 800a038 <_dtoa_r+0x2e8>)
 8009e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3a:	f7f6 fb4d 	bl	80004d8 <__aeabi_dmul>
 8009e3e:	a380      	add	r3, pc, #512	; (adr r3, 800a040 <_dtoa_r+0x2f0>)
 8009e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e44:	f7f6 f992 	bl	800016c <__adddf3>
 8009e48:	4606      	mov	r6, r0
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	460f      	mov	r7, r1
 8009e4e:	f7f6 fad9 	bl	8000404 <__aeabi_i2d>
 8009e52:	a37d      	add	r3, pc, #500	; (adr r3, 800a048 <_dtoa_r+0x2f8>)
 8009e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e58:	f7f6 fb3e 	bl	80004d8 <__aeabi_dmul>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4630      	mov	r0, r6
 8009e62:	4639      	mov	r1, r7
 8009e64:	f7f6 f982 	bl	800016c <__adddf3>
 8009e68:	4606      	mov	r6, r0
 8009e6a:	460f      	mov	r7, r1
 8009e6c:	f7f6 fde4 	bl	8000a38 <__aeabi_d2iz>
 8009e70:	2200      	movs	r2, #0
 8009e72:	4682      	mov	sl, r0
 8009e74:	2300      	movs	r3, #0
 8009e76:	4630      	mov	r0, r6
 8009e78:	4639      	mov	r1, r7
 8009e7a:	f7f6 fd9f 	bl	80009bc <__aeabi_dcmplt>
 8009e7e:	b148      	cbz	r0, 8009e94 <_dtoa_r+0x144>
 8009e80:	4650      	mov	r0, sl
 8009e82:	f7f6 fabf 	bl	8000404 <__aeabi_i2d>
 8009e86:	4632      	mov	r2, r6
 8009e88:	463b      	mov	r3, r7
 8009e8a:	f7f6 fd8d 	bl	80009a8 <__aeabi_dcmpeq>
 8009e8e:	b908      	cbnz	r0, 8009e94 <_dtoa_r+0x144>
 8009e90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e94:	f1ba 0f16 	cmp.w	sl, #22
 8009e98:	d85a      	bhi.n	8009f50 <_dtoa_r+0x200>
 8009e9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e9e:	496f      	ldr	r1, [pc, #444]	; (800a05c <_dtoa_r+0x30c>)
 8009ea0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ea8:	f7f6 fda6 	bl	80009f8 <__aeabi_dcmpgt>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d051      	beq.n	8009f54 <_dtoa_r+0x204>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009eb6:	930d      	str	r3, [sp, #52]	; 0x34
 8009eb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009eba:	1b5d      	subs	r5, r3, r5
 8009ebc:	1e6b      	subs	r3, r5, #1
 8009ebe:	9307      	str	r3, [sp, #28]
 8009ec0:	bf43      	ittte	mi
 8009ec2:	2300      	movmi	r3, #0
 8009ec4:	f1c5 0901 	rsbmi	r9, r5, #1
 8009ec8:	9307      	strmi	r3, [sp, #28]
 8009eca:	f04f 0900 	movpl.w	r9, #0
 8009ece:	f1ba 0f00 	cmp.w	sl, #0
 8009ed2:	db41      	blt.n	8009f58 <_dtoa_r+0x208>
 8009ed4:	9b07      	ldr	r3, [sp, #28]
 8009ed6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8009eda:	4453      	add	r3, sl
 8009edc:	9307      	str	r3, [sp, #28]
 8009ede:	2300      	movs	r3, #0
 8009ee0:	9308      	str	r3, [sp, #32]
 8009ee2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ee4:	2b09      	cmp	r3, #9
 8009ee6:	f200 808c 	bhi.w	800a002 <_dtoa_r+0x2b2>
 8009eea:	2b05      	cmp	r3, #5
 8009eec:	bfc4      	itt	gt
 8009eee:	3b04      	subgt	r3, #4
 8009ef0:	931e      	strgt	r3, [sp, #120]	; 0x78
 8009ef2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ef4:	bfc8      	it	gt
 8009ef6:	2500      	movgt	r5, #0
 8009ef8:	f1a3 0302 	sub.w	r3, r3, #2
 8009efc:	bfd8      	it	le
 8009efe:	2501      	movle	r5, #1
 8009f00:	2b03      	cmp	r3, #3
 8009f02:	f200 808a 	bhi.w	800a01a <_dtoa_r+0x2ca>
 8009f06:	e8df f003 	tbb	[pc, r3]
 8009f0a:	7a78      	.short	0x7a78
 8009f0c:	6c2f      	.short	0x6c2f
 8009f0e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009f12:	441d      	add	r5, r3
 8009f14:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009f18:	2820      	cmp	r0, #32
 8009f1a:	dd13      	ble.n	8009f44 <_dtoa_r+0x1f4>
 8009f1c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009f20:	9b02      	ldr	r3, [sp, #8]
 8009f22:	fa08 f800 	lsl.w	r8, r8, r0
 8009f26:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009f2a:	fa23 f000 	lsr.w	r0, r3, r0
 8009f2e:	ea48 0000 	orr.w	r0, r8, r0
 8009f32:	f7f6 fa57 	bl	80003e4 <__aeabi_ui2d>
 8009f36:	2301      	movs	r3, #1
 8009f38:	4680      	mov	r8, r0
 8009f3a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8009f3e:	3d01      	subs	r5, #1
 8009f40:	9310      	str	r3, [sp, #64]	; 0x40
 8009f42:	e771      	b.n	8009e28 <_dtoa_r+0xd8>
 8009f44:	9b02      	ldr	r3, [sp, #8]
 8009f46:	f1c0 0020 	rsb	r0, r0, #32
 8009f4a:	fa03 f000 	lsl.w	r0, r3, r0
 8009f4e:	e7f0      	b.n	8009f32 <_dtoa_r+0x1e2>
 8009f50:	2301      	movs	r3, #1
 8009f52:	e7b0      	b.n	8009eb6 <_dtoa_r+0x166>
 8009f54:	900d      	str	r0, [sp, #52]	; 0x34
 8009f56:	e7af      	b.n	8009eb8 <_dtoa_r+0x168>
 8009f58:	f1ca 0300 	rsb	r3, sl, #0
 8009f5c:	9308      	str	r3, [sp, #32]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	eba9 090a 	sub.w	r9, r9, sl
 8009f64:	930c      	str	r3, [sp, #48]	; 0x30
 8009f66:	e7bc      	b.n	8009ee2 <_dtoa_r+0x192>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	dd56      	ble.n	800a020 <_dtoa_r+0x2d0>
 8009f72:	4698      	mov	r8, r3
 8009f74:	9304      	str	r3, [sp, #16]
 8009f76:	2200      	movs	r2, #0
 8009f78:	6462      	str	r2, [r4, #68]	; 0x44
 8009f7a:	2204      	movs	r2, #4
 8009f7c:	f102 0014 	add.w	r0, r2, #20
 8009f80:	4298      	cmp	r0, r3
 8009f82:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009f84:	d951      	bls.n	800a02a <_dtoa_r+0x2da>
 8009f86:	4620      	mov	r0, r4
 8009f88:	f001 fb1e 	bl	800b5c8 <_Balloc>
 8009f8c:	f1b8 0f0e 	cmp.w	r8, #14
 8009f90:	4683      	mov	fp, r0
 8009f92:	6420      	str	r0, [r4, #64]	; 0x40
 8009f94:	f200 80ed 	bhi.w	800a172 <_dtoa_r+0x422>
 8009f98:	2d00      	cmp	r5, #0
 8009f9a:	f000 80ea 	beq.w	800a172 <_dtoa_r+0x422>
 8009f9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fa2:	f1ba 0f00 	cmp.w	sl, #0
 8009fa6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009faa:	dd77      	ble.n	800a09c <_dtoa_r+0x34c>
 8009fac:	4a2b      	ldr	r2, [pc, #172]	; (800a05c <_dtoa_r+0x30c>)
 8009fae:	f00a 030f 	and.w	r3, sl, #15
 8009fb2:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009fb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009fba:	06f0      	lsls	r0, r6, #27
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009fc4:	d568      	bpl.n	800a098 <_dtoa_r+0x348>
 8009fc6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009fca:	4b25      	ldr	r3, [pc, #148]	; (800a060 <_dtoa_r+0x310>)
 8009fcc:	2503      	movs	r5, #3
 8009fce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fd2:	f7f6 fbab 	bl	800072c <__aeabi_ddiv>
 8009fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fda:	f006 060f 	and.w	r6, r6, #15
 8009fde:	4f20      	ldr	r7, [pc, #128]	; (800a060 <_dtoa_r+0x310>)
 8009fe0:	e04f      	b.n	800a082 <_dtoa_r+0x332>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fe6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009fe8:	4453      	add	r3, sl
 8009fea:	f103 0801 	add.w	r8, r3, #1
 8009fee:	9304      	str	r3, [sp, #16]
 8009ff0:	4643      	mov	r3, r8
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	bfb8      	it	lt
 8009ff6:	2301      	movlt	r3, #1
 8009ff8:	e7bd      	b.n	8009f76 <_dtoa_r+0x226>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	e7b5      	b.n	8009f6a <_dtoa_r+0x21a>
 8009ffe:	2300      	movs	r3, #0
 800a000:	e7f0      	b.n	8009fe4 <_dtoa_r+0x294>
 800a002:	2501      	movs	r5, #1
 800a004:	2300      	movs	r3, #0
 800a006:	9509      	str	r5, [sp, #36]	; 0x24
 800a008:	931e      	str	r3, [sp, #120]	; 0x78
 800a00a:	f04f 33ff 	mov.w	r3, #4294967295
 800a00e:	2200      	movs	r2, #0
 800a010:	9304      	str	r3, [sp, #16]
 800a012:	4698      	mov	r8, r3
 800a014:	2312      	movs	r3, #18
 800a016:	921f      	str	r2, [sp, #124]	; 0x7c
 800a018:	e7ad      	b.n	8009f76 <_dtoa_r+0x226>
 800a01a:	2301      	movs	r3, #1
 800a01c:	9309      	str	r3, [sp, #36]	; 0x24
 800a01e:	e7f4      	b.n	800a00a <_dtoa_r+0x2ba>
 800a020:	2301      	movs	r3, #1
 800a022:	9304      	str	r3, [sp, #16]
 800a024:	4698      	mov	r8, r3
 800a026:	461a      	mov	r2, r3
 800a028:	e7f5      	b.n	800a016 <_dtoa_r+0x2c6>
 800a02a:	3101      	adds	r1, #1
 800a02c:	6461      	str	r1, [r4, #68]	; 0x44
 800a02e:	0052      	lsls	r2, r2, #1
 800a030:	e7a4      	b.n	8009f7c <_dtoa_r+0x22c>
 800a032:	bf00      	nop
 800a034:	f3af 8000 	nop.w
 800a038:	636f4361 	.word	0x636f4361
 800a03c:	3fd287a7 	.word	0x3fd287a7
 800a040:	8b60c8b3 	.word	0x8b60c8b3
 800a044:	3fc68a28 	.word	0x3fc68a28
 800a048:	509f79fb 	.word	0x509f79fb
 800a04c:	3fd34413 	.word	0x3fd34413
 800a050:	7ff00000 	.word	0x7ff00000
 800a054:	0800c7e7 	.word	0x0800c7e7
 800a058:	3ff80000 	.word	0x3ff80000
 800a05c:	0800c960 	.word	0x0800c960
 800a060:	0800c938 	.word	0x0800c938
 800a064:	0800c932 	.word	0x0800c932
 800a068:	07f1      	lsls	r1, r6, #31
 800a06a:	d508      	bpl.n	800a07e <_dtoa_r+0x32e>
 800a06c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a070:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a074:	f7f6 fa30 	bl	80004d8 <__aeabi_dmul>
 800a078:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a07c:	3501      	adds	r5, #1
 800a07e:	1076      	asrs	r6, r6, #1
 800a080:	3708      	adds	r7, #8
 800a082:	2e00      	cmp	r6, #0
 800a084:	d1f0      	bne.n	800a068 <_dtoa_r+0x318>
 800a086:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a08a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a08e:	f7f6 fb4d 	bl	800072c <__aeabi_ddiv>
 800a092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a096:	e01b      	b.n	800a0d0 <_dtoa_r+0x380>
 800a098:	2502      	movs	r5, #2
 800a09a:	e7a0      	b.n	8009fde <_dtoa_r+0x28e>
 800a09c:	f000 80a4 	beq.w	800a1e8 <_dtoa_r+0x498>
 800a0a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a0a4:	f1ca 0600 	rsb	r6, sl, #0
 800a0a8:	4ba0      	ldr	r3, [pc, #640]	; (800a32c <_dtoa_r+0x5dc>)
 800a0aa:	f006 020f 	and.w	r2, r6, #15
 800a0ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b6:	f7f6 fa0f 	bl	80004d8 <__aeabi_dmul>
 800a0ba:	2502      	movs	r5, #2
 800a0bc:	2300      	movs	r3, #0
 800a0be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0c2:	4f9b      	ldr	r7, [pc, #620]	; (800a330 <_dtoa_r+0x5e0>)
 800a0c4:	1136      	asrs	r6, r6, #4
 800a0c6:	2e00      	cmp	r6, #0
 800a0c8:	f040 8083 	bne.w	800a1d2 <_dtoa_r+0x482>
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1e0      	bne.n	800a092 <_dtoa_r+0x342>
 800a0d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f000 808a 	beq.w	800a1ec <_dtoa_r+0x49c>
 800a0d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0dc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a0e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	4b93      	ldr	r3, [pc, #588]	; (800a334 <_dtoa_r+0x5e4>)
 800a0e8:	f7f6 fc68 	bl	80009bc <__aeabi_dcmplt>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d07d      	beq.n	800a1ec <_dtoa_r+0x49c>
 800a0f0:	f1b8 0f00 	cmp.w	r8, #0
 800a0f4:	d07a      	beq.n	800a1ec <_dtoa_r+0x49c>
 800a0f6:	9b04      	ldr	r3, [sp, #16]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	dd36      	ble.n	800a16a <_dtoa_r+0x41a>
 800a0fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a100:	2200      	movs	r2, #0
 800a102:	4b8d      	ldr	r3, [pc, #564]	; (800a338 <_dtoa_r+0x5e8>)
 800a104:	f7f6 f9e8 	bl	80004d8 <__aeabi_dmul>
 800a108:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a10c:	9e04      	ldr	r6, [sp, #16]
 800a10e:	f10a 37ff 	add.w	r7, sl, #4294967295
 800a112:	3501      	adds	r5, #1
 800a114:	4628      	mov	r0, r5
 800a116:	f7f6 f975 	bl	8000404 <__aeabi_i2d>
 800a11a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a11e:	f7f6 f9db 	bl	80004d8 <__aeabi_dmul>
 800a122:	2200      	movs	r2, #0
 800a124:	4b85      	ldr	r3, [pc, #532]	; (800a33c <_dtoa_r+0x5ec>)
 800a126:	f7f6 f821 	bl	800016c <__adddf3>
 800a12a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800a12e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a132:	950b      	str	r5, [sp, #44]	; 0x2c
 800a134:	2e00      	cmp	r6, #0
 800a136:	d15c      	bne.n	800a1f2 <_dtoa_r+0x4a2>
 800a138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a13c:	2200      	movs	r2, #0
 800a13e:	4b80      	ldr	r3, [pc, #512]	; (800a340 <_dtoa_r+0x5f0>)
 800a140:	f7f6 f812 	bl	8000168 <__aeabi_dsub>
 800a144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a146:	462b      	mov	r3, r5
 800a148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a14c:	f7f6 fc54 	bl	80009f8 <__aeabi_dcmpgt>
 800a150:	2800      	cmp	r0, #0
 800a152:	f040 8282 	bne.w	800a65a <_dtoa_r+0x90a>
 800a156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a15a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a15c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a160:	f7f6 fc2c 	bl	80009bc <__aeabi_dcmplt>
 800a164:	2800      	cmp	r0, #0
 800a166:	f040 8276 	bne.w	800a656 <_dtoa_r+0x906>
 800a16a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a16e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a172:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a174:	2b00      	cmp	r3, #0
 800a176:	f2c0 814c 	blt.w	800a412 <_dtoa_r+0x6c2>
 800a17a:	f1ba 0f0e 	cmp.w	sl, #14
 800a17e:	f300 8148 	bgt.w	800a412 <_dtoa_r+0x6c2>
 800a182:	4b6a      	ldr	r3, [pc, #424]	; (800a32c <_dtoa_r+0x5dc>)
 800a184:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a190:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a192:	2b00      	cmp	r3, #0
 800a194:	f280 80d8 	bge.w	800a348 <_dtoa_r+0x5f8>
 800a198:	f1b8 0f00 	cmp.w	r8, #0
 800a19c:	f300 80d4 	bgt.w	800a348 <_dtoa_r+0x5f8>
 800a1a0:	f040 8258 	bne.w	800a654 <_dtoa_r+0x904>
 800a1a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	4b65      	ldr	r3, [pc, #404]	; (800a340 <_dtoa_r+0x5f0>)
 800a1ac:	f7f6 f994 	bl	80004d8 <__aeabi_dmul>
 800a1b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1b4:	f7f6 fc16 	bl	80009e4 <__aeabi_dcmpge>
 800a1b8:	4646      	mov	r6, r8
 800a1ba:	4647      	mov	r7, r8
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	f040 822e 	bne.w	800a61e <_dtoa_r+0x8ce>
 800a1c2:	2331      	movs	r3, #49	; 0x31
 800a1c4:	f10b 0501 	add.w	r5, fp, #1
 800a1c8:	f88b 3000 	strb.w	r3, [fp]
 800a1cc:	f10a 0a01 	add.w	sl, sl, #1
 800a1d0:	e229      	b.n	800a626 <_dtoa_r+0x8d6>
 800a1d2:	07f2      	lsls	r2, r6, #31
 800a1d4:	d505      	bpl.n	800a1e2 <_dtoa_r+0x492>
 800a1d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1da:	f7f6 f97d 	bl	80004d8 <__aeabi_dmul>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	3501      	adds	r5, #1
 800a1e2:	1076      	asrs	r6, r6, #1
 800a1e4:	3708      	adds	r7, #8
 800a1e6:	e76e      	b.n	800a0c6 <_dtoa_r+0x376>
 800a1e8:	2502      	movs	r5, #2
 800a1ea:	e771      	b.n	800a0d0 <_dtoa_r+0x380>
 800a1ec:	4657      	mov	r7, sl
 800a1ee:	4646      	mov	r6, r8
 800a1f0:	e790      	b.n	800a114 <_dtoa_r+0x3c4>
 800a1f2:	4b4e      	ldr	r3, [pc, #312]	; (800a32c <_dtoa_r+0x5dc>)
 800a1f4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a1f8:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d048      	beq.n	800a294 <_dtoa_r+0x544>
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	2000      	movs	r0, #0
 800a208:	494e      	ldr	r1, [pc, #312]	; (800a344 <_dtoa_r+0x5f4>)
 800a20a:	f7f6 fa8f 	bl	800072c <__aeabi_ddiv>
 800a20e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a212:	f7f5 ffa9 	bl	8000168 <__aeabi_dsub>
 800a216:	465d      	mov	r5, fp
 800a218:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a21c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a220:	f7f6 fc0a 	bl	8000a38 <__aeabi_d2iz>
 800a224:	9011      	str	r0, [sp, #68]	; 0x44
 800a226:	f7f6 f8ed 	bl	8000404 <__aeabi_i2d>
 800a22a:	4602      	mov	r2, r0
 800a22c:	460b      	mov	r3, r1
 800a22e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a232:	f7f5 ff99 	bl	8000168 <__aeabi_dsub>
 800a236:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a23c:	3330      	adds	r3, #48	; 0x30
 800a23e:	f805 3b01 	strb.w	r3, [r5], #1
 800a242:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a246:	f7f6 fbb9 	bl	80009bc <__aeabi_dcmplt>
 800a24a:	2800      	cmp	r0, #0
 800a24c:	d163      	bne.n	800a316 <_dtoa_r+0x5c6>
 800a24e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a252:	2000      	movs	r0, #0
 800a254:	4937      	ldr	r1, [pc, #220]	; (800a334 <_dtoa_r+0x5e4>)
 800a256:	f7f5 ff87 	bl	8000168 <__aeabi_dsub>
 800a25a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a25e:	f7f6 fbad 	bl	80009bc <__aeabi_dcmplt>
 800a262:	2800      	cmp	r0, #0
 800a264:	f040 80b6 	bne.w	800a3d4 <_dtoa_r+0x684>
 800a268:	eba5 030b 	sub.w	r3, r5, fp
 800a26c:	429e      	cmp	r6, r3
 800a26e:	f77f af7c 	ble.w	800a16a <_dtoa_r+0x41a>
 800a272:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a276:	2200      	movs	r2, #0
 800a278:	4b2f      	ldr	r3, [pc, #188]	; (800a338 <_dtoa_r+0x5e8>)
 800a27a:	f7f6 f92d 	bl	80004d8 <__aeabi_dmul>
 800a27e:	2200      	movs	r2, #0
 800a280:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a288:	4b2b      	ldr	r3, [pc, #172]	; (800a338 <_dtoa_r+0x5e8>)
 800a28a:	f7f6 f925 	bl	80004d8 <__aeabi_dmul>
 800a28e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a292:	e7c3      	b.n	800a21c <_dtoa_r+0x4cc>
 800a294:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a298:	f7f6 f91e 	bl	80004d8 <__aeabi_dmul>
 800a29c:	eb0b 0506 	add.w	r5, fp, r6
 800a2a0:	465e      	mov	r6, fp
 800a2a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2aa:	f7f6 fbc5 	bl	8000a38 <__aeabi_d2iz>
 800a2ae:	9011      	str	r0, [sp, #68]	; 0x44
 800a2b0:	f7f6 f8a8 	bl	8000404 <__aeabi_i2d>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2bc:	f7f5 ff54 	bl	8000168 <__aeabi_dsub>
 800a2c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2c6:	3330      	adds	r3, #48	; 0x30
 800a2c8:	f806 3b01 	strb.w	r3, [r6], #1
 800a2cc:	42ae      	cmp	r6, r5
 800a2ce:	f04f 0200 	mov.w	r2, #0
 800a2d2:	d124      	bne.n	800a31e <_dtoa_r+0x5ce>
 800a2d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a2d8:	4b1a      	ldr	r3, [pc, #104]	; (800a344 <_dtoa_r+0x5f4>)
 800a2da:	f7f5 ff47 	bl	800016c <__adddf3>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2e6:	f7f6 fb87 	bl	80009f8 <__aeabi_dcmpgt>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	d172      	bne.n	800a3d4 <_dtoa_r+0x684>
 800a2ee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	4913      	ldr	r1, [pc, #76]	; (800a344 <_dtoa_r+0x5f4>)
 800a2f6:	f7f5 ff37 	bl	8000168 <__aeabi_dsub>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a302:	f7f6 fb5b 	bl	80009bc <__aeabi_dcmplt>
 800a306:	2800      	cmp	r0, #0
 800a308:	f43f af2f 	beq.w	800a16a <_dtoa_r+0x41a>
 800a30c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a310:	1e6a      	subs	r2, r5, #1
 800a312:	2b30      	cmp	r3, #48	; 0x30
 800a314:	d001      	beq.n	800a31a <_dtoa_r+0x5ca>
 800a316:	46ba      	mov	sl, r7
 800a318:	e04b      	b.n	800a3b2 <_dtoa_r+0x662>
 800a31a:	4615      	mov	r5, r2
 800a31c:	e7f6      	b.n	800a30c <_dtoa_r+0x5bc>
 800a31e:	4b06      	ldr	r3, [pc, #24]	; (800a338 <_dtoa_r+0x5e8>)
 800a320:	f7f6 f8da 	bl	80004d8 <__aeabi_dmul>
 800a324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a328:	e7bd      	b.n	800a2a6 <_dtoa_r+0x556>
 800a32a:	bf00      	nop
 800a32c:	0800c960 	.word	0x0800c960
 800a330:	0800c938 	.word	0x0800c938
 800a334:	3ff00000 	.word	0x3ff00000
 800a338:	40240000 	.word	0x40240000
 800a33c:	401c0000 	.word	0x401c0000
 800a340:	40140000 	.word	0x40140000
 800a344:	3fe00000 	.word	0x3fe00000
 800a348:	465d      	mov	r5, fp
 800a34a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a34e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a352:	4630      	mov	r0, r6
 800a354:	4639      	mov	r1, r7
 800a356:	f7f6 f9e9 	bl	800072c <__aeabi_ddiv>
 800a35a:	f7f6 fb6d 	bl	8000a38 <__aeabi_d2iz>
 800a35e:	4681      	mov	r9, r0
 800a360:	f7f6 f850 	bl	8000404 <__aeabi_i2d>
 800a364:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a368:	f7f6 f8b6 	bl	80004d8 <__aeabi_dmul>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4630      	mov	r0, r6
 800a372:	4639      	mov	r1, r7
 800a374:	f7f5 fef8 	bl	8000168 <__aeabi_dsub>
 800a378:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800a37c:	f805 6b01 	strb.w	r6, [r5], #1
 800a380:	eba5 060b 	sub.w	r6, r5, fp
 800a384:	45b0      	cmp	r8, r6
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	d135      	bne.n	800a3f8 <_dtoa_r+0x6a8>
 800a38c:	f7f5 feee 	bl	800016c <__adddf3>
 800a390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a394:	4606      	mov	r6, r0
 800a396:	460f      	mov	r7, r1
 800a398:	f7f6 fb2e 	bl	80009f8 <__aeabi_dcmpgt>
 800a39c:	b9c8      	cbnz	r0, 800a3d2 <_dtoa_r+0x682>
 800a39e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	f7f6 faff 	bl	80009a8 <__aeabi_dcmpeq>
 800a3aa:	b110      	cbz	r0, 800a3b2 <_dtoa_r+0x662>
 800a3ac:	f019 0f01 	tst.w	r9, #1
 800a3b0:	d10f      	bne.n	800a3d2 <_dtoa_r+0x682>
 800a3b2:	9906      	ldr	r1, [sp, #24]
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f001 f92c 	bl	800b612 <_Bfree>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a3be:	702b      	strb	r3, [r5, #0]
 800a3c0:	f10a 0301 	add.w	r3, sl, #1
 800a3c4:	6013      	str	r3, [r2, #0]
 800a3c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f43f acf9 	beq.w	8009dc0 <_dtoa_r+0x70>
 800a3ce:	601d      	str	r5, [r3, #0]
 800a3d0:	e4f6      	b.n	8009dc0 <_dtoa_r+0x70>
 800a3d2:	4657      	mov	r7, sl
 800a3d4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a3d8:	1e6b      	subs	r3, r5, #1
 800a3da:	2a39      	cmp	r2, #57	; 0x39
 800a3dc:	d106      	bne.n	800a3ec <_dtoa_r+0x69c>
 800a3de:	459b      	cmp	fp, r3
 800a3e0:	d108      	bne.n	800a3f4 <_dtoa_r+0x6a4>
 800a3e2:	2330      	movs	r3, #48	; 0x30
 800a3e4:	f88b 3000 	strb.w	r3, [fp]
 800a3e8:	465b      	mov	r3, fp
 800a3ea:	3701      	adds	r7, #1
 800a3ec:	781a      	ldrb	r2, [r3, #0]
 800a3ee:	3201      	adds	r2, #1
 800a3f0:	701a      	strb	r2, [r3, #0]
 800a3f2:	e790      	b.n	800a316 <_dtoa_r+0x5c6>
 800a3f4:	461d      	mov	r5, r3
 800a3f6:	e7ed      	b.n	800a3d4 <_dtoa_r+0x684>
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	4b99      	ldr	r3, [pc, #612]	; (800a660 <_dtoa_r+0x910>)
 800a3fc:	f7f6 f86c 	bl	80004d8 <__aeabi_dmul>
 800a400:	2200      	movs	r2, #0
 800a402:	2300      	movs	r3, #0
 800a404:	4606      	mov	r6, r0
 800a406:	460f      	mov	r7, r1
 800a408:	f7f6 face 	bl	80009a8 <__aeabi_dcmpeq>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d09e      	beq.n	800a34e <_dtoa_r+0x5fe>
 800a410:	e7cf      	b.n	800a3b2 <_dtoa_r+0x662>
 800a412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a414:	2a00      	cmp	r2, #0
 800a416:	f000 8088 	beq.w	800a52a <_dtoa_r+0x7da>
 800a41a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a41c:	2a01      	cmp	r2, #1
 800a41e:	dc6d      	bgt.n	800a4fc <_dtoa_r+0x7ac>
 800a420:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a422:	2a00      	cmp	r2, #0
 800a424:	d066      	beq.n	800a4f4 <_dtoa_r+0x7a4>
 800a426:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a42a:	464d      	mov	r5, r9
 800a42c:	9e08      	ldr	r6, [sp, #32]
 800a42e:	9a07      	ldr	r2, [sp, #28]
 800a430:	2101      	movs	r1, #1
 800a432:	441a      	add	r2, r3
 800a434:	4620      	mov	r0, r4
 800a436:	4499      	add	r9, r3
 800a438:	9207      	str	r2, [sp, #28]
 800a43a:	f001 f97c 	bl	800b736 <__i2b>
 800a43e:	4607      	mov	r7, r0
 800a440:	2d00      	cmp	r5, #0
 800a442:	dd0b      	ble.n	800a45c <_dtoa_r+0x70c>
 800a444:	9b07      	ldr	r3, [sp, #28]
 800a446:	2b00      	cmp	r3, #0
 800a448:	dd08      	ble.n	800a45c <_dtoa_r+0x70c>
 800a44a:	42ab      	cmp	r3, r5
 800a44c:	bfa8      	it	ge
 800a44e:	462b      	movge	r3, r5
 800a450:	9a07      	ldr	r2, [sp, #28]
 800a452:	eba9 0903 	sub.w	r9, r9, r3
 800a456:	1aed      	subs	r5, r5, r3
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	9307      	str	r3, [sp, #28]
 800a45c:	9b08      	ldr	r3, [sp, #32]
 800a45e:	b1eb      	cbz	r3, 800a49c <_dtoa_r+0x74c>
 800a460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a462:	2b00      	cmp	r3, #0
 800a464:	d065      	beq.n	800a532 <_dtoa_r+0x7e2>
 800a466:	b18e      	cbz	r6, 800a48c <_dtoa_r+0x73c>
 800a468:	4639      	mov	r1, r7
 800a46a:	4632      	mov	r2, r6
 800a46c:	4620      	mov	r0, r4
 800a46e:	f001 fa01 	bl	800b874 <__pow5mult>
 800a472:	9a06      	ldr	r2, [sp, #24]
 800a474:	4601      	mov	r1, r0
 800a476:	4607      	mov	r7, r0
 800a478:	4620      	mov	r0, r4
 800a47a:	f001 f965 	bl	800b748 <__multiply>
 800a47e:	9906      	ldr	r1, [sp, #24]
 800a480:	900a      	str	r0, [sp, #40]	; 0x28
 800a482:	4620      	mov	r0, r4
 800a484:	f001 f8c5 	bl	800b612 <_Bfree>
 800a488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a48a:	9306      	str	r3, [sp, #24]
 800a48c:	9b08      	ldr	r3, [sp, #32]
 800a48e:	1b9a      	subs	r2, r3, r6
 800a490:	d004      	beq.n	800a49c <_dtoa_r+0x74c>
 800a492:	9906      	ldr	r1, [sp, #24]
 800a494:	4620      	mov	r0, r4
 800a496:	f001 f9ed 	bl	800b874 <__pow5mult>
 800a49a:	9006      	str	r0, [sp, #24]
 800a49c:	2101      	movs	r1, #1
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f001 f949 	bl	800b736 <__i2b>
 800a4a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f000 81ca 	beq.w	800a842 <_dtoa_r+0xaf2>
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	4601      	mov	r1, r0
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f001 f9de 	bl	800b874 <__pow5mult>
 800a4b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a4ba:	4606      	mov	r6, r0
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	dc3e      	bgt.n	800a53e <_dtoa_r+0x7ee>
 800a4c0:	9b02      	ldr	r3, [sp, #8]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d137      	bne.n	800a536 <_dtoa_r+0x7e6>
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d134      	bne.n	800a53a <_dtoa_r+0x7ea>
 800a4d0:	9b03      	ldr	r3, [sp, #12]
 800a4d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4d6:	0d1b      	lsrs	r3, r3, #20
 800a4d8:	051b      	lsls	r3, r3, #20
 800a4da:	b12b      	cbz	r3, 800a4e8 <_dtoa_r+0x798>
 800a4dc:	9b07      	ldr	r3, [sp, #28]
 800a4de:	f109 0901 	add.w	r9, r9, #1
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	9307      	str	r3, [sp, #28]
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	9308      	str	r3, [sp, #32]
 800a4ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d128      	bne.n	800a542 <_dtoa_r+0x7f2>
 800a4f0:	2001      	movs	r0, #1
 800a4f2:	e02e      	b.n	800a552 <_dtoa_r+0x802>
 800a4f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a4fa:	e796      	b.n	800a42a <_dtoa_r+0x6da>
 800a4fc:	9b08      	ldr	r3, [sp, #32]
 800a4fe:	f108 36ff 	add.w	r6, r8, #4294967295
 800a502:	42b3      	cmp	r3, r6
 800a504:	bfb7      	itett	lt
 800a506:	9b08      	ldrlt	r3, [sp, #32]
 800a508:	1b9e      	subge	r6, r3, r6
 800a50a:	1af2      	sublt	r2, r6, r3
 800a50c:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800a50e:	bfbf      	itttt	lt
 800a510:	9608      	strlt	r6, [sp, #32]
 800a512:	189b      	addlt	r3, r3, r2
 800a514:	930c      	strlt	r3, [sp, #48]	; 0x30
 800a516:	2600      	movlt	r6, #0
 800a518:	f1b8 0f00 	cmp.w	r8, #0
 800a51c:	bfb9      	ittee	lt
 800a51e:	eba9 0508 	sublt.w	r5, r9, r8
 800a522:	2300      	movlt	r3, #0
 800a524:	464d      	movge	r5, r9
 800a526:	4643      	movge	r3, r8
 800a528:	e781      	b.n	800a42e <_dtoa_r+0x6de>
 800a52a:	9e08      	ldr	r6, [sp, #32]
 800a52c:	464d      	mov	r5, r9
 800a52e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a530:	e786      	b.n	800a440 <_dtoa_r+0x6f0>
 800a532:	9a08      	ldr	r2, [sp, #32]
 800a534:	e7ad      	b.n	800a492 <_dtoa_r+0x742>
 800a536:	2300      	movs	r3, #0
 800a538:	e7d6      	b.n	800a4e8 <_dtoa_r+0x798>
 800a53a:	9b02      	ldr	r3, [sp, #8]
 800a53c:	e7d4      	b.n	800a4e8 <_dtoa_r+0x798>
 800a53e:	2300      	movs	r3, #0
 800a540:	9308      	str	r3, [sp, #32]
 800a542:	6933      	ldr	r3, [r6, #16]
 800a544:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a548:	6918      	ldr	r0, [r3, #16]
 800a54a:	f001 f8a6 	bl	800b69a <__hi0bits>
 800a54e:	f1c0 0020 	rsb	r0, r0, #32
 800a552:	9b07      	ldr	r3, [sp, #28]
 800a554:	4418      	add	r0, r3
 800a556:	f010 001f 	ands.w	r0, r0, #31
 800a55a:	d047      	beq.n	800a5ec <_dtoa_r+0x89c>
 800a55c:	f1c0 0320 	rsb	r3, r0, #32
 800a560:	2b04      	cmp	r3, #4
 800a562:	dd3b      	ble.n	800a5dc <_dtoa_r+0x88c>
 800a564:	9b07      	ldr	r3, [sp, #28]
 800a566:	f1c0 001c 	rsb	r0, r0, #28
 800a56a:	4481      	add	r9, r0
 800a56c:	4405      	add	r5, r0
 800a56e:	4403      	add	r3, r0
 800a570:	9307      	str	r3, [sp, #28]
 800a572:	f1b9 0f00 	cmp.w	r9, #0
 800a576:	dd05      	ble.n	800a584 <_dtoa_r+0x834>
 800a578:	464a      	mov	r2, r9
 800a57a:	9906      	ldr	r1, [sp, #24]
 800a57c:	4620      	mov	r0, r4
 800a57e:	f001 f9b9 	bl	800b8f4 <__lshift>
 800a582:	9006      	str	r0, [sp, #24]
 800a584:	9b07      	ldr	r3, [sp, #28]
 800a586:	2b00      	cmp	r3, #0
 800a588:	dd05      	ble.n	800a596 <_dtoa_r+0x846>
 800a58a:	4631      	mov	r1, r6
 800a58c:	461a      	mov	r2, r3
 800a58e:	4620      	mov	r0, r4
 800a590:	f001 f9b0 	bl	800b8f4 <__lshift>
 800a594:	4606      	mov	r6, r0
 800a596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a598:	b353      	cbz	r3, 800a5f0 <_dtoa_r+0x8a0>
 800a59a:	4631      	mov	r1, r6
 800a59c:	9806      	ldr	r0, [sp, #24]
 800a59e:	f001 f9fd 	bl	800b99c <__mcmp>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	da24      	bge.n	800a5f0 <_dtoa_r+0x8a0>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	220a      	movs	r2, #10
 800a5aa:	9906      	ldr	r1, [sp, #24]
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f001 f839 	bl	800b624 <__multadd>
 800a5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5b8:	9006      	str	r0, [sp, #24]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f000 8148 	beq.w	800a850 <_dtoa_r+0xb00>
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	220a      	movs	r2, #10
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f001 f82c 	bl	800b624 <__multadd>
 800a5cc:	9b04      	ldr	r3, [sp, #16]
 800a5ce:	4607      	mov	r7, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	dc4d      	bgt.n	800a670 <_dtoa_r+0x920>
 800a5d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	dd4a      	ble.n	800a670 <_dtoa_r+0x920>
 800a5da:	e011      	b.n	800a600 <_dtoa_r+0x8b0>
 800a5dc:	d0c9      	beq.n	800a572 <_dtoa_r+0x822>
 800a5de:	9a07      	ldr	r2, [sp, #28]
 800a5e0:	331c      	adds	r3, #28
 800a5e2:	441a      	add	r2, r3
 800a5e4:	4499      	add	r9, r3
 800a5e6:	441d      	add	r5, r3
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	e7c1      	b.n	800a570 <_dtoa_r+0x820>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	e7f6      	b.n	800a5de <_dtoa_r+0x88e>
 800a5f0:	f1b8 0f00 	cmp.w	r8, #0
 800a5f4:	dc36      	bgt.n	800a664 <_dtoa_r+0x914>
 800a5f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	dd33      	ble.n	800a664 <_dtoa_r+0x914>
 800a5fc:	f8cd 8010 	str.w	r8, [sp, #16]
 800a600:	9b04      	ldr	r3, [sp, #16]
 800a602:	b963      	cbnz	r3, 800a61e <_dtoa_r+0x8ce>
 800a604:	4631      	mov	r1, r6
 800a606:	2205      	movs	r2, #5
 800a608:	4620      	mov	r0, r4
 800a60a:	f001 f80b 	bl	800b624 <__multadd>
 800a60e:	4601      	mov	r1, r0
 800a610:	4606      	mov	r6, r0
 800a612:	9806      	ldr	r0, [sp, #24]
 800a614:	f001 f9c2 	bl	800b99c <__mcmp>
 800a618:	2800      	cmp	r0, #0
 800a61a:	f73f add2 	bgt.w	800a1c2 <_dtoa_r+0x472>
 800a61e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a620:	465d      	mov	r5, fp
 800a622:	ea6f 0a03 	mvn.w	sl, r3
 800a626:	f04f 0900 	mov.w	r9, #0
 800a62a:	4631      	mov	r1, r6
 800a62c:	4620      	mov	r0, r4
 800a62e:	f000 fff0 	bl	800b612 <_Bfree>
 800a632:	2f00      	cmp	r7, #0
 800a634:	f43f aebd 	beq.w	800a3b2 <_dtoa_r+0x662>
 800a638:	f1b9 0f00 	cmp.w	r9, #0
 800a63c:	d005      	beq.n	800a64a <_dtoa_r+0x8fa>
 800a63e:	45b9      	cmp	r9, r7
 800a640:	d003      	beq.n	800a64a <_dtoa_r+0x8fa>
 800a642:	4649      	mov	r1, r9
 800a644:	4620      	mov	r0, r4
 800a646:	f000 ffe4 	bl	800b612 <_Bfree>
 800a64a:	4639      	mov	r1, r7
 800a64c:	4620      	mov	r0, r4
 800a64e:	f000 ffe0 	bl	800b612 <_Bfree>
 800a652:	e6ae      	b.n	800a3b2 <_dtoa_r+0x662>
 800a654:	2600      	movs	r6, #0
 800a656:	4637      	mov	r7, r6
 800a658:	e7e1      	b.n	800a61e <_dtoa_r+0x8ce>
 800a65a:	46ba      	mov	sl, r7
 800a65c:	4637      	mov	r7, r6
 800a65e:	e5b0      	b.n	800a1c2 <_dtoa_r+0x472>
 800a660:	40240000 	.word	0x40240000
 800a664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a666:	f8cd 8010 	str.w	r8, [sp, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f000 80f7 	beq.w	800a85e <_dtoa_r+0xb0e>
 800a670:	2d00      	cmp	r5, #0
 800a672:	dd05      	ble.n	800a680 <_dtoa_r+0x930>
 800a674:	4639      	mov	r1, r7
 800a676:	462a      	mov	r2, r5
 800a678:	4620      	mov	r0, r4
 800a67a:	f001 f93b 	bl	800b8f4 <__lshift>
 800a67e:	4607      	mov	r7, r0
 800a680:	9b08      	ldr	r3, [sp, #32]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d04c      	beq.n	800a720 <_dtoa_r+0x9d0>
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	4620      	mov	r0, r4
 800a68a:	f000 ff9d 	bl	800b5c8 <_Balloc>
 800a68e:	4605      	mov	r5, r0
 800a690:	693a      	ldr	r2, [r7, #16]
 800a692:	f107 010c 	add.w	r1, r7, #12
 800a696:	3202      	adds	r2, #2
 800a698:	0092      	lsls	r2, r2, #2
 800a69a:	300c      	adds	r0, #12
 800a69c:	f7fc fd0e 	bl	80070bc <memcpy>
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f001 f925 	bl	800b8f4 <__lshift>
 800a6aa:	46b9      	mov	r9, r7
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	9b02      	ldr	r3, [sp, #8]
 800a6b0:	f8cd b01c 	str.w	fp, [sp, #28]
 800a6b4:	f003 0301 	and.w	r3, r3, #1
 800a6b8:	9308      	str	r3, [sp, #32]
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	9806      	ldr	r0, [sp, #24]
 800a6be:	f7ff fab9 	bl	8009c34 <quorem>
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a6ca:	9806      	ldr	r0, [sp, #24]
 800a6cc:	f001 f966 	bl	800b99c <__mcmp>
 800a6d0:	463a      	mov	r2, r7
 800a6d2:	9002      	str	r0, [sp, #8]
 800a6d4:	4631      	mov	r1, r6
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f001 f97a 	bl	800b9d0 <__mdiff>
 800a6dc:	68c3      	ldr	r3, [r0, #12]
 800a6de:	4602      	mov	r2, r0
 800a6e0:	bb03      	cbnz	r3, 800a724 <_dtoa_r+0x9d4>
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	9009      	str	r0, [sp, #36]	; 0x24
 800a6e6:	9806      	ldr	r0, [sp, #24]
 800a6e8:	f001 f958 	bl	800b99c <__mcmp>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f6:	f000 ff8c 	bl	800b612 <_Bfree>
 800a6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6fc:	b9a3      	cbnz	r3, 800a728 <_dtoa_r+0x9d8>
 800a6fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a700:	b992      	cbnz	r2, 800a728 <_dtoa_r+0x9d8>
 800a702:	9a08      	ldr	r2, [sp, #32]
 800a704:	b982      	cbnz	r2, 800a728 <_dtoa_r+0x9d8>
 800a706:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a70a:	d029      	beq.n	800a760 <_dtoa_r+0xa10>
 800a70c:	9b02      	ldr	r3, [sp, #8]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	dd01      	ble.n	800a716 <_dtoa_r+0x9c6>
 800a712:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a716:	9b07      	ldr	r3, [sp, #28]
 800a718:	1c5d      	adds	r5, r3, #1
 800a71a:	f883 8000 	strb.w	r8, [r3]
 800a71e:	e784      	b.n	800a62a <_dtoa_r+0x8da>
 800a720:	4638      	mov	r0, r7
 800a722:	e7c2      	b.n	800a6aa <_dtoa_r+0x95a>
 800a724:	2301      	movs	r3, #1
 800a726:	e7e3      	b.n	800a6f0 <_dtoa_r+0x9a0>
 800a728:	9a02      	ldr	r2, [sp, #8]
 800a72a:	2a00      	cmp	r2, #0
 800a72c:	db04      	blt.n	800a738 <_dtoa_r+0x9e8>
 800a72e:	d124      	bne.n	800a77a <_dtoa_r+0xa2a>
 800a730:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a732:	bb12      	cbnz	r2, 800a77a <_dtoa_r+0xa2a>
 800a734:	9a08      	ldr	r2, [sp, #32]
 800a736:	bb02      	cbnz	r2, 800a77a <_dtoa_r+0xa2a>
 800a738:	2b00      	cmp	r3, #0
 800a73a:	ddec      	ble.n	800a716 <_dtoa_r+0x9c6>
 800a73c:	2201      	movs	r2, #1
 800a73e:	9906      	ldr	r1, [sp, #24]
 800a740:	4620      	mov	r0, r4
 800a742:	f001 f8d7 	bl	800b8f4 <__lshift>
 800a746:	4631      	mov	r1, r6
 800a748:	9006      	str	r0, [sp, #24]
 800a74a:	f001 f927 	bl	800b99c <__mcmp>
 800a74e:	2800      	cmp	r0, #0
 800a750:	dc03      	bgt.n	800a75a <_dtoa_r+0xa0a>
 800a752:	d1e0      	bne.n	800a716 <_dtoa_r+0x9c6>
 800a754:	f018 0f01 	tst.w	r8, #1
 800a758:	d0dd      	beq.n	800a716 <_dtoa_r+0x9c6>
 800a75a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a75e:	d1d8      	bne.n	800a712 <_dtoa_r+0x9c2>
 800a760:	9b07      	ldr	r3, [sp, #28]
 800a762:	9a07      	ldr	r2, [sp, #28]
 800a764:	1c5d      	adds	r5, r3, #1
 800a766:	2339      	movs	r3, #57	; 0x39
 800a768:	7013      	strb	r3, [r2, #0]
 800a76a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a76e:	1e6a      	subs	r2, r5, #1
 800a770:	2b39      	cmp	r3, #57	; 0x39
 800a772:	d04e      	beq.n	800a812 <_dtoa_r+0xac2>
 800a774:	3301      	adds	r3, #1
 800a776:	7013      	strb	r3, [r2, #0]
 800a778:	e757      	b.n	800a62a <_dtoa_r+0x8da>
 800a77a:	9a07      	ldr	r2, [sp, #28]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f102 0501 	add.w	r5, r2, #1
 800a782:	dd06      	ble.n	800a792 <_dtoa_r+0xa42>
 800a784:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a788:	d0ea      	beq.n	800a760 <_dtoa_r+0xa10>
 800a78a:	f108 0801 	add.w	r8, r8, #1
 800a78e:	9b07      	ldr	r3, [sp, #28]
 800a790:	e7c3      	b.n	800a71a <_dtoa_r+0x9ca>
 800a792:	9a04      	ldr	r2, [sp, #16]
 800a794:	eba5 030b 	sub.w	r3, r5, fp
 800a798:	4293      	cmp	r3, r2
 800a79a:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a79e:	d021      	beq.n	800a7e4 <_dtoa_r+0xa94>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	220a      	movs	r2, #10
 800a7a4:	9906      	ldr	r1, [sp, #24]
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f000 ff3c 	bl	800b624 <__multadd>
 800a7ac:	45b9      	cmp	r9, r7
 800a7ae:	9006      	str	r0, [sp, #24]
 800a7b0:	f04f 0300 	mov.w	r3, #0
 800a7b4:	f04f 020a 	mov.w	r2, #10
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	d105      	bne.n	800a7ca <_dtoa_r+0xa7a>
 800a7be:	f000 ff31 	bl	800b624 <__multadd>
 800a7c2:	4681      	mov	r9, r0
 800a7c4:	4607      	mov	r7, r0
 800a7c6:	9507      	str	r5, [sp, #28]
 800a7c8:	e777      	b.n	800a6ba <_dtoa_r+0x96a>
 800a7ca:	f000 ff2b 	bl	800b624 <__multadd>
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	4681      	mov	r9, r0
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	220a      	movs	r2, #10
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f000 ff24 	bl	800b624 <__multadd>
 800a7dc:	4607      	mov	r7, r0
 800a7de:	e7f2      	b.n	800a7c6 <_dtoa_r+0xa76>
 800a7e0:	f04f 0900 	mov.w	r9, #0
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	9906      	ldr	r1, [sp, #24]
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f001 f883 	bl	800b8f4 <__lshift>
 800a7ee:	4631      	mov	r1, r6
 800a7f0:	9006      	str	r0, [sp, #24]
 800a7f2:	f001 f8d3 	bl	800b99c <__mcmp>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	dcb7      	bgt.n	800a76a <_dtoa_r+0xa1a>
 800a7fa:	d102      	bne.n	800a802 <_dtoa_r+0xab2>
 800a7fc:	f018 0f01 	tst.w	r8, #1
 800a800:	d1b3      	bne.n	800a76a <_dtoa_r+0xa1a>
 800a802:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a806:	1e6a      	subs	r2, r5, #1
 800a808:	2b30      	cmp	r3, #48	; 0x30
 800a80a:	f47f af0e 	bne.w	800a62a <_dtoa_r+0x8da>
 800a80e:	4615      	mov	r5, r2
 800a810:	e7f7      	b.n	800a802 <_dtoa_r+0xab2>
 800a812:	4593      	cmp	fp, r2
 800a814:	d105      	bne.n	800a822 <_dtoa_r+0xad2>
 800a816:	2331      	movs	r3, #49	; 0x31
 800a818:	f10a 0a01 	add.w	sl, sl, #1
 800a81c:	f88b 3000 	strb.w	r3, [fp]
 800a820:	e703      	b.n	800a62a <_dtoa_r+0x8da>
 800a822:	4615      	mov	r5, r2
 800a824:	e7a1      	b.n	800a76a <_dtoa_r+0xa1a>
 800a826:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a88c <_dtoa_r+0xb3c>
 800a82a:	f7ff bac9 	b.w	8009dc0 <_dtoa_r+0x70>
 800a82e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a830:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800a890 <_dtoa_r+0xb40>
 800a834:	2b00      	cmp	r3, #0
 800a836:	f43f aac3 	beq.w	8009dc0 <_dtoa_r+0x70>
 800a83a:	f10b 0308 	add.w	r3, fp, #8
 800a83e:	f7ff babd 	b.w	8009dbc <_dtoa_r+0x6c>
 800a842:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a844:	2b01      	cmp	r3, #1
 800a846:	f77f ae3b 	ble.w	800a4c0 <_dtoa_r+0x770>
 800a84a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a84c:	9308      	str	r3, [sp, #32]
 800a84e:	e64f      	b.n	800a4f0 <_dtoa_r+0x7a0>
 800a850:	9b04      	ldr	r3, [sp, #16]
 800a852:	2b00      	cmp	r3, #0
 800a854:	dc03      	bgt.n	800a85e <_dtoa_r+0xb0e>
 800a856:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a858:	2b02      	cmp	r3, #2
 800a85a:	f73f aed1 	bgt.w	800a600 <_dtoa_r+0x8b0>
 800a85e:	465d      	mov	r5, fp
 800a860:	4631      	mov	r1, r6
 800a862:	9806      	ldr	r0, [sp, #24]
 800a864:	f7ff f9e6 	bl	8009c34 <quorem>
 800a868:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a86c:	f805 8b01 	strb.w	r8, [r5], #1
 800a870:	9a04      	ldr	r2, [sp, #16]
 800a872:	eba5 030b 	sub.w	r3, r5, fp
 800a876:	429a      	cmp	r2, r3
 800a878:	ddb2      	ble.n	800a7e0 <_dtoa_r+0xa90>
 800a87a:	2300      	movs	r3, #0
 800a87c:	220a      	movs	r2, #10
 800a87e:	9906      	ldr	r1, [sp, #24]
 800a880:	4620      	mov	r0, r4
 800a882:	f000 fecf 	bl	800b624 <__multadd>
 800a886:	9006      	str	r0, [sp, #24]
 800a888:	e7ea      	b.n	800a860 <_dtoa_r+0xb10>
 800a88a:	bf00      	nop
 800a88c:	0800c7e6 	.word	0x0800c7e6
 800a890:	0800c929 	.word	0x0800c929

0800a894 <__sflush_r>:
 800a894:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a89c:	b293      	uxth	r3, r2
 800a89e:	4605      	mov	r5, r0
 800a8a0:	0718      	lsls	r0, r3, #28
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	d45f      	bmi.n	800a966 <__sflush_r+0xd2>
 800a8a6:	684b      	ldr	r3, [r1, #4]
 800a8a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	818a      	strh	r2, [r1, #12]
 800a8b0:	dc05      	bgt.n	800a8be <__sflush_r+0x2a>
 800a8b2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	dc02      	bgt.n	800a8be <__sflush_r+0x2a>
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8c0:	2e00      	cmp	r6, #0
 800a8c2:	d0f9      	beq.n	800a8b8 <__sflush_r+0x24>
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8ca:	682f      	ldr	r7, [r5, #0]
 800a8cc:	69e1      	ldr	r1, [r4, #28]
 800a8ce:	602b      	str	r3, [r5, #0]
 800a8d0:	d036      	beq.n	800a940 <__sflush_r+0xac>
 800a8d2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	075a      	lsls	r2, r3, #29
 800a8d8:	d505      	bpl.n	800a8e6 <__sflush_r+0x52>
 800a8da:	6863      	ldr	r3, [r4, #4]
 800a8dc:	1ac0      	subs	r0, r0, r3
 800a8de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a8e0:	b10b      	cbz	r3, 800a8e6 <__sflush_r+0x52>
 800a8e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a8e4:	1ac0      	subs	r0, r0, r3
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8ec:	69e1      	ldr	r1, [r4, #28]
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	47b0      	blx	r6
 800a8f2:	1c43      	adds	r3, r0, #1
 800a8f4:	89a3      	ldrh	r3, [r4, #12]
 800a8f6:	d106      	bne.n	800a906 <__sflush_r+0x72>
 800a8f8:	6829      	ldr	r1, [r5, #0]
 800a8fa:	291d      	cmp	r1, #29
 800a8fc:	d84c      	bhi.n	800a998 <__sflush_r+0x104>
 800a8fe:	4a2b      	ldr	r2, [pc, #172]	; (800a9ac <__sflush_r+0x118>)
 800a900:	40ca      	lsrs	r2, r1
 800a902:	07d6      	lsls	r6, r2, #31
 800a904:	d548      	bpl.n	800a998 <__sflush_r+0x104>
 800a906:	2200      	movs	r2, #0
 800a908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a90c:	b21b      	sxth	r3, r3
 800a90e:	6062      	str	r2, [r4, #4]
 800a910:	6922      	ldr	r2, [r4, #16]
 800a912:	04d9      	lsls	r1, r3, #19
 800a914:	81a3      	strh	r3, [r4, #12]
 800a916:	6022      	str	r2, [r4, #0]
 800a918:	d504      	bpl.n	800a924 <__sflush_r+0x90>
 800a91a:	1c42      	adds	r2, r0, #1
 800a91c:	d101      	bne.n	800a922 <__sflush_r+0x8e>
 800a91e:	682b      	ldr	r3, [r5, #0]
 800a920:	b903      	cbnz	r3, 800a924 <__sflush_r+0x90>
 800a922:	6520      	str	r0, [r4, #80]	; 0x50
 800a924:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a926:	602f      	str	r7, [r5, #0]
 800a928:	2900      	cmp	r1, #0
 800a92a:	d0c5      	beq.n	800a8b8 <__sflush_r+0x24>
 800a92c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a930:	4299      	cmp	r1, r3
 800a932:	d002      	beq.n	800a93a <__sflush_r+0xa6>
 800a934:	4628      	mov	r0, r5
 800a936:	f000 f937 	bl	800aba8 <_free_r>
 800a93a:	2000      	movs	r0, #0
 800a93c:	6320      	str	r0, [r4, #48]	; 0x30
 800a93e:	e7bc      	b.n	800a8ba <__sflush_r+0x26>
 800a940:	2301      	movs	r3, #1
 800a942:	4628      	mov	r0, r5
 800a944:	47b0      	blx	r6
 800a946:	1c41      	adds	r1, r0, #1
 800a948:	d1c4      	bne.n	800a8d4 <__sflush_r+0x40>
 800a94a:	682b      	ldr	r3, [r5, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d0c1      	beq.n	800a8d4 <__sflush_r+0x40>
 800a950:	2b1d      	cmp	r3, #29
 800a952:	d001      	beq.n	800a958 <__sflush_r+0xc4>
 800a954:	2b16      	cmp	r3, #22
 800a956:	d101      	bne.n	800a95c <__sflush_r+0xc8>
 800a958:	602f      	str	r7, [r5, #0]
 800a95a:	e7ad      	b.n	800a8b8 <__sflush_r+0x24>
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a962:	81a3      	strh	r3, [r4, #12]
 800a964:	e7a9      	b.n	800a8ba <__sflush_r+0x26>
 800a966:	690f      	ldr	r7, [r1, #16]
 800a968:	2f00      	cmp	r7, #0
 800a96a:	d0a5      	beq.n	800a8b8 <__sflush_r+0x24>
 800a96c:	079b      	lsls	r3, r3, #30
 800a96e:	bf18      	it	ne
 800a970:	2300      	movne	r3, #0
 800a972:	680e      	ldr	r6, [r1, #0]
 800a974:	bf08      	it	eq
 800a976:	694b      	ldreq	r3, [r1, #20]
 800a978:	eba6 0807 	sub.w	r8, r6, r7
 800a97c:	600f      	str	r7, [r1, #0]
 800a97e:	608b      	str	r3, [r1, #8]
 800a980:	f1b8 0f00 	cmp.w	r8, #0
 800a984:	dd98      	ble.n	800a8b8 <__sflush_r+0x24>
 800a986:	4643      	mov	r3, r8
 800a988:	463a      	mov	r2, r7
 800a98a:	69e1      	ldr	r1, [r4, #28]
 800a98c:	4628      	mov	r0, r5
 800a98e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a990:	47b0      	blx	r6
 800a992:	2800      	cmp	r0, #0
 800a994:	dc06      	bgt.n	800a9a4 <__sflush_r+0x110>
 800a996:	89a3      	ldrh	r3, [r4, #12]
 800a998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a99c:	81a3      	strh	r3, [r4, #12]
 800a99e:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a2:	e78a      	b.n	800a8ba <__sflush_r+0x26>
 800a9a4:	4407      	add	r7, r0
 800a9a6:	eba8 0800 	sub.w	r8, r8, r0
 800a9aa:	e7e9      	b.n	800a980 <__sflush_r+0xec>
 800a9ac:	20400001 	.word	0x20400001

0800a9b0 <_fflush_r>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	b118      	cbz	r0, 800a9c0 <_fflush_r+0x10>
 800a9b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a9ba:	b90b      	cbnz	r3, 800a9c0 <_fflush_r+0x10>
 800a9bc:	f000 f864 	bl	800aa88 <__sinit>
 800a9c0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800a9c4:	b1b8      	cbz	r0, 800a9f6 <_fflush_r+0x46>
 800a9c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9c8:	07db      	lsls	r3, r3, #31
 800a9ca:	d404      	bmi.n	800a9d6 <_fflush_r+0x26>
 800a9cc:	0581      	lsls	r1, r0, #22
 800a9ce:	d402      	bmi.n	800a9d6 <_fflush_r+0x26>
 800a9d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9d2:	f000 fb21 	bl	800b018 <__retarget_lock_acquire_recursive>
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	4621      	mov	r1, r4
 800a9da:	f7ff ff5b 	bl	800a894 <__sflush_r>
 800a9de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9e0:	4605      	mov	r5, r0
 800a9e2:	07da      	lsls	r2, r3, #31
 800a9e4:	d405      	bmi.n	800a9f2 <_fflush_r+0x42>
 800a9e6:	89a3      	ldrh	r3, [r4, #12]
 800a9e8:	059b      	lsls	r3, r3, #22
 800a9ea:	d402      	bmi.n	800a9f2 <_fflush_r+0x42>
 800a9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ee:	f000 fb14 	bl	800b01a <__retarget_lock_release_recursive>
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	bd38      	pop	{r3, r4, r5, pc}
 800a9f6:	4605      	mov	r5, r0
 800a9f8:	e7fb      	b.n	800a9f2 <_fflush_r+0x42>
	...

0800a9fc <std>:
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	b510      	push	{r4, lr}
 800aa00:	4604      	mov	r4, r0
 800aa02:	e9c0 3300 	strd	r3, r3, [r0]
 800aa06:	6083      	str	r3, [r0, #8]
 800aa08:	8181      	strh	r1, [r0, #12]
 800aa0a:	6643      	str	r3, [r0, #100]	; 0x64
 800aa0c:	81c2      	strh	r2, [r0, #14]
 800aa0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa12:	6183      	str	r3, [r0, #24]
 800aa14:	4619      	mov	r1, r3
 800aa16:	2208      	movs	r2, #8
 800aa18:	305c      	adds	r0, #92	; 0x5c
 800aa1a:	f7fc fb5a 	bl	80070d2 <memset>
 800aa1e:	4b07      	ldr	r3, [pc, #28]	; (800aa3c <std+0x40>)
 800aa20:	61e4      	str	r4, [r4, #28]
 800aa22:	6223      	str	r3, [r4, #32]
 800aa24:	4b06      	ldr	r3, [pc, #24]	; (800aa40 <std+0x44>)
 800aa26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa2a:	6263      	str	r3, [r4, #36]	; 0x24
 800aa2c:	4b05      	ldr	r3, [pc, #20]	; (800aa44 <std+0x48>)
 800aa2e:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa30:	4b05      	ldr	r3, [pc, #20]	; (800aa48 <std+0x4c>)
 800aa32:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa38:	f000 baec 	b.w	800b014 <__retarget_lock_init_recursive>
 800aa3c:	0800bf09 	.word	0x0800bf09
 800aa40:	0800bf2b 	.word	0x0800bf2b
 800aa44:	0800bf63 	.word	0x0800bf63
 800aa48:	0800bf87 	.word	0x0800bf87

0800aa4c <_cleanup_r>:
 800aa4c:	4901      	ldr	r1, [pc, #4]	; (800aa54 <_cleanup_r+0x8>)
 800aa4e:	f000 bab5 	b.w	800afbc <_fwalk_reent>
 800aa52:	bf00      	nop
 800aa54:	0800c275 	.word	0x0800c275

0800aa58 <__sfp_lock_acquire>:
 800aa58:	4801      	ldr	r0, [pc, #4]	; (800aa60 <__sfp_lock_acquire+0x8>)
 800aa5a:	f000 badd 	b.w	800b018 <__retarget_lock_acquire_recursive>
 800aa5e:	bf00      	nop
 800aa60:	2000234c 	.word	0x2000234c

0800aa64 <__sfp_lock_release>:
 800aa64:	4801      	ldr	r0, [pc, #4]	; (800aa6c <__sfp_lock_release+0x8>)
 800aa66:	f000 bad8 	b.w	800b01a <__retarget_lock_release_recursive>
 800aa6a:	bf00      	nop
 800aa6c:	2000234c 	.word	0x2000234c

0800aa70 <__sinit_lock_acquire>:
 800aa70:	4801      	ldr	r0, [pc, #4]	; (800aa78 <__sinit_lock_acquire+0x8>)
 800aa72:	f000 bad1 	b.w	800b018 <__retarget_lock_acquire_recursive>
 800aa76:	bf00      	nop
 800aa78:	20002347 	.word	0x20002347

0800aa7c <__sinit_lock_release>:
 800aa7c:	4801      	ldr	r0, [pc, #4]	; (800aa84 <__sinit_lock_release+0x8>)
 800aa7e:	f000 bacc 	b.w	800b01a <__retarget_lock_release_recursive>
 800aa82:	bf00      	nop
 800aa84:	20002347 	.word	0x20002347

0800aa88 <__sinit>:
 800aa88:	b510      	push	{r4, lr}
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	f7ff fff0 	bl	800aa70 <__sinit_lock_acquire>
 800aa90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800aa92:	b11a      	cbz	r2, 800aa9c <__sinit+0x14>
 800aa94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa98:	f7ff bff0 	b.w	800aa7c <__sinit_lock_release>
 800aa9c:	4b0d      	ldr	r3, [pc, #52]	; (800aad4 <__sinit+0x4c>)
 800aa9e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800aaa2:	63e3      	str	r3, [r4, #60]	; 0x3c
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800aaaa:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800aaae:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800aab2:	2104      	movs	r1, #4
 800aab4:	6860      	ldr	r0, [r4, #4]
 800aab6:	f7ff ffa1 	bl	800a9fc <std>
 800aaba:	2201      	movs	r2, #1
 800aabc:	2109      	movs	r1, #9
 800aabe:	68a0      	ldr	r0, [r4, #8]
 800aac0:	f7ff ff9c 	bl	800a9fc <std>
 800aac4:	2202      	movs	r2, #2
 800aac6:	2112      	movs	r1, #18
 800aac8:	68e0      	ldr	r0, [r4, #12]
 800aaca:	f7ff ff97 	bl	800a9fc <std>
 800aace:	2301      	movs	r3, #1
 800aad0:	63a3      	str	r3, [r4, #56]	; 0x38
 800aad2:	e7df      	b.n	800aa94 <__sinit+0xc>
 800aad4:	0800aa4d 	.word	0x0800aa4d

0800aad8 <__libc_fini_array>:
 800aad8:	b538      	push	{r3, r4, r5, lr}
 800aada:	4d07      	ldr	r5, [pc, #28]	; (800aaf8 <__libc_fini_array+0x20>)
 800aadc:	4c07      	ldr	r4, [pc, #28]	; (800aafc <__libc_fini_array+0x24>)
 800aade:	1b64      	subs	r4, r4, r5
 800aae0:	10a4      	asrs	r4, r4, #2
 800aae2:	b91c      	cbnz	r4, 800aaec <__libc_fini_array+0x14>
 800aae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aae8:	f001 bd40 	b.w	800c56c <_fini>
 800aaec:	3c01      	subs	r4, #1
 800aaee:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800aaf2:	4798      	blx	r3
 800aaf4:	e7f5      	b.n	800aae2 <__libc_fini_array+0xa>
 800aaf6:	bf00      	nop
 800aaf8:	0800ca44 	.word	0x0800ca44
 800aafc:	0800ca48 	.word	0x0800ca48

0800ab00 <_malloc_trim_r>:
 800ab00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab04:	4605      	mov	r5, r0
 800ab06:	2008      	movs	r0, #8
 800ab08:	460c      	mov	r4, r1
 800ab0a:	f001 facd 	bl	800c0a8 <sysconf>
 800ab0e:	4680      	mov	r8, r0
 800ab10:	4f22      	ldr	r7, [pc, #136]	; (800ab9c <_malloc_trim_r+0x9c>)
 800ab12:	4628      	mov	r0, r5
 800ab14:	f000 fd4c 	bl	800b5b0 <__malloc_lock>
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	685e      	ldr	r6, [r3, #4]
 800ab1c:	f026 0603 	bic.w	r6, r6, #3
 800ab20:	1b34      	subs	r4, r6, r4
 800ab22:	3c11      	subs	r4, #17
 800ab24:	4444      	add	r4, r8
 800ab26:	fbb4 f4f8 	udiv	r4, r4, r8
 800ab2a:	3c01      	subs	r4, #1
 800ab2c:	fb08 f404 	mul.w	r4, r8, r4
 800ab30:	45a0      	cmp	r8, r4
 800ab32:	dd05      	ble.n	800ab40 <_malloc_trim_r+0x40>
 800ab34:	4628      	mov	r0, r5
 800ab36:	f000 fd41 	bl	800b5bc <__malloc_unlock>
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab40:	2100      	movs	r1, #0
 800ab42:	4628      	mov	r0, r5
 800ab44:	f001 f9d0 	bl	800bee8 <_sbrk_r>
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	4433      	add	r3, r6
 800ab4c:	4298      	cmp	r0, r3
 800ab4e:	d1f1      	bne.n	800ab34 <_malloc_trim_r+0x34>
 800ab50:	4261      	negs	r1, r4
 800ab52:	4628      	mov	r0, r5
 800ab54:	f001 f9c8 	bl	800bee8 <_sbrk_r>
 800ab58:	3001      	adds	r0, #1
 800ab5a:	d110      	bne.n	800ab7e <_malloc_trim_r+0x7e>
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f001 f9c2 	bl	800bee8 <_sbrk_r>
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	1a83      	subs	r3, r0, r2
 800ab68:	2b0f      	cmp	r3, #15
 800ab6a:	dde3      	ble.n	800ab34 <_malloc_trim_r+0x34>
 800ab6c:	490c      	ldr	r1, [pc, #48]	; (800aba0 <_malloc_trim_r+0xa0>)
 800ab6e:	f043 0301 	orr.w	r3, r3, #1
 800ab72:	6809      	ldr	r1, [r1, #0]
 800ab74:	6053      	str	r3, [r2, #4]
 800ab76:	1a40      	subs	r0, r0, r1
 800ab78:	490a      	ldr	r1, [pc, #40]	; (800aba4 <_malloc_trim_r+0xa4>)
 800ab7a:	6008      	str	r0, [r1, #0]
 800ab7c:	e7da      	b.n	800ab34 <_malloc_trim_r+0x34>
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	4a08      	ldr	r2, [pc, #32]	; (800aba4 <_malloc_trim_r+0xa4>)
 800ab82:	1b36      	subs	r6, r6, r4
 800ab84:	f046 0601 	orr.w	r6, r6, #1
 800ab88:	605e      	str	r6, [r3, #4]
 800ab8a:	6813      	ldr	r3, [r2, #0]
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	1b1c      	subs	r4, r3, r4
 800ab90:	6014      	str	r4, [r2, #0]
 800ab92:	f000 fd13 	bl	800b5bc <__malloc_unlock>
 800ab96:	2001      	movs	r0, #1
 800ab98:	e7d0      	b.n	800ab3c <_malloc_trim_r+0x3c>
 800ab9a:	bf00      	nop
 800ab9c:	20000718 	.word	0x20000718
 800aba0:	20000b20 	.word	0x20000b20
 800aba4:	20000d70 	.word	0x20000d70

0800aba8 <_free_r>:
 800aba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abac:	4604      	mov	r4, r0
 800abae:	4688      	mov	r8, r1
 800abb0:	2900      	cmp	r1, #0
 800abb2:	f000 80ab 	beq.w	800ad0c <_free_r+0x164>
 800abb6:	f000 fcfb 	bl	800b5b0 <__malloc_lock>
 800abba:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800abbe:	4d54      	ldr	r5, [pc, #336]	; (800ad10 <_free_r+0x168>)
 800abc0:	f022 0001 	bic.w	r0, r2, #1
 800abc4:	f1a8 0308 	sub.w	r3, r8, #8
 800abc8:	181f      	adds	r7, r3, r0
 800abca:	68a9      	ldr	r1, [r5, #8]
 800abcc:	687e      	ldr	r6, [r7, #4]
 800abce:	42b9      	cmp	r1, r7
 800abd0:	f026 0603 	bic.w	r6, r6, #3
 800abd4:	f002 0201 	and.w	r2, r2, #1
 800abd8:	d11b      	bne.n	800ac12 <_free_r+0x6a>
 800abda:	4430      	add	r0, r6
 800abdc:	b93a      	cbnz	r2, 800abee <_free_r+0x46>
 800abde:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800abe2:	1a9b      	subs	r3, r3, r2
 800abe4:	4410      	add	r0, r2
 800abe6:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800abea:	60ca      	str	r2, [r1, #12]
 800abec:	6091      	str	r1, [r2, #8]
 800abee:	f040 0201 	orr.w	r2, r0, #1
 800abf2:	605a      	str	r2, [r3, #4]
 800abf4:	60ab      	str	r3, [r5, #8]
 800abf6:	4b47      	ldr	r3, [pc, #284]	; (800ad14 <_free_r+0x16c>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4283      	cmp	r3, r0
 800abfc:	d804      	bhi.n	800ac08 <_free_r+0x60>
 800abfe:	4b46      	ldr	r3, [pc, #280]	; (800ad18 <_free_r+0x170>)
 800ac00:	4620      	mov	r0, r4
 800ac02:	6819      	ldr	r1, [r3, #0]
 800ac04:	f7ff ff7c 	bl	800ab00 <_malloc_trim_r>
 800ac08:	4620      	mov	r0, r4
 800ac0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac0e:	f000 bcd5 	b.w	800b5bc <__malloc_unlock>
 800ac12:	607e      	str	r6, [r7, #4]
 800ac14:	2a00      	cmp	r2, #0
 800ac16:	d139      	bne.n	800ac8c <_free_r+0xe4>
 800ac18:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800ac1c:	f105 0c08 	add.w	ip, r5, #8
 800ac20:	1a5b      	subs	r3, r3, r1
 800ac22:	4408      	add	r0, r1
 800ac24:	6899      	ldr	r1, [r3, #8]
 800ac26:	4561      	cmp	r1, ip
 800ac28:	d032      	beq.n	800ac90 <_free_r+0xe8>
 800ac2a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800ac2e:	f8c1 c00c 	str.w	ip, [r1, #12]
 800ac32:	f8cc 1008 	str.w	r1, [ip, #8]
 800ac36:	19b9      	adds	r1, r7, r6
 800ac38:	6849      	ldr	r1, [r1, #4]
 800ac3a:	07c9      	lsls	r1, r1, #31
 800ac3c:	d40a      	bmi.n	800ac54 <_free_r+0xac>
 800ac3e:	4430      	add	r0, r6
 800ac40:	68b9      	ldr	r1, [r7, #8]
 800ac42:	bb3a      	cbnz	r2, 800ac94 <_free_r+0xec>
 800ac44:	4e35      	ldr	r6, [pc, #212]	; (800ad1c <_free_r+0x174>)
 800ac46:	42b1      	cmp	r1, r6
 800ac48:	d124      	bne.n	800ac94 <_free_r+0xec>
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800ac50:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800ac54:	f040 0101 	orr.w	r1, r0, #1
 800ac58:	6059      	str	r1, [r3, #4]
 800ac5a:	5018      	str	r0, [r3, r0]
 800ac5c:	2a00      	cmp	r2, #0
 800ac5e:	d1d3      	bne.n	800ac08 <_free_r+0x60>
 800ac60:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800ac64:	d21a      	bcs.n	800ac9c <_free_r+0xf4>
 800ac66:	2201      	movs	r2, #1
 800ac68:	08c0      	lsrs	r0, r0, #3
 800ac6a:	1081      	asrs	r1, r0, #2
 800ac6c:	408a      	lsls	r2, r1
 800ac6e:	6869      	ldr	r1, [r5, #4]
 800ac70:	3001      	adds	r0, #1
 800ac72:	430a      	orrs	r2, r1
 800ac74:	606a      	str	r2, [r5, #4]
 800ac76:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800ac7a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800ac7e:	3a08      	subs	r2, #8
 800ac80:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800ac84:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800ac88:	60cb      	str	r3, [r1, #12]
 800ac8a:	e7bd      	b.n	800ac08 <_free_r+0x60>
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	e7d2      	b.n	800ac36 <_free_r+0x8e>
 800ac90:	2201      	movs	r2, #1
 800ac92:	e7d0      	b.n	800ac36 <_free_r+0x8e>
 800ac94:	68fe      	ldr	r6, [r7, #12]
 800ac96:	60ce      	str	r6, [r1, #12]
 800ac98:	60b1      	str	r1, [r6, #8]
 800ac9a:	e7db      	b.n	800ac54 <_free_r+0xac>
 800ac9c:	0a42      	lsrs	r2, r0, #9
 800ac9e:	2a04      	cmp	r2, #4
 800aca0:	d813      	bhi.n	800acca <_free_r+0x122>
 800aca2:	0982      	lsrs	r2, r0, #6
 800aca4:	3238      	adds	r2, #56	; 0x38
 800aca6:	1c51      	adds	r1, r2, #1
 800aca8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800acac:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800acb0:	428e      	cmp	r6, r1
 800acb2:	d124      	bne.n	800acfe <_free_r+0x156>
 800acb4:	2001      	movs	r0, #1
 800acb6:	1092      	asrs	r2, r2, #2
 800acb8:	fa00 f202 	lsl.w	r2, r0, r2
 800acbc:	6868      	ldr	r0, [r5, #4]
 800acbe:	4302      	orrs	r2, r0
 800acc0:	606a      	str	r2, [r5, #4]
 800acc2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800acc6:	60b3      	str	r3, [r6, #8]
 800acc8:	e7de      	b.n	800ac88 <_free_r+0xe0>
 800acca:	2a14      	cmp	r2, #20
 800accc:	d801      	bhi.n	800acd2 <_free_r+0x12a>
 800acce:	325b      	adds	r2, #91	; 0x5b
 800acd0:	e7e9      	b.n	800aca6 <_free_r+0xfe>
 800acd2:	2a54      	cmp	r2, #84	; 0x54
 800acd4:	d802      	bhi.n	800acdc <_free_r+0x134>
 800acd6:	0b02      	lsrs	r2, r0, #12
 800acd8:	326e      	adds	r2, #110	; 0x6e
 800acda:	e7e4      	b.n	800aca6 <_free_r+0xfe>
 800acdc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800ace0:	d802      	bhi.n	800ace8 <_free_r+0x140>
 800ace2:	0bc2      	lsrs	r2, r0, #15
 800ace4:	3277      	adds	r2, #119	; 0x77
 800ace6:	e7de      	b.n	800aca6 <_free_r+0xfe>
 800ace8:	f240 5154 	movw	r1, #1364	; 0x554
 800acec:	428a      	cmp	r2, r1
 800acee:	bf9a      	itte	ls
 800acf0:	0c82      	lsrls	r2, r0, #18
 800acf2:	327c      	addls	r2, #124	; 0x7c
 800acf4:	227e      	movhi	r2, #126	; 0x7e
 800acf6:	e7d6      	b.n	800aca6 <_free_r+0xfe>
 800acf8:	6889      	ldr	r1, [r1, #8]
 800acfa:	428e      	cmp	r6, r1
 800acfc:	d004      	beq.n	800ad08 <_free_r+0x160>
 800acfe:	684a      	ldr	r2, [r1, #4]
 800ad00:	f022 0203 	bic.w	r2, r2, #3
 800ad04:	4282      	cmp	r2, r0
 800ad06:	d8f7      	bhi.n	800acf8 <_free_r+0x150>
 800ad08:	68ce      	ldr	r6, [r1, #12]
 800ad0a:	e7da      	b.n	800acc2 <_free_r+0x11a>
 800ad0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad10:	20000718 	.word	0x20000718
 800ad14:	20000b24 	.word	0x20000b24
 800ad18:	20000da0 	.word	0x20000da0
 800ad1c:	20000720 	.word	0x20000720

0800ad20 <__sfvwrite_r>:
 800ad20:	6893      	ldr	r3, [r2, #8]
 800ad22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad26:	4680      	mov	r8, r0
 800ad28:	460c      	mov	r4, r1
 800ad2a:	4691      	mov	r9, r2
 800ad2c:	b91b      	cbnz	r3, 800ad36 <__sfvwrite_r+0x16>
 800ad2e:	2000      	movs	r0, #0
 800ad30:	b003      	add	sp, #12
 800ad32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad36:	898b      	ldrh	r3, [r1, #12]
 800ad38:	0718      	lsls	r0, r3, #28
 800ad3a:	d54f      	bpl.n	800addc <__sfvwrite_r+0xbc>
 800ad3c:	690b      	ldr	r3, [r1, #16]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d04c      	beq.n	800addc <__sfvwrite_r+0xbc>
 800ad42:	89a5      	ldrh	r5, [r4, #12]
 800ad44:	f8d9 6000 	ldr.w	r6, [r9]
 800ad48:	f015 0702 	ands.w	r7, r5, #2
 800ad4c:	d169      	bne.n	800ae22 <__sfvwrite_r+0x102>
 800ad4e:	f015 0501 	ands.w	r5, r5, #1
 800ad52:	f000 809a 	beq.w	800ae8a <__sfvwrite_r+0x16a>
 800ad56:	4638      	mov	r0, r7
 800ad58:	46ba      	mov	sl, r7
 800ad5a:	46bb      	mov	fp, r7
 800ad5c:	f1bb 0f00 	cmp.w	fp, #0
 800ad60:	f000 8103 	beq.w	800af6a <__sfvwrite_r+0x24a>
 800ad64:	b950      	cbnz	r0, 800ad7c <__sfvwrite_r+0x5c>
 800ad66:	465a      	mov	r2, fp
 800ad68:	210a      	movs	r1, #10
 800ad6a:	4650      	mov	r0, sl
 800ad6c:	f000 fbf8 	bl	800b560 <memchr>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	f000 80ff 	beq.w	800af74 <__sfvwrite_r+0x254>
 800ad76:	3001      	adds	r0, #1
 800ad78:	eba0 070a 	sub.w	r7, r0, sl
 800ad7c:	6820      	ldr	r0, [r4, #0]
 800ad7e:	6921      	ldr	r1, [r4, #16]
 800ad80:	455f      	cmp	r7, fp
 800ad82:	463b      	mov	r3, r7
 800ad84:	bf28      	it	cs
 800ad86:	465b      	movcs	r3, fp
 800ad88:	4288      	cmp	r0, r1
 800ad8a:	6962      	ldr	r2, [r4, #20]
 800ad8c:	f240 80f5 	bls.w	800af7a <__sfvwrite_r+0x25a>
 800ad90:	68a5      	ldr	r5, [r4, #8]
 800ad92:	4415      	add	r5, r2
 800ad94:	42ab      	cmp	r3, r5
 800ad96:	f340 80f0 	ble.w	800af7a <__sfvwrite_r+0x25a>
 800ad9a:	4651      	mov	r1, sl
 800ad9c:	462a      	mov	r2, r5
 800ad9e:	f000 fbed 	bl	800b57c <memmove>
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	4621      	mov	r1, r4
 800ada6:	442b      	add	r3, r5
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	4640      	mov	r0, r8
 800adac:	f7ff fe00 	bl	800a9b0 <_fflush_r>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d165      	bne.n	800ae80 <__sfvwrite_r+0x160>
 800adb4:	1b7f      	subs	r7, r7, r5
 800adb6:	f040 80fa 	bne.w	800afae <__sfvwrite_r+0x28e>
 800adba:	4621      	mov	r1, r4
 800adbc:	4640      	mov	r0, r8
 800adbe:	f7ff fdf7 	bl	800a9b0 <_fflush_r>
 800adc2:	2800      	cmp	r0, #0
 800adc4:	d15c      	bne.n	800ae80 <__sfvwrite_r+0x160>
 800adc6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800adca:	44aa      	add	sl, r5
 800adcc:	ebab 0b05 	sub.w	fp, fp, r5
 800add0:	1b5d      	subs	r5, r3, r5
 800add2:	f8c9 5008 	str.w	r5, [r9, #8]
 800add6:	2d00      	cmp	r5, #0
 800add8:	d1c0      	bne.n	800ad5c <__sfvwrite_r+0x3c>
 800adda:	e7a8      	b.n	800ad2e <__sfvwrite_r+0xe>
 800addc:	4621      	mov	r1, r4
 800adde:	4640      	mov	r0, r8
 800ade0:	f7fe fec0 	bl	8009b64 <__swsetup_r>
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d0ac      	beq.n	800ad42 <__sfvwrite_r+0x22>
 800ade8:	f04f 30ff 	mov.w	r0, #4294967295
 800adec:	e7a0      	b.n	800ad30 <__sfvwrite_r+0x10>
 800adee:	e9d6 a700 	ldrd	sl, r7, [r6]
 800adf2:	3608      	adds	r6, #8
 800adf4:	2f00      	cmp	r7, #0
 800adf6:	d0fa      	beq.n	800adee <__sfvwrite_r+0xce>
 800adf8:	455f      	cmp	r7, fp
 800adfa:	463b      	mov	r3, r7
 800adfc:	4652      	mov	r2, sl
 800adfe:	bf28      	it	cs
 800ae00:	465b      	movcs	r3, fp
 800ae02:	69e1      	ldr	r1, [r4, #28]
 800ae04:	4640      	mov	r0, r8
 800ae06:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ae08:	47a8      	blx	r5
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	dd38      	ble.n	800ae80 <__sfvwrite_r+0x160>
 800ae0e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ae12:	4482      	add	sl, r0
 800ae14:	1a3f      	subs	r7, r7, r0
 800ae16:	1a18      	subs	r0, r3, r0
 800ae18:	f8c9 0008 	str.w	r0, [r9, #8]
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	d1e9      	bne.n	800adf4 <__sfvwrite_r+0xd4>
 800ae20:	e785      	b.n	800ad2e <__sfvwrite_r+0xe>
 800ae22:	f04f 0a00 	mov.w	sl, #0
 800ae26:	f8df b190 	ldr.w	fp, [pc, #400]	; 800afb8 <__sfvwrite_r+0x298>
 800ae2a:	4657      	mov	r7, sl
 800ae2c:	e7e2      	b.n	800adf4 <__sfvwrite_r+0xd4>
 800ae2e:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800ae32:	3608      	adds	r6, #8
 800ae34:	f1ba 0f00 	cmp.w	sl, #0
 800ae38:	d0f9      	beq.n	800ae2e <__sfvwrite_r+0x10e>
 800ae3a:	89a2      	ldrh	r2, [r4, #12]
 800ae3c:	68a3      	ldr	r3, [r4, #8]
 800ae3e:	0591      	lsls	r1, r2, #22
 800ae40:	6820      	ldr	r0, [r4, #0]
 800ae42:	d564      	bpl.n	800af0e <__sfvwrite_r+0x1ee>
 800ae44:	4553      	cmp	r3, sl
 800ae46:	d836      	bhi.n	800aeb6 <__sfvwrite_r+0x196>
 800ae48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae4c:	d033      	beq.n	800aeb6 <__sfvwrite_r+0x196>
 800ae4e:	2302      	movs	r3, #2
 800ae50:	6967      	ldr	r7, [r4, #20]
 800ae52:	6921      	ldr	r1, [r4, #16]
 800ae54:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800ae58:	fb97 f7f3 	sdiv	r7, r7, r3
 800ae5c:	eba0 0b01 	sub.w	fp, r0, r1
 800ae60:	f10b 0301 	add.w	r3, fp, #1
 800ae64:	4453      	add	r3, sl
 800ae66:	429f      	cmp	r7, r3
 800ae68:	bf38      	it	cc
 800ae6a:	461f      	movcc	r7, r3
 800ae6c:	0553      	lsls	r3, r2, #21
 800ae6e:	d53e      	bpl.n	800aeee <__sfvwrite_r+0x1ce>
 800ae70:	4639      	mov	r1, r7
 800ae72:	4640      	mov	r0, r8
 800ae74:	f000 f93e 	bl	800b0f4 <_malloc_r>
 800ae78:	b948      	cbnz	r0, 800ae8e <__sfvwrite_r+0x16e>
 800ae7a:	230c      	movs	r3, #12
 800ae7c:	f8c8 3000 	str.w	r3, [r8]
 800ae80:	89a3      	ldrh	r3, [r4, #12]
 800ae82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae86:	81a3      	strh	r3, [r4, #12]
 800ae88:	e7ae      	b.n	800ade8 <__sfvwrite_r+0xc8>
 800ae8a:	46aa      	mov	sl, r5
 800ae8c:	e7d2      	b.n	800ae34 <__sfvwrite_r+0x114>
 800ae8e:	465a      	mov	r2, fp
 800ae90:	6921      	ldr	r1, [r4, #16]
 800ae92:	9001      	str	r0, [sp, #4]
 800ae94:	f7fc f912 	bl	80070bc <memcpy>
 800ae98:	89a2      	ldrh	r2, [r4, #12]
 800ae9a:	9b01      	ldr	r3, [sp, #4]
 800ae9c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800aea0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aea4:	81a2      	strh	r2, [r4, #12]
 800aea6:	6123      	str	r3, [r4, #16]
 800aea8:	445b      	add	r3, fp
 800aeaa:	6023      	str	r3, [r4, #0]
 800aeac:	4653      	mov	r3, sl
 800aeae:	6167      	str	r7, [r4, #20]
 800aeb0:	eba7 070b 	sub.w	r7, r7, fp
 800aeb4:	60a7      	str	r7, [r4, #8]
 800aeb6:	4553      	cmp	r3, sl
 800aeb8:	bf28      	it	cs
 800aeba:	4653      	movcs	r3, sl
 800aebc:	4657      	mov	r7, sl
 800aebe:	461a      	mov	r2, r3
 800aec0:	4629      	mov	r1, r5
 800aec2:	6820      	ldr	r0, [r4, #0]
 800aec4:	9301      	str	r3, [sp, #4]
 800aec6:	f000 fb59 	bl	800b57c <memmove>
 800aeca:	68a2      	ldr	r2, [r4, #8]
 800aecc:	9b01      	ldr	r3, [sp, #4]
 800aece:	1ad2      	subs	r2, r2, r3
 800aed0:	60a2      	str	r2, [r4, #8]
 800aed2:	6822      	ldr	r2, [r4, #0]
 800aed4:	4413      	add	r3, r2
 800aed6:	6023      	str	r3, [r4, #0]
 800aed8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800aedc:	443d      	add	r5, r7
 800aede:	ebaa 0a07 	sub.w	sl, sl, r7
 800aee2:	1bdf      	subs	r7, r3, r7
 800aee4:	f8c9 7008 	str.w	r7, [r9, #8]
 800aee8:	2f00      	cmp	r7, #0
 800aeea:	d1a3      	bne.n	800ae34 <__sfvwrite_r+0x114>
 800aeec:	e71f      	b.n	800ad2e <__sfvwrite_r+0xe>
 800aeee:	463a      	mov	r2, r7
 800aef0:	4640      	mov	r0, r8
 800aef2:	f000 fe1b 	bl	800bb2c <_realloc_r>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d1d4      	bne.n	800aea6 <__sfvwrite_r+0x186>
 800aefc:	6921      	ldr	r1, [r4, #16]
 800aefe:	4640      	mov	r0, r8
 800af00:	f7ff fe52 	bl	800aba8 <_free_r>
 800af04:	89a3      	ldrh	r3, [r4, #12]
 800af06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af0a:	81a3      	strh	r3, [r4, #12]
 800af0c:	e7b5      	b.n	800ae7a <__sfvwrite_r+0x15a>
 800af0e:	6922      	ldr	r2, [r4, #16]
 800af10:	4282      	cmp	r2, r0
 800af12:	d302      	bcc.n	800af1a <__sfvwrite_r+0x1fa>
 800af14:	6962      	ldr	r2, [r4, #20]
 800af16:	4552      	cmp	r2, sl
 800af18:	d916      	bls.n	800af48 <__sfvwrite_r+0x228>
 800af1a:	4553      	cmp	r3, sl
 800af1c:	bf28      	it	cs
 800af1e:	4653      	movcs	r3, sl
 800af20:	461f      	mov	r7, r3
 800af22:	461a      	mov	r2, r3
 800af24:	4629      	mov	r1, r5
 800af26:	f000 fb29 	bl	800b57c <memmove>
 800af2a:	68a3      	ldr	r3, [r4, #8]
 800af2c:	6822      	ldr	r2, [r4, #0]
 800af2e:	1bdb      	subs	r3, r3, r7
 800af30:	443a      	add	r2, r7
 800af32:	60a3      	str	r3, [r4, #8]
 800af34:	6022      	str	r2, [r4, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1ce      	bne.n	800aed8 <__sfvwrite_r+0x1b8>
 800af3a:	4621      	mov	r1, r4
 800af3c:	4640      	mov	r0, r8
 800af3e:	f7ff fd37 	bl	800a9b0 <_fflush_r>
 800af42:	2800      	cmp	r0, #0
 800af44:	d0c8      	beq.n	800aed8 <__sfvwrite_r+0x1b8>
 800af46:	e79b      	b.n	800ae80 <__sfvwrite_r+0x160>
 800af48:	4b1a      	ldr	r3, [pc, #104]	; (800afb4 <__sfvwrite_r+0x294>)
 800af4a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800af4c:	459a      	cmp	sl, r3
 800af4e:	bf94      	ite	ls
 800af50:	4653      	movls	r3, sl
 800af52:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 800af56:	fb93 f3f2 	sdiv	r3, r3, r2
 800af5a:	69e1      	ldr	r1, [r4, #28]
 800af5c:	4353      	muls	r3, r2
 800af5e:	4640      	mov	r0, r8
 800af60:	462a      	mov	r2, r5
 800af62:	47b8      	blx	r7
 800af64:	1e07      	subs	r7, r0, #0
 800af66:	dcb7      	bgt.n	800aed8 <__sfvwrite_r+0x1b8>
 800af68:	e78a      	b.n	800ae80 <__sfvwrite_r+0x160>
 800af6a:	e9d6 ab00 	ldrd	sl, fp, [r6]
 800af6e:	2000      	movs	r0, #0
 800af70:	3608      	adds	r6, #8
 800af72:	e6f3      	b.n	800ad5c <__sfvwrite_r+0x3c>
 800af74:	f10b 0701 	add.w	r7, fp, #1
 800af78:	e700      	b.n	800ad7c <__sfvwrite_r+0x5c>
 800af7a:	429a      	cmp	r2, r3
 800af7c:	dc09      	bgt.n	800af92 <__sfvwrite_r+0x272>
 800af7e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800af80:	4613      	mov	r3, r2
 800af82:	69e1      	ldr	r1, [r4, #28]
 800af84:	4652      	mov	r2, sl
 800af86:	4640      	mov	r0, r8
 800af88:	47a8      	blx	r5
 800af8a:	1e05      	subs	r5, r0, #0
 800af8c:	f73f af12 	bgt.w	800adb4 <__sfvwrite_r+0x94>
 800af90:	e776      	b.n	800ae80 <__sfvwrite_r+0x160>
 800af92:	461a      	mov	r2, r3
 800af94:	4651      	mov	r1, sl
 800af96:	9301      	str	r3, [sp, #4]
 800af98:	f000 faf0 	bl	800b57c <memmove>
 800af9c:	9b01      	ldr	r3, [sp, #4]
 800af9e:	68a2      	ldr	r2, [r4, #8]
 800afa0:	461d      	mov	r5, r3
 800afa2:	1ad2      	subs	r2, r2, r3
 800afa4:	60a2      	str	r2, [r4, #8]
 800afa6:	6822      	ldr	r2, [r4, #0]
 800afa8:	441a      	add	r2, r3
 800afaa:	6022      	str	r2, [r4, #0]
 800afac:	e702      	b.n	800adb4 <__sfvwrite_r+0x94>
 800afae:	2001      	movs	r0, #1
 800afb0:	e709      	b.n	800adc6 <__sfvwrite_r+0xa6>
 800afb2:	bf00      	nop
 800afb4:	7ffffffe 	.word	0x7ffffffe
 800afb8:	7ffffc00 	.word	0x7ffffc00

0800afbc <_fwalk_reent>:
 800afbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc0:	4680      	mov	r8, r0
 800afc2:	4689      	mov	r9, r1
 800afc4:	2600      	movs	r6, #0
 800afc6:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800afca:	b914      	cbnz	r4, 800afd2 <_fwalk_reent+0x16>
 800afcc:	4630      	mov	r0, r6
 800afce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afd2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800afd6:	3f01      	subs	r7, #1
 800afd8:	d501      	bpl.n	800afde <_fwalk_reent+0x22>
 800afda:	6824      	ldr	r4, [r4, #0]
 800afdc:	e7f5      	b.n	800afca <_fwalk_reent+0xe>
 800afde:	89ab      	ldrh	r3, [r5, #12]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d907      	bls.n	800aff4 <_fwalk_reent+0x38>
 800afe4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afe8:	3301      	adds	r3, #1
 800afea:	d003      	beq.n	800aff4 <_fwalk_reent+0x38>
 800afec:	4629      	mov	r1, r5
 800afee:	4640      	mov	r0, r8
 800aff0:	47c8      	blx	r9
 800aff2:	4306      	orrs	r6, r0
 800aff4:	3568      	adds	r5, #104	; 0x68
 800aff6:	e7ee      	b.n	800afd6 <_fwalk_reent+0x1a>

0800aff8 <_localeconv_r>:
 800aff8:	4b04      	ldr	r3, [pc, #16]	; (800b00c <_localeconv_r+0x14>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800affe:	4b04      	ldr	r3, [pc, #16]	; (800b010 <_localeconv_r+0x18>)
 800b000:	2800      	cmp	r0, #0
 800b002:	bf08      	it	eq
 800b004:	4618      	moveq	r0, r3
 800b006:	30f0      	adds	r0, #240	; 0xf0
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	2000017c 	.word	0x2000017c
 800b010:	200005a8 	.word	0x200005a8

0800b014 <__retarget_lock_init_recursive>:
 800b014:	4770      	bx	lr

0800b016 <__retarget_lock_close_recursive>:
 800b016:	4770      	bx	lr

0800b018 <__retarget_lock_acquire_recursive>:
 800b018:	4770      	bx	lr

0800b01a <__retarget_lock_release_recursive>:
 800b01a:	4770      	bx	lr

0800b01c <__swhatbuf_r>:
 800b01c:	b570      	push	{r4, r5, r6, lr}
 800b01e:	460e      	mov	r6, r1
 800b020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b024:	b096      	sub	sp, #88	; 0x58
 800b026:	2900      	cmp	r1, #0
 800b028:	4614      	mov	r4, r2
 800b02a:	461d      	mov	r5, r3
 800b02c:	da09      	bge.n	800b042 <__swhatbuf_r+0x26>
 800b02e:	2200      	movs	r2, #0
 800b030:	89b3      	ldrh	r3, [r6, #12]
 800b032:	602a      	str	r2, [r5, #0]
 800b034:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b038:	d116      	bne.n	800b068 <__swhatbuf_r+0x4c>
 800b03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b03e:	6023      	str	r3, [r4, #0]
 800b040:	e015      	b.n	800b06e <__swhatbuf_r+0x52>
 800b042:	466a      	mov	r2, sp
 800b044:	f001 f9d8 	bl	800c3f8 <_fstat_r>
 800b048:	2800      	cmp	r0, #0
 800b04a:	dbf0      	blt.n	800b02e <__swhatbuf_r+0x12>
 800b04c:	9a01      	ldr	r2, [sp, #4]
 800b04e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b052:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b056:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b05a:	425a      	negs	r2, r3
 800b05c:	415a      	adcs	r2, r3
 800b05e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b062:	602a      	str	r2, [r5, #0]
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	e002      	b.n	800b06e <__swhatbuf_r+0x52>
 800b068:	2340      	movs	r3, #64	; 0x40
 800b06a:	4610      	mov	r0, r2
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	b016      	add	sp, #88	; 0x58
 800b070:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b074 <__smakebuf_r>:
 800b074:	898b      	ldrh	r3, [r1, #12]
 800b076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b078:	079d      	lsls	r5, r3, #30
 800b07a:	4606      	mov	r6, r0
 800b07c:	460c      	mov	r4, r1
 800b07e:	d507      	bpl.n	800b090 <__smakebuf_r+0x1c>
 800b080:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800b084:	6023      	str	r3, [r4, #0]
 800b086:	6123      	str	r3, [r4, #16]
 800b088:	2301      	movs	r3, #1
 800b08a:	6163      	str	r3, [r4, #20]
 800b08c:	b002      	add	sp, #8
 800b08e:	bd70      	pop	{r4, r5, r6, pc}
 800b090:	ab01      	add	r3, sp, #4
 800b092:	466a      	mov	r2, sp
 800b094:	f7ff ffc2 	bl	800b01c <__swhatbuf_r>
 800b098:	9900      	ldr	r1, [sp, #0]
 800b09a:	4605      	mov	r5, r0
 800b09c:	4630      	mov	r0, r6
 800b09e:	f000 f829 	bl	800b0f4 <_malloc_r>
 800b0a2:	b948      	cbnz	r0, 800b0b8 <__smakebuf_r+0x44>
 800b0a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0a8:	059a      	lsls	r2, r3, #22
 800b0aa:	d4ef      	bmi.n	800b08c <__smakebuf_r+0x18>
 800b0ac:	f023 0303 	bic.w	r3, r3, #3
 800b0b0:	f043 0302 	orr.w	r3, r3, #2
 800b0b4:	81a3      	strh	r3, [r4, #12]
 800b0b6:	e7e3      	b.n	800b080 <__smakebuf_r+0xc>
 800b0b8:	4b0d      	ldr	r3, [pc, #52]	; (800b0f0 <__smakebuf_r+0x7c>)
 800b0ba:	63f3      	str	r3, [r6, #60]	; 0x3c
 800b0bc:	89a3      	ldrh	r3, [r4, #12]
 800b0be:	6020      	str	r0, [r4, #0]
 800b0c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0c4:	81a3      	strh	r3, [r4, #12]
 800b0c6:	9b00      	ldr	r3, [sp, #0]
 800b0c8:	6120      	str	r0, [r4, #16]
 800b0ca:	6163      	str	r3, [r4, #20]
 800b0cc:	9b01      	ldr	r3, [sp, #4]
 800b0ce:	b15b      	cbz	r3, 800b0e8 <__smakebuf_r+0x74>
 800b0d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f001 f9a1 	bl	800c41c <_isatty_r>
 800b0da:	b128      	cbz	r0, 800b0e8 <__smakebuf_r+0x74>
 800b0dc:	89a3      	ldrh	r3, [r4, #12]
 800b0de:	f023 0303 	bic.w	r3, r3, #3
 800b0e2:	f043 0301 	orr.w	r3, r3, #1
 800b0e6:	81a3      	strh	r3, [r4, #12]
 800b0e8:	89a3      	ldrh	r3, [r4, #12]
 800b0ea:	431d      	orrs	r5, r3
 800b0ec:	81a5      	strh	r5, [r4, #12]
 800b0ee:	e7cd      	b.n	800b08c <__smakebuf_r+0x18>
 800b0f0:	0800aa4d 	.word	0x0800aa4d

0800b0f4 <_malloc_r>:
 800b0f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f8:	f101 050b 	add.w	r5, r1, #11
 800b0fc:	2d16      	cmp	r5, #22
 800b0fe:	4606      	mov	r6, r0
 800b100:	d906      	bls.n	800b110 <_malloc_r+0x1c>
 800b102:	f035 0507 	bics.w	r5, r5, #7
 800b106:	d504      	bpl.n	800b112 <_malloc_r+0x1e>
 800b108:	230c      	movs	r3, #12
 800b10a:	6033      	str	r3, [r6, #0]
 800b10c:	2400      	movs	r4, #0
 800b10e:	e1a8      	b.n	800b462 <_malloc_r+0x36e>
 800b110:	2510      	movs	r5, #16
 800b112:	428d      	cmp	r5, r1
 800b114:	d3f8      	bcc.n	800b108 <_malloc_r+0x14>
 800b116:	4630      	mov	r0, r6
 800b118:	f000 fa4a 	bl	800b5b0 <__malloc_lock>
 800b11c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800b120:	4fc0      	ldr	r7, [pc, #768]	; (800b424 <_malloc_r+0x330>)
 800b122:	d238      	bcs.n	800b196 <_malloc_r+0xa2>
 800b124:	f105 0208 	add.w	r2, r5, #8
 800b128:	443a      	add	r2, r7
 800b12a:	6854      	ldr	r4, [r2, #4]
 800b12c:	f1a2 0108 	sub.w	r1, r2, #8
 800b130:	428c      	cmp	r4, r1
 800b132:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 800b136:	d102      	bne.n	800b13e <_malloc_r+0x4a>
 800b138:	68d4      	ldr	r4, [r2, #12]
 800b13a:	42a2      	cmp	r2, r4
 800b13c:	d010      	beq.n	800b160 <_malloc_r+0x6c>
 800b13e:	6863      	ldr	r3, [r4, #4]
 800b140:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800b144:	f023 0303 	bic.w	r3, r3, #3
 800b148:	60ca      	str	r2, [r1, #12]
 800b14a:	4423      	add	r3, r4
 800b14c:	6091      	str	r1, [r2, #8]
 800b14e:	685a      	ldr	r2, [r3, #4]
 800b150:	f042 0201 	orr.w	r2, r2, #1
 800b154:	605a      	str	r2, [r3, #4]
 800b156:	4630      	mov	r0, r6
 800b158:	f000 fa30 	bl	800b5bc <__malloc_unlock>
 800b15c:	3408      	adds	r4, #8
 800b15e:	e180      	b.n	800b462 <_malloc_r+0x36e>
 800b160:	3302      	adds	r3, #2
 800b162:	4ab1      	ldr	r2, [pc, #708]	; (800b428 <_malloc_r+0x334>)
 800b164:	693c      	ldr	r4, [r7, #16]
 800b166:	4611      	mov	r1, r2
 800b168:	4294      	cmp	r4, r2
 800b16a:	d075      	beq.n	800b258 <_malloc_r+0x164>
 800b16c:	6860      	ldr	r0, [r4, #4]
 800b16e:	f020 0c03 	bic.w	ip, r0, #3
 800b172:	ebac 0005 	sub.w	r0, ip, r5
 800b176:	280f      	cmp	r0, #15
 800b178:	dd48      	ble.n	800b20c <_malloc_r+0x118>
 800b17a:	1963      	adds	r3, r4, r5
 800b17c:	f045 0501 	orr.w	r5, r5, #1
 800b180:	6065      	str	r5, [r4, #4]
 800b182:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800b186:	e9c3 2202 	strd	r2, r2, [r3, #8]
 800b18a:	f040 0201 	orr.w	r2, r0, #1
 800b18e:	605a      	str	r2, [r3, #4]
 800b190:	f844 000c 	str.w	r0, [r4, ip]
 800b194:	e7df      	b.n	800b156 <_malloc_r+0x62>
 800b196:	0a6b      	lsrs	r3, r5, #9
 800b198:	d02a      	beq.n	800b1f0 <_malloc_r+0xfc>
 800b19a:	2b04      	cmp	r3, #4
 800b19c:	d812      	bhi.n	800b1c4 <_malloc_r+0xd0>
 800b19e:	09ab      	lsrs	r3, r5, #6
 800b1a0:	3338      	adds	r3, #56	; 0x38
 800b1a2:	1c5a      	adds	r2, r3, #1
 800b1a4:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800b1a8:	6854      	ldr	r4, [r2, #4]
 800b1aa:	f1a2 0c08 	sub.w	ip, r2, #8
 800b1ae:	4564      	cmp	r4, ip
 800b1b0:	d006      	beq.n	800b1c0 <_malloc_r+0xcc>
 800b1b2:	6862      	ldr	r2, [r4, #4]
 800b1b4:	f022 0203 	bic.w	r2, r2, #3
 800b1b8:	1b50      	subs	r0, r2, r5
 800b1ba:	280f      	cmp	r0, #15
 800b1bc:	dd1c      	ble.n	800b1f8 <_malloc_r+0x104>
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	e7ce      	b.n	800b162 <_malloc_r+0x6e>
 800b1c4:	2b14      	cmp	r3, #20
 800b1c6:	d801      	bhi.n	800b1cc <_malloc_r+0xd8>
 800b1c8:	335b      	adds	r3, #91	; 0x5b
 800b1ca:	e7ea      	b.n	800b1a2 <_malloc_r+0xae>
 800b1cc:	2b54      	cmp	r3, #84	; 0x54
 800b1ce:	d802      	bhi.n	800b1d6 <_malloc_r+0xe2>
 800b1d0:	0b2b      	lsrs	r3, r5, #12
 800b1d2:	336e      	adds	r3, #110	; 0x6e
 800b1d4:	e7e5      	b.n	800b1a2 <_malloc_r+0xae>
 800b1d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800b1da:	d802      	bhi.n	800b1e2 <_malloc_r+0xee>
 800b1dc:	0beb      	lsrs	r3, r5, #15
 800b1de:	3377      	adds	r3, #119	; 0x77
 800b1e0:	e7df      	b.n	800b1a2 <_malloc_r+0xae>
 800b1e2:	f240 5254 	movw	r2, #1364	; 0x554
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d804      	bhi.n	800b1f4 <_malloc_r+0x100>
 800b1ea:	0cab      	lsrs	r3, r5, #18
 800b1ec:	337c      	adds	r3, #124	; 0x7c
 800b1ee:	e7d8      	b.n	800b1a2 <_malloc_r+0xae>
 800b1f0:	233f      	movs	r3, #63	; 0x3f
 800b1f2:	e7d6      	b.n	800b1a2 <_malloc_r+0xae>
 800b1f4:	237e      	movs	r3, #126	; 0x7e
 800b1f6:	e7d4      	b.n	800b1a2 <_malloc_r+0xae>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	68e1      	ldr	r1, [r4, #12]
 800b1fc:	db04      	blt.n	800b208 <_malloc_r+0x114>
 800b1fe:	68a3      	ldr	r3, [r4, #8]
 800b200:	60d9      	str	r1, [r3, #12]
 800b202:	608b      	str	r3, [r1, #8]
 800b204:	18a3      	adds	r3, r4, r2
 800b206:	e7a2      	b.n	800b14e <_malloc_r+0x5a>
 800b208:	460c      	mov	r4, r1
 800b20a:	e7d0      	b.n	800b1ae <_malloc_r+0xba>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800b212:	db07      	blt.n	800b224 <_malloc_r+0x130>
 800b214:	44a4      	add	ip, r4
 800b216:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800b21a:	f043 0301 	orr.w	r3, r3, #1
 800b21e:	f8cc 3004 	str.w	r3, [ip, #4]
 800b222:	e798      	b.n	800b156 <_malloc_r+0x62>
 800b224:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f080 8099 	bcs.w	800b360 <_malloc_r+0x26c>
 800b22e:	2201      	movs	r2, #1
 800b230:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800b234:	ea4f 0eac 	mov.w	lr, ip, asr #2
 800b238:	fa02 f20e 	lsl.w	r2, r2, lr
 800b23c:	4310      	orrs	r0, r2
 800b23e:	f10c 0c01 	add.w	ip, ip, #1
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 800b248:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 800b24c:	3a08      	subs	r2, #8
 800b24e:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800b252:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800b256:	60c4      	str	r4, [r0, #12]
 800b258:	2001      	movs	r0, #1
 800b25a:	109a      	asrs	r2, r3, #2
 800b25c:	fa00 f202 	lsl.w	r2, r0, r2
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	4290      	cmp	r0, r2
 800b264:	d326      	bcc.n	800b2b4 <_malloc_r+0x1c0>
 800b266:	4210      	tst	r0, r2
 800b268:	d106      	bne.n	800b278 <_malloc_r+0x184>
 800b26a:	f023 0303 	bic.w	r3, r3, #3
 800b26e:	0052      	lsls	r2, r2, #1
 800b270:	4210      	tst	r0, r2
 800b272:	f103 0304 	add.w	r3, r3, #4
 800b276:	d0fa      	beq.n	800b26e <_malloc_r+0x17a>
 800b278:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 800b27c:	46e1      	mov	r9, ip
 800b27e:	4698      	mov	r8, r3
 800b280:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800b284:	454c      	cmp	r4, r9
 800b286:	f040 80af 	bne.w	800b3e8 <_malloc_r+0x2f4>
 800b28a:	f108 0801 	add.w	r8, r8, #1
 800b28e:	f018 0f03 	tst.w	r8, #3
 800b292:	f109 0908 	add.w	r9, r9, #8
 800b296:	d1f3      	bne.n	800b280 <_malloc_r+0x18c>
 800b298:	0798      	lsls	r0, r3, #30
 800b29a:	f040 80e8 	bne.w	800b46e <_malloc_r+0x37a>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	ea23 0302 	bic.w	r3, r3, r2
 800b2a4:	607b      	str	r3, [r7, #4]
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	0052      	lsls	r2, r2, #1
 800b2aa:	4290      	cmp	r0, r2
 800b2ac:	d302      	bcc.n	800b2b4 <_malloc_r+0x1c0>
 800b2ae:	2a00      	cmp	r2, #0
 800b2b0:	f040 80eb 	bne.w	800b48a <_malloc_r+0x396>
 800b2b4:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800b2b8:	f8da 4004 	ldr.w	r4, [sl, #4]
 800b2bc:	f024 0203 	bic.w	r2, r4, #3
 800b2c0:	42aa      	cmp	r2, r5
 800b2c2:	d303      	bcc.n	800b2cc <_malloc_r+0x1d8>
 800b2c4:	1b53      	subs	r3, r2, r5
 800b2c6:	2b0f      	cmp	r3, #15
 800b2c8:	f300 813f 	bgt.w	800b54a <_malloc_r+0x456>
 800b2cc:	4b57      	ldr	r3, [pc, #348]	; (800b42c <_malloc_r+0x338>)
 800b2ce:	2008      	movs	r0, #8
 800b2d0:	681c      	ldr	r4, [r3, #0]
 800b2d2:	9200      	str	r2, [sp, #0]
 800b2d4:	f000 fee8 	bl	800c0a8 <sysconf>
 800b2d8:	4b55      	ldr	r3, [pc, #340]	; (800b430 <_malloc_r+0x33c>)
 800b2da:	3410      	adds	r4, #16
 800b2dc:	6819      	ldr	r1, [r3, #0]
 800b2de:	442c      	add	r4, r5
 800b2e0:	3101      	adds	r1, #1
 800b2e2:	bf1f      	itttt	ne
 800b2e4:	f104 34ff 	addne.w	r4, r4, #4294967295
 800b2e8:	1824      	addne	r4, r4, r0
 800b2ea:	4241      	negne	r1, r0
 800b2ec:	400c      	andne	r4, r1
 800b2ee:	9a00      	ldr	r2, [sp, #0]
 800b2f0:	4680      	mov	r8, r0
 800b2f2:	4621      	mov	r1, r4
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	e9cd 2300 	strd	r2, r3, [sp]
 800b2fa:	f000 fdf5 	bl	800bee8 <_sbrk_r>
 800b2fe:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b302:	4683      	mov	fp, r0
 800b304:	f000 80fa 	beq.w	800b4fc <_malloc_r+0x408>
 800b308:	9a00      	ldr	r2, [sp, #0]
 800b30a:	9b01      	ldr	r3, [sp, #4]
 800b30c:	eb0a 0102 	add.w	r1, sl, r2
 800b310:	4281      	cmp	r1, r0
 800b312:	d902      	bls.n	800b31a <_malloc_r+0x226>
 800b314:	45ba      	cmp	sl, r7
 800b316:	f040 80f1 	bne.w	800b4fc <_malloc_r+0x408>
 800b31a:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800b43c <_malloc_r+0x348>
 800b31e:	4559      	cmp	r1, fp
 800b320:	f8d9 0000 	ldr.w	r0, [r9]
 800b324:	f108 3cff 	add.w	ip, r8, #4294967295
 800b328:	eb00 0e04 	add.w	lr, r0, r4
 800b32c:	f8c9 e000 	str.w	lr, [r9]
 800b330:	f040 80ad 	bne.w	800b48e <_malloc_r+0x39a>
 800b334:	ea11 0f0c 	tst.w	r1, ip
 800b338:	f040 80a9 	bne.w	800b48e <_malloc_r+0x39a>
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	4414      	add	r4, r2
 800b340:	f044 0401 	orr.w	r4, r4, #1
 800b344:	605c      	str	r4, [r3, #4]
 800b346:	4a3b      	ldr	r2, [pc, #236]	; (800b434 <_malloc_r+0x340>)
 800b348:	f8d9 3000 	ldr.w	r3, [r9]
 800b34c:	6811      	ldr	r1, [r2, #0]
 800b34e:	428b      	cmp	r3, r1
 800b350:	bf88      	it	hi
 800b352:	6013      	strhi	r3, [r2, #0]
 800b354:	4a38      	ldr	r2, [pc, #224]	; (800b438 <_malloc_r+0x344>)
 800b356:	6811      	ldr	r1, [r2, #0]
 800b358:	428b      	cmp	r3, r1
 800b35a:	bf88      	it	hi
 800b35c:	6013      	strhi	r3, [r2, #0]
 800b35e:	e0cd      	b.n	800b4fc <_malloc_r+0x408>
 800b360:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800b364:	2a04      	cmp	r2, #4
 800b366:	d818      	bhi.n	800b39a <_malloc_r+0x2a6>
 800b368:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800b36c:	3238      	adds	r2, #56	; 0x38
 800b36e:	f102 0e01 	add.w	lr, r2, #1
 800b372:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 800b376:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 800b37a:	45f0      	cmp	r8, lr
 800b37c:	d12b      	bne.n	800b3d6 <_malloc_r+0x2e2>
 800b37e:	f04f 0c01 	mov.w	ip, #1
 800b382:	1092      	asrs	r2, r2, #2
 800b384:	fa0c f202 	lsl.w	r2, ip, r2
 800b388:	4310      	orrs	r0, r2
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800b390:	f8c8 4008 	str.w	r4, [r8, #8]
 800b394:	f8ce 400c 	str.w	r4, [lr, #12]
 800b398:	e75e      	b.n	800b258 <_malloc_r+0x164>
 800b39a:	2a14      	cmp	r2, #20
 800b39c:	d801      	bhi.n	800b3a2 <_malloc_r+0x2ae>
 800b39e:	325b      	adds	r2, #91	; 0x5b
 800b3a0:	e7e5      	b.n	800b36e <_malloc_r+0x27a>
 800b3a2:	2a54      	cmp	r2, #84	; 0x54
 800b3a4:	d803      	bhi.n	800b3ae <_malloc_r+0x2ba>
 800b3a6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800b3aa:	326e      	adds	r2, #110	; 0x6e
 800b3ac:	e7df      	b.n	800b36e <_malloc_r+0x27a>
 800b3ae:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b3b2:	d803      	bhi.n	800b3bc <_malloc_r+0x2c8>
 800b3b4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800b3b8:	3277      	adds	r2, #119	; 0x77
 800b3ba:	e7d8      	b.n	800b36e <_malloc_r+0x27a>
 800b3bc:	f240 5e54 	movw	lr, #1364	; 0x554
 800b3c0:	4572      	cmp	r2, lr
 800b3c2:	bf9a      	itte	ls
 800b3c4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800b3c8:	327c      	addls	r2, #124	; 0x7c
 800b3ca:	227e      	movhi	r2, #126	; 0x7e
 800b3cc:	e7cf      	b.n	800b36e <_malloc_r+0x27a>
 800b3ce:	f8de e008 	ldr.w	lr, [lr, #8]
 800b3d2:	45f0      	cmp	r8, lr
 800b3d4:	d005      	beq.n	800b3e2 <_malloc_r+0x2ee>
 800b3d6:	f8de 2004 	ldr.w	r2, [lr, #4]
 800b3da:	f022 0203 	bic.w	r2, r2, #3
 800b3de:	4562      	cmp	r2, ip
 800b3e0:	d8f5      	bhi.n	800b3ce <_malloc_r+0x2da>
 800b3e2:	f8de 800c 	ldr.w	r8, [lr, #12]
 800b3e6:	e7d1      	b.n	800b38c <_malloc_r+0x298>
 800b3e8:	6860      	ldr	r0, [r4, #4]
 800b3ea:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800b3ee:	f020 0003 	bic.w	r0, r0, #3
 800b3f2:	eba0 0a05 	sub.w	sl, r0, r5
 800b3f6:	f1ba 0f0f 	cmp.w	sl, #15
 800b3fa:	dd21      	ble.n	800b440 <_malloc_r+0x34c>
 800b3fc:	68a2      	ldr	r2, [r4, #8]
 800b3fe:	1963      	adds	r3, r4, r5
 800b400:	f045 0501 	orr.w	r5, r5, #1
 800b404:	6065      	str	r5, [r4, #4]
 800b406:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b40a:	f8ce 2008 	str.w	r2, [lr, #8]
 800b40e:	f04a 0201 	orr.w	r2, sl, #1
 800b412:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800b416:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800b41a:	605a      	str	r2, [r3, #4]
 800b41c:	f844 a000 	str.w	sl, [r4, r0]
 800b420:	e699      	b.n	800b156 <_malloc_r+0x62>
 800b422:	bf00      	nop
 800b424:	20000718 	.word	0x20000718
 800b428:	20000720 	.word	0x20000720
 800b42c:	20000da0 	.word	0x20000da0
 800b430:	20000b20 	.word	0x20000b20
 800b434:	20000d98 	.word	0x20000d98
 800b438:	20000d9c 	.word	0x20000d9c
 800b43c:	20000d70 	.word	0x20000d70
 800b440:	f1ba 0f00 	cmp.w	sl, #0
 800b444:	db11      	blt.n	800b46a <_malloc_r+0x376>
 800b446:	4420      	add	r0, r4
 800b448:	6843      	ldr	r3, [r0, #4]
 800b44a:	f043 0301 	orr.w	r3, r3, #1
 800b44e:	6043      	str	r3, [r0, #4]
 800b450:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800b454:	4630      	mov	r0, r6
 800b456:	f8c3 e00c 	str.w	lr, [r3, #12]
 800b45a:	f8ce 3008 	str.w	r3, [lr, #8]
 800b45e:	f000 f8ad 	bl	800b5bc <__malloc_unlock>
 800b462:	4620      	mov	r0, r4
 800b464:	b003      	add	sp, #12
 800b466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46a:	4674      	mov	r4, lr
 800b46c:	e70a      	b.n	800b284 <_malloc_r+0x190>
 800b46e:	f1ac 0008 	sub.w	r0, ip, #8
 800b472:	f8dc c000 	ldr.w	ip, [ip]
 800b476:	3b01      	subs	r3, #1
 800b478:	4584      	cmp	ip, r0
 800b47a:	f43f af0d 	beq.w	800b298 <_malloc_r+0x1a4>
 800b47e:	e712      	b.n	800b2a6 <_malloc_r+0x1b2>
 800b480:	3304      	adds	r3, #4
 800b482:	0052      	lsls	r2, r2, #1
 800b484:	4210      	tst	r0, r2
 800b486:	d0fb      	beq.n	800b480 <_malloc_r+0x38c>
 800b488:	e6f6      	b.n	800b278 <_malloc_r+0x184>
 800b48a:	4643      	mov	r3, r8
 800b48c:	e7fa      	b.n	800b484 <_malloc_r+0x390>
 800b48e:	6818      	ldr	r0, [r3, #0]
 800b490:	9200      	str	r2, [sp, #0]
 800b492:	3001      	adds	r0, #1
 800b494:	bf1b      	ittet	ne
 800b496:	ebab 0101 	subne.w	r1, fp, r1
 800b49a:	4471      	addne	r1, lr
 800b49c:	f8c3 b000 	streq.w	fp, [r3]
 800b4a0:	f8c9 1000 	strne.w	r1, [r9]
 800b4a4:	f01b 0307 	ands.w	r3, fp, #7
 800b4a8:	bf1c      	itt	ne
 800b4aa:	f1c3 0308 	rsbne	r3, r3, #8
 800b4ae:	449b      	addne	fp, r3
 800b4b0:	445c      	add	r4, fp
 800b4b2:	4498      	add	r8, r3
 800b4b4:	ea04 030c 	and.w	r3, r4, ip
 800b4b8:	eba8 0803 	sub.w	r8, r8, r3
 800b4bc:	4641      	mov	r1, r8
 800b4be:	4630      	mov	r0, r6
 800b4c0:	f000 fd12 	bl	800bee8 <_sbrk_r>
 800b4c4:	1c43      	adds	r3, r0, #1
 800b4c6:	bf04      	itt	eq
 800b4c8:	4658      	moveq	r0, fp
 800b4ca:	f04f 0800 	moveq.w	r8, #0
 800b4ce:	f8d9 3000 	ldr.w	r3, [r9]
 800b4d2:	eba0 000b 	sub.w	r0, r0, fp
 800b4d6:	4440      	add	r0, r8
 800b4d8:	4443      	add	r3, r8
 800b4da:	f040 0001 	orr.w	r0, r0, #1
 800b4de:	45ba      	cmp	sl, r7
 800b4e0:	f8c7 b008 	str.w	fp, [r7, #8]
 800b4e4:	9a00      	ldr	r2, [sp, #0]
 800b4e6:	f8c9 3000 	str.w	r3, [r9]
 800b4ea:	f8cb 0004 	str.w	r0, [fp, #4]
 800b4ee:	f43f af2a 	beq.w	800b346 <_malloc_r+0x252>
 800b4f2:	2a0f      	cmp	r2, #15
 800b4f4:	d810      	bhi.n	800b518 <_malloc_r+0x424>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	f8cb 3004 	str.w	r3, [fp, #4]
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	685a      	ldr	r2, [r3, #4]
 800b500:	f022 0203 	bic.w	r2, r2, #3
 800b504:	42aa      	cmp	r2, r5
 800b506:	eba2 0305 	sub.w	r3, r2, r5
 800b50a:	d301      	bcc.n	800b510 <_malloc_r+0x41c>
 800b50c:	2b0f      	cmp	r3, #15
 800b50e:	dc1c      	bgt.n	800b54a <_malloc_r+0x456>
 800b510:	4630      	mov	r0, r6
 800b512:	f000 f853 	bl	800b5bc <__malloc_unlock>
 800b516:	e5f9      	b.n	800b10c <_malloc_r+0x18>
 800b518:	f1a2 040c 	sub.w	r4, r2, #12
 800b51c:	2205      	movs	r2, #5
 800b51e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b522:	f024 0407 	bic.w	r4, r4, #7
 800b526:	f003 0301 	and.w	r3, r3, #1
 800b52a:	4323      	orrs	r3, r4
 800b52c:	f8ca 3004 	str.w	r3, [sl, #4]
 800b530:	2c0f      	cmp	r4, #15
 800b532:	eb0a 0304 	add.w	r3, sl, r4
 800b536:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800b53a:	f67f af04 	bls.w	800b346 <_malloc_r+0x252>
 800b53e:	f10a 0108 	add.w	r1, sl, #8
 800b542:	4630      	mov	r0, r6
 800b544:	f7ff fb30 	bl	800aba8 <_free_r>
 800b548:	e6fd      	b.n	800b346 <_malloc_r+0x252>
 800b54a:	68bc      	ldr	r4, [r7, #8]
 800b54c:	f045 0201 	orr.w	r2, r5, #1
 800b550:	f043 0301 	orr.w	r3, r3, #1
 800b554:	4425      	add	r5, r4
 800b556:	6062      	str	r2, [r4, #4]
 800b558:	60bd      	str	r5, [r7, #8]
 800b55a:	606b      	str	r3, [r5, #4]
 800b55c:	e5fb      	b.n	800b156 <_malloc_r+0x62>
 800b55e:	bf00      	nop

0800b560 <memchr>:
 800b560:	b510      	push	{r4, lr}
 800b562:	b2c9      	uxtb	r1, r1
 800b564:	4402      	add	r2, r0
 800b566:	4290      	cmp	r0, r2
 800b568:	4603      	mov	r3, r0
 800b56a:	d101      	bne.n	800b570 <memchr+0x10>
 800b56c:	2300      	movs	r3, #0
 800b56e:	e003      	b.n	800b578 <memchr+0x18>
 800b570:	781c      	ldrb	r4, [r3, #0]
 800b572:	3001      	adds	r0, #1
 800b574:	428c      	cmp	r4, r1
 800b576:	d1f6      	bne.n	800b566 <memchr+0x6>
 800b578:	4618      	mov	r0, r3
 800b57a:	bd10      	pop	{r4, pc}

0800b57c <memmove>:
 800b57c:	4288      	cmp	r0, r1
 800b57e:	b510      	push	{r4, lr}
 800b580:	eb01 0302 	add.w	r3, r1, r2
 800b584:	d807      	bhi.n	800b596 <memmove+0x1a>
 800b586:	1e42      	subs	r2, r0, #1
 800b588:	4299      	cmp	r1, r3
 800b58a:	d00a      	beq.n	800b5a2 <memmove+0x26>
 800b58c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b590:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b594:	e7f8      	b.n	800b588 <memmove+0xc>
 800b596:	4283      	cmp	r3, r0
 800b598:	d9f5      	bls.n	800b586 <memmove+0xa>
 800b59a:	1881      	adds	r1, r0, r2
 800b59c:	1ad2      	subs	r2, r2, r3
 800b59e:	42d3      	cmn	r3, r2
 800b5a0:	d100      	bne.n	800b5a4 <memmove+0x28>
 800b5a2:	bd10      	pop	{r4, pc}
 800b5a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5a8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b5ac:	e7f7      	b.n	800b59e <memmove+0x22>
	...

0800b5b0 <__malloc_lock>:
 800b5b0:	4801      	ldr	r0, [pc, #4]	; (800b5b8 <__malloc_lock+0x8>)
 800b5b2:	f7ff bd31 	b.w	800b018 <__retarget_lock_acquire_recursive>
 800b5b6:	bf00      	nop
 800b5b8:	20002348 	.word	0x20002348

0800b5bc <__malloc_unlock>:
 800b5bc:	4801      	ldr	r0, [pc, #4]	; (800b5c4 <__malloc_unlock+0x8>)
 800b5be:	f7ff bd2c 	b.w	800b01a <__retarget_lock_release_recursive>
 800b5c2:	bf00      	nop
 800b5c4:	20002348 	.word	0x20002348

0800b5c8 <_Balloc>:
 800b5c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b5ca:	b570      	push	{r4, r5, r6, lr}
 800b5cc:	4605      	mov	r5, r0
 800b5ce:	460c      	mov	r4, r1
 800b5d0:	b17b      	cbz	r3, 800b5f2 <_Balloc+0x2a>
 800b5d2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800b5d4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b5d8:	b9a0      	cbnz	r0, 800b604 <_Balloc+0x3c>
 800b5da:	2101      	movs	r1, #1
 800b5dc:	fa01 f604 	lsl.w	r6, r1, r4
 800b5e0:	1d72      	adds	r2, r6, #5
 800b5e2:	0092      	lsls	r2, r2, #2
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	f000 fe07 	bl	800c1f8 <_calloc_r>
 800b5ea:	b148      	cbz	r0, 800b600 <_Balloc+0x38>
 800b5ec:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800b5f0:	e00b      	b.n	800b60a <_Balloc+0x42>
 800b5f2:	2221      	movs	r2, #33	; 0x21
 800b5f4:	2104      	movs	r1, #4
 800b5f6:	f000 fdff 	bl	800c1f8 <_calloc_r>
 800b5fa:	64e8      	str	r0, [r5, #76]	; 0x4c
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	d1e8      	bne.n	800b5d2 <_Balloc+0xa>
 800b600:	2000      	movs	r0, #0
 800b602:	bd70      	pop	{r4, r5, r6, pc}
 800b604:	6802      	ldr	r2, [r0, #0]
 800b606:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800b60a:	2300      	movs	r3, #0
 800b60c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b610:	e7f7      	b.n	800b602 <_Balloc+0x3a>

0800b612 <_Bfree>:
 800b612:	b131      	cbz	r1, 800b622 <_Bfree+0x10>
 800b614:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b616:	684a      	ldr	r2, [r1, #4]
 800b618:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b61c:	6008      	str	r0, [r1, #0]
 800b61e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b622:	4770      	bx	lr

0800b624 <__multadd>:
 800b624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b628:	461f      	mov	r7, r3
 800b62a:	4606      	mov	r6, r0
 800b62c:	460c      	mov	r4, r1
 800b62e:	2300      	movs	r3, #0
 800b630:	690d      	ldr	r5, [r1, #16]
 800b632:	f101 0c14 	add.w	ip, r1, #20
 800b636:	f8dc 0000 	ldr.w	r0, [ip]
 800b63a:	3301      	adds	r3, #1
 800b63c:	b281      	uxth	r1, r0
 800b63e:	fb02 7101 	mla	r1, r2, r1, r7
 800b642:	0c00      	lsrs	r0, r0, #16
 800b644:	0c0f      	lsrs	r7, r1, #16
 800b646:	fb02 7000 	mla	r0, r2, r0, r7
 800b64a:	b289      	uxth	r1, r1
 800b64c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b650:	429d      	cmp	r5, r3
 800b652:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b656:	f84c 1b04 	str.w	r1, [ip], #4
 800b65a:	dcec      	bgt.n	800b636 <__multadd+0x12>
 800b65c:	b1d7      	cbz	r7, 800b694 <__multadd+0x70>
 800b65e:	68a3      	ldr	r3, [r4, #8]
 800b660:	42ab      	cmp	r3, r5
 800b662:	dc12      	bgt.n	800b68a <__multadd+0x66>
 800b664:	6861      	ldr	r1, [r4, #4]
 800b666:	4630      	mov	r0, r6
 800b668:	3101      	adds	r1, #1
 800b66a:	f7ff ffad 	bl	800b5c8 <_Balloc>
 800b66e:	4680      	mov	r8, r0
 800b670:	6922      	ldr	r2, [r4, #16]
 800b672:	f104 010c 	add.w	r1, r4, #12
 800b676:	3202      	adds	r2, #2
 800b678:	0092      	lsls	r2, r2, #2
 800b67a:	300c      	adds	r0, #12
 800b67c:	f7fb fd1e 	bl	80070bc <memcpy>
 800b680:	4621      	mov	r1, r4
 800b682:	4630      	mov	r0, r6
 800b684:	f7ff ffc5 	bl	800b612 <_Bfree>
 800b688:	4644      	mov	r4, r8
 800b68a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b68e:	3501      	adds	r5, #1
 800b690:	615f      	str	r7, [r3, #20]
 800b692:	6125      	str	r5, [r4, #16]
 800b694:	4620      	mov	r0, r4
 800b696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b69a <__hi0bits>:
 800b69a:	0c02      	lsrs	r2, r0, #16
 800b69c:	0412      	lsls	r2, r2, #16
 800b69e:	4603      	mov	r3, r0
 800b6a0:	b9b2      	cbnz	r2, 800b6d0 <__hi0bits+0x36>
 800b6a2:	0403      	lsls	r3, r0, #16
 800b6a4:	2010      	movs	r0, #16
 800b6a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b6aa:	bf04      	itt	eq
 800b6ac:	021b      	lsleq	r3, r3, #8
 800b6ae:	3008      	addeq	r0, #8
 800b6b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b6b4:	bf04      	itt	eq
 800b6b6:	011b      	lsleq	r3, r3, #4
 800b6b8:	3004      	addeq	r0, #4
 800b6ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b6be:	bf04      	itt	eq
 800b6c0:	009b      	lsleq	r3, r3, #2
 800b6c2:	3002      	addeq	r0, #2
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	db06      	blt.n	800b6d6 <__hi0bits+0x3c>
 800b6c8:	005b      	lsls	r3, r3, #1
 800b6ca:	d503      	bpl.n	800b6d4 <__hi0bits+0x3a>
 800b6cc:	3001      	adds	r0, #1
 800b6ce:	4770      	bx	lr
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	e7e8      	b.n	800b6a6 <__hi0bits+0xc>
 800b6d4:	2020      	movs	r0, #32
 800b6d6:	4770      	bx	lr

0800b6d8 <__lo0bits>:
 800b6d8:	6803      	ldr	r3, [r0, #0]
 800b6da:	4601      	mov	r1, r0
 800b6dc:	f013 0207 	ands.w	r2, r3, #7
 800b6e0:	d00b      	beq.n	800b6fa <__lo0bits+0x22>
 800b6e2:	07da      	lsls	r2, r3, #31
 800b6e4:	d423      	bmi.n	800b72e <__lo0bits+0x56>
 800b6e6:	0798      	lsls	r0, r3, #30
 800b6e8:	bf49      	itett	mi
 800b6ea:	085b      	lsrmi	r3, r3, #1
 800b6ec:	089b      	lsrpl	r3, r3, #2
 800b6ee:	2001      	movmi	r0, #1
 800b6f0:	600b      	strmi	r3, [r1, #0]
 800b6f2:	bf5c      	itt	pl
 800b6f4:	600b      	strpl	r3, [r1, #0]
 800b6f6:	2002      	movpl	r0, #2
 800b6f8:	4770      	bx	lr
 800b6fa:	b298      	uxth	r0, r3
 800b6fc:	b9a8      	cbnz	r0, 800b72a <__lo0bits+0x52>
 800b6fe:	2010      	movs	r0, #16
 800b700:	0c1b      	lsrs	r3, r3, #16
 800b702:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b706:	bf04      	itt	eq
 800b708:	0a1b      	lsreq	r3, r3, #8
 800b70a:	3008      	addeq	r0, #8
 800b70c:	071a      	lsls	r2, r3, #28
 800b70e:	bf04      	itt	eq
 800b710:	091b      	lsreq	r3, r3, #4
 800b712:	3004      	addeq	r0, #4
 800b714:	079a      	lsls	r2, r3, #30
 800b716:	bf04      	itt	eq
 800b718:	089b      	lsreq	r3, r3, #2
 800b71a:	3002      	addeq	r0, #2
 800b71c:	07da      	lsls	r2, r3, #31
 800b71e:	d402      	bmi.n	800b726 <__lo0bits+0x4e>
 800b720:	085b      	lsrs	r3, r3, #1
 800b722:	d006      	beq.n	800b732 <__lo0bits+0x5a>
 800b724:	3001      	adds	r0, #1
 800b726:	600b      	str	r3, [r1, #0]
 800b728:	4770      	bx	lr
 800b72a:	4610      	mov	r0, r2
 800b72c:	e7e9      	b.n	800b702 <__lo0bits+0x2a>
 800b72e:	2000      	movs	r0, #0
 800b730:	4770      	bx	lr
 800b732:	2020      	movs	r0, #32
 800b734:	4770      	bx	lr

0800b736 <__i2b>:
 800b736:	b510      	push	{r4, lr}
 800b738:	460c      	mov	r4, r1
 800b73a:	2101      	movs	r1, #1
 800b73c:	f7ff ff44 	bl	800b5c8 <_Balloc>
 800b740:	2201      	movs	r2, #1
 800b742:	6144      	str	r4, [r0, #20]
 800b744:	6102      	str	r2, [r0, #16]
 800b746:	bd10      	pop	{r4, pc}

0800b748 <__multiply>:
 800b748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b74c:	4614      	mov	r4, r2
 800b74e:	690a      	ldr	r2, [r1, #16]
 800b750:	6923      	ldr	r3, [r4, #16]
 800b752:	4688      	mov	r8, r1
 800b754:	429a      	cmp	r2, r3
 800b756:	bfbe      	ittt	lt
 800b758:	460b      	movlt	r3, r1
 800b75a:	46a0      	movlt	r8, r4
 800b75c:	461c      	movlt	r4, r3
 800b75e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b762:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b766:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b76a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b76e:	eb07 0609 	add.w	r6, r7, r9
 800b772:	42b3      	cmp	r3, r6
 800b774:	bfb8      	it	lt
 800b776:	3101      	addlt	r1, #1
 800b778:	f7ff ff26 	bl	800b5c8 <_Balloc>
 800b77c:	f100 0514 	add.w	r5, r0, #20
 800b780:	462b      	mov	r3, r5
 800b782:	2200      	movs	r2, #0
 800b784:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b788:	4573      	cmp	r3, lr
 800b78a:	d316      	bcc.n	800b7ba <__multiply+0x72>
 800b78c:	f104 0214 	add.w	r2, r4, #20
 800b790:	f108 0114 	add.w	r1, r8, #20
 800b794:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b798:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b79c:	9300      	str	r3, [sp, #0]
 800b79e:	9b00      	ldr	r3, [sp, #0]
 800b7a0:	9201      	str	r2, [sp, #4]
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d80c      	bhi.n	800b7c0 <__multiply+0x78>
 800b7a6:	2e00      	cmp	r6, #0
 800b7a8:	dd03      	ble.n	800b7b2 <__multiply+0x6a>
 800b7aa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d05d      	beq.n	800b86e <__multiply+0x126>
 800b7b2:	6106      	str	r6, [r0, #16]
 800b7b4:	b003      	add	sp, #12
 800b7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ba:	f843 2b04 	str.w	r2, [r3], #4
 800b7be:	e7e3      	b.n	800b788 <__multiply+0x40>
 800b7c0:	f8b2 b000 	ldrh.w	fp, [r2]
 800b7c4:	f1bb 0f00 	cmp.w	fp, #0
 800b7c8:	d023      	beq.n	800b812 <__multiply+0xca>
 800b7ca:	4689      	mov	r9, r1
 800b7cc:	46ac      	mov	ip, r5
 800b7ce:	f04f 0800 	mov.w	r8, #0
 800b7d2:	f859 4b04 	ldr.w	r4, [r9], #4
 800b7d6:	f8dc a000 	ldr.w	sl, [ip]
 800b7da:	b2a3      	uxth	r3, r4
 800b7dc:	fa1f fa8a 	uxth.w	sl, sl
 800b7e0:	fb0b a303 	mla	r3, fp, r3, sl
 800b7e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b7e8:	f8dc 4000 	ldr.w	r4, [ip]
 800b7ec:	4443      	add	r3, r8
 800b7ee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b7f2:	fb0b 840a 	mla	r4, fp, sl, r8
 800b7f6:	46e2      	mov	sl, ip
 800b7f8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b802:	454f      	cmp	r7, r9
 800b804:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b808:	f84a 3b04 	str.w	r3, [sl], #4
 800b80c:	d82b      	bhi.n	800b866 <__multiply+0x11e>
 800b80e:	f8cc 8004 	str.w	r8, [ip, #4]
 800b812:	9b01      	ldr	r3, [sp, #4]
 800b814:	3204      	adds	r2, #4
 800b816:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b81a:	f1ba 0f00 	cmp.w	sl, #0
 800b81e:	d020      	beq.n	800b862 <__multiply+0x11a>
 800b820:	4689      	mov	r9, r1
 800b822:	46a8      	mov	r8, r5
 800b824:	f04f 0b00 	mov.w	fp, #0
 800b828:	682b      	ldr	r3, [r5, #0]
 800b82a:	f8b9 c000 	ldrh.w	ip, [r9]
 800b82e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b832:	b29b      	uxth	r3, r3
 800b834:	fb0a 440c 	mla	r4, sl, ip, r4
 800b838:	46c4      	mov	ip, r8
 800b83a:	445c      	add	r4, fp
 800b83c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b840:	f84c 3b04 	str.w	r3, [ip], #4
 800b844:	f859 3b04 	ldr.w	r3, [r9], #4
 800b848:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b84c:	0c1b      	lsrs	r3, r3, #16
 800b84e:	fb0a b303 	mla	r3, sl, r3, fp
 800b852:	454f      	cmp	r7, r9
 800b854:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b858:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b85c:	d805      	bhi.n	800b86a <__multiply+0x122>
 800b85e:	f8c8 3004 	str.w	r3, [r8, #4]
 800b862:	3504      	adds	r5, #4
 800b864:	e79b      	b.n	800b79e <__multiply+0x56>
 800b866:	46d4      	mov	ip, sl
 800b868:	e7b3      	b.n	800b7d2 <__multiply+0x8a>
 800b86a:	46e0      	mov	r8, ip
 800b86c:	e7dd      	b.n	800b82a <__multiply+0xe2>
 800b86e:	3e01      	subs	r6, #1
 800b870:	e799      	b.n	800b7a6 <__multiply+0x5e>
	...

0800b874 <__pow5mult>:
 800b874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b878:	4615      	mov	r5, r2
 800b87a:	f012 0203 	ands.w	r2, r2, #3
 800b87e:	4606      	mov	r6, r0
 800b880:	460f      	mov	r7, r1
 800b882:	d007      	beq.n	800b894 <__pow5mult+0x20>
 800b884:	4c1a      	ldr	r4, [pc, #104]	; (800b8f0 <__pow5mult+0x7c>)
 800b886:	3a01      	subs	r2, #1
 800b888:	2300      	movs	r3, #0
 800b88a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b88e:	f7ff fec9 	bl	800b624 <__multadd>
 800b892:	4607      	mov	r7, r0
 800b894:	10ad      	asrs	r5, r5, #2
 800b896:	d027      	beq.n	800b8e8 <__pow5mult+0x74>
 800b898:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800b89a:	b944      	cbnz	r4, 800b8ae <__pow5mult+0x3a>
 800b89c:	f240 2171 	movw	r1, #625	; 0x271
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	f7ff ff48 	bl	800b736 <__i2b>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	64b0      	str	r0, [r6, #72]	; 0x48
 800b8ac:	6003      	str	r3, [r0, #0]
 800b8ae:	f04f 0800 	mov.w	r8, #0
 800b8b2:	07eb      	lsls	r3, r5, #31
 800b8b4:	d50a      	bpl.n	800b8cc <__pow5mult+0x58>
 800b8b6:	4639      	mov	r1, r7
 800b8b8:	4622      	mov	r2, r4
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f7ff ff44 	bl	800b748 <__multiply>
 800b8c0:	4681      	mov	r9, r0
 800b8c2:	4639      	mov	r1, r7
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	f7ff fea4 	bl	800b612 <_Bfree>
 800b8ca:	464f      	mov	r7, r9
 800b8cc:	106d      	asrs	r5, r5, #1
 800b8ce:	d00b      	beq.n	800b8e8 <__pow5mult+0x74>
 800b8d0:	6820      	ldr	r0, [r4, #0]
 800b8d2:	b938      	cbnz	r0, 800b8e4 <__pow5mult+0x70>
 800b8d4:	4622      	mov	r2, r4
 800b8d6:	4621      	mov	r1, r4
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f7ff ff35 	bl	800b748 <__multiply>
 800b8de:	6020      	str	r0, [r4, #0]
 800b8e0:	f8c0 8000 	str.w	r8, [r0]
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	e7e4      	b.n	800b8b2 <__pow5mult+0x3e>
 800b8e8:	4638      	mov	r0, r7
 800b8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ee:	bf00      	nop
 800b8f0:	0800ca28 	.word	0x0800ca28

0800b8f4 <__lshift>:
 800b8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f8:	460c      	mov	r4, r1
 800b8fa:	4607      	mov	r7, r0
 800b8fc:	4616      	mov	r6, r2
 800b8fe:	6923      	ldr	r3, [r4, #16]
 800b900:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b904:	eb0a 0903 	add.w	r9, sl, r3
 800b908:	6849      	ldr	r1, [r1, #4]
 800b90a:	68a3      	ldr	r3, [r4, #8]
 800b90c:	f109 0501 	add.w	r5, r9, #1
 800b910:	42ab      	cmp	r3, r5
 800b912:	db32      	blt.n	800b97a <__lshift+0x86>
 800b914:	4638      	mov	r0, r7
 800b916:	f7ff fe57 	bl	800b5c8 <_Balloc>
 800b91a:	2300      	movs	r3, #0
 800b91c:	4680      	mov	r8, r0
 800b91e:	461a      	mov	r2, r3
 800b920:	f100 0114 	add.w	r1, r0, #20
 800b924:	4553      	cmp	r3, sl
 800b926:	db2b      	blt.n	800b980 <__lshift+0x8c>
 800b928:	6920      	ldr	r0, [r4, #16]
 800b92a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b92e:	f104 0314 	add.w	r3, r4, #20
 800b932:	f016 021f 	ands.w	r2, r6, #31
 800b936:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b93a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b93e:	d025      	beq.n	800b98c <__lshift+0x98>
 800b940:	2000      	movs	r0, #0
 800b942:	f1c2 0e20 	rsb	lr, r2, #32
 800b946:	468a      	mov	sl, r1
 800b948:	681e      	ldr	r6, [r3, #0]
 800b94a:	4096      	lsls	r6, r2
 800b94c:	4330      	orrs	r0, r6
 800b94e:	f84a 0b04 	str.w	r0, [sl], #4
 800b952:	f853 0b04 	ldr.w	r0, [r3], #4
 800b956:	459c      	cmp	ip, r3
 800b958:	fa20 f00e 	lsr.w	r0, r0, lr
 800b95c:	d814      	bhi.n	800b988 <__lshift+0x94>
 800b95e:	6048      	str	r0, [r1, #4]
 800b960:	b108      	cbz	r0, 800b966 <__lshift+0x72>
 800b962:	f109 0502 	add.w	r5, r9, #2
 800b966:	3d01      	subs	r5, #1
 800b968:	4638      	mov	r0, r7
 800b96a:	f8c8 5010 	str.w	r5, [r8, #16]
 800b96e:	4621      	mov	r1, r4
 800b970:	f7ff fe4f 	bl	800b612 <_Bfree>
 800b974:	4640      	mov	r0, r8
 800b976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b97a:	3101      	adds	r1, #1
 800b97c:	005b      	lsls	r3, r3, #1
 800b97e:	e7c7      	b.n	800b910 <__lshift+0x1c>
 800b980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b984:	3301      	adds	r3, #1
 800b986:	e7cd      	b.n	800b924 <__lshift+0x30>
 800b988:	4651      	mov	r1, sl
 800b98a:	e7dc      	b.n	800b946 <__lshift+0x52>
 800b98c:	3904      	subs	r1, #4
 800b98e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b992:	459c      	cmp	ip, r3
 800b994:	f841 2f04 	str.w	r2, [r1, #4]!
 800b998:	d8f9      	bhi.n	800b98e <__lshift+0x9a>
 800b99a:	e7e4      	b.n	800b966 <__lshift+0x72>

0800b99c <__mcmp>:
 800b99c:	6903      	ldr	r3, [r0, #16]
 800b99e:	690a      	ldr	r2, [r1, #16]
 800b9a0:	b530      	push	{r4, r5, lr}
 800b9a2:	1a9b      	subs	r3, r3, r2
 800b9a4:	d10c      	bne.n	800b9c0 <__mcmp+0x24>
 800b9a6:	0092      	lsls	r2, r2, #2
 800b9a8:	3014      	adds	r0, #20
 800b9aa:	3114      	adds	r1, #20
 800b9ac:	1884      	adds	r4, r0, r2
 800b9ae:	4411      	add	r1, r2
 800b9b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b9b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b9b8:	4295      	cmp	r5, r2
 800b9ba:	d003      	beq.n	800b9c4 <__mcmp+0x28>
 800b9bc:	d305      	bcc.n	800b9ca <__mcmp+0x2e>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	bd30      	pop	{r4, r5, pc}
 800b9c4:	42a0      	cmp	r0, r4
 800b9c6:	d3f3      	bcc.n	800b9b0 <__mcmp+0x14>
 800b9c8:	e7fa      	b.n	800b9c0 <__mcmp+0x24>
 800b9ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ce:	e7f7      	b.n	800b9c0 <__mcmp+0x24>

0800b9d0 <__mdiff>:
 800b9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d4:	460d      	mov	r5, r1
 800b9d6:	4607      	mov	r7, r0
 800b9d8:	4611      	mov	r1, r2
 800b9da:	4628      	mov	r0, r5
 800b9dc:	4614      	mov	r4, r2
 800b9de:	f7ff ffdd 	bl	800b99c <__mcmp>
 800b9e2:	1e06      	subs	r6, r0, #0
 800b9e4:	d108      	bne.n	800b9f8 <__mdiff+0x28>
 800b9e6:	4631      	mov	r1, r6
 800b9e8:	4638      	mov	r0, r7
 800b9ea:	f7ff fded 	bl	800b5c8 <_Balloc>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f8:	bfa4      	itt	ge
 800b9fa:	4623      	movge	r3, r4
 800b9fc:	462c      	movge	r4, r5
 800b9fe:	4638      	mov	r0, r7
 800ba00:	6861      	ldr	r1, [r4, #4]
 800ba02:	bfa6      	itte	ge
 800ba04:	461d      	movge	r5, r3
 800ba06:	2600      	movge	r6, #0
 800ba08:	2601      	movlt	r6, #1
 800ba0a:	f7ff fddd 	bl	800b5c8 <_Balloc>
 800ba0e:	f04f 0e00 	mov.w	lr, #0
 800ba12:	60c6      	str	r6, [r0, #12]
 800ba14:	692b      	ldr	r3, [r5, #16]
 800ba16:	6926      	ldr	r6, [r4, #16]
 800ba18:	f104 0214 	add.w	r2, r4, #20
 800ba1c:	f105 0914 	add.w	r9, r5, #20
 800ba20:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ba24:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ba28:	f100 0114 	add.w	r1, r0, #20
 800ba2c:	f852 ab04 	ldr.w	sl, [r2], #4
 800ba30:	f859 5b04 	ldr.w	r5, [r9], #4
 800ba34:	fa1f f38a 	uxth.w	r3, sl
 800ba38:	4473      	add	r3, lr
 800ba3a:	b2ac      	uxth	r4, r5
 800ba3c:	1b1b      	subs	r3, r3, r4
 800ba3e:	0c2c      	lsrs	r4, r5, #16
 800ba40:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800ba44:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800ba4e:	45c8      	cmp	r8, r9
 800ba50:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800ba54:	4694      	mov	ip, r2
 800ba56:	f841 4b04 	str.w	r4, [r1], #4
 800ba5a:	d8e7      	bhi.n	800ba2c <__mdiff+0x5c>
 800ba5c:	45bc      	cmp	ip, r7
 800ba5e:	d304      	bcc.n	800ba6a <__mdiff+0x9a>
 800ba60:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ba64:	b183      	cbz	r3, 800ba88 <__mdiff+0xb8>
 800ba66:	6106      	str	r6, [r0, #16]
 800ba68:	e7c4      	b.n	800b9f4 <__mdiff+0x24>
 800ba6a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800ba6e:	b2a2      	uxth	r2, r4
 800ba70:	4472      	add	r2, lr
 800ba72:	1413      	asrs	r3, r2, #16
 800ba74:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ba78:	b292      	uxth	r2, r2
 800ba7a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ba7e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ba82:	f841 2b04 	str.w	r2, [r1], #4
 800ba86:	e7e9      	b.n	800ba5c <__mdiff+0x8c>
 800ba88:	3e01      	subs	r6, #1
 800ba8a:	e7e9      	b.n	800ba60 <__mdiff+0x90>

0800ba8c <__d2b>:
 800ba8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ba90:	461c      	mov	r4, r3
 800ba92:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800ba96:	2101      	movs	r1, #1
 800ba98:	4690      	mov	r8, r2
 800ba9a:	f7ff fd95 	bl	800b5c8 <_Balloc>
 800ba9e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800baa2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800baa6:	4607      	mov	r7, r0
 800baa8:	bb34      	cbnz	r4, 800baf8 <__d2b+0x6c>
 800baaa:	9201      	str	r2, [sp, #4]
 800baac:	f1b8 0200 	subs.w	r2, r8, #0
 800bab0:	d027      	beq.n	800bb02 <__d2b+0x76>
 800bab2:	a802      	add	r0, sp, #8
 800bab4:	f840 2d08 	str.w	r2, [r0, #-8]!
 800bab8:	f7ff fe0e 	bl	800b6d8 <__lo0bits>
 800babc:	9900      	ldr	r1, [sp, #0]
 800babe:	b1f0      	cbz	r0, 800bafe <__d2b+0x72>
 800bac0:	9a01      	ldr	r2, [sp, #4]
 800bac2:	f1c0 0320 	rsb	r3, r0, #32
 800bac6:	fa02 f303 	lsl.w	r3, r2, r3
 800baca:	430b      	orrs	r3, r1
 800bacc:	40c2      	lsrs	r2, r0
 800bace:	617b      	str	r3, [r7, #20]
 800bad0:	9201      	str	r2, [sp, #4]
 800bad2:	9b01      	ldr	r3, [sp, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	bf14      	ite	ne
 800bad8:	2102      	movne	r1, #2
 800bada:	2101      	moveq	r1, #1
 800badc:	61bb      	str	r3, [r7, #24]
 800bade:	6139      	str	r1, [r7, #16]
 800bae0:	b1c4      	cbz	r4, 800bb14 <__d2b+0x88>
 800bae2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bae6:	4404      	add	r4, r0
 800bae8:	6034      	str	r4, [r6, #0]
 800baea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800baee:	6028      	str	r0, [r5, #0]
 800baf0:	4638      	mov	r0, r7
 800baf2:	b002      	add	sp, #8
 800baf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bafc:	e7d5      	b.n	800baaa <__d2b+0x1e>
 800bafe:	6179      	str	r1, [r7, #20]
 800bb00:	e7e7      	b.n	800bad2 <__d2b+0x46>
 800bb02:	a801      	add	r0, sp, #4
 800bb04:	f7ff fde8 	bl	800b6d8 <__lo0bits>
 800bb08:	2101      	movs	r1, #1
 800bb0a:	9b01      	ldr	r3, [sp, #4]
 800bb0c:	6139      	str	r1, [r7, #16]
 800bb0e:	617b      	str	r3, [r7, #20]
 800bb10:	3020      	adds	r0, #32
 800bb12:	e7e5      	b.n	800bae0 <__d2b+0x54>
 800bb14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb18:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bb1c:	6030      	str	r0, [r6, #0]
 800bb1e:	6918      	ldr	r0, [r3, #16]
 800bb20:	f7ff fdbb 	bl	800b69a <__hi0bits>
 800bb24:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bb28:	e7e1      	b.n	800baee <__d2b+0x62>
	...

0800bb2c <_realloc_r>:
 800bb2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb30:	4682      	mov	sl, r0
 800bb32:	460c      	mov	r4, r1
 800bb34:	b929      	cbnz	r1, 800bb42 <_realloc_r+0x16>
 800bb36:	4611      	mov	r1, r2
 800bb38:	b003      	add	sp, #12
 800bb3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3e:	f7ff bad9 	b.w	800b0f4 <_malloc_r>
 800bb42:	9201      	str	r2, [sp, #4]
 800bb44:	f7ff fd34 	bl	800b5b0 <__malloc_lock>
 800bb48:	9a01      	ldr	r2, [sp, #4]
 800bb4a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800bb4e:	f102 080b 	add.w	r8, r2, #11
 800bb52:	f1b8 0f16 	cmp.w	r8, #22
 800bb56:	f1a4 0908 	sub.w	r9, r4, #8
 800bb5a:	f025 0603 	bic.w	r6, r5, #3
 800bb5e:	d90b      	bls.n	800bb78 <_realloc_r+0x4c>
 800bb60:	f038 0807 	bics.w	r8, r8, #7
 800bb64:	d50a      	bpl.n	800bb7c <_realloc_r+0x50>
 800bb66:	230c      	movs	r3, #12
 800bb68:	f04f 0b00 	mov.w	fp, #0
 800bb6c:	f8ca 3000 	str.w	r3, [sl]
 800bb70:	4658      	mov	r0, fp
 800bb72:	b003      	add	sp, #12
 800bb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb78:	f04f 0810 	mov.w	r8, #16
 800bb7c:	4590      	cmp	r8, r2
 800bb7e:	d3f2      	bcc.n	800bb66 <_realloc_r+0x3a>
 800bb80:	45b0      	cmp	r8, r6
 800bb82:	f340 8175 	ble.w	800be70 <_realloc_r+0x344>
 800bb86:	49ab      	ldr	r1, [pc, #684]	; (800be34 <_realloc_r+0x308>)
 800bb88:	eb09 0306 	add.w	r3, r9, r6
 800bb8c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800bb90:	6858      	ldr	r0, [r3, #4]
 800bb92:	459c      	cmp	ip, r3
 800bb94:	9101      	str	r1, [sp, #4]
 800bb96:	d005      	beq.n	800bba4 <_realloc_r+0x78>
 800bb98:	f020 0101 	bic.w	r1, r0, #1
 800bb9c:	4419      	add	r1, r3
 800bb9e:	6849      	ldr	r1, [r1, #4]
 800bba0:	07cf      	lsls	r7, r1, #31
 800bba2:	d447      	bmi.n	800bc34 <_realloc_r+0x108>
 800bba4:	f020 0003 	bic.w	r0, r0, #3
 800bba8:	459c      	cmp	ip, r3
 800bbaa:	eb06 0700 	add.w	r7, r6, r0
 800bbae:	d119      	bne.n	800bbe4 <_realloc_r+0xb8>
 800bbb0:	f108 0110 	add.w	r1, r8, #16
 800bbb4:	42b9      	cmp	r1, r7
 800bbb6:	dc3f      	bgt.n	800bc38 <_realloc_r+0x10c>
 800bbb8:	9a01      	ldr	r2, [sp, #4]
 800bbba:	eba7 0708 	sub.w	r7, r7, r8
 800bbbe:	eb09 0308 	add.w	r3, r9, r8
 800bbc2:	f047 0701 	orr.w	r7, r7, #1
 800bbc6:	6093      	str	r3, [r2, #8]
 800bbc8:	605f      	str	r7, [r3, #4]
 800bbca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bbce:	4650      	mov	r0, sl
 800bbd0:	f003 0301 	and.w	r3, r3, #1
 800bbd4:	ea43 0308 	orr.w	r3, r3, r8
 800bbd8:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbdc:	f7ff fcee 	bl	800b5bc <__malloc_unlock>
 800bbe0:	46a3      	mov	fp, r4
 800bbe2:	e7c5      	b.n	800bb70 <_realloc_r+0x44>
 800bbe4:	45b8      	cmp	r8, r7
 800bbe6:	dc27      	bgt.n	800bc38 <_realloc_r+0x10c>
 800bbe8:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800bbec:	60da      	str	r2, [r3, #12]
 800bbee:	6093      	str	r3, [r2, #8]
 800bbf0:	eba7 0008 	sub.w	r0, r7, r8
 800bbf4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800bbf8:	280f      	cmp	r0, #15
 800bbfa:	f002 0201 	and.w	r2, r2, #1
 800bbfe:	eb09 0307 	add.w	r3, r9, r7
 800bc02:	f240 8137 	bls.w	800be74 <_realloc_r+0x348>
 800bc06:	eb09 0108 	add.w	r1, r9, r8
 800bc0a:	ea48 0202 	orr.w	r2, r8, r2
 800bc0e:	f040 0001 	orr.w	r0, r0, #1
 800bc12:	f8c9 2004 	str.w	r2, [r9, #4]
 800bc16:	6048      	str	r0, [r1, #4]
 800bc18:	685a      	ldr	r2, [r3, #4]
 800bc1a:	3108      	adds	r1, #8
 800bc1c:	f042 0201 	orr.w	r2, r2, #1
 800bc20:	605a      	str	r2, [r3, #4]
 800bc22:	4650      	mov	r0, sl
 800bc24:	f7fe ffc0 	bl	800aba8 <_free_r>
 800bc28:	4650      	mov	r0, sl
 800bc2a:	f7ff fcc7 	bl	800b5bc <__malloc_unlock>
 800bc2e:	f109 0b08 	add.w	fp, r9, #8
 800bc32:	e79d      	b.n	800bb70 <_realloc_r+0x44>
 800bc34:	2000      	movs	r0, #0
 800bc36:	4603      	mov	r3, r0
 800bc38:	07e9      	lsls	r1, r5, #31
 800bc3a:	f100 80c9 	bmi.w	800bdd0 <_realloc_r+0x2a4>
 800bc3e:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800bc42:	eba9 0505 	sub.w	r5, r9, r5
 800bc46:	6869      	ldr	r1, [r5, #4]
 800bc48:	f021 0103 	bic.w	r1, r1, #3
 800bc4c:	eb01 0b06 	add.w	fp, r1, r6
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 8088 	beq.w	800bd66 <_realloc_r+0x23a>
 800bc56:	459c      	cmp	ip, r3
 800bc58:	eb00 070b 	add.w	r7, r0, fp
 800bc5c:	d14a      	bne.n	800bcf4 <_realloc_r+0x1c8>
 800bc5e:	f108 0310 	add.w	r3, r8, #16
 800bc62:	42bb      	cmp	r3, r7
 800bc64:	dc7f      	bgt.n	800bd66 <_realloc_r+0x23a>
 800bc66:	46ab      	mov	fp, r5
 800bc68:	68eb      	ldr	r3, [r5, #12]
 800bc6a:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800bc6e:	60d3      	str	r3, [r2, #12]
 800bc70:	609a      	str	r2, [r3, #8]
 800bc72:	1f32      	subs	r2, r6, #4
 800bc74:	2a24      	cmp	r2, #36	; 0x24
 800bc76:	d838      	bhi.n	800bcea <_realloc_r+0x1be>
 800bc78:	2a13      	cmp	r2, #19
 800bc7a:	d934      	bls.n	800bce6 <_realloc_r+0x1ba>
 800bc7c:	6823      	ldr	r3, [r4, #0]
 800bc7e:	2a1b      	cmp	r2, #27
 800bc80:	60ab      	str	r3, [r5, #8]
 800bc82:	6863      	ldr	r3, [r4, #4]
 800bc84:	60eb      	str	r3, [r5, #12]
 800bc86:	d81b      	bhi.n	800bcc0 <_realloc_r+0x194>
 800bc88:	3408      	adds	r4, #8
 800bc8a:	f105 0310 	add.w	r3, r5, #16
 800bc8e:	6822      	ldr	r2, [r4, #0]
 800bc90:	601a      	str	r2, [r3, #0]
 800bc92:	6862      	ldr	r2, [r4, #4]
 800bc94:	605a      	str	r2, [r3, #4]
 800bc96:	68a2      	ldr	r2, [r4, #8]
 800bc98:	609a      	str	r2, [r3, #8]
 800bc9a:	9a01      	ldr	r2, [sp, #4]
 800bc9c:	eba7 0708 	sub.w	r7, r7, r8
 800bca0:	eb05 0308 	add.w	r3, r5, r8
 800bca4:	f047 0701 	orr.w	r7, r7, #1
 800bca8:	6093      	str	r3, [r2, #8]
 800bcaa:	605f      	str	r7, [r3, #4]
 800bcac:	686b      	ldr	r3, [r5, #4]
 800bcae:	f003 0301 	and.w	r3, r3, #1
 800bcb2:	ea43 0308 	orr.w	r3, r3, r8
 800bcb6:	606b      	str	r3, [r5, #4]
 800bcb8:	4650      	mov	r0, sl
 800bcba:	f7ff fc7f 	bl	800b5bc <__malloc_unlock>
 800bcbe:	e757      	b.n	800bb70 <_realloc_r+0x44>
 800bcc0:	68a3      	ldr	r3, [r4, #8]
 800bcc2:	2a24      	cmp	r2, #36	; 0x24
 800bcc4:	612b      	str	r3, [r5, #16]
 800bcc6:	68e3      	ldr	r3, [r4, #12]
 800bcc8:	bf18      	it	ne
 800bcca:	3410      	addne	r4, #16
 800bccc:	616b      	str	r3, [r5, #20]
 800bcce:	bf09      	itett	eq
 800bcd0:	6923      	ldreq	r3, [r4, #16]
 800bcd2:	f105 0318 	addne.w	r3, r5, #24
 800bcd6:	61ab      	streq	r3, [r5, #24]
 800bcd8:	6962      	ldreq	r2, [r4, #20]
 800bcda:	bf02      	ittt	eq
 800bcdc:	f105 0320 	addeq.w	r3, r5, #32
 800bce0:	61ea      	streq	r2, [r5, #28]
 800bce2:	3418      	addeq	r4, #24
 800bce4:	e7d3      	b.n	800bc8e <_realloc_r+0x162>
 800bce6:	465b      	mov	r3, fp
 800bce8:	e7d1      	b.n	800bc8e <_realloc_r+0x162>
 800bcea:	4621      	mov	r1, r4
 800bcec:	4658      	mov	r0, fp
 800bcee:	f7ff fc45 	bl	800b57c <memmove>
 800bcf2:	e7d2      	b.n	800bc9a <_realloc_r+0x16e>
 800bcf4:	45b8      	cmp	r8, r7
 800bcf6:	dc36      	bgt.n	800bd66 <_realloc_r+0x23a>
 800bcf8:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	60da      	str	r2, [r3, #12]
 800bd00:	6093      	str	r3, [r2, #8]
 800bd02:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800bd06:	68eb      	ldr	r3, [r5, #12]
 800bd08:	60d3      	str	r3, [r2, #12]
 800bd0a:	609a      	str	r2, [r3, #8]
 800bd0c:	1f32      	subs	r2, r6, #4
 800bd0e:	2a24      	cmp	r2, #36	; 0x24
 800bd10:	d825      	bhi.n	800bd5e <_realloc_r+0x232>
 800bd12:	2a13      	cmp	r2, #19
 800bd14:	d908      	bls.n	800bd28 <_realloc_r+0x1fc>
 800bd16:	6823      	ldr	r3, [r4, #0]
 800bd18:	2a1b      	cmp	r2, #27
 800bd1a:	60ab      	str	r3, [r5, #8]
 800bd1c:	6863      	ldr	r3, [r4, #4]
 800bd1e:	60eb      	str	r3, [r5, #12]
 800bd20:	d80a      	bhi.n	800bd38 <_realloc_r+0x20c>
 800bd22:	3408      	adds	r4, #8
 800bd24:	f105 0010 	add.w	r0, r5, #16
 800bd28:	6823      	ldr	r3, [r4, #0]
 800bd2a:	6003      	str	r3, [r0, #0]
 800bd2c:	6863      	ldr	r3, [r4, #4]
 800bd2e:	6043      	str	r3, [r0, #4]
 800bd30:	68a3      	ldr	r3, [r4, #8]
 800bd32:	6083      	str	r3, [r0, #8]
 800bd34:	46a9      	mov	r9, r5
 800bd36:	e75b      	b.n	800bbf0 <_realloc_r+0xc4>
 800bd38:	68a3      	ldr	r3, [r4, #8]
 800bd3a:	2a24      	cmp	r2, #36	; 0x24
 800bd3c:	612b      	str	r3, [r5, #16]
 800bd3e:	68e3      	ldr	r3, [r4, #12]
 800bd40:	bf18      	it	ne
 800bd42:	f105 0018 	addne.w	r0, r5, #24
 800bd46:	616b      	str	r3, [r5, #20]
 800bd48:	bf09      	itett	eq
 800bd4a:	6923      	ldreq	r3, [r4, #16]
 800bd4c:	3410      	addne	r4, #16
 800bd4e:	61ab      	streq	r3, [r5, #24]
 800bd50:	6963      	ldreq	r3, [r4, #20]
 800bd52:	bf02      	ittt	eq
 800bd54:	f105 0020 	addeq.w	r0, r5, #32
 800bd58:	61eb      	streq	r3, [r5, #28]
 800bd5a:	3418      	addeq	r4, #24
 800bd5c:	e7e4      	b.n	800bd28 <_realloc_r+0x1fc>
 800bd5e:	4621      	mov	r1, r4
 800bd60:	f7ff fc0c 	bl	800b57c <memmove>
 800bd64:	e7e6      	b.n	800bd34 <_realloc_r+0x208>
 800bd66:	45d8      	cmp	r8, fp
 800bd68:	dc32      	bgt.n	800bdd0 <_realloc_r+0x2a4>
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	68eb      	ldr	r3, [r5, #12]
 800bd6e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800bd72:	60d3      	str	r3, [r2, #12]
 800bd74:	609a      	str	r2, [r3, #8]
 800bd76:	1f32      	subs	r2, r6, #4
 800bd78:	2a24      	cmp	r2, #36	; 0x24
 800bd7a:	d825      	bhi.n	800bdc8 <_realloc_r+0x29c>
 800bd7c:	2a13      	cmp	r2, #19
 800bd7e:	d908      	bls.n	800bd92 <_realloc_r+0x266>
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	2a1b      	cmp	r2, #27
 800bd84:	60ab      	str	r3, [r5, #8]
 800bd86:	6863      	ldr	r3, [r4, #4]
 800bd88:	60eb      	str	r3, [r5, #12]
 800bd8a:	d80a      	bhi.n	800bda2 <_realloc_r+0x276>
 800bd8c:	3408      	adds	r4, #8
 800bd8e:	f105 0010 	add.w	r0, r5, #16
 800bd92:	6823      	ldr	r3, [r4, #0]
 800bd94:	6003      	str	r3, [r0, #0]
 800bd96:	6863      	ldr	r3, [r4, #4]
 800bd98:	6043      	str	r3, [r0, #4]
 800bd9a:	68a3      	ldr	r3, [r4, #8]
 800bd9c:	6083      	str	r3, [r0, #8]
 800bd9e:	465f      	mov	r7, fp
 800bda0:	e7c8      	b.n	800bd34 <_realloc_r+0x208>
 800bda2:	68a3      	ldr	r3, [r4, #8]
 800bda4:	2a24      	cmp	r2, #36	; 0x24
 800bda6:	612b      	str	r3, [r5, #16]
 800bda8:	68e3      	ldr	r3, [r4, #12]
 800bdaa:	bf18      	it	ne
 800bdac:	f105 0018 	addne.w	r0, r5, #24
 800bdb0:	616b      	str	r3, [r5, #20]
 800bdb2:	bf09      	itett	eq
 800bdb4:	6923      	ldreq	r3, [r4, #16]
 800bdb6:	3410      	addne	r4, #16
 800bdb8:	61ab      	streq	r3, [r5, #24]
 800bdba:	6963      	ldreq	r3, [r4, #20]
 800bdbc:	bf02      	ittt	eq
 800bdbe:	f105 0020 	addeq.w	r0, r5, #32
 800bdc2:	61eb      	streq	r3, [r5, #28]
 800bdc4:	3418      	addeq	r4, #24
 800bdc6:	e7e4      	b.n	800bd92 <_realloc_r+0x266>
 800bdc8:	4621      	mov	r1, r4
 800bdca:	f7ff fbd7 	bl	800b57c <memmove>
 800bdce:	e7e6      	b.n	800bd9e <_realloc_r+0x272>
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	4650      	mov	r0, sl
 800bdd4:	f7ff f98e 	bl	800b0f4 <_malloc_r>
 800bdd8:	4683      	mov	fp, r0
 800bdda:	2800      	cmp	r0, #0
 800bddc:	f43f af6c 	beq.w	800bcb8 <_realloc_r+0x18c>
 800bde0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bde4:	f1a0 0208 	sub.w	r2, r0, #8
 800bde8:	f023 0301 	bic.w	r3, r3, #1
 800bdec:	444b      	add	r3, r9
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d105      	bne.n	800bdfe <_realloc_r+0x2d2>
 800bdf2:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800bdf6:	f027 0703 	bic.w	r7, r7, #3
 800bdfa:	4437      	add	r7, r6
 800bdfc:	e6f8      	b.n	800bbf0 <_realloc_r+0xc4>
 800bdfe:	1f32      	subs	r2, r6, #4
 800be00:	2a24      	cmp	r2, #36	; 0x24
 800be02:	d831      	bhi.n	800be68 <_realloc_r+0x33c>
 800be04:	2a13      	cmp	r2, #19
 800be06:	d92c      	bls.n	800be62 <_realloc_r+0x336>
 800be08:	6823      	ldr	r3, [r4, #0]
 800be0a:	2a1b      	cmp	r2, #27
 800be0c:	6003      	str	r3, [r0, #0]
 800be0e:	6863      	ldr	r3, [r4, #4]
 800be10:	6043      	str	r3, [r0, #4]
 800be12:	d811      	bhi.n	800be38 <_realloc_r+0x30c>
 800be14:	f104 0208 	add.w	r2, r4, #8
 800be18:	f100 0308 	add.w	r3, r0, #8
 800be1c:	6811      	ldr	r1, [r2, #0]
 800be1e:	6019      	str	r1, [r3, #0]
 800be20:	6851      	ldr	r1, [r2, #4]
 800be22:	6059      	str	r1, [r3, #4]
 800be24:	6892      	ldr	r2, [r2, #8]
 800be26:	609a      	str	r2, [r3, #8]
 800be28:	4621      	mov	r1, r4
 800be2a:	4650      	mov	r0, sl
 800be2c:	f7fe febc 	bl	800aba8 <_free_r>
 800be30:	e742      	b.n	800bcb8 <_realloc_r+0x18c>
 800be32:	bf00      	nop
 800be34:	20000718 	.word	0x20000718
 800be38:	68a3      	ldr	r3, [r4, #8]
 800be3a:	2a24      	cmp	r2, #36	; 0x24
 800be3c:	6083      	str	r3, [r0, #8]
 800be3e:	68e3      	ldr	r3, [r4, #12]
 800be40:	bf18      	it	ne
 800be42:	f104 0210 	addne.w	r2, r4, #16
 800be46:	60c3      	str	r3, [r0, #12]
 800be48:	bf09      	itett	eq
 800be4a:	6923      	ldreq	r3, [r4, #16]
 800be4c:	f100 0310 	addne.w	r3, r0, #16
 800be50:	6103      	streq	r3, [r0, #16]
 800be52:	6961      	ldreq	r1, [r4, #20]
 800be54:	bf02      	ittt	eq
 800be56:	f104 0218 	addeq.w	r2, r4, #24
 800be5a:	f100 0318 	addeq.w	r3, r0, #24
 800be5e:	6141      	streq	r1, [r0, #20]
 800be60:	e7dc      	b.n	800be1c <_realloc_r+0x2f0>
 800be62:	4603      	mov	r3, r0
 800be64:	4622      	mov	r2, r4
 800be66:	e7d9      	b.n	800be1c <_realloc_r+0x2f0>
 800be68:	4621      	mov	r1, r4
 800be6a:	f7ff fb87 	bl	800b57c <memmove>
 800be6e:	e7db      	b.n	800be28 <_realloc_r+0x2fc>
 800be70:	4637      	mov	r7, r6
 800be72:	e6bd      	b.n	800bbf0 <_realloc_r+0xc4>
 800be74:	4317      	orrs	r7, r2
 800be76:	f8c9 7004 	str.w	r7, [r9, #4]
 800be7a:	685a      	ldr	r2, [r3, #4]
 800be7c:	f042 0201 	orr.w	r2, r2, #1
 800be80:	605a      	str	r2, [r3, #4]
 800be82:	e6d1      	b.n	800bc28 <_realloc_r+0xfc>

0800be84 <frexp>:
 800be84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be86:	4616      	mov	r6, r2
 800be88:	2700      	movs	r7, #0
 800be8a:	6037      	str	r7, [r6, #0]
 800be8c:	4f14      	ldr	r7, [pc, #80]	; (800bee0 <frexp+0x5c>)
 800be8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be92:	42bb      	cmp	r3, r7
 800be94:	4604      	mov	r4, r0
 800be96:	460d      	mov	r5, r1
 800be98:	460a      	mov	r2, r1
 800be9a:	dc1e      	bgt.n	800beda <frexp+0x56>
 800be9c:	4607      	mov	r7, r0
 800be9e:	431f      	orrs	r7, r3
 800bea0:	d01b      	beq.n	800beda <frexp+0x56>
 800bea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bea6:	da0a      	bge.n	800bebe <frexp+0x3a>
 800bea8:	2200      	movs	r2, #0
 800beaa:	4b0e      	ldr	r3, [pc, #56]	; (800bee4 <frexp+0x60>)
 800beac:	f7f4 fb14 	bl	80004d8 <__aeabi_dmul>
 800beb0:	460a      	mov	r2, r1
 800beb2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800beb6:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800beba:	4604      	mov	r4, r0
 800bebc:	6031      	str	r1, [r6, #0]
 800bebe:	6831      	ldr	r1, [r6, #0]
 800bec0:	151b      	asrs	r3, r3, #20
 800bec2:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800bec6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800beca:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800bece:	440b      	add	r3, r1
 800bed0:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bed4:	6033      	str	r3, [r6, #0]
 800bed6:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800beda:	4620      	mov	r0, r4
 800bedc:	4629      	mov	r1, r5
 800bede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bee0:	7fefffff 	.word	0x7fefffff
 800bee4:	43500000 	.word	0x43500000

0800bee8 <_sbrk_r>:
 800bee8:	b538      	push	{r3, r4, r5, lr}
 800beea:	2300      	movs	r3, #0
 800beec:	4c05      	ldr	r4, [pc, #20]	; (800bf04 <_sbrk_r+0x1c>)
 800beee:	4605      	mov	r5, r0
 800bef0:	4608      	mov	r0, r1
 800bef2:	6023      	str	r3, [r4, #0]
 800bef4:	f7f5 fbaa 	bl	800164c <_sbrk>
 800bef8:	1c43      	adds	r3, r0, #1
 800befa:	d102      	bne.n	800bf02 <_sbrk_r+0x1a>
 800befc:	6823      	ldr	r3, [r4, #0]
 800befe:	b103      	cbz	r3, 800bf02 <_sbrk_r+0x1a>
 800bf00:	602b      	str	r3, [r5, #0]
 800bf02:	bd38      	pop	{r3, r4, r5, pc}
 800bf04:	20002350 	.word	0x20002350

0800bf08 <__sread>:
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf10:	f000 faa6 	bl	800c460 <_read_r>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	bfab      	itete	ge
 800bf18:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800bf1a:	89a3      	ldrhlt	r3, [r4, #12]
 800bf1c:	181b      	addge	r3, r3, r0
 800bf1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf22:	bfac      	ite	ge
 800bf24:	6523      	strge	r3, [r4, #80]	; 0x50
 800bf26:	81a3      	strhlt	r3, [r4, #12]
 800bf28:	bd10      	pop	{r4, pc}

0800bf2a <__swrite>:
 800bf2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf2e:	461f      	mov	r7, r3
 800bf30:	898b      	ldrh	r3, [r1, #12]
 800bf32:	4605      	mov	r5, r0
 800bf34:	05db      	lsls	r3, r3, #23
 800bf36:	460c      	mov	r4, r1
 800bf38:	4616      	mov	r6, r2
 800bf3a:	d505      	bpl.n	800bf48 <__swrite+0x1e>
 800bf3c:	2302      	movs	r3, #2
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf44:	f000 fa7a 	bl	800c43c <_lseek_r>
 800bf48:	89a3      	ldrh	r3, [r4, #12]
 800bf4a:	4632      	mov	r2, r6
 800bf4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf50:	81a3      	strh	r3, [r4, #12]
 800bf52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf56:	463b      	mov	r3, r7
 800bf58:	4628      	mov	r0, r5
 800bf5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf5e:	f000 b8e3 	b.w	800c128 <_write_r>

0800bf62 <__sseek>:
 800bf62:	b510      	push	{r4, lr}
 800bf64:	460c      	mov	r4, r1
 800bf66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf6a:	f000 fa67 	bl	800c43c <_lseek_r>
 800bf6e:	1c43      	adds	r3, r0, #1
 800bf70:	89a3      	ldrh	r3, [r4, #12]
 800bf72:	bf15      	itete	ne
 800bf74:	6520      	strne	r0, [r4, #80]	; 0x50
 800bf76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf7e:	81a3      	strheq	r3, [r4, #12]
 800bf80:	bf18      	it	ne
 800bf82:	81a3      	strhne	r3, [r4, #12]
 800bf84:	bd10      	pop	{r4, pc}

0800bf86 <__sclose>:
 800bf86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf8a:	f000 b963 	b.w	800c254 <_close_r>

0800bf8e <strncpy>:
 800bf8e:	b570      	push	{r4, r5, r6, lr}
 800bf90:	4604      	mov	r4, r0
 800bf92:	3901      	subs	r1, #1
 800bf94:	b902      	cbnz	r2, 800bf98 <strncpy+0xa>
 800bf96:	bd70      	pop	{r4, r5, r6, pc}
 800bf98:	4623      	mov	r3, r4
 800bf9a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800bf9e:	1e56      	subs	r6, r2, #1
 800bfa0:	f803 5b01 	strb.w	r5, [r3], #1
 800bfa4:	b92d      	cbnz	r5, 800bfb2 <strncpy+0x24>
 800bfa6:	4414      	add	r4, r2
 800bfa8:	42a3      	cmp	r3, r4
 800bfaa:	d0f4      	beq.n	800bf96 <strncpy+0x8>
 800bfac:	f803 5b01 	strb.w	r5, [r3], #1
 800bfb0:	e7fa      	b.n	800bfa8 <strncpy+0x1a>
 800bfb2:	461c      	mov	r4, r3
 800bfb4:	4632      	mov	r2, r6
 800bfb6:	e7ed      	b.n	800bf94 <strncpy+0x6>

0800bfb8 <__ssprint_r>:
 800bfb8:	6893      	ldr	r3, [r2, #8]
 800bfba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfbe:	4681      	mov	r9, r0
 800bfc0:	460c      	mov	r4, r1
 800bfc2:	4616      	mov	r6, r2
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d05e      	beq.n	800c086 <__ssprint_r+0xce>
 800bfc8:	f04f 0b00 	mov.w	fp, #0
 800bfcc:	465f      	mov	r7, fp
 800bfce:	f8d2 a000 	ldr.w	sl, [r2]
 800bfd2:	b357      	cbz	r7, 800c02a <__ssprint_r+0x72>
 800bfd4:	68a3      	ldr	r3, [r4, #8]
 800bfd6:	429f      	cmp	r7, r3
 800bfd8:	d340      	bcc.n	800c05c <__ssprint_r+0xa4>
 800bfda:	89a2      	ldrh	r2, [r4, #12]
 800bfdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bfe0:	d03c      	beq.n	800c05c <__ssprint_r+0xa4>
 800bfe2:	2302      	movs	r3, #2
 800bfe4:	6825      	ldr	r5, [r4, #0]
 800bfe6:	6921      	ldr	r1, [r4, #16]
 800bfe8:	eba5 0801 	sub.w	r8, r5, r1
 800bfec:	6965      	ldr	r5, [r4, #20]
 800bfee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bff2:	fb95 f5f3 	sdiv	r5, r5, r3
 800bff6:	f108 0301 	add.w	r3, r8, #1
 800bffa:	443b      	add	r3, r7
 800bffc:	429d      	cmp	r5, r3
 800bffe:	bf38      	it	cc
 800c000:	461d      	movcc	r5, r3
 800c002:	0553      	lsls	r3, r2, #21
 800c004:	d544      	bpl.n	800c090 <__ssprint_r+0xd8>
 800c006:	4629      	mov	r1, r5
 800c008:	4648      	mov	r0, r9
 800c00a:	f7ff f873 	bl	800b0f4 <_malloc_r>
 800c00e:	b988      	cbnz	r0, 800c034 <__ssprint_r+0x7c>
 800c010:	230c      	movs	r3, #12
 800c012:	f8c9 3000 	str.w	r3, [r9]
 800c016:	89a3      	ldrh	r3, [r4, #12]
 800c018:	f04f 30ff 	mov.w	r0, #4294967295
 800c01c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c020:	81a3      	strh	r3, [r4, #12]
 800c022:	2300      	movs	r3, #0
 800c024:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c028:	e02f      	b.n	800c08a <__ssprint_r+0xd2>
 800c02a:	e9da b700 	ldrd	fp, r7, [sl]
 800c02e:	f10a 0a08 	add.w	sl, sl, #8
 800c032:	e7ce      	b.n	800bfd2 <__ssprint_r+0x1a>
 800c034:	4642      	mov	r2, r8
 800c036:	6921      	ldr	r1, [r4, #16]
 800c038:	9001      	str	r0, [sp, #4]
 800c03a:	f7fb f83f 	bl	80070bc <memcpy>
 800c03e:	89a2      	ldrh	r2, [r4, #12]
 800c040:	9b01      	ldr	r3, [sp, #4]
 800c042:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c046:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c04a:	81a2      	strh	r2, [r4, #12]
 800c04c:	6123      	str	r3, [r4, #16]
 800c04e:	4443      	add	r3, r8
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	463b      	mov	r3, r7
 800c054:	6165      	str	r5, [r4, #20]
 800c056:	eba5 0508 	sub.w	r5, r5, r8
 800c05a:	60a5      	str	r5, [r4, #8]
 800c05c:	42bb      	cmp	r3, r7
 800c05e:	bf28      	it	cs
 800c060:	463b      	movcs	r3, r7
 800c062:	4659      	mov	r1, fp
 800c064:	461a      	mov	r2, r3
 800c066:	6820      	ldr	r0, [r4, #0]
 800c068:	9301      	str	r3, [sp, #4]
 800c06a:	f7ff fa87 	bl	800b57c <memmove>
 800c06e:	68a2      	ldr	r2, [r4, #8]
 800c070:	9b01      	ldr	r3, [sp, #4]
 800c072:	1ad2      	subs	r2, r2, r3
 800c074:	60a2      	str	r2, [r4, #8]
 800c076:	6822      	ldr	r2, [r4, #0]
 800c078:	4413      	add	r3, r2
 800c07a:	6023      	str	r3, [r4, #0]
 800c07c:	68b3      	ldr	r3, [r6, #8]
 800c07e:	1bdf      	subs	r7, r3, r7
 800c080:	60b7      	str	r7, [r6, #8]
 800c082:	2f00      	cmp	r7, #0
 800c084:	d1d1      	bne.n	800c02a <__ssprint_r+0x72>
 800c086:	2000      	movs	r0, #0
 800c088:	6070      	str	r0, [r6, #4]
 800c08a:	b003      	add	sp, #12
 800c08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c090:	462a      	mov	r2, r5
 800c092:	4648      	mov	r0, r9
 800c094:	f7ff fd4a 	bl	800bb2c <_realloc_r>
 800c098:	4603      	mov	r3, r0
 800c09a:	2800      	cmp	r0, #0
 800c09c:	d1d6      	bne.n	800c04c <__ssprint_r+0x94>
 800c09e:	6921      	ldr	r1, [r4, #16]
 800c0a0:	4648      	mov	r0, r9
 800c0a2:	f7fe fd81 	bl	800aba8 <_free_r>
 800c0a6:	e7b3      	b.n	800c010 <__ssprint_r+0x58>

0800c0a8 <sysconf>:
 800c0a8:	2808      	cmp	r0, #8
 800c0aa:	b508      	push	{r3, lr}
 800c0ac:	d006      	beq.n	800c0bc <sysconf+0x14>
 800c0ae:	f7fa ffbb 	bl	8007028 <__errno>
 800c0b2:	2316      	movs	r3, #22
 800c0b4:	6003      	str	r3, [r0, #0]
 800c0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ba:	bd08      	pop	{r3, pc}
 800c0bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c0c0:	e7fb      	b.n	800c0ba <sysconf+0x12>

0800c0c2 <__sprint_r>:
 800c0c2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c6:	6893      	ldr	r3, [r2, #8]
 800c0c8:	4680      	mov	r8, r0
 800c0ca:	460f      	mov	r7, r1
 800c0cc:	4614      	mov	r4, r2
 800c0ce:	b91b      	cbnz	r3, 800c0d8 <__sprint_r+0x16>
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	6053      	str	r3, [r2, #4]
 800c0d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800c0da:	049d      	lsls	r5, r3, #18
 800c0dc:	d520      	bpl.n	800c120 <__sprint_r+0x5e>
 800c0de:	6815      	ldr	r5, [r2, #0]
 800c0e0:	68a0      	ldr	r0, [r4, #8]
 800c0e2:	3508      	adds	r5, #8
 800c0e4:	b918      	cbnz	r0, 800c0ee <__sprint_r+0x2c>
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800c0ec:	e7f2      	b.n	800c0d4 <__sprint_r+0x12>
 800c0ee:	f04f 0900 	mov.w	r9, #0
 800c0f2:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800c0f6:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800c0fa:	45ca      	cmp	sl, r9
 800c0fc:	dc05      	bgt.n	800c10a <__sprint_r+0x48>
 800c0fe:	68a3      	ldr	r3, [r4, #8]
 800c100:	f026 0603 	bic.w	r6, r6, #3
 800c104:	1b9e      	subs	r6, r3, r6
 800c106:	60a6      	str	r6, [r4, #8]
 800c108:	e7ea      	b.n	800c0e0 <__sprint_r+0x1e>
 800c10a:	463a      	mov	r2, r7
 800c10c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800c110:	4640      	mov	r0, r8
 800c112:	f000 f947 	bl	800c3a4 <_fputwc_r>
 800c116:	1c43      	adds	r3, r0, #1
 800c118:	d0e5      	beq.n	800c0e6 <__sprint_r+0x24>
 800c11a:	f109 0901 	add.w	r9, r9, #1
 800c11e:	e7ec      	b.n	800c0fa <__sprint_r+0x38>
 800c120:	f7fe fdfe 	bl	800ad20 <__sfvwrite_r>
 800c124:	e7df      	b.n	800c0e6 <__sprint_r+0x24>
	...

0800c128 <_write_r>:
 800c128:	b538      	push	{r3, r4, r5, lr}
 800c12a:	4605      	mov	r5, r0
 800c12c:	4608      	mov	r0, r1
 800c12e:	4611      	mov	r1, r2
 800c130:	2200      	movs	r2, #0
 800c132:	4c05      	ldr	r4, [pc, #20]	; (800c148 <_write_r+0x20>)
 800c134:	6022      	str	r2, [r4, #0]
 800c136:	461a      	mov	r2, r3
 800c138:	f7f4 ffca 	bl	80010d0 <_write>
 800c13c:	1c43      	adds	r3, r0, #1
 800c13e:	d102      	bne.n	800c146 <_write_r+0x1e>
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	b103      	cbz	r3, 800c146 <_write_r+0x1e>
 800c144:	602b      	str	r3, [r5, #0]
 800c146:	bd38      	pop	{r3, r4, r5, pc}
 800c148:	20002350 	.word	0x20002350

0800c14c <__register_exitproc>:
 800c14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c150:	4c26      	ldr	r4, [pc, #152]	; (800c1ec <__register_exitproc+0xa0>)
 800c152:	4606      	mov	r6, r0
 800c154:	6820      	ldr	r0, [r4, #0]
 800c156:	4698      	mov	r8, r3
 800c158:	460f      	mov	r7, r1
 800c15a:	4691      	mov	r9, r2
 800c15c:	f7fe ff5c 	bl	800b018 <__retarget_lock_acquire_recursive>
 800c160:	4b23      	ldr	r3, [pc, #140]	; (800c1f0 <__register_exitproc+0xa4>)
 800c162:	681d      	ldr	r5, [r3, #0]
 800c164:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800c168:	b918      	cbnz	r0, 800c172 <__register_exitproc+0x26>
 800c16a:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800c16e:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800c172:	6843      	ldr	r3, [r0, #4]
 800c174:	2b1f      	cmp	r3, #31
 800c176:	dd19      	ble.n	800c1ac <__register_exitproc+0x60>
 800c178:	4b1e      	ldr	r3, [pc, #120]	; (800c1f4 <__register_exitproc+0xa8>)
 800c17a:	b933      	cbnz	r3, 800c18a <__register_exitproc+0x3e>
 800c17c:	6820      	ldr	r0, [r4, #0]
 800c17e:	f7fe ff4c 	bl	800b01a <__retarget_lock_release_recursive>
 800c182:	f04f 30ff 	mov.w	r0, #4294967295
 800c186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c18a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c18e:	f3af 8000 	nop.w
 800c192:	2800      	cmp	r0, #0
 800c194:	d0f2      	beq.n	800c17c <__register_exitproc+0x30>
 800c196:	2200      	movs	r2, #0
 800c198:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800c19c:	6042      	str	r2, [r0, #4]
 800c19e:	6003      	str	r3, [r0, #0]
 800c1a0:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800c1a4:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800c1a8:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800c1ac:	6843      	ldr	r3, [r0, #4]
 800c1ae:	b19e      	cbz	r6, 800c1d8 <__register_exitproc+0x8c>
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800c1b6:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800c1ba:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800c1be:	409a      	lsls	r2, r3
 800c1c0:	4311      	orrs	r1, r2
 800c1c2:	2e02      	cmp	r6, #2
 800c1c4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800c1c8:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800c1cc:	bf02      	ittt	eq
 800c1ce:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800c1d2:	430a      	orreq	r2, r1
 800c1d4:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800c1d8:	1c5a      	adds	r2, r3, #1
 800c1da:	3302      	adds	r3, #2
 800c1dc:	6042      	str	r2, [r0, #4]
 800c1de:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800c1e2:	6820      	ldr	r0, [r4, #0]
 800c1e4:	f7fe ff19 	bl	800b01a <__retarget_lock_release_recursive>
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	e7cc      	b.n	800c186 <__register_exitproc+0x3a>
 800c1ec:	20000714 	.word	0x20000714
 800c1f0:	0800c7a4 	.word	0x0800c7a4
 800c1f4:	00000000 	.word	0x00000000

0800c1f8 <_calloc_r>:
 800c1f8:	b510      	push	{r4, lr}
 800c1fa:	4351      	muls	r1, r2
 800c1fc:	f7fe ff7a 	bl	800b0f4 <_malloc_r>
 800c200:	4604      	mov	r4, r0
 800c202:	b198      	cbz	r0, 800c22c <_calloc_r+0x34>
 800c204:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c208:	f022 0203 	bic.w	r2, r2, #3
 800c20c:	3a04      	subs	r2, #4
 800c20e:	2a24      	cmp	r2, #36	; 0x24
 800c210:	d81b      	bhi.n	800c24a <_calloc_r+0x52>
 800c212:	2a13      	cmp	r2, #19
 800c214:	d917      	bls.n	800c246 <_calloc_r+0x4e>
 800c216:	2100      	movs	r1, #0
 800c218:	2a1b      	cmp	r2, #27
 800c21a:	e9c0 1100 	strd	r1, r1, [r0]
 800c21e:	d807      	bhi.n	800c230 <_calloc_r+0x38>
 800c220:	f100 0308 	add.w	r3, r0, #8
 800c224:	2200      	movs	r2, #0
 800c226:	e9c3 2200 	strd	r2, r2, [r3]
 800c22a:	609a      	str	r2, [r3, #8]
 800c22c:	4620      	mov	r0, r4
 800c22e:	bd10      	pop	{r4, pc}
 800c230:	2a24      	cmp	r2, #36	; 0x24
 800c232:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800c236:	bf11      	iteee	ne
 800c238:	f100 0310 	addne.w	r3, r0, #16
 800c23c:	6101      	streq	r1, [r0, #16]
 800c23e:	f100 0318 	addeq.w	r3, r0, #24
 800c242:	6141      	streq	r1, [r0, #20]
 800c244:	e7ee      	b.n	800c224 <_calloc_r+0x2c>
 800c246:	4603      	mov	r3, r0
 800c248:	e7ec      	b.n	800c224 <_calloc_r+0x2c>
 800c24a:	2100      	movs	r1, #0
 800c24c:	f7fa ff41 	bl	80070d2 <memset>
 800c250:	e7ec      	b.n	800c22c <_calloc_r+0x34>
	...

0800c254 <_close_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	2300      	movs	r3, #0
 800c258:	4c05      	ldr	r4, [pc, #20]	; (800c270 <_close_r+0x1c>)
 800c25a:	4605      	mov	r5, r0
 800c25c:	4608      	mov	r0, r1
 800c25e:	6023      	str	r3, [r4, #0]
 800c260:	f7f5 f9c3 	bl	80015ea <_close>
 800c264:	1c43      	adds	r3, r0, #1
 800c266:	d102      	bne.n	800c26e <_close_r+0x1a>
 800c268:	6823      	ldr	r3, [r4, #0]
 800c26a:	b103      	cbz	r3, 800c26e <_close_r+0x1a>
 800c26c:	602b      	str	r3, [r5, #0]
 800c26e:	bd38      	pop	{r3, r4, r5, pc}
 800c270:	20002350 	.word	0x20002350

0800c274 <_fclose_r>:
 800c274:	b570      	push	{r4, r5, r6, lr}
 800c276:	4606      	mov	r6, r0
 800c278:	460c      	mov	r4, r1
 800c27a:	b911      	cbnz	r1, 800c282 <_fclose_r+0xe>
 800c27c:	2500      	movs	r5, #0
 800c27e:	4628      	mov	r0, r5
 800c280:	bd70      	pop	{r4, r5, r6, pc}
 800c282:	b118      	cbz	r0, 800c28c <_fclose_r+0x18>
 800c284:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c286:	b90b      	cbnz	r3, 800c28c <_fclose_r+0x18>
 800c288:	f7fe fbfe 	bl	800aa88 <__sinit>
 800c28c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c28e:	07d8      	lsls	r0, r3, #31
 800c290:	d405      	bmi.n	800c29e <_fclose_r+0x2a>
 800c292:	89a3      	ldrh	r3, [r4, #12]
 800c294:	0599      	lsls	r1, r3, #22
 800c296:	d402      	bmi.n	800c29e <_fclose_r+0x2a>
 800c298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c29a:	f7fe febd 	bl	800b018 <__retarget_lock_acquire_recursive>
 800c29e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2a2:	b93b      	cbnz	r3, 800c2b4 <_fclose_r+0x40>
 800c2a4:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800c2a6:	f015 0501 	ands.w	r5, r5, #1
 800c2aa:	d1e7      	bne.n	800c27c <_fclose_r+0x8>
 800c2ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2ae:	f7fe feb4 	bl	800b01a <__retarget_lock_release_recursive>
 800c2b2:	e7e4      	b.n	800c27e <_fclose_r+0xa>
 800c2b4:	4621      	mov	r1, r4
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f7fe faec 	bl	800a894 <__sflush_r>
 800c2bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c2be:	4605      	mov	r5, r0
 800c2c0:	b133      	cbz	r3, 800c2d0 <_fclose_r+0x5c>
 800c2c2:	69e1      	ldr	r1, [r4, #28]
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	4798      	blx	r3
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	bfb8      	it	lt
 800c2cc:	f04f 35ff 	movlt.w	r5, #4294967295
 800c2d0:	89a3      	ldrh	r3, [r4, #12]
 800c2d2:	061a      	lsls	r2, r3, #24
 800c2d4:	d503      	bpl.n	800c2de <_fclose_r+0x6a>
 800c2d6:	6921      	ldr	r1, [r4, #16]
 800c2d8:	4630      	mov	r0, r6
 800c2da:	f7fe fc65 	bl	800aba8 <_free_r>
 800c2de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c2e0:	b141      	cbz	r1, 800c2f4 <_fclose_r+0x80>
 800c2e2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c2e6:	4299      	cmp	r1, r3
 800c2e8:	d002      	beq.n	800c2f0 <_fclose_r+0x7c>
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f7fe fc5c 	bl	800aba8 <_free_r>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	6323      	str	r3, [r4, #48]	; 0x30
 800c2f4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c2f6:	b121      	cbz	r1, 800c302 <_fclose_r+0x8e>
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	f7fe fc55 	bl	800aba8 <_free_r>
 800c2fe:	2300      	movs	r3, #0
 800c300:	6463      	str	r3, [r4, #68]	; 0x44
 800c302:	f7fe fba9 	bl	800aa58 <__sfp_lock_acquire>
 800c306:	2300      	movs	r3, #0
 800c308:	81a3      	strh	r3, [r4, #12]
 800c30a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c30c:	07db      	lsls	r3, r3, #31
 800c30e:	d402      	bmi.n	800c316 <_fclose_r+0xa2>
 800c310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c312:	f7fe fe82 	bl	800b01a <__retarget_lock_release_recursive>
 800c316:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c318:	f7fe fe7d 	bl	800b016 <__retarget_lock_close_recursive>
 800c31c:	f7fe fba2 	bl	800aa64 <__sfp_lock_release>
 800c320:	e7ad      	b.n	800c27e <_fclose_r+0xa>

0800c322 <__fputwc>:
 800c322:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c326:	4680      	mov	r8, r0
 800c328:	460e      	mov	r6, r1
 800c32a:	4614      	mov	r4, r2
 800c32c:	f7fa fea6 	bl	800707c <__locale_mb_cur_max>
 800c330:	2801      	cmp	r0, #1
 800c332:	d11c      	bne.n	800c36e <__fputwc+0x4c>
 800c334:	1e73      	subs	r3, r6, #1
 800c336:	2bfe      	cmp	r3, #254	; 0xfe
 800c338:	d819      	bhi.n	800c36e <__fputwc+0x4c>
 800c33a:	4605      	mov	r5, r0
 800c33c:	f88d 6004 	strb.w	r6, [sp, #4]
 800c340:	2700      	movs	r7, #0
 800c342:	f10d 0904 	add.w	r9, sp, #4
 800c346:	42af      	cmp	r7, r5
 800c348:	d020      	beq.n	800c38c <__fputwc+0x6a>
 800c34a:	68a3      	ldr	r3, [r4, #8]
 800c34c:	f817 1009 	ldrb.w	r1, [r7, r9]
 800c350:	3b01      	subs	r3, #1
 800c352:	2b00      	cmp	r3, #0
 800c354:	60a3      	str	r3, [r4, #8]
 800c356:	da04      	bge.n	800c362 <__fputwc+0x40>
 800c358:	69a2      	ldr	r2, [r4, #24]
 800c35a:	4293      	cmp	r3, r2
 800c35c:	db1a      	blt.n	800c394 <__fputwc+0x72>
 800c35e:	290a      	cmp	r1, #10
 800c360:	d018      	beq.n	800c394 <__fputwc+0x72>
 800c362:	6823      	ldr	r3, [r4, #0]
 800c364:	1c5a      	adds	r2, r3, #1
 800c366:	6022      	str	r2, [r4, #0]
 800c368:	7019      	strb	r1, [r3, #0]
 800c36a:	3701      	adds	r7, #1
 800c36c:	e7eb      	b.n	800c346 <__fputwc+0x24>
 800c36e:	4632      	mov	r2, r6
 800c370:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800c374:	a901      	add	r1, sp, #4
 800c376:	4640      	mov	r0, r8
 800c378:	f000 f8ce 	bl	800c518 <_wcrtomb_r>
 800c37c:	1c42      	adds	r2, r0, #1
 800c37e:	4605      	mov	r5, r0
 800c380:	d1de      	bne.n	800c340 <__fputwc+0x1e>
 800c382:	4606      	mov	r6, r0
 800c384:	89a3      	ldrh	r3, [r4, #12]
 800c386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c38a:	81a3      	strh	r3, [r4, #12]
 800c38c:	4630      	mov	r0, r6
 800c38e:	b003      	add	sp, #12
 800c390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c394:	4622      	mov	r2, r4
 800c396:	4640      	mov	r0, r8
 800c398:	f000 f874 	bl	800c484 <__swbuf_r>
 800c39c:	1c43      	adds	r3, r0, #1
 800c39e:	d1e4      	bne.n	800c36a <__fputwc+0x48>
 800c3a0:	4606      	mov	r6, r0
 800c3a2:	e7f3      	b.n	800c38c <__fputwc+0x6a>

0800c3a4 <_fputwc_r>:
 800c3a4:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800c3a6:	b570      	push	{r4, r5, r6, lr}
 800c3a8:	07db      	lsls	r3, r3, #31
 800c3aa:	4605      	mov	r5, r0
 800c3ac:	460e      	mov	r6, r1
 800c3ae:	4614      	mov	r4, r2
 800c3b0:	d405      	bmi.n	800c3be <_fputwc_r+0x1a>
 800c3b2:	8993      	ldrh	r3, [r2, #12]
 800c3b4:	0598      	lsls	r0, r3, #22
 800c3b6:	d402      	bmi.n	800c3be <_fputwc_r+0x1a>
 800c3b8:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800c3ba:	f7fe fe2d 	bl	800b018 <__retarget_lock_acquire_recursive>
 800c3be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3c2:	0499      	lsls	r1, r3, #18
 800c3c4:	d406      	bmi.n	800c3d4 <_fputwc_r+0x30>
 800c3c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c3ca:	81a3      	strh	r3, [r4, #12]
 800c3cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c3d2:	6663      	str	r3, [r4, #100]	; 0x64
 800c3d4:	4622      	mov	r2, r4
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	4631      	mov	r1, r6
 800c3da:	f7ff ffa2 	bl	800c322 <__fputwc>
 800c3de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3e0:	4605      	mov	r5, r0
 800c3e2:	07da      	lsls	r2, r3, #31
 800c3e4:	d405      	bmi.n	800c3f2 <_fputwc_r+0x4e>
 800c3e6:	89a3      	ldrh	r3, [r4, #12]
 800c3e8:	059b      	lsls	r3, r3, #22
 800c3ea:	d402      	bmi.n	800c3f2 <_fputwc_r+0x4e>
 800c3ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3ee:	f7fe fe14 	bl	800b01a <__retarget_lock_release_recursive>
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c3f8 <_fstat_r>:
 800c3f8:	b538      	push	{r3, r4, r5, lr}
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	4c06      	ldr	r4, [pc, #24]	; (800c418 <_fstat_r+0x20>)
 800c3fe:	4605      	mov	r5, r0
 800c400:	4608      	mov	r0, r1
 800c402:	4611      	mov	r1, r2
 800c404:	6023      	str	r3, [r4, #0]
 800c406:	f7f5 f8fb 	bl	8001600 <_fstat>
 800c40a:	1c43      	adds	r3, r0, #1
 800c40c:	d102      	bne.n	800c414 <_fstat_r+0x1c>
 800c40e:	6823      	ldr	r3, [r4, #0]
 800c410:	b103      	cbz	r3, 800c414 <_fstat_r+0x1c>
 800c412:	602b      	str	r3, [r5, #0]
 800c414:	bd38      	pop	{r3, r4, r5, pc}
 800c416:	bf00      	nop
 800c418:	20002350 	.word	0x20002350

0800c41c <_isatty_r>:
 800c41c:	b538      	push	{r3, r4, r5, lr}
 800c41e:	2300      	movs	r3, #0
 800c420:	4c05      	ldr	r4, [pc, #20]	; (800c438 <_isatty_r+0x1c>)
 800c422:	4605      	mov	r5, r0
 800c424:	4608      	mov	r0, r1
 800c426:	6023      	str	r3, [r4, #0]
 800c428:	f7f5 f8f9 	bl	800161e <_isatty>
 800c42c:	1c43      	adds	r3, r0, #1
 800c42e:	d102      	bne.n	800c436 <_isatty_r+0x1a>
 800c430:	6823      	ldr	r3, [r4, #0]
 800c432:	b103      	cbz	r3, 800c436 <_isatty_r+0x1a>
 800c434:	602b      	str	r3, [r5, #0]
 800c436:	bd38      	pop	{r3, r4, r5, pc}
 800c438:	20002350 	.word	0x20002350

0800c43c <_lseek_r>:
 800c43c:	b538      	push	{r3, r4, r5, lr}
 800c43e:	4605      	mov	r5, r0
 800c440:	4608      	mov	r0, r1
 800c442:	4611      	mov	r1, r2
 800c444:	2200      	movs	r2, #0
 800c446:	4c05      	ldr	r4, [pc, #20]	; (800c45c <_lseek_r+0x20>)
 800c448:	6022      	str	r2, [r4, #0]
 800c44a:	461a      	mov	r2, r3
 800c44c:	f7f5 f8f1 	bl	8001632 <_lseek>
 800c450:	1c43      	adds	r3, r0, #1
 800c452:	d102      	bne.n	800c45a <_lseek_r+0x1e>
 800c454:	6823      	ldr	r3, [r4, #0]
 800c456:	b103      	cbz	r3, 800c45a <_lseek_r+0x1e>
 800c458:	602b      	str	r3, [r5, #0]
 800c45a:	bd38      	pop	{r3, r4, r5, pc}
 800c45c:	20002350 	.word	0x20002350

0800c460 <_read_r>:
 800c460:	b538      	push	{r3, r4, r5, lr}
 800c462:	4605      	mov	r5, r0
 800c464:	4608      	mov	r0, r1
 800c466:	4611      	mov	r1, r2
 800c468:	2200      	movs	r2, #0
 800c46a:	4c05      	ldr	r4, [pc, #20]	; (800c480 <_read_r+0x20>)
 800c46c:	6022      	str	r2, [r4, #0]
 800c46e:	461a      	mov	r2, r3
 800c470:	f7f5 f89e 	bl	80015b0 <_read>
 800c474:	1c43      	adds	r3, r0, #1
 800c476:	d102      	bne.n	800c47e <_read_r+0x1e>
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	b103      	cbz	r3, 800c47e <_read_r+0x1e>
 800c47c:	602b      	str	r3, [r5, #0]
 800c47e:	bd38      	pop	{r3, r4, r5, pc}
 800c480:	20002350 	.word	0x20002350

0800c484 <__swbuf_r>:
 800c484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c486:	460d      	mov	r5, r1
 800c488:	4614      	mov	r4, r2
 800c48a:	4606      	mov	r6, r0
 800c48c:	b118      	cbz	r0, 800c496 <__swbuf_r+0x12>
 800c48e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c490:	b90b      	cbnz	r3, 800c496 <__swbuf_r+0x12>
 800c492:	f7fe faf9 	bl	800aa88 <__sinit>
 800c496:	69a3      	ldr	r3, [r4, #24]
 800c498:	60a3      	str	r3, [r4, #8]
 800c49a:	89a3      	ldrh	r3, [r4, #12]
 800c49c:	0719      	lsls	r1, r3, #28
 800c49e:	d528      	bpl.n	800c4f2 <__swbuf_r+0x6e>
 800c4a0:	6923      	ldr	r3, [r4, #16]
 800c4a2:	b333      	cbz	r3, 800c4f2 <__swbuf_r+0x6e>
 800c4a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4a8:	b2ed      	uxtb	r5, r5
 800c4aa:	049a      	lsls	r2, r3, #18
 800c4ac:	462f      	mov	r7, r5
 800c4ae:	d52a      	bpl.n	800c506 <__swbuf_r+0x82>
 800c4b0:	6923      	ldr	r3, [r4, #16]
 800c4b2:	6820      	ldr	r0, [r4, #0]
 800c4b4:	1ac0      	subs	r0, r0, r3
 800c4b6:	6963      	ldr	r3, [r4, #20]
 800c4b8:	4283      	cmp	r3, r0
 800c4ba:	dc04      	bgt.n	800c4c6 <__swbuf_r+0x42>
 800c4bc:	4621      	mov	r1, r4
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f7fe fa76 	bl	800a9b0 <_fflush_r>
 800c4c4:	b9d8      	cbnz	r0, 800c4fe <__swbuf_r+0x7a>
 800c4c6:	68a3      	ldr	r3, [r4, #8]
 800c4c8:	3001      	adds	r0, #1
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	60a3      	str	r3, [r4, #8]
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	1c5a      	adds	r2, r3, #1
 800c4d2:	6022      	str	r2, [r4, #0]
 800c4d4:	701d      	strb	r5, [r3, #0]
 800c4d6:	6963      	ldr	r3, [r4, #20]
 800c4d8:	4283      	cmp	r3, r0
 800c4da:	d004      	beq.n	800c4e6 <__swbuf_r+0x62>
 800c4dc:	89a3      	ldrh	r3, [r4, #12]
 800c4de:	07db      	lsls	r3, r3, #31
 800c4e0:	d50f      	bpl.n	800c502 <__swbuf_r+0x7e>
 800c4e2:	2d0a      	cmp	r5, #10
 800c4e4:	d10d      	bne.n	800c502 <__swbuf_r+0x7e>
 800c4e6:	4621      	mov	r1, r4
 800c4e8:	4630      	mov	r0, r6
 800c4ea:	f7fe fa61 	bl	800a9b0 <_fflush_r>
 800c4ee:	b140      	cbz	r0, 800c502 <__swbuf_r+0x7e>
 800c4f0:	e005      	b.n	800c4fe <__swbuf_r+0x7a>
 800c4f2:	4621      	mov	r1, r4
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	f7fd fb35 	bl	8009b64 <__swsetup_r>
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	d0d2      	beq.n	800c4a4 <__swbuf_r+0x20>
 800c4fe:	f04f 37ff 	mov.w	r7, #4294967295
 800c502:	4638      	mov	r0, r7
 800c504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c506:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c50a:	81a3      	strh	r3, [r4, #12]
 800c50c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c50e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c512:	6663      	str	r3, [r4, #100]	; 0x64
 800c514:	e7cc      	b.n	800c4b0 <__swbuf_r+0x2c>
	...

0800c518 <_wcrtomb_r>:
 800c518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c51a:	4c0f      	ldr	r4, [pc, #60]	; (800c558 <_wcrtomb_r+0x40>)
 800c51c:	b085      	sub	sp, #20
 800c51e:	6824      	ldr	r4, [r4, #0]
 800c520:	4605      	mov	r5, r0
 800c522:	461e      	mov	r6, r3
 800c524:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800c526:	b981      	cbnz	r1, 800c54a <_wcrtomb_r+0x32>
 800c528:	4a0c      	ldr	r2, [pc, #48]	; (800c55c <_wcrtomb_r+0x44>)
 800c52a:	2c00      	cmp	r4, #0
 800c52c:	bf08      	it	eq
 800c52e:	4614      	moveq	r4, r2
 800c530:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800c534:	460a      	mov	r2, r1
 800c536:	a901      	add	r1, sp, #4
 800c538:	47a0      	blx	r4
 800c53a:	1c43      	adds	r3, r0, #1
 800c53c:	bf01      	itttt	eq
 800c53e:	2300      	moveq	r3, #0
 800c540:	6033      	streq	r3, [r6, #0]
 800c542:	238a      	moveq	r3, #138	; 0x8a
 800c544:	602b      	streq	r3, [r5, #0]
 800c546:	b005      	add	sp, #20
 800c548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c54a:	4f04      	ldr	r7, [pc, #16]	; (800c55c <_wcrtomb_r+0x44>)
 800c54c:	2c00      	cmp	r4, #0
 800c54e:	bf08      	it	eq
 800c550:	463c      	moveq	r4, r7
 800c552:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800c556:	e7ef      	b.n	800c538 <_wcrtomb_r+0x20>
 800c558:	2000017c 	.word	0x2000017c
 800c55c:	200005a8 	.word	0x200005a8

0800c560 <_init>:
 800c560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c562:	bf00      	nop
 800c564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c566:	bc08      	pop	{r3}
 800c568:	469e      	mov	lr, r3
 800c56a:	4770      	bx	lr

0800c56c <_fini>:
 800c56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56e:	bf00      	nop
 800c570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c572:	bc08      	pop	{r3}
 800c574:	469e      	mov	lr, r3
 800c576:	4770      	bx	lr
