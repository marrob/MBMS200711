
MBMS200711.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009358  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  08009468  08009468  00019468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a54  08009a54  000209b8  2**0
                  CONTENTS
  4 .ARM          00000008  08009a54  08009a54  00019a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a5c  08009a5c  000209b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009a5c  08009a5c  00019a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a64  08009a64  00019a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009b8  20000000  08009a68  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200009b8  0800a420  000209b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c60  0800a420  00020c60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095a1  00000000  00000000  000209e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc2  00000000  00000000  00029f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002bb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  0002c468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018267  00000000  00000000  0002cca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009477  00000000  00000000  00044f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085862  00000000  00000000  0004e37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3be0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000389c  00000000  00000000  000d3c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200009b8 	.word	0x200009b8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009450 	.word	0x08009450

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200009bc 	.word	0x200009bc
 800014c:	08009450 	.word	0x08009450

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9c:	f000 b96e 	b.w	8000d7c <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	9e08      	ldr	r6, [sp, #32]
 8000abe:	460d      	mov	r5, r1
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	468e      	mov	lr, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f040 8083 	bne.w	8000bd0 <__udivmoddi4+0x118>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4617      	mov	r7, r2
 8000ace:	d947      	bls.n	8000b60 <__udivmoddi4+0xa8>
 8000ad0:	fab2 f382 	clz	r3, r2
 8000ad4:	b14b      	cbz	r3, 8000aea <__udivmoddi4+0x32>
 8000ad6:	f1c3 0120 	rsb	r1, r3, #32
 8000ada:	fa05 fe03 	lsl.w	lr, r5, r3
 8000ade:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae2:	409f      	lsls	r7, r3
 8000ae4:	ea41 0e0e 	orr.w	lr, r1, lr
 8000ae8:	409c      	lsls	r4, r3
 8000aea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000aee:	fbbe fcf8 	udiv	ip, lr, r8
 8000af2:	fa1f f987 	uxth.w	r9, r7
 8000af6:	fb08 e21c 	mls	r2, r8, ip, lr
 8000afa:	fb0c f009 	mul.w	r0, ip, r9
 8000afe:	0c21      	lsrs	r1, r4, #16
 8000b00:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000b04:	4290      	cmp	r0, r2
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x66>
 8000b08:	18ba      	adds	r2, r7, r2
 8000b0a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000b0e:	f080 8118 	bcs.w	8000d42 <__udivmoddi4+0x28a>
 8000b12:	4290      	cmp	r0, r2
 8000b14:	f240 8115 	bls.w	8000d42 <__udivmoddi4+0x28a>
 8000b18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b1c:	443a      	add	r2, r7
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	fbb2 f0f8 	udiv	r0, r2, r8
 8000b24:	fb08 2210 	mls	r2, r8, r0, r2
 8000b28:	fb00 f109 	mul.w	r1, r0, r9
 8000b2c:	b2a4      	uxth	r4, r4
 8000b2e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b32:	42a1      	cmp	r1, r4
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0x92>
 8000b36:	193c      	adds	r4, r7, r4
 8000b38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3c:	f080 8103 	bcs.w	8000d46 <__udivmoddi4+0x28e>
 8000b40:	42a1      	cmp	r1, r4
 8000b42:	f240 8100 	bls.w	8000d46 <__udivmoddi4+0x28e>
 8000b46:	3802      	subs	r0, #2
 8000b48:	443c      	add	r4, r7
 8000b4a:	1a64      	subs	r4, r4, r1
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b52:	b11e      	cbz	r6, 8000b5c <__udivmoddi4+0xa4>
 8000b54:	2200      	movs	r2, #0
 8000b56:	40dc      	lsrs	r4, r3
 8000b58:	e9c6 4200 	strd	r4, r2, [r6]
 8000b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b60:	b902      	cbnz	r2, 8000b64 <__udivmoddi4+0xac>
 8000b62:	deff      	udf	#255	; 0xff
 8000b64:	fab2 f382 	clz	r3, r2
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d14f      	bne.n	8000c0c <__udivmoddi4+0x154>
 8000b6c:	1a8d      	subs	r5, r1, r2
 8000b6e:	2101      	movs	r1, #1
 8000b70:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000b74:	fa1f f882 	uxth.w	r8, r2
 8000b78:	fbb5 fcfe 	udiv	ip, r5, lr
 8000b7c:	fb0e 551c 	mls	r5, lr, ip, r5
 8000b80:	fb08 f00c 	mul.w	r0, r8, ip
 8000b84:	0c22      	lsrs	r2, r4, #16
 8000b86:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000b8a:	42a8      	cmp	r0, r5
 8000b8c:	d907      	bls.n	8000b9e <__udivmoddi4+0xe6>
 8000b8e:	197d      	adds	r5, r7, r5
 8000b90:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000b94:	d202      	bcs.n	8000b9c <__udivmoddi4+0xe4>
 8000b96:	42a8      	cmp	r0, r5
 8000b98:	f200 80e9 	bhi.w	8000d6e <__udivmoddi4+0x2b6>
 8000b9c:	4694      	mov	ip, r2
 8000b9e:	1a2d      	subs	r5, r5, r0
 8000ba0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000ba4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000ba8:	fb08 f800 	mul.w	r8, r8, r0
 8000bac:	b2a4      	uxth	r4, r4
 8000bae:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bb2:	45a0      	cmp	r8, r4
 8000bb4:	d907      	bls.n	8000bc6 <__udivmoddi4+0x10e>
 8000bb6:	193c      	adds	r4, r7, r4
 8000bb8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bbc:	d202      	bcs.n	8000bc4 <__udivmoddi4+0x10c>
 8000bbe:	45a0      	cmp	r8, r4
 8000bc0:	f200 80d9 	bhi.w	8000d76 <__udivmoddi4+0x2be>
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	eba4 0408 	sub.w	r4, r4, r8
 8000bca:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bce:	e7c0      	b.n	8000b52 <__udivmoddi4+0x9a>
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x12e>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	f000 80b1 	beq.w	8000d3c <__udivmoddi4+0x284>
 8000bda:	2100      	movs	r1, #0
 8000bdc:	e9c6 0500 	strd	r0, r5, [r6]
 8000be0:	4608      	mov	r0, r1
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	fab3 f183 	clz	r1, r3
 8000bea:	2900      	cmp	r1, #0
 8000bec:	d14b      	bne.n	8000c86 <__udivmoddi4+0x1ce>
 8000bee:	42ab      	cmp	r3, r5
 8000bf0:	d302      	bcc.n	8000bf8 <__udivmoddi4+0x140>
 8000bf2:	4282      	cmp	r2, r0
 8000bf4:	f200 80b9 	bhi.w	8000d6a <__udivmoddi4+0x2b2>
 8000bf8:	1a84      	subs	r4, r0, r2
 8000bfa:	eb65 0303 	sbc.w	r3, r5, r3
 8000bfe:	2001      	movs	r0, #1
 8000c00:	469e      	mov	lr, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d0aa      	beq.n	8000b5c <__udivmoddi4+0xa4>
 8000c06:	e9c6 4e00 	strd	r4, lr, [r6]
 8000c0a:	e7a7      	b.n	8000b5c <__udivmoddi4+0xa4>
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	f1c3 0220 	rsb	r2, r3, #32
 8000c12:	40d1      	lsrs	r1, r2
 8000c14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c18:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c1c:	fa1f f887 	uxth.w	r8, r7
 8000c20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c24:	fa24 f202 	lsr.w	r2, r4, r2
 8000c28:	409d      	lsls	r5, r3
 8000c2a:	fb00 fc08 	mul.w	ip, r0, r8
 8000c2e:	432a      	orrs	r2, r5
 8000c30:	0c15      	lsrs	r5, r2, #16
 8000c32:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000c36:	45ac      	cmp	ip, r5
 8000c38:	fa04 f403 	lsl.w	r4, r4, r3
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0x19a>
 8000c3e:	197d      	adds	r5, r7, r5
 8000c40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c44:	f080 808f 	bcs.w	8000d66 <__udivmoddi4+0x2ae>
 8000c48:	45ac      	cmp	ip, r5
 8000c4a:	f240 808c 	bls.w	8000d66 <__udivmoddi4+0x2ae>
 8000c4e:	3802      	subs	r0, #2
 8000c50:	443d      	add	r5, r7
 8000c52:	eba5 050c 	sub.w	r5, r5, ip
 8000c56:	fbb5 f1fe 	udiv	r1, r5, lr
 8000c5a:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000c5e:	fb01 f908 	mul.w	r9, r1, r8
 8000c62:	b295      	uxth	r5, r2
 8000c64:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c68:	45a9      	cmp	r9, r5
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x1c4>
 8000c6c:	197d      	adds	r5, r7, r5
 8000c6e:	f101 32ff 	add.w	r2, r1, #4294967295
 8000c72:	d274      	bcs.n	8000d5e <__udivmoddi4+0x2a6>
 8000c74:	45a9      	cmp	r9, r5
 8000c76:	d972      	bls.n	8000d5e <__udivmoddi4+0x2a6>
 8000c78:	3902      	subs	r1, #2
 8000c7a:	443d      	add	r5, r7
 8000c7c:	eba5 0509 	sub.w	r5, r5, r9
 8000c80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c84:	e778      	b.n	8000b78 <__udivmoddi4+0xc0>
 8000c86:	f1c1 0720 	rsb	r7, r1, #32
 8000c8a:	408b      	lsls	r3, r1
 8000c8c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c90:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c94:	fa25 f407 	lsr.w	r4, r5, r7
 8000c98:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c9c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000ca0:	fa1f f88c 	uxth.w	r8, ip
 8000ca4:	fb0e 4419 	mls	r4, lr, r9, r4
 8000ca8:	fa20 f307 	lsr.w	r3, r0, r7
 8000cac:	fb09 fa08 	mul.w	sl, r9, r8
 8000cb0:	408d      	lsls	r5, r1
 8000cb2:	431d      	orrs	r5, r3
 8000cb4:	0c2b      	lsrs	r3, r5, #16
 8000cb6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cba:	45a2      	cmp	sl, r4
 8000cbc:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc0:	fa00 f301 	lsl.w	r3, r0, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x222>
 8000cc6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cca:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cce:	d248      	bcs.n	8000d62 <__udivmoddi4+0x2aa>
 8000cd0:	45a2      	cmp	sl, r4
 8000cd2:	d946      	bls.n	8000d62 <__udivmoddi4+0x2aa>
 8000cd4:	f1a9 0902 	sub.w	r9, r9, #2
 8000cd8:	4464      	add	r4, ip
 8000cda:	eba4 040a 	sub.w	r4, r4, sl
 8000cde:	fbb4 f0fe 	udiv	r0, r4, lr
 8000ce2:	fb0e 4410 	mls	r4, lr, r0, r4
 8000ce6:	fb00 fa08 	mul.w	sl, r0, r8
 8000cea:	b2ad      	uxth	r5, r5
 8000cec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cf0:	45a2      	cmp	sl, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x24e>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cfc:	d22d      	bcs.n	8000d5a <__udivmoddi4+0x2a2>
 8000cfe:	45a2      	cmp	sl, r4
 8000d00:	d92b      	bls.n	8000d5a <__udivmoddi4+0x2a2>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4464      	add	r4, ip
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	454c      	cmp	r4, r9
 8000d14:	46c6      	mov	lr, r8
 8000d16:	464d      	mov	r5, r9
 8000d18:	d319      	bcc.n	8000d4e <__udivmoddi4+0x296>
 8000d1a:	d016      	beq.n	8000d4a <__udivmoddi4+0x292>
 8000d1c:	b15e      	cbz	r6, 8000d36 <__udivmoddi4+0x27e>
 8000d1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d22:	eb64 0405 	sbc.w	r4, r4, r5
 8000d26:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	40cc      	lsrs	r4, r1
 8000d32:	e9c6 7400 	strd	r7, r4, [r6]
 8000d36:	2100      	movs	r1, #0
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	4630      	mov	r0, r6
 8000d40:	e70c      	b.n	8000b5c <__udivmoddi4+0xa4>
 8000d42:	468c      	mov	ip, r1
 8000d44:	e6eb      	b.n	8000b1e <__udivmoddi4+0x66>
 8000d46:	4610      	mov	r0, r2
 8000d48:	e6ff      	b.n	8000b4a <__udivmoddi4+0x92>
 8000d4a:	4543      	cmp	r3, r8
 8000d4c:	d2e6      	bcs.n	8000d1c <__udivmoddi4+0x264>
 8000d4e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d52:	eb69 050c 	sbc.w	r5, r9, ip
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7e0      	b.n	8000d1c <__udivmoddi4+0x264>
 8000d5a:	4628      	mov	r0, r5
 8000d5c:	e7d3      	b.n	8000d06 <__udivmoddi4+0x24e>
 8000d5e:	4611      	mov	r1, r2
 8000d60:	e78c      	b.n	8000c7c <__udivmoddi4+0x1c4>
 8000d62:	4681      	mov	r9, r0
 8000d64:	e7b9      	b.n	8000cda <__udivmoddi4+0x222>
 8000d66:	4608      	mov	r0, r1
 8000d68:	e773      	b.n	8000c52 <__udivmoddi4+0x19a>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e749      	b.n	8000c02 <__udivmoddi4+0x14a>
 8000d6e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d72:	443d      	add	r5, r7
 8000d74:	e713      	b.n	8000b9e <__udivmoddi4+0xe6>
 8000d76:	3802      	subs	r0, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	e724      	b.n	8000bc6 <__udivmoddi4+0x10e>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d84:	f000 fed4 	bl	8001b30 <HAL_Init>

  /* USER CODE BEGIN Init */
  /*** LiveLed ***/
  hLiveLed.LedOffFnPtr = &LiveLedOff;
 8000d88:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <main+0x8c>)
 8000d8a:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <main+0x90>)
 8000d8c:	609a      	str	r2, [r3, #8]
  hLiveLed.LedOnFnPtr = &LiveLedOn;
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <main+0x8c>)
 8000d90:	4a20      	ldr	r2, [pc, #128]	; (8000e14 <main+0x94>)
 8000d92:	605a      	str	r2, [r3, #4]
  hLiveLed.HalfPeriodTimeMs = 500;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <main+0x8c>)
 8000d96:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d9a:	601a      	str	r2, [r3, #0]
  LiveLedInit(&hLiveLed);
 8000d9c:	481b      	ldr	r0, [pc, #108]	; (8000e0c <main+0x8c>)
 8000d9e:	f000 fe81 	bl	8001aa4 <LiveLedInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da2:	f000 f84f 	bl	8000e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da6:	f000 f8f3 	bl	8000f90 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000daa:	f000 f891 	bl	8000ed0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000dae:	f000 f8c5 	bl	8000f3c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  DelayMs(500);
 8000db2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db6:	f000 fe60 	bl	8001a7a <DelayMs>


  printf(VT100_CLEARSCREEN);
 8000dba:	4817      	ldr	r0, [pc, #92]	; (8000e18 <main+0x98>)
 8000dbc:	f002 fbb4 	bl	8003528 <printf>
  printf(VT100_CURSORHOME);
 8000dc0:	4816      	ldr	r0, [pc, #88]	; (8000e1c <main+0x9c>)
 8000dc2:	f002 fbb1 	bl	8003528 <printf>
  printf(VT100_ATTR_RESET);
 8000dc6:	4816      	ldr	r0, [pc, #88]	; (8000e20 <main+0xa0>)
 8000dc8:	f002 fbae 	bl	8003528 <printf>

#ifdef DEBUG
  printf(VT100_ATTR_RED);
 8000dcc:	4815      	ldr	r0, [pc, #84]	; (8000e24 <main+0xa4>)
 8000dce:	f002 fbab 	bl	8003528 <printf>
    DeviceUsrLog("This is a DEBUG version.");
 8000dd2:	4815      	ldr	r0, [pc, #84]	; (8000e28 <main+0xa8>)
 8000dd4:	f002 fba8 	bl	8003528 <printf>
 8000dd8:	4814      	ldr	r0, [pc, #80]	; (8000e2c <main+0xac>)
 8000dda:	f002 fbfd 	bl	80035d8 <puts>
  printf(VT100_ATTR_RESET);
 8000dde:	4810      	ldr	r0, [pc, #64]	; (8000e20 <main+0xa0>)
 8000de0:	f002 fba2 	bl	8003528 <printf>
#endif

  DeviceUsrLog("Manufacturer:%s, Name:%s, Version:%04X",DEVICE_MNF, DEVICE_NAME, DEVICE_FW);
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <main+0xb0>)
 8000de6:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <main+0xb4>)
 8000de8:	4913      	ldr	r1, [pc, #76]	; (8000e38 <main+0xb8>)
 8000dea:	4814      	ldr	r0, [pc, #80]	; (8000e3c <main+0xbc>)
 8000dec:	f002 fb9c 	bl	8003528 <printf>
 8000df0:	480e      	ldr	r0, [pc, #56]	; (8000e2c <main+0xac>)
 8000df2:	f002 fbf1 	bl	80035d8 <puts>


UartRxTimestamp = HAL_GetTick();
 8000df6:	f000 fef3 	bl	8001be0 <HAL_GetTick>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a10      	ldr	r2, [pc, #64]	; (8000e40 <main+0xc0>)
 8000dfe:	6013      	str	r3, [r2, #0]

  //AsciGetModel();
 //AsciUartInitSeq();
 // AsciUartInitSeq2();
AsciUartInitSeq3();
 8000e00:	f000 f95c 	bl	80010bc <AsciUartInitSeq3>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    LiveLedTask(&hLiveLed);
 8000e04:	4801      	ldr	r0, [pc, #4]	; (8000e0c <main+0x8c>)
 8000e06:	f000 fe64 	bl	8001ad2 <LiveLedTask>
 8000e0a:	e7fb      	b.n	8000e04 <main+0x84>
 8000e0c:	20000a0c 	.word	0x20000a0c
 8000e10:	08001689 	.word	0x08001689
 8000e14:	08001671 	.word	0x08001671
 8000e18:	08009468 	.word	0x08009468
 8000e1c:	08009470 	.word	0x08009470
 8000e20:	08009474 	.word	0x08009474
 8000e24:	0800947c 	.word	0x0800947c
 8000e28:	08009484 	.word	0x08009484
 8000e2c:	080094a0 	.word	0x080094a0
 8000e30:	00200720 	.word	0x00200720
 8000e34:	080094a4 	.word	0x080094a4
 8000e38:	080094b0 	.word	0x080094b0
 8000e3c:	080094c0 	.word	0x080094c0
 8000e40:	20000b40 	.word	0x20000b40

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b090      	sub	sp, #64	; 0x40
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 0318 	add.w	r3, r7, #24
 8000e4e:	2228      	movs	r2, #40	; 0x28
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fb60 	bl	8003518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e66:	2301      	movs	r3, #1
 8000e68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e74:	2301      	movs	r3, #1
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e82:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e88:	f107 0318 	add.w	r3, r7, #24
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 f931 	bl	80020f4 <HAL_RCC_OscConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e98:	f000 fc02 	bl	80016a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fb9c 	bl	80025f4 <HAL_RCC_ClockConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ec2:	f000 fbed 	bl	80016a0 <Error_Handler>
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3740      	adds	r7, #64	; 0x40
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <MX_SPI2_Init+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ee0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000f04:	2220      	movs	r2, #32
 8000f06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000f1c:	220a      	movs	r2, #10
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000f22:	f001 fd01 	bl	8002928 <HAL_SPI_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f2c:	f000 fbb8 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000a20 	.word	0x20000a20
 8000f38:	40003800 	.word	0x40003800

08000f3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <MX_USART1_UART_Init+0x50>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f74:	f002 f8e0 	bl	8003138 <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f7e:	f000 fb8f 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000b44 	.word	0x20000b44
 8000f8c:	40013800 	.word	0x40013800

08000f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa4:	4b38      	ldr	r3, [pc, #224]	; (8001088 <MX_GPIO_Init+0xf8>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a37      	ldr	r2, [pc, #220]	; (8001088 <MX_GPIO_Init+0xf8>)
 8000faa:	f043 0320 	orr.w	r3, r3, #32
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b35      	ldr	r3, [pc, #212]	; (8001088 <MX_GPIO_Init+0xf8>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0320 	and.w	r3, r3, #32
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b32      	ldr	r3, [pc, #200]	; (8001088 <MX_GPIO_Init+0xf8>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a31      	ldr	r2, [pc, #196]	; (8001088 <MX_GPIO_Init+0xf8>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <MX_GPIO_Init+0xf8>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <MX_GPIO_Init+0xf8>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a2b      	ldr	r2, [pc, #172]	; (8001088 <MX_GPIO_Init+0xf8>)
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <MX_GPIO_Init+0xf8>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LIVE_LED_Pin|LED_R_Pin|LED_L_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f649 0140 	movw	r1, #38976	; 0x9840
 8000ff2:	4826      	ldr	r0, [pc, #152]	; (800108c <MX_GPIO_Init+0xfc>)
 8000ff4:	f001 f866 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EEP_ON_GPIO_Port, EEP_ON_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	4824      	ldr	r0, [pc, #144]	; (8001090 <MX_GPIO_Init+0x100>)
 8000ffe:	f001 f861 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001008:	4821      	ldr	r0, [pc, #132]	; (8001090 <MX_GPIO_Init+0x100>)
 800100a:	f001 f85b 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LIVE_LED_Pin LED_R_Pin LED_L_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LIVE_LED_Pin|LED_R_Pin|LED_L_Pin|LED_G_Pin;
 800100e:	f649 0340 	movw	r3, #38976	; 0x9840
 8001012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2302      	movs	r3, #2
 800101e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	4819      	ldr	r0, [pc, #100]	; (800108c <MX_GPIO_Init+0xfc>)
 8001028:	f000 fec8 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : EEP_ON_Pin */
  GPIO_InitStruct.Pin = EEP_ON_Pin;
 800102c:	2304      	movs	r3, #4
 800102e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2302      	movs	r3, #2
 800103a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EEP_ON_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4619      	mov	r1, r3
 8001042:	4813      	ldr	r0, [pc, #76]	; (8001090 <MX_GPIO_Init+0x100>)
 8001044:	f000 feba 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_CS_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001052:	2301      	movs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAX_CS_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	4619      	mov	r1, r3
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <MX_GPIO_Init+0x100>)
 8001062:	f000 feab 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_INT_Pin */
  GPIO_InitStruct.Pin = MAX_INT_Pin;
 8001066:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MAX_INT_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4619      	mov	r1, r3
 800107a:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_GPIO_Init+0xfc>)
 800107c:	f000 fe9e 	bl	8001dbc <HAL_GPIO_Init>

}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40021000 	.word	0x40021000
 800108c:	40010800 	.word	0x40010800
 8001090:	40010c00 	.word	0x40010c00

08001094 <_write>:
//    ITM_SendChar((*ptr++));
//  return len;
//}

int _write(int file, char *ptr, int len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 100);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	2364      	movs	r3, #100	; 0x64
 80010a6:	68b9      	ldr	r1, [r7, #8]
 80010a8:	4803      	ldr	r0, [pc, #12]	; (80010b8 <_write+0x24>)
 80010aa:	f002 f892 	bl	80031d2 <HAL_UART_Transmit>
  return len;
 80010ae:	687b      	ldr	r3, [r7, #4]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000b44 	.word	0x20000b44

080010bc <AsciUartInitSeq3>:
    DeviceErrLog("RX_STATUS_ERROR");
  }

}
uint8_t AsciUartInitSeq3(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b09e      	sub	sp, #120	; 0x78
 80010c0:	af00      	add	r7, sp, #0
  uint8_t rxBuff[16];
  uint8_t txBuff[16];


  memset(rxBuff,0x00, sizeof(rxBuff));
 80010c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010c6:	2210      	movs	r2, #16
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 fa24 	bl	8003518 <memset>
  AsciReadReg(0x09,rxBuff,1);
 80010d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010d4:	2201      	movs	r2, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	2009      	movs	r0, #9
 80010da:	f000 fa3b 	bl	8001554 <AsciReadReg>
  sprintf(String2,"Read Tx Interrupt Register:0x%02X",rxBuff[0]);
 80010de:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80010e2:	461a      	mov	r2, r3
 80010e4:	49dd      	ldr	r1, [pc, #884]	; (800145c <AsciUartInitSeq3+0x3a0>)
 80010e6:	48de      	ldr	r0, [pc, #888]	; (8001460 <AsciUartInitSeq3+0x3a4>)
 80010e8:	f002 fa7e 	bl	80035e8 <sprintf>
  DeviceDbgLog(String2);
 80010ec:	48dd      	ldr	r0, [pc, #884]	; (8001464 <AsciUartInitSeq3+0x3a8>)
 80010ee:	f002 fa1b 	bl	8003528 <printf>
 80010f2:	48dd      	ldr	r0, [pc, #884]	; (8001468 <AsciUartInitSeq3+0x3ac>)
 80010f4:	f002 fa18 	bl	8003528 <printf>
 80010f8:	48d9      	ldr	r0, [pc, #868]	; (8001460 <AsciUartInitSeq3+0x3a4>)
 80010fa:	f002 fa15 	bl	8003528 <printf>
 80010fe:	48db      	ldr	r0, [pc, #876]	; (800146c <AsciUartInitSeq3+0x3b0>)
 8001100:	f002 fa12 	bl	8003528 <printf>
 8001104:	48da      	ldr	r0, [pc, #872]	; (8001470 <AsciUartInitSeq3+0x3b4>)
 8001106:	f002 fa67 	bl	80035d8 <puts>

  memset(rxBuff,0x00, sizeof(rxBuff));
 800110a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800110e:	2210      	movs	r2, #16
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f002 fa00 	bl	8003518 <memset>
  AsciReadReg(0x15,rxBuff,1);
 8001118:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800111c:	2201      	movs	r2, #1
 800111e:	4619      	mov	r1, r3
 8001120:	2015      	movs	r0, #21
 8001122:	f000 fa17 	bl	8001554 <AsciReadReg>
  sprintf(String2,"Read Model Register:0x%02X",rxBuff[0]);
 8001126:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800112a:	461a      	mov	r2, r3
 800112c:	49d1      	ldr	r1, [pc, #836]	; (8001474 <AsciUartInitSeq3+0x3b8>)
 800112e:	48cc      	ldr	r0, [pc, #816]	; (8001460 <AsciUartInitSeq3+0x3a4>)
 8001130:	f002 fa5a 	bl	80035e8 <sprintf>
  DeviceDbgLog(String2);
 8001134:	48cb      	ldr	r0, [pc, #812]	; (8001464 <AsciUartInitSeq3+0x3a8>)
 8001136:	f002 f9f7 	bl	8003528 <printf>
 800113a:	48cb      	ldr	r0, [pc, #812]	; (8001468 <AsciUartInitSeq3+0x3ac>)
 800113c:	f002 f9f4 	bl	8003528 <printf>
 8001140:	48c7      	ldr	r0, [pc, #796]	; (8001460 <AsciUartInitSeq3+0x3a4>)
 8001142:	f002 f9f1 	bl	8003528 <printf>
 8001146:	48c9      	ldr	r0, [pc, #804]	; (800146c <AsciUartInitSeq3+0x3b0>)
 8001148:	f002 f9ee 	bl	8003528 <printf>
 800114c:	48c8      	ldr	r0, [pc, #800]	; (8001470 <AsciUartInitSeq3+0x3b4>)
 800114e:	f002 fa43 	bl	80035d8 <puts>

  memset(rxBuff,0x00, sizeof(rxBuff));
 8001152:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001156:	2210      	movs	r2, #16
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f002 f9dc 	bl	8003518 <memset>
  AsciReadReg(0x17,rxBuff,1);
 8001160:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001164:	2201      	movs	r2, #1
 8001166:	4619      	mov	r1, r3
 8001168:	2017      	movs	r0, #23
 800116a:	f000 f9f3 	bl	8001554 <AsciReadReg>
  sprintf(String2,"Read Version Register:0x%02X",rxBuff[0]);
 800116e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001172:	461a      	mov	r2, r3
 8001174:	49c0      	ldr	r1, [pc, #768]	; (8001478 <AsciUartInitSeq3+0x3bc>)
 8001176:	48ba      	ldr	r0, [pc, #744]	; (8001460 <AsciUartInitSeq3+0x3a4>)
 8001178:	f002 fa36 	bl	80035e8 <sprintf>
  DeviceDbgLog(String2);
 800117c:	48b9      	ldr	r0, [pc, #740]	; (8001464 <AsciUartInitSeq3+0x3a8>)
 800117e:	f002 f9d3 	bl	8003528 <printf>
 8001182:	48b9      	ldr	r0, [pc, #740]	; (8001468 <AsciUartInitSeq3+0x3ac>)
 8001184:	f002 f9d0 	bl	8003528 <printf>
 8001188:	48b5      	ldr	r0, [pc, #724]	; (8001460 <AsciUartInitSeq3+0x3a4>)
 800118a:	f002 f9cd 	bl	8003528 <printf>
 800118e:	48b7      	ldr	r0, [pc, #732]	; (800146c <AsciUartInitSeq3+0x3b0>)
 8001190:	f002 f9ca 	bl	8003528 <printf>
 8001194:	48b6      	ldr	r0, [pc, #728]	; (8001470 <AsciUartInitSeq3+0x3b4>)
 8001196:	f002 fa1f 	bl	80035d8 <puts>

  memset(rxBuff,0x00, sizeof(rxBuff));
 800119a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800119e:	2210      	movs	r2, #16
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 f9b8 	bl	8003518 <memset>
  AsciReadReg(0x13,rxBuff,1);
 80011a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011ac:	2201      	movs	r2, #1
 80011ae:	4619      	mov	r1, r3
 80011b0:	2013      	movs	r0, #19
 80011b2:	f000 f9cf 	bl	8001554 <AsciReadReg>
  sprintf(String2,"Read FEMA Register:0x%02X",rxBuff[0]);
 80011b6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80011ba:	461a      	mov	r2, r3
 80011bc:	49af      	ldr	r1, [pc, #700]	; (800147c <AsciUartInitSeq3+0x3c0>)
 80011be:	48a8      	ldr	r0, [pc, #672]	; (8001460 <AsciUartInitSeq3+0x3a4>)
 80011c0:	f002 fa12 	bl	80035e8 <sprintf>
  DeviceDbgLog(String2);
 80011c4:	48a7      	ldr	r0, [pc, #668]	; (8001464 <AsciUartInitSeq3+0x3a8>)
 80011c6:	f002 f9af 	bl	8003528 <printf>
 80011ca:	48a7      	ldr	r0, [pc, #668]	; (8001468 <AsciUartInitSeq3+0x3ac>)
 80011cc:	f002 f9ac 	bl	8003528 <printf>
 80011d0:	48a3      	ldr	r0, [pc, #652]	; (8001460 <AsciUartInitSeq3+0x3a4>)
 80011d2:	f002 f9a9 	bl	8003528 <printf>
 80011d6:	48a5      	ldr	r0, [pc, #660]	; (800146c <AsciUartInitSeq3+0x3b0>)
 80011d8:	f002 f9a6 	bl	8003528 <printf>
 80011dc:	48a4      	ldr	r0, [pc, #656]	; (8001470 <AsciUartInitSeq3+0x3b4>)
 80011de:	f002 f9fb 	bl	80035d8 <puts>

  memcpy(txBuff, (uint8_t[]){0x08,0x00}, 2);
 80011e2:	2308      	movs	r3, #8
 80011e4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80011e8:	2300      	movs	r3, #0
 80011ea:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 80011ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80011f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  AsciWrite(txBuff, 2);
 80011f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011fa:	2102      	movs	r1, #2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 f97f 	bl	8001500 <AsciWrite>

  memcpy(txBuff, (uint8_t[]){0x08,0x00}, 2);
 8001202:	2308      	movs	r3, #8
 8001204:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001208:	2300      	movs	r3, #0
 800120a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800120e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001212:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  AsciWrite(txBuff, 2);
 8001216:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800121a:	2102      	movs	r1, #2
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f96f 	bl	8001500 <AsciWrite>

  memcpy(txBuff, (uint8_t[]){0x04,0x02}, 2);
 8001222:	4b97      	ldr	r3, [pc, #604]	; (8001480 <AsciUartInitSeq3+0x3c4>)
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800122a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800122e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  AsciWrite(txBuff, 2);
 8001232:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001236:	2102      	movs	r1, #2
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f961 	bl	8001500 <AsciWrite>

  memcpy(txBuff, (uint8_t[]){0x06,0x00}, 2);
 800123e:	2306      	movs	r3, #6
 8001240:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001244:	2300      	movs	r3, #0
 8001246:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800124a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800124e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  AsciWrite(txBuff, 2);
 8001252:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001256:	2102      	movs	r1, #2
 8001258:	4618      	mov	r0, r3
 800125a:	f000 f951 	bl	8001500 <AsciWrite>

  memcpy(txBuff, (uint8_t[]){0xC0,0x60}, 2);
 800125e:	4b89      	ldr	r3, [pc, #548]	; (8001484 <AsciUartInitSeq3+0x3c8>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8001266:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800126a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  AsciWrite(txBuff, 2);
 800126e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001272:	2102      	movs	r1, #2
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f943 	bl	8001500 <AsciWrite>

  memcpy(txBuff, (uint8_t[]){0x0E,0x10}, 2);
 800127a:	4b83      	ldr	r3, [pc, #524]	; (8001488 <AsciUartInitSeq3+0x3cc>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001280:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001282:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  AsciWrite(txBuff, 2);
 8001286:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800128a:	2102      	movs	r1, #2
 800128c:	4618      	mov	r0, r3
 800128e:	f000 f937 	bl	8001500 <AsciWrite>

  memcpy(txBuff, (uint8_t[]){0x10,0x05}, 2);
 8001292:	4b7e      	ldr	r3, [pc, #504]	; (800148c <AsciUartInitSeq3+0x3d0>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	873b      	strh	r3, [r7, #56]	; 0x38
 8001298:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800129a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  AsciWrite(txBuff, 2);
 800129e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012a2:	2102      	movs	r1, #2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f92b 	bl	8001500 <AsciWrite>

  memcpy(txBuff, (uint8_t[]){0x30}, 1);
 80012aa:	2330      	movs	r3, #48	; 0x30
 80012ac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80012b0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012b4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  AsciWrite(txBuff, 1);
 80012b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012bc:	2101      	movs	r1, #1
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f91e 	bl	8001500 <AsciWrite>

  memcpy(txBuff, (uint8_t[]){0xE0}, 1);
 80012c4:	23e0      	movs	r3, #224	; 0xe0
 80012c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80012ca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80012ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  AsciWrite(txBuff, 1);
 80012d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012d6:	2101      	movs	r1, #1
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f911 	bl	8001500 <AsciWrite>

  memcpy(txBuff, (uint8_t[]){0x93}, 1);
 80012de:	2393      	movs	r3, #147	; 0x93
 80012e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80012e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012e8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  AsciWrite(txBuff, 1);
 80012ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012f0:	2101      	movs	r1, #1
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f904 	bl	8001500 <AsciWrite>

  int16_t i=0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
  do
  {
    AsciReadReg(0x01, rxBuff, 1);
 80012fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001302:	2201      	movs	r2, #1
 8001304:	4619      	mov	r1, r3
 8001306:	2001      	movs	r0, #1
 8001308:	f000 f924 	bl	8001554 <AsciReadReg>
    sprintf(String2,"%03d Read RX_Status:0x%02X",i,rxBuff[0]);
 800130c:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8001310:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001314:	495e      	ldr	r1, [pc, #376]	; (8001490 <AsciUartInitSeq3+0x3d4>)
 8001316:	4852      	ldr	r0, [pc, #328]	; (8001460 <AsciUartInitSeq3+0x3a4>)
 8001318:	f002 f966 	bl	80035e8 <sprintf>
    DeviceDbgLog(String2);
 800131c:	4851      	ldr	r0, [pc, #324]	; (8001464 <AsciUartInitSeq3+0x3a8>)
 800131e:	f002 f903 	bl	8003528 <printf>
 8001322:	4851      	ldr	r0, [pc, #324]	; (8001468 <AsciUartInitSeq3+0x3ac>)
 8001324:	f002 f900 	bl	8003528 <printf>
 8001328:	484d      	ldr	r0, [pc, #308]	; (8001460 <AsciUartInitSeq3+0x3a4>)
 800132a:	f002 f8fd 	bl	8003528 <printf>
 800132e:	484f      	ldr	r0, [pc, #316]	; (800146c <AsciUartInitSeq3+0x3b0>)
 8001330:	f002 f8fa 	bl	8003528 <printf>
 8001334:	484e      	ldr	r0, [pc, #312]	; (8001470 <AsciUartInitSeq3+0x3b4>)
 8001336:	f002 f94f 	bl	80035d8 <puts>
    i++;
 800133a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800133e:	b29b      	uxth	r3, r3
 8001340:	3301      	adds	r3, #1
 8001342:	b29b      	uxth	r3, r3
 8001344:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
}while(rxBuff[0]!=0x21 && i < 100);
 8001348:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800134c:	2b21      	cmp	r3, #33	; 0x21
 800134e:	d003      	beq.n	8001358 <AsciUartInitSeq3+0x29c>
 8001350:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001354:	2b63      	cmp	r3, #99	; 0x63
 8001356:	ddd2      	ble.n	80012fe <AsciUartInitSeq3+0x242>



  memcpy(txBuff, (uint8_t[]){0x30}, 1);
 8001358:	2330      	movs	r3, #48	; 0x30
 800135a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800135e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001362:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  AsciWrite(txBuff, 1);
 8001366:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800136a:	2101      	movs	r1, #1
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f8c7 	bl	8001500 <AsciWrite>

  memcpy(txBuff, (uint8_t[]){0xE0}, 1);
 8001372:	23e0      	movs	r3, #224	; 0xe0
 8001374:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001378:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800137c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  AsciWrite(txBuff, 1);
 8001380:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001384:	2101      	movs	r1, #1
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f8ba 	bl	8001500 <AsciWrite>

  memcpy(txBuff, (uint8_t[]){0xC0,0x03,0x57,0x00,0x00}, 5);
 800138c:	4a41      	ldr	r2, [pc, #260]	; (8001494 <AsciUartInitSeq3+0x3d8>)
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001396:	6018      	str	r0, [r3, #0]
 8001398:	3304      	adds	r3, #4
 800139a:	7019      	strb	r1, [r3, #0]
 800139c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013a0:	f107 021c 	add.w	r2, r7, #28
 80013a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013a8:	6018      	str	r0, [r3, #0]
 80013aa:	3304      	adds	r3, #4
 80013ac:	7019      	strb	r1, [r3, #0]
  AsciWrite(txBuff, 5);
 80013ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013b2:	2105      	movs	r1, #5
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 f8a3 	bl	8001500 <AsciWrite>

  memcpy(txBuff, (uint8_t[]){0xB0}, 1);
 80013ba:	23b0      	movs	r3, #176	; 0xb0
 80013bc:	763b      	strb	r3, [r7, #24]
 80013be:	7e3b      	ldrb	r3, [r7, #24]
 80013c0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  AsciWrite(txBuff, 1);
 80013c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013c8:	2101      	movs	r1, #1
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f898 	bl	8001500 <AsciWrite>

  memcpy(txBuff, (uint8_t[]){0x30}, 1);
 80013d0:	2330      	movs	r3, #48	; 0x30
 80013d2:	753b      	strb	r3, [r7, #20]
 80013d4:	7d3b      	ldrb	r3, [r7, #20]
 80013d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  AsciWrite(txBuff, 1);
 80013da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013de:	2101      	movs	r1, #1
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f88d 	bl	8001500 <AsciWrite>

  memcpy(txBuff, (uint8_t[]){0xE0}, 1);
 80013e6:	23e0      	movs	r3, #224	; 0xe0
 80013e8:	743b      	strb	r3, [r7, #16]
 80013ea:	7c3b      	ldrb	r3, [r7, #16]
 80013ec:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  AsciWrite(txBuff, 1);
 80013f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013f4:	2101      	movs	r1, #1
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f882 	bl	8001500 <AsciWrite>

  memcpy(txBuff, (uint8_t[]){0xC0,0x07,0x04,0x1B,0x00,0x80,0xA2,0x00,0x00}, 9);
 80013fc:	4a26      	ldr	r2, [pc, #152]	; (8001498 <AsciUartInitSeq3+0x3dc>)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	ca07      	ldmia	r2, {r0, r1, r2}
 8001402:	c303      	stmia	r3!, {r0, r1}
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800140a:	1d3a      	adds	r2, r7, #4
 800140c:	ca07      	ldmia	r2, {r0, r1, r2}
 800140e:	c303      	stmia	r3!, {r0, r1}
 8001410:	701a      	strb	r2, [r3, #0]
  AsciWrite(txBuff, 9);
 8001412:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001416:	2109      	movs	r1, #9
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f871 	bl	8001500 <AsciWrite>

  memcpy(txBuff, (uint8_t[]){0xB0}, 1);
 800141e:	23b0      	movs	r3, #176	; 0xb0
 8001420:	703b      	strb	r3, [r7, #0]
 8001422:	783b      	ldrb	r3, [r7, #0]
 8001424:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  AsciWrite(txBuff, 1);
 8001428:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800142c:	2101      	movs	r1, #1
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f866 	bl	8001500 <AsciWrite>

  i=0;
 8001434:	2300      	movs	r3, #0
 8001436:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
  do
  {
    AsciReadReg(0x01, rxBuff, 1);
 800143a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800143e:	2201      	movs	r2, #1
 8001440:	4619      	mov	r1, r3
 8001442:	2001      	movs	r0, #1
 8001444:	f000 f886 	bl	8001554 <AsciReadReg>
    sprintf(String2,"%03d Read RX_Status:0x%02X",i,rxBuff[0]);
 8001448:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 800144c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001450:	490f      	ldr	r1, [pc, #60]	; (8001490 <AsciUartInitSeq3+0x3d4>)
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <AsciUartInitSeq3+0x3a4>)
 8001454:	f002 f8c8 	bl	80035e8 <sprintf>
 8001458:	e020      	b.n	800149c <AsciUartInitSeq3+0x3e0>
 800145a:	bf00      	nop
 800145c:	080095b4 	.word	0x080095b4
 8001460:	20000a78 	.word	0x20000a78
 8001464:	080094e8 	.word	0x080094e8
 8001468:	080094f0 	.word	0x080094f0
 800146c:	08009474 	.word	0x08009474
 8001470:	080094a0 	.word	0x080094a0
 8001474:	080095d8 	.word	0x080095d8
 8001478:	080095f4 	.word	0x080095f4
 800147c:	08009614 	.word	0x08009614
 8001480:	0800952c 	.word	0x0800952c
 8001484:	0800964c 	.word	0x0800964c
 8001488:	08009534 	.word	0x08009534
 800148c:	08009538 	.word	0x08009538
 8001490:	08009630 	.word	0x08009630
 8001494:	08009650 	.word	0x08009650
 8001498:	08009658 	.word	0x08009658
    DeviceDbgLog(String2);
 800149c:	4813      	ldr	r0, [pc, #76]	; (80014ec <AsciUartInitSeq3+0x430>)
 800149e:	f002 f843 	bl	8003528 <printf>
 80014a2:	4813      	ldr	r0, [pc, #76]	; (80014f0 <AsciUartInitSeq3+0x434>)
 80014a4:	f002 f840 	bl	8003528 <printf>
 80014a8:	4812      	ldr	r0, [pc, #72]	; (80014f4 <AsciUartInitSeq3+0x438>)
 80014aa:	f002 f83d 	bl	8003528 <printf>
 80014ae:	4812      	ldr	r0, [pc, #72]	; (80014f8 <AsciUartInitSeq3+0x43c>)
 80014b0:	f002 f83a 	bl	8003528 <printf>
 80014b4:	4811      	ldr	r0, [pc, #68]	; (80014fc <AsciUartInitSeq3+0x440>)
 80014b6:	f002 f88f 	bl	80035d8 <puts>
    i++;
 80014ba:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80014be:	b29b      	uxth	r3, r3
 80014c0:	3301      	adds	r3, #1
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    DelayMs(10);
 80014c8:	200a      	movs	r0, #10
 80014ca:	f000 fad6 	bl	8001a7a <DelayMs>
}while(rxBuff[0]!=0x21 && i < 1000);
 80014ce:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80014d2:	2b21      	cmp	r3, #33	; 0x21
 80014d4:	d004      	beq.n	80014e0 <AsciUartInitSeq3+0x424>
 80014d6:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80014da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014de:	dbac      	blt.n	800143a <AsciUartInitSeq3+0x37e>



  return 0;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3778      	adds	r7, #120	; 0x78
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	080094e8 	.word	0x080094e8
 80014f0:	080094f0 	.word	0x080094f0
 80014f4:	20000a78 	.word	0x20000a78
 80014f8:	08009474 	.word	0x08009474
 80014fc:	080094a0 	.word	0x080094a0

08001500 <AsciWrite>:
    return 0;
}


uint8_t AsciWrite(uint8_t *writeBuffer, uint8_t size)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	70fb      	strb	r3, [r7, #3]
  uint8_t status = MAX_ASCI_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001516:	480d      	ldr	r0, [pc, #52]	; (800154c <AsciWrite+0x4c>)
 8001518:	f000 fdd4 	bl	80020c4 <HAL_GPIO_WritePin>

  if(HAL_SPI_Transmit(&hspi2, writeBuffer, size, 100)!= HAL_OK)
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	b29a      	uxth	r2, r3
 8001520:	2364      	movs	r3, #100	; 0x64
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	480a      	ldr	r0, [pc, #40]	; (8001550 <AsciWrite+0x50>)
 8001526:	f001 fa83 	bl	8002a30 <HAL_SPI_Transmit>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <AsciWrite+0x34>
  {
    status = MAX_ASCI_IO_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
  }

  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800153a:	4804      	ldr	r0, [pc, #16]	; (800154c <AsciWrite+0x4c>)
 800153c:	f000 fdc2 	bl	80020c4 <HAL_GPIO_WritePin>

  return status;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40010c00 	.word	0x40010c00
 8001550:	20000a20 	.word	0x20000a20

08001554 <AsciReadReg>:
  return AsciReadReg(regAddr,  byte, 1 );

}

uint8_t AsciReadReg(uint8_t regAddr,  uint8_t *rxBuffer, uint8_t size)
{
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af02      	add	r7, sp, #8
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	71fb      	strb	r3, [r7, #7]
 8001560:	4613      	mov	r3, r2
 8001562:	71bb      	strb	r3, [r7, #6]
 8001564:	466b      	mov	r3, sp
 8001566:	461d      	mov	r5, r3
  uint8_t status = MAX_ASCI_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	76fb      	strb	r3, [r7, #27]
  uint8_t txBuffer[size + 1];
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	1c5c      	adds	r4, r3, #1
 8001570:	1e63      	subs	r3, r4, #1
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	4623      	mov	r3, r4
 8001576:	4618      	mov	r0, r3
 8001578:	f04f 0100 	mov.w	r1, #0
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	00cb      	lsls	r3, r1, #3
 8001586:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800158a:	00c2      	lsls	r2, r0, #3
 800158c:	4623      	mov	r3, r4
 800158e:	4618      	mov	r0, r3
 8001590:	f04f 0100 	mov.w	r1, #0
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	00cb      	lsls	r3, r1, #3
 800159e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015a2:	00c2      	lsls	r2, r0, #3
 80015a4:	4623      	mov	r3, r4
 80015a6:	3307      	adds	r3, #7
 80015a8:	08db      	lsrs	r3, r3, #3
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	ebad 0d03 	sub.w	sp, sp, r3
 80015b0:	ab02      	add	r3, sp, #8
 80015b2:	3300      	adds	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  uint8_t rxTemp[size + 1];
 80015b6:	79bb      	ldrb	r3, [r7, #6]
 80015b8:	1c5c      	adds	r4, r3, #1
 80015ba:	1e63      	subs	r3, r4, #1
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4623      	mov	r3, r4
 80015c0:	4618      	mov	r0, r3
 80015c2:	f04f 0100 	mov.w	r1, #0
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	00cb      	lsls	r3, r1, #3
 80015d0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015d4:	00c2      	lsls	r2, r0, #3
 80015d6:	4623      	mov	r3, r4
 80015d8:	4618      	mov	r0, r3
 80015da:	f04f 0100 	mov.w	r1, #0
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	00cb      	lsls	r3, r1, #3
 80015e8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015ec:	00c2      	lsls	r2, r0, #3
 80015ee:	4623      	mov	r3, r4
 80015f0:	3307      	adds	r3, #7
 80015f2:	08db      	lsrs	r3, r3, #3
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	ebad 0d03 	sub.w	sp, sp, r3
 80015fa:	ab02      	add	r3, sp, #8
 80015fc:	3300      	adds	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001606:	4818      	ldr	r0, [pc, #96]	; (8001668 <AsciReadReg+0x114>)
 8001608:	f000 fd5c 	bl	80020c4 <HAL_GPIO_WritePin>

  memset(txBuffer,0xAA, size + 1);
 800160c:	6978      	ldr	r0, [r7, #20]
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	3301      	adds	r3, #1
 8001612:	461a      	mov	r2, r3
 8001614:	21aa      	movs	r1, #170	; 0xaa
 8001616:	f001 ff7f 	bl	8003518 <memset>
  txBuffer[0] = regAddr;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	79fa      	ldrb	r2, [r7, #7]
 800161e:	701a      	strb	r2, [r3, #0]
  if(HAL_SPI_TransmitReceive(&hspi2, txBuffer, rxTemp, size + 1 , 100)!= HAL_OK)
 8001620:	6979      	ldr	r1, [r7, #20]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	79bb      	ldrb	r3, [r7, #6]
 8001626:	b29b      	uxth	r3, r3
 8001628:	3301      	adds	r3, #1
 800162a:	b29b      	uxth	r3, r3
 800162c:	2064      	movs	r0, #100	; 0x64
 800162e:	9000      	str	r0, [sp, #0]
 8001630:	480e      	ldr	r0, [pc, #56]	; (800166c <AsciReadReg+0x118>)
 8001632:	f001 fb39 	bl	8002ca8 <HAL_SPI_TransmitReceive>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <AsciReadReg+0xec>
  {
    status = MAX_ASCI_IO_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	76fb      	strb	r3, [r7, #27]
  }

  memcpy(rxBuffer, rxTemp + 1, size);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3301      	adds	r3, #1
 8001644:	79ba      	ldrb	r2, [r7, #6]
 8001646:	4619      	mov	r1, r3
 8001648:	6838      	ldr	r0, [r7, #0]
 800164a:	f001 ff57 	bl	80034fc <memcpy>

  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_SET);
 800164e:	2201      	movs	r2, #1
 8001650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <AsciReadReg+0x114>)
 8001656:	f000 fd35 	bl	80020c4 <HAL_GPIO_WritePin>

  return status;
 800165a:	7efb      	ldrb	r3, [r7, #27]
 800165c:	46ad      	mov	sp, r5
}
 800165e:	4618      	mov	r0, r3
 8001660:	3720      	adds	r7, #32
 8001662:	46bd      	mov	sp, r7
 8001664:	bdb0      	pop	{r4, r5, r7, pc}
 8001666:	bf00      	nop
 8001668:	40010c00 	.word	0x40010c00
 800166c:	20000a20 	.word	0x20000a20

08001670 <LiveLedOn>:



/* LEDs ---------------------------------------------------------------------*/
void LiveLedOn(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LIVE_LED_GPIO_Port, LIVE_LED_Pin, GPIO_PIN_SET);
 8001674:	2201      	movs	r2, #1
 8001676:	2140      	movs	r1, #64	; 0x40
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <LiveLedOn+0x14>)
 800167a:	f000 fd23 	bl	80020c4 <HAL_GPIO_WritePin>
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40010800 	.word	0x40010800

08001688 <LiveLedOff>:

void LiveLedOff(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LIVE_LED_GPIO_Port, LIVE_LED_Pin, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	2140      	movs	r1, #64	; 0x40
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <LiveLedOff+0x14>)
 8001692:	f000 fd17 	bl	80020c4 <HAL_GPIO_WritePin>
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40010800 	.word	0x40010800

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_MspInit+0x5c>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	4a14      	ldr	r2, [pc, #80]	; (8001708 <HAL_MspInit+0x5c>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6193      	str	r3, [r2, #24]
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_MspInit+0x5c>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <HAL_MspInit+0x5c>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <HAL_MspInit+0x5c>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d4:	61d3      	str	r3, [r2, #28]
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <HAL_MspInit+0x5c>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_MspInit+0x60>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_MspInit+0x60>)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	40021000 	.word	0x40021000
 800170c:	40010000 	.word	0x40010000

08001710 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a1c      	ldr	r2, [pc, #112]	; (800179c <HAL_SPI_MspInit+0x8c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d131      	bne.n	8001794 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_SPI_MspInit+0x90>)
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	4a1a      	ldr	r2, [pc, #104]	; (80017a0 <HAL_SPI_MspInit+0x90>)
 8001736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173a:	61d3      	str	r3, [r2, #28]
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <HAL_SPI_MspInit+0x90>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_SPI_MspInit+0x90>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <HAL_SPI_MspInit+0x90>)
 800174e:	f043 0308 	orr.w	r3, r3, #8
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_SPI_MspInit+0x90>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001760:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001764:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176e:	f107 0310 	add.w	r3, r7, #16
 8001772:	4619      	mov	r1, r3
 8001774:	480b      	ldr	r0, [pc, #44]	; (80017a4 <HAL_SPI_MspInit+0x94>)
 8001776:	f000 fb21 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800177a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800177e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001784:	2301      	movs	r3, #1
 8001786:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <HAL_SPI_MspInit+0x94>)
 8001790:	f000 fb14 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001794:	bf00      	nop
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40003800 	.word	0x40003800
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010c00 	.word	0x40010c00

080017a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a1c      	ldr	r2, [pc, #112]	; (8001834 <HAL_UART_MspInit+0x8c>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d131      	bne.n	800182c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_UART_MspInit+0x90>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a1a      	ldr	r2, [pc, #104]	; (8001838 <HAL_UART_MspInit+0x90>)
 80017ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_UART_MspInit+0x90>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_UART_MspInit+0x90>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <HAL_UART_MspInit+0x90>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_UART_MspInit+0x90>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	4619      	mov	r1, r3
 800180c:	480b      	ldr	r0, [pc, #44]	; (800183c <HAL_UART_MspInit+0x94>)
 800180e:	f000 fad5 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001816:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	4619      	mov	r1, r3
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <HAL_UART_MspInit+0x94>)
 8001828:	f000 fac8 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800182c:	bf00      	nop
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40013800 	.word	0x40013800
 8001838:	40021000 	.word	0x40021000
 800183c:	40010800 	.word	0x40010800

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <HardFault_Handler+0x4>

08001852 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <MemManage_Handler+0x4>

08001858 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <BusFault_Handler+0x4>

0800185e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <UsageFault_Handler+0x4>

08001864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188c:	f000 f996 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
	return 1;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <_kill>:

int _kill(int pid, int sig)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018ac:	f001 fdfc 	bl	80034a8 <__errno>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2216      	movs	r2, #22
 80018b4:	601a      	str	r2, [r3, #0]
	return -1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <_exit>:

void _exit (int status)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018ca:	f04f 31ff 	mov.w	r1, #4294967295
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffe7 	bl	80018a2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018d4:	e7fe      	b.n	80018d4 <_exit+0x12>

080018d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e00a      	b.n	80018fe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018e8:	f3af 8000 	nop.w
 80018ec:	4601      	mov	r1, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	60ba      	str	r2, [r7, #8]
 80018f4:	b2ca      	uxtb	r2, r1
 80018f6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	dbf0      	blt.n	80018e8 <_read+0x12>
	}

return len;
 8001906:	687b      	ldr	r3, [r7, #4]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	return -1;
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001936:	605a      	str	r2, [r3, #4]
	return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <_isatty>:

int _isatty(int file)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	return 1;
 800194c:	2301      	movs	r3, #1
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
	return 0;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <_sbrk+0x50>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <_sbrk+0x16>
		heap_end = &end;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <_sbrk+0x50>)
 8001982:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <_sbrk+0x54>)
 8001984:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <_sbrk+0x50>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <_sbrk+0x50>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	466a      	mov	r2, sp
 8001996:	4293      	cmp	r3, r2
 8001998:	d907      	bls.n	80019aa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800199a:	f001 fd85 	bl	80034a8 <__errno>
 800199e:	4603      	mov	r3, r0
 80019a0:	220c      	movs	r2, #12
 80019a2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
 80019a8:	e006      	b.n	80019b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <_sbrk+0x50>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	4a03      	ldr	r2, [pc, #12]	; (80019c0 <_sbrk+0x50>)
 80019b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200009d4 	.word	0x200009d4
 80019c4:	20000c60 	.word	0x20000c60

080019c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <SystemInit+0x5c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <SystemInit+0x5c>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <SystemInit+0x5c>)
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4911      	ldr	r1, [pc, #68]	; (8001a24 <SystemInit+0x5c>)
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <SystemInit+0x60>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <SystemInit+0x5c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <SystemInit+0x5c>)
 80019ea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80019ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <SystemInit+0x5c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <SystemInit+0x5c>)
 80019fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <SystemInit+0x5c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <SystemInit+0x5c>)
 8001a06:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001a0a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <SystemInit+0x5c>)
 8001a0e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001a12:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <SystemInit+0x64>)
 8001a16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a1a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	40021000 	.word	0x40021000
 8001a28:	f8ff0000 	.word	0xf8ff0000
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a32:	e003      	b.n	8001a3c <LoopCopyDataInit>

08001a34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a3a:	3104      	adds	r1, #4

08001a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a3c:	480a      	ldr	r0, [pc, #40]	; (8001a68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a44:	d3f6      	bcc.n	8001a34 <CopyDataInit>
  ldr r2, =_sbss
 8001a46:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a48:	e002      	b.n	8001a50 <LoopFillZerobss>

08001a4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a4c:	f842 3b04 	str.w	r3, [r2], #4

08001a50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a54:	d3f9      	bcc.n	8001a4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a56:	f7ff ffb7 	bl	80019c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a5a:	f001 fd2b 	bl	80034b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a5e:	f7ff f98f 	bl	8000d80 <main>
  bx lr
 8001a62:	4770      	bx	lr
  ldr r3, =_sidata
 8001a64:	08009a68 	.word	0x08009a68
  ldr r0, =_sdata
 8001a68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a6c:	200009b8 	.word	0x200009b8
  ldr r2, =_sbss
 8001a70:	200009b8 	.word	0x200009b8
  ldr r3, = _ebss
 8001a74:	20000c60 	.word	0x20000c60

08001a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC1_2_IRQHandler>

08001a7a <DelayMs>:
/* Delay ---------------------------------------------------------------------*/
/**
  * @brief  DelayMs
  */
void DelayMs(volatile int32_t n)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b084      	sub	sp, #16
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  unsigned long timetick;
  timetick = HAL_GetTick();
 8001a82:	f000 f8ad 	bl	8001be0 <HAL_GetTick>
 8001a86:	60f8      	str	r0, [r7, #12]
  while ((HAL_GetTick() - timetick) < n);
 8001a88:	bf00      	nop
 8001a8a:	f000 f8a9 	bl	8001be0 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d3f7      	bcc.n	8001a8a <DelayMs+0x10>
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <LiveLedInit>:
/* Includes ------------------------------------------------------------------*/
#include "LiveLed.h"

/* Private define ------------------------------------------------------------*/
uint8_t LiveLedInit(LiveLED_HnadleTypeDef *hnd)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if(!hnd) 
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <LiveLedInit+0x12>
      return LIVELED_FAIL;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e009      	b.n	8001aca <LiveLedInit+0x26>
  hnd->State = 1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	741a      	strb	r2, [r3, #16]
  hnd->Timestamp = HAL_GetTick();
 8001abc:	f000 f890 	bl	8001be0 <HAL_GetTick>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	60da      	str	r2, [r3, #12]
  return LIVELED_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <LiveLedTask>:

uint8_t LiveLedTask(LiveLED_HnadleTypeDef *hnd)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  if(!hnd) 
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <LiveLedTask+0x12>
    return LIVELED_FAIL;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e021      	b.n	8001b28 <LiveLedTask+0x56>

  if(HAL_GetTick() - hnd->Timestamp > hnd->HalfPeriodTimeMs)
 8001ae4:	f000 f87c 	bl	8001be0 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d916      	bls.n	8001b26 <LiveLedTask+0x54>
  {
    hnd->Timestamp = HAL_GetTick();
 8001af8:	f000 f872 	bl	8001be0 <HAL_GetTick>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	60da      	str	r2, [r3, #12]
    if(hnd->State)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7c1b      	ldrb	r3, [r3, #16]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <LiveLedTask+0x48>
    {
      hnd->State = 0;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	741a      	strb	r2, [r3, #16]
      hnd->LedOnFnPtr();
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4798      	blx	r3
 8001b18:	e005      	b.n	8001b26 <LiveLedTask+0x54>
    }
    else
    {
      hnd->State = 1;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	741a      	strb	r2, [r3, #16]
      hnd->LedOffFnPtr();
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4798      	blx	r3
    }
  }
  return LIVELED_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_Init+0x28>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_Init+0x28>)
 8001b3a:	f043 0310 	orr.w	r3, r3, #16
 8001b3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 f907 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f000 f808 	bl	8001b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7ff fdae 	bl	80016ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40022000 	.word	0x40022000

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x54>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x58>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f911 	bl	8001da2 <HAL_SYSTICK_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00e      	b.n	8001ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f000 f8e7 	bl	8001d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_InitTick+0x5c>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_IncTick+0x1c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a03      	ldr	r2, [pc, #12]	; (8001bdc <HAL_IncTick+0x20>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	20000c4c 	.word	0x20000c4c

08001be0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b02      	ldr	r3, [pc, #8]	; (8001bf0 <HAL_GetTick+0x10>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	20000c4c 	.word	0x20000c4c

08001bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c10:	4013      	ands	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	60d3      	str	r3, [r2, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <__NVIC_GetPriorityGrouping+0x18>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	f003 0307 	and.w	r3, r3, #7
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	; (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	; (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	bf28      	it	cs
 8001cca:	2304      	movcs	r3, #4
 8001ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d902      	bls.n	8001cdc <NVIC_EncodePriority+0x30>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	e000      	b.n	8001cde <NVIC_EncodePriority+0x32>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	4313      	orrs	r3, r2
         );
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	; 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <SysTick_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2e:	210f      	movs	r1, #15
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f7ff ff90 	bl	8001c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <SysTick_Config+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <SysTick_Config+0x40>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff49 	bl	8001bf4 <__NVIC_SetPriorityGrouping>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff5e 	bl	8001c3c <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff90 	bl	8001cac <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5f 	bl	8001c58 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffb0 	bl	8001d10 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b08b      	sub	sp, #44	; 0x2c
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dce:	e169      	b.n	80020a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	f040 8158 	bne.w	800209e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4a9a      	ldr	r2, [pc, #616]	; (800205c <HAL_GPIO_Init+0x2a0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d05e      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001df8:	4a98      	ldr	r2, [pc, #608]	; (800205c <HAL_GPIO_Init+0x2a0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d875      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001dfe:	4a98      	ldr	r2, [pc, #608]	; (8002060 <HAL_GPIO_Init+0x2a4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d058      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e04:	4a96      	ldr	r2, [pc, #600]	; (8002060 <HAL_GPIO_Init+0x2a4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d86f      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e0a:	4a96      	ldr	r2, [pc, #600]	; (8002064 <HAL_GPIO_Init+0x2a8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d052      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e10:	4a94      	ldr	r2, [pc, #592]	; (8002064 <HAL_GPIO_Init+0x2a8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d869      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e16:	4a94      	ldr	r2, [pc, #592]	; (8002068 <HAL_GPIO_Init+0x2ac>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d04c      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e1c:	4a92      	ldr	r2, [pc, #584]	; (8002068 <HAL_GPIO_Init+0x2ac>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d863      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e22:	4a92      	ldr	r2, [pc, #584]	; (800206c <HAL_GPIO_Init+0x2b0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d046      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e28:	4a90      	ldr	r2, [pc, #576]	; (800206c <HAL_GPIO_Init+0x2b0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d85d      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e2e:	2b12      	cmp	r3, #18
 8001e30:	d82a      	bhi.n	8001e88 <HAL_GPIO_Init+0xcc>
 8001e32:	2b12      	cmp	r3, #18
 8001e34:	d859      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e36:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <HAL_GPIO_Init+0x80>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001eb7 	.word	0x08001eb7
 8001e40:	08001e91 	.word	0x08001e91
 8001e44:	08001ea3 	.word	0x08001ea3
 8001e48:	08001ee5 	.word	0x08001ee5
 8001e4c:	08001eeb 	.word	0x08001eeb
 8001e50:	08001eeb 	.word	0x08001eeb
 8001e54:	08001eeb 	.word	0x08001eeb
 8001e58:	08001eeb 	.word	0x08001eeb
 8001e5c:	08001eeb 	.word	0x08001eeb
 8001e60:	08001eeb 	.word	0x08001eeb
 8001e64:	08001eeb 	.word	0x08001eeb
 8001e68:	08001eeb 	.word	0x08001eeb
 8001e6c:	08001eeb 	.word	0x08001eeb
 8001e70:	08001eeb 	.word	0x08001eeb
 8001e74:	08001eeb 	.word	0x08001eeb
 8001e78:	08001eeb 	.word	0x08001eeb
 8001e7c:	08001eeb 	.word	0x08001eeb
 8001e80:	08001e99 	.word	0x08001e99
 8001e84:	08001ead 	.word	0x08001ead
 8001e88:	4a79      	ldr	r2, [pc, #484]	; (8002070 <HAL_GPIO_Init+0x2b4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d013      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e8e:	e02c      	b.n	8001eea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	623b      	str	r3, [r7, #32]
          break;
 8001e96:	e029      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	623b      	str	r3, [r7, #32]
          break;
 8001ea0:	e024      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	623b      	str	r3, [r7, #32]
          break;
 8001eaa:	e01f      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	330c      	adds	r3, #12
 8001eb2:	623b      	str	r3, [r7, #32]
          break;
 8001eb4:	e01a      	b.n	8001eec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	623b      	str	r3, [r7, #32]
          break;
 8001ec2:	e013      	b.n	8001eec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d105      	bne.n	8001ed8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	611a      	str	r2, [r3, #16]
          break;
 8001ed6:	e009      	b.n	8001eec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	615a      	str	r2, [r3, #20]
          break;
 8001ee2:	e003      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e000      	b.n	8001eec <HAL_GPIO_Init+0x130>
          break;
 8001eea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2bff      	cmp	r3, #255	; 0xff
 8001ef0:	d801      	bhi.n	8001ef6 <HAL_GPIO_Init+0x13a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	e001      	b.n	8001efa <HAL_GPIO_Init+0x13e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2bff      	cmp	r3, #255	; 0xff
 8001f00:	d802      	bhi.n	8001f08 <HAL_GPIO_Init+0x14c>
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	e002      	b.n	8001f0e <HAL_GPIO_Init+0x152>
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	3b08      	subs	r3, #8
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	210f      	movs	r1, #15
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	401a      	ands	r2, r3
 8001f20:	6a39      	ldr	r1, [r7, #32]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 80b1 	beq.w	800209e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f3c:	4b4d      	ldr	r3, [pc, #308]	; (8002074 <HAL_GPIO_Init+0x2b8>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a4c      	ldr	r2, [pc, #304]	; (8002074 <HAL_GPIO_Init+0x2b8>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_GPIO_Init+0x2b8>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f54:	4a48      	ldr	r2, [pc, #288]	; (8002078 <HAL_GPIO_Init+0x2bc>)
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a40      	ldr	r2, [pc, #256]	; (800207c <HAL_GPIO_Init+0x2c0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <HAL_GPIO_Init+0x1ec>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a3f      	ldr	r2, [pc, #252]	; (8002080 <HAL_GPIO_Init+0x2c4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00d      	beq.n	8001fa4 <HAL_GPIO_Init+0x1e8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a3e      	ldr	r2, [pc, #248]	; (8002084 <HAL_GPIO_Init+0x2c8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d007      	beq.n	8001fa0 <HAL_GPIO_Init+0x1e4>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a3d      	ldr	r2, [pc, #244]	; (8002088 <HAL_GPIO_Init+0x2cc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_GPIO_Init+0x1e0>
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e006      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	e004      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e002      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fac:	f002 0203 	and.w	r2, r2, #3
 8001fb0:	0092      	lsls	r2, r2, #2
 8001fb2:	4093      	lsls	r3, r2
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fba:	492f      	ldr	r1, [pc, #188]	; (8002078 <HAL_GPIO_Init+0x2bc>)
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fd4:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	492c      	ldr	r1, [pc, #176]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	4928      	ldr	r1, [pc, #160]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ffc:	4b23      	ldr	r3, [pc, #140]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4922      	ldr	r1, [pc, #136]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_GPIO_Init+0x2d0>)
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	43db      	mvns	r3, r3
 8002012:	491e      	ldr	r1, [pc, #120]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002014:	4013      	ands	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4918      	ldr	r1, [pc, #96]	; (800208c <HAL_GPIO_Init+0x2d0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	608b      	str	r3, [r1, #8]
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	43db      	mvns	r3, r3
 800203a:	4914      	ldr	r1, [pc, #80]	; (800208c <HAL_GPIO_Init+0x2d0>)
 800203c:	4013      	ands	r3, r2
 800203e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d021      	beq.n	8002090 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_GPIO_Init+0x2d0>)
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	490e      	ldr	r1, [pc, #56]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	60cb      	str	r3, [r1, #12]
 8002058:	e021      	b.n	800209e <HAL_GPIO_Init+0x2e2>
 800205a:	bf00      	nop
 800205c:	10320000 	.word	0x10320000
 8002060:	10310000 	.word	0x10310000
 8002064:	10220000 	.word	0x10220000
 8002068:	10210000 	.word	0x10210000
 800206c:	10120000 	.word	0x10120000
 8002070:	10110000 	.word	0x10110000
 8002074:	40021000 	.word	0x40021000
 8002078:	40010000 	.word	0x40010000
 800207c:	40010800 	.word	0x40010800
 8002080:	40010c00 	.word	0x40010c00
 8002084:	40011000 	.word	0x40011000
 8002088:	40011400 	.word	0x40011400
 800208c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_GPIO_Init+0x304>)
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	43db      	mvns	r3, r3
 8002098:	4909      	ldr	r1, [pc, #36]	; (80020c0 <HAL_GPIO_Init+0x304>)
 800209a:	4013      	ands	r3, r2
 800209c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	3301      	adds	r3, #1
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	fa22 f303 	lsr.w	r3, r2, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f47f ae8e 	bne.w	8001dd0 <HAL_GPIO_Init+0x14>
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	372c      	adds	r7, #44	; 0x2c
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	40010400 	.word	0x40010400

080020c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
 80020d0:	4613      	mov	r3, r2
 80020d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d4:	787b      	ldrb	r3, [r7, #1]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020e0:	e003      	b.n	80020ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020e2:	887b      	ldrh	r3, [r7, #2]
 80020e4:	041a      	lsls	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	611a      	str	r2, [r3, #16]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e26c      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8087 	beq.w	8002222 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002114:	4b92      	ldr	r3, [pc, #584]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	2b04      	cmp	r3, #4
 800211e:	d00c      	beq.n	800213a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002120:	4b8f      	ldr	r3, [pc, #572]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b08      	cmp	r3, #8
 800212a:	d112      	bne.n	8002152 <HAL_RCC_OscConfig+0x5e>
 800212c:	4b8c      	ldr	r3, [pc, #560]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002138:	d10b      	bne.n	8002152 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213a:	4b89      	ldr	r3, [pc, #548]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d06c      	beq.n	8002220 <HAL_RCC_OscConfig+0x12c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d168      	bne.n	8002220 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e246      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x76>
 800215c:	4b80      	ldr	r3, [pc, #512]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a7f      	ldr	r2, [pc, #508]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	e02e      	b.n	80021c8 <HAL_RCC_OscConfig+0xd4>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x98>
 8002172:	4b7b      	ldr	r3, [pc, #492]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a7a      	ldr	r2, [pc, #488]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b78      	ldr	r3, [pc, #480]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a77      	ldr	r2, [pc, #476]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e01d      	b.n	80021c8 <HAL_RCC_OscConfig+0xd4>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0xbc>
 8002196:	4b72      	ldr	r3, [pc, #456]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a71      	ldr	r2, [pc, #452]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b6f      	ldr	r3, [pc, #444]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a6e      	ldr	r2, [pc, #440]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e00b      	b.n	80021c8 <HAL_RCC_OscConfig+0xd4>
 80021b0:	4b6b      	ldr	r3, [pc, #428]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a6a      	ldr	r2, [pc, #424]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b68      	ldr	r3, [pc, #416]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a67      	ldr	r2, [pc, #412]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7ff fd06 	bl	8001be0 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7ff fd02 	bl	8001be0 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e1fa      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	4b5d      	ldr	r3, [pc, #372]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0xe4>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff fcf2 	bl	8001be0 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7ff fcee 	bl	8001be0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1e6      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	4b53      	ldr	r3, [pc, #332]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x10c>
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d063      	beq.n	80022f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800222e:	4b4c      	ldr	r3, [pc, #304]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00b      	beq.n	8002252 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800223a:	4b49      	ldr	r3, [pc, #292]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b08      	cmp	r3, #8
 8002244:	d11c      	bne.n	8002280 <HAL_RCC_OscConfig+0x18c>
 8002246:	4b46      	ldr	r3, [pc, #280]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d116      	bne.n	8002280 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002252:	4b43      	ldr	r3, [pc, #268]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_RCC_OscConfig+0x176>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d001      	beq.n	800226a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e1ba      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226a:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4939      	ldr	r1, [pc, #228]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227e:	e03a      	b.n	80022f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d020      	beq.n	80022ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002288:	4b36      	ldr	r3, [pc, #216]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7ff fca7 	bl	8001be0 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002296:	f7ff fca3 	bl	8001be0 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e19b      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b4:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4927      	ldr	r1, [pc, #156]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]
 80022c8:	e015      	b.n	80022f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ca:	4b26      	ldr	r3, [pc, #152]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff fc86 	bl	8001be0 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d8:	f7ff fc82 	bl	8001be0 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e17a      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d03a      	beq.n	8002378 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d019      	beq.n	800233e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 800230c:	2201      	movs	r2, #1
 800230e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7ff fc66 	bl	8001be0 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002318:	f7ff fc62 	bl	8001be0 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e15a      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002336:	2001      	movs	r0, #1
 8002338:	f000 fad8 	bl	80028ec <RCC_Delay>
 800233c:	e01c      	b.n	8002378 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002344:	f7ff fc4c 	bl	8001be0 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234a:	e00f      	b.n	800236c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234c:	f7ff fc48 	bl	8001be0 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d908      	bls.n	800236c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e140      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	42420000 	.word	0x42420000
 8002368:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	4b9e      	ldr	r3, [pc, #632]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1e9      	bne.n	800234c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80a6 	beq.w	80024d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238a:	4b97      	ldr	r3, [pc, #604]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10d      	bne.n	80023b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4b94      	ldr	r3, [pc, #592]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a93      	ldr	r2, [pc, #588]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a0:	61d3      	str	r3, [r2, #28]
 80023a2:	4b91      	ldr	r3, [pc, #580]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ae:	2301      	movs	r3, #1
 80023b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b2:	4b8e      	ldr	r3, [pc, #568]	; (80025ec <HAL_RCC_OscConfig+0x4f8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d118      	bne.n	80023f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023be:	4b8b      	ldr	r3, [pc, #556]	; (80025ec <HAL_RCC_OscConfig+0x4f8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a8a      	ldr	r2, [pc, #552]	; (80025ec <HAL_RCC_OscConfig+0x4f8>)
 80023c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ca:	f7ff fc09 	bl	8001be0 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d2:	f7ff fc05 	bl	8001be0 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b64      	cmp	r3, #100	; 0x64
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e0fd      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	4b81      	ldr	r3, [pc, #516]	; (80025ec <HAL_RCC_OscConfig+0x4f8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x312>
 80023f8:	4b7b      	ldr	r3, [pc, #492]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a7a      	ldr	r2, [pc, #488]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6213      	str	r3, [r2, #32]
 8002404:	e02d      	b.n	8002462 <HAL_RCC_OscConfig+0x36e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0x334>
 800240e:	4b76      	ldr	r3, [pc, #472]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a75      	ldr	r2, [pc, #468]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6213      	str	r3, [r2, #32]
 800241a:	4b73      	ldr	r3, [pc, #460]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a72      	ldr	r2, [pc, #456]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	6213      	str	r3, [r2, #32]
 8002426:	e01c      	b.n	8002462 <HAL_RCC_OscConfig+0x36e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b05      	cmp	r3, #5
 800242e:	d10c      	bne.n	800244a <HAL_RCC_OscConfig+0x356>
 8002430:	4b6d      	ldr	r3, [pc, #436]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4a6c      	ldr	r2, [pc, #432]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 8002436:	f043 0304 	orr.w	r3, r3, #4
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	4b6a      	ldr	r3, [pc, #424]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4a69      	ldr	r2, [pc, #420]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6213      	str	r3, [r2, #32]
 8002448:	e00b      	b.n	8002462 <HAL_RCC_OscConfig+0x36e>
 800244a:	4b67      	ldr	r3, [pc, #412]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4a66      	ldr	r2, [pc, #408]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	6213      	str	r3, [r2, #32]
 8002456:	4b64      	ldr	r3, [pc, #400]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a63      	ldr	r2, [pc, #396]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	f023 0304 	bic.w	r3, r3, #4
 8002460:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d015      	beq.n	8002496 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246a:	f7ff fbb9 	bl	8001be0 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002470:	e00a      	b.n	8002488 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7ff fbb5 	bl	8001be0 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e0ab      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002488:	4b57      	ldr	r3, [pc, #348]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ee      	beq.n	8002472 <HAL_RCC_OscConfig+0x37e>
 8002494:	e014      	b.n	80024c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002496:	f7ff fba3 	bl	8001be0 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7ff fb9f 	bl	8001be0 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e095      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b4:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1ee      	bne.n	800249e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024c0:	7dfb      	ldrb	r3, [r7, #23]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d105      	bne.n	80024d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c6:	4b48      	ldr	r3, [pc, #288]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4a47      	ldr	r2, [pc, #284]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 80024cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8081 	beq.w	80025de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024dc:	4b42      	ldr	r3, [pc, #264]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d061      	beq.n	80025ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d146      	bne.n	800257e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f0:	4b3f      	ldr	r3, [pc, #252]	; (80025f0 <HAL_RCC_OscConfig+0x4fc>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7ff fb73 	bl	8001be0 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7ff fb6f 	bl	8001be0 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e067      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002510:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002524:	d108      	bne.n	8002538 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002526:	4b30      	ldr	r3, [pc, #192]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	492d      	ldr	r1, [pc, #180]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002538:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a19      	ldr	r1, [r3, #32]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	430b      	orrs	r3, r1
 800254a:	4927      	ldr	r1, [pc, #156]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002550:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <HAL_RCC_OscConfig+0x4fc>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7ff fb43 	bl	8001be0 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255e:	f7ff fb3f 	bl	8001be0 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e037      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x46a>
 800257c:	e02f      	b.n	80025de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257e:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <HAL_RCC_OscConfig+0x4fc>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7ff fb2c 	bl	8001be0 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258c:	f7ff fb28 	bl	8001be0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e020      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x498>
 80025aa:	e018      	b.n	80025de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e013      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d106      	bne.n	80025da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d001      	beq.n	80025de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40007000 	.word	0x40007000
 80025f0:	42420060 	.word	0x42420060

080025f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0d0      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002608:	4b6a      	ldr	r3, [pc, #424]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d910      	bls.n	8002638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b67      	ldr	r3, [pc, #412]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 0207 	bic.w	r2, r3, #7
 800261e:	4965      	ldr	r1, [pc, #404]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b63      	ldr	r3, [pc, #396]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0b8      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d020      	beq.n	8002686 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002650:	4b59      	ldr	r3, [pc, #356]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4a58      	ldr	r2, [pc, #352]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800265a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002668:	4b53      	ldr	r3, [pc, #332]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4a52      	ldr	r2, [pc, #328]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002672:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002674:	4b50      	ldr	r3, [pc, #320]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	494d      	ldr	r1, [pc, #308]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d040      	beq.n	8002714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d107      	bne.n	80026aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	4b47      	ldr	r3, [pc, #284]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d115      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e07f      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b2:	4b41      	ldr	r3, [pc, #260]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e073      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c2:	4b3d      	ldr	r3, [pc, #244]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e06b      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d2:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f023 0203 	bic.w	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4936      	ldr	r1, [pc, #216]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e4:	f7ff fa7c 	bl	8001be0 <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ec:	f7ff fa78 	bl	8001be0 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e053      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 020c 	and.w	r2, r3, #12
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	429a      	cmp	r2, r3
 8002712:	d1eb      	bne.n	80026ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d210      	bcs.n	8002744 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 0207 	bic.w	r2, r3, #7
 800272a:	4922      	ldr	r1, [pc, #136]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e032      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4916      	ldr	r1, [pc, #88]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	490e      	ldr	r1, [pc, #56]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	4313      	orrs	r3, r2
 8002780:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002782:	f000 f821 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8002786:	4602      	mov	r2, r0
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	490a      	ldr	r1, [pc, #40]	; (80027bc <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	5ccb      	ldrb	r3, [r1, r3]
 8002796:	fa22 f303 	lsr.w	r3, r2, r3
 800279a:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x1cc>)
 800279c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <HAL_RCC_ClockConfig+0x1d0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff f9da 	bl	8001b5c <HAL_InitTick>

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40022000 	.word	0x40022000
 80027b8:	40021000 	.word	0x40021000
 80027bc:	0800967c 	.word	0x0800967c
 80027c0:	20000000 	.word	0x20000000
 80027c4:	20000004 	.word	0x20000004

080027c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c8:	b490      	push	{r4, r7}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027ce:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027d0:	1d3c      	adds	r4, r7, #4
 80027d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027d8:	f240 2301 	movw	r3, #513	; 0x201
 80027dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027f2:	4b22      	ldr	r3, [pc, #136]	; (800287c <HAL_RCC_GetSysClockFreq+0xb4>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d002      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x40>
 8002802:	2b08      	cmp	r3, #8
 8002804:	d003      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0x46>
 8002806:	e02d      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_RCC_GetSysClockFreq+0xb8>)
 800280a:	623b      	str	r3, [r7, #32]
      break;
 800280c:	e02d      	b.n	800286a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	0c9b      	lsrs	r3, r3, #18
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800281a:	4413      	add	r3, r2
 800281c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002820:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d013      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <HAL_RCC_GetSysClockFreq+0xb4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	0c5b      	lsrs	r3, r3, #17
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800283a:	4413      	add	r3, r2
 800283c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002840:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002846:	fb02 f203 	mul.w	r2, r2, r3
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	e004      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002858:	fb02 f303 	mul.w	r3, r2, r3
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	623b      	str	r3, [r7, #32]
      break;
 8002862:	e002      	b.n	800286a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002866:	623b      	str	r3, [r7, #32]
      break;
 8002868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800286a:	6a3b      	ldr	r3, [r7, #32]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3728      	adds	r7, #40	; 0x28
 8002870:	46bd      	mov	sp, r7
 8002872:	bc90      	pop	{r4, r7}
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	0800966c 	.word	0x0800966c
 800287c:	40021000 	.word	0x40021000
 8002880:	007a1200 	.word	0x007a1200
 8002884:	003d0900 	.word	0x003d0900

08002888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800288c:	4b02      	ldr	r3, [pc, #8]	; (8002898 <HAL_RCC_GetHCLKFreq+0x10>)
 800288e:	681b      	ldr	r3, [r3, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	20000000 	.word	0x20000000

0800289c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028a0:	f7ff fff2 	bl	8002888 <HAL_RCC_GetHCLKFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	0a1b      	lsrs	r3, r3, #8
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	4903      	ldr	r1, [pc, #12]	; (80028c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	0800968c 	.word	0x0800968c

080028c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028c8:	f7ff ffde 	bl	8002888 <HAL_RCC_GetHCLKFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	0adb      	lsrs	r3, r3, #11
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4903      	ldr	r1, [pc, #12]	; (80028e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000
 80028e8:	0800968c 	.word	0x0800968c

080028ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028f4:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <RCC_Delay+0x34>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <RCC_Delay+0x38>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	0a5b      	lsrs	r3, r3, #9
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002908:	bf00      	nop
  }
  while (Delay --);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1e5a      	subs	r2, r3, #1
 800290e:	60fa      	str	r2, [r7, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f9      	bne.n	8002908 <RCC_Delay+0x1c>
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	20000000 	.word	0x20000000
 8002924:	10624dd3 	.word	0x10624dd3

08002928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e076      	b.n	8002a28 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	2b00      	cmp	r3, #0
 8002940:	d108      	bne.n	8002954 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800294a:	d009      	beq.n	8002960 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
 8002952:	e005      	b.n	8002960 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe fec8 	bl	8001710 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002996:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e4:	ea42 0103 	orr.w	r1, r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	0c1a      	lsrs	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f002 0204 	and.w	r2, r2, #4
 8002a06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69da      	ldr	r2, [r3, #28]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_SPI_Transmit+0x22>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e126      	b.n	8002ca0 <HAL_SPI_Transmit+0x270>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a5a:	f7ff f8c1 	bl	8001be0 <HAL_GetTick>
 8002a5e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d002      	beq.n	8002a76 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
 8002a72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a74:	e10b      	b.n	8002c8e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <HAL_SPI_Transmit+0x52>
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d102      	bne.n	8002a88 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a86:	e102      	b.n	8002c8e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	88fa      	ldrh	r2, [r7, #6]
 8002aa0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	88fa      	ldrh	r2, [r7, #6]
 8002aa6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ace:	d10f      	bne.n	8002af0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ade:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d007      	beq.n	8002b0e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b16:	d14b      	bne.n	8002bb0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_SPI_Transmit+0xf6>
 8002b20:	8afb      	ldrh	r3, [r7, #22]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d13e      	bne.n	8002ba4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	881a      	ldrh	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	1c9a      	adds	r2, r3, #2
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b4a:	e02b      	b.n	8002ba4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d112      	bne.n	8002b80 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	881a      	ldrh	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	1c9a      	adds	r2, r3, #2
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b7e:	e011      	b.n	8002ba4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b80:	f7ff f82e 	bl	8001be0 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d803      	bhi.n	8002b98 <HAL_SPI_Transmit+0x168>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b96:	d102      	bne.n	8002b9e <HAL_SPI_Transmit+0x16e>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d102      	bne.n	8002ba4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ba2:	e074      	b.n	8002c8e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1ce      	bne.n	8002b4c <HAL_SPI_Transmit+0x11c>
 8002bae:	e04c      	b.n	8002c4a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <HAL_SPI_Transmit+0x18e>
 8002bb8:	8afb      	ldrh	r3, [r7, #22]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d140      	bne.n	8002c40 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	330c      	adds	r3, #12
 8002bc8:	7812      	ldrb	r2, [r2, #0]
 8002bca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002be4:	e02c      	b.n	8002c40 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d113      	bne.n	8002c1c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	330c      	adds	r3, #12
 8002bfe:	7812      	ldrb	r2, [r2, #0]
 8002c00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c1a:	e011      	b.n	8002c40 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c1c:	f7fe ffe0 	bl	8001be0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d803      	bhi.n	8002c34 <HAL_SPI_Transmit+0x204>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c32:	d102      	bne.n	8002c3a <HAL_SPI_Transmit+0x20a>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d102      	bne.n	8002c40 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c3e:	e026      	b.n	8002c8e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1cd      	bne.n	8002be6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	6839      	ldr	r1, [r7, #0]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 fa54 	bl	80030fc <SPI_EndRxTxTransaction>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	77fb      	strb	r3, [r7, #31]
 8002c8a:	e000      	b.n	8002c8e <HAL_SPI_Transmit+0x25e>
  }

error:
 8002c8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3720      	adds	r7, #32
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_SPI_TransmitReceive+0x26>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e18a      	b.n	8002fe4 <HAL_SPI_TransmitReceive+0x33c>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cd6:	f7fe ff83 	bl	8001be0 <HAL_GetTick>
 8002cda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002cec:	887b      	ldrh	r3, [r7, #2]
 8002cee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d00f      	beq.n	8002d18 <HAL_SPI_TransmitReceive+0x70>
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cfe:	d107      	bne.n	8002d10 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d103      	bne.n	8002d10 <HAL_SPI_TransmitReceive+0x68>
 8002d08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d003      	beq.n	8002d18 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d10:	2302      	movs	r3, #2
 8002d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d16:	e15b      	b.n	8002fd0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_SPI_TransmitReceive+0x82>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_SPI_TransmitReceive+0x82>
 8002d24:	887b      	ldrh	r3, [r7, #2]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d30:	e14e      	b.n	8002fd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d003      	beq.n	8002d46 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2205      	movs	r2, #5
 8002d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	887a      	ldrh	r2, [r7, #2]
 8002d56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	887a      	ldrh	r2, [r7, #2]
 8002d6e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d86:	2b40      	cmp	r3, #64	; 0x40
 8002d88:	d007      	beq.n	8002d9a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002da2:	d178      	bne.n	8002e96 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_SPI_TransmitReceive+0x10a>
 8002dac:	8b7b      	ldrh	r3, [r7, #26]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d166      	bne.n	8002e80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	881a      	ldrh	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	1c9a      	adds	r2, r3, #2
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dd6:	e053      	b.n	8002e80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d11b      	bne.n	8002e1e <HAL_SPI_TransmitReceive+0x176>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d016      	beq.n	8002e1e <HAL_SPI_TransmitReceive+0x176>
 8002df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d113      	bne.n	8002e1e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	881a      	ldrh	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	1c9a      	adds	r2, r3, #2
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d119      	bne.n	8002e60 <HAL_SPI_TransmitReceive+0x1b8>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d014      	beq.n	8002e60 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	b292      	uxth	r2, r2
 8002e42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	1c9a      	adds	r2, r3, #2
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e60:	f7fe febe 	bl	8001be0 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d807      	bhi.n	8002e80 <HAL_SPI_TransmitReceive+0x1d8>
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e76:	d003      	beq.n	8002e80 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e7e:	e0a7      	b.n	8002fd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1a6      	bne.n	8002dd8 <HAL_SPI_TransmitReceive+0x130>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1a1      	bne.n	8002dd8 <HAL_SPI_TransmitReceive+0x130>
 8002e94:	e07c      	b.n	8002f90 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_SPI_TransmitReceive+0x1fc>
 8002e9e:	8b7b      	ldrh	r3, [r7, #26]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d16b      	bne.n	8002f7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	330c      	adds	r3, #12
 8002eae:	7812      	ldrb	r2, [r2, #0]
 8002eb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eca:	e057      	b.n	8002f7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d11c      	bne.n	8002f14 <HAL_SPI_TransmitReceive+0x26c>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d017      	beq.n	8002f14 <HAL_SPI_TransmitReceive+0x26c>
 8002ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d114      	bne.n	8002f14 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	330c      	adds	r3, #12
 8002ef4:	7812      	ldrb	r2, [r2, #0]
 8002ef6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d119      	bne.n	8002f56 <HAL_SPI_TransmitReceive+0x2ae>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d014      	beq.n	8002f56 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f52:	2301      	movs	r3, #1
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f56:	f7fe fe43 	bl	8001be0 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d803      	bhi.n	8002f6e <HAL_SPI_TransmitReceive+0x2c6>
 8002f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d102      	bne.n	8002f74 <HAL_SPI_TransmitReceive+0x2cc>
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d103      	bne.n	8002f7c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f7a:	e029      	b.n	8002fd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1a2      	bne.n	8002ecc <HAL_SPI_TransmitReceive+0x224>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d19d      	bne.n	8002ecc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 f8b1 	bl	80030fc <SPI_EndRxTxTransaction>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d006      	beq.n	8002fae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002fac:	e010      	b.n	8002fd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10b      	bne.n	8002fce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	e000      	b.n	8002fd0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002fce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fe0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3730      	adds	r7, #48	; 0x30
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ffc:	f7fe fdf0 	bl	8001be0 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	4413      	add	r3, r2
 800300a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800300c:	f7fe fde8 	bl	8001be0 <HAL_GetTick>
 8003010:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003012:	4b39      	ldr	r3, [pc, #228]	; (80030f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	015b      	lsls	r3, r3, #5
 8003018:	0d1b      	lsrs	r3, r3, #20
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	fb02 f303 	mul.w	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003022:	e054      	b.n	80030ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d050      	beq.n	80030ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800302c:	f7fe fdd8 	bl	8001be0 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	429a      	cmp	r2, r3
 800303a:	d902      	bls.n	8003042 <SPI_WaitFlagStateUntilTimeout+0x56>
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d13d      	bne.n	80030be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003050:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800305a:	d111      	bne.n	8003080 <SPI_WaitFlagStateUntilTimeout+0x94>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003064:	d004      	beq.n	8003070 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306e:	d107      	bne.n	8003080 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800307e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003088:	d10f      	bne.n	80030aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e017      	b.n	80030ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4013      	ands	r3, r2
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d19b      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3720      	adds	r7, #32
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000000 	.word	0x20000000

080030fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af02      	add	r7, sp, #8
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2200      	movs	r2, #0
 8003110:	2180      	movs	r1, #128	; 0x80
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f7ff ff6a 	bl	8002fec <SPI_WaitFlagStateUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d007      	beq.n	800312e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003122:	f043 0220 	orr.w	r2, r3, #32
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e000      	b.n	8003130 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e03f      	b.n	80031ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe fb22 	bl	80017a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2224      	movs	r2, #36	; 0x24
 8003168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800317a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f905 	bl	800338c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b08a      	sub	sp, #40	; 0x28
 80031d6:	af02      	add	r7, sp, #8
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d17c      	bne.n	80032ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HAL_UART_Transmit+0x2c>
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e075      	b.n	80032ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_UART_Transmit+0x3e>
 800320c:	2302      	movs	r3, #2
 800320e:	e06e      	b.n	80032ee <HAL_UART_Transmit+0x11c>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2221      	movs	r2, #33	; 0x21
 8003222:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003226:	f7fe fcdb 	bl	8001be0 <HAL_GetTick>
 800322a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	88fa      	ldrh	r2, [r7, #6]
 8003230:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	88fa      	ldrh	r2, [r7, #6]
 8003236:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003240:	d108      	bne.n	8003254 <HAL_UART_Transmit+0x82>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d104      	bne.n	8003254 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	e003      	b.n	800325c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003258:	2300      	movs	r3, #0
 800325a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003264:	e02a      	b.n	80032bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2200      	movs	r2, #0
 800326e:	2180      	movs	r1, #128	; 0x80
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f840 	bl	80032f6 <UART_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e036      	b.n	80032ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10b      	bne.n	800329e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003294:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	3302      	adds	r3, #2
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	e007      	b.n	80032ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	3301      	adds	r3, #1
 80032ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1cf      	bne.n	8003266 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2200      	movs	r2, #0
 80032ce:	2140      	movs	r1, #64	; 0x40
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f810 	bl	80032f6 <UART_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e006      	b.n	80032ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e000      	b.n	80032ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
  }
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b084      	sub	sp, #16
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	603b      	str	r3, [r7, #0]
 8003302:	4613      	mov	r3, r2
 8003304:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003306:	e02c      	b.n	8003362 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330e:	d028      	beq.n	8003362 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <UART_WaitOnFlagUntilTimeout+0x30>
 8003316:	f7fe fc63 	bl	8001be0 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	429a      	cmp	r2, r3
 8003324:	d21d      	bcs.n	8003362 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003334:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695a      	ldr	r2, [r3, #20]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0201 	bic.w	r2, r2, #1
 8003344:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e00f      	b.n	8003382 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4013      	ands	r3, r2
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	429a      	cmp	r2, r3
 8003370:	bf0c      	ite	eq
 8003372:	2301      	moveq	r3, #1
 8003374:	2300      	movne	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	429a      	cmp	r2, r3
 800337e:	d0c3      	beq.n	8003308 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033c6:	f023 030c 	bic.w	r3, r3, #12
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	430b      	orrs	r3, r1
 80033d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a2c      	ldr	r2, [pc, #176]	; (80034a0 <UART_SetConfig+0x114>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d103      	bne.n	80033fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033f4:	f7ff fa66 	bl	80028c4 <HAL_RCC_GetPCLK2Freq>
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	e002      	b.n	8003402 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033fc:	f7ff fa4e 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 8003400:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	009a      	lsls	r2, r3, #2
 800340c:	441a      	add	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	4a22      	ldr	r2, [pc, #136]	; (80034a4 <UART_SetConfig+0x118>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	0119      	lsls	r1, r3, #4
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009a      	lsls	r2, r3, #2
 800342c:	441a      	add	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	fbb2 f2f3 	udiv	r2, r2, r3
 8003438:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <UART_SetConfig+0x118>)
 800343a:	fba3 0302 	umull	r0, r3, r3, r2
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2064      	movs	r0, #100	; 0x64
 8003442:	fb00 f303 	mul.w	r3, r0, r3
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	3332      	adds	r3, #50	; 0x32
 800344c:	4a15      	ldr	r2, [pc, #84]	; (80034a4 <UART_SetConfig+0x118>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003458:	4419      	add	r1, r3
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	009a      	lsls	r2, r3, #2
 8003464:	441a      	add	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <UART_SetConfig+0x118>)
 8003472:	fba3 0302 	umull	r0, r3, r3, r2
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2064      	movs	r0, #100	; 0x64
 800347a:	fb00 f303 	mul.w	r3, r0, r3
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	3332      	adds	r3, #50	; 0x32
 8003484:	4a07      	ldr	r2, [pc, #28]	; (80034a4 <UART_SetConfig+0x118>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	f003 020f 	and.w	r2, r3, #15
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	440a      	add	r2, r1
 8003496:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40013800 	.word	0x40013800
 80034a4:	51eb851f 	.word	0x51eb851f

080034a8 <__errno>:
 80034a8:	4b01      	ldr	r3, [pc, #4]	; (80034b0 <__errno+0x8>)
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	2000000c 	.word	0x2000000c

080034b4 <__libc_init_array>:
 80034b4:	b570      	push	{r4, r5, r6, lr}
 80034b6:	2600      	movs	r6, #0
 80034b8:	4d0c      	ldr	r5, [pc, #48]	; (80034ec <__libc_init_array+0x38>)
 80034ba:	4c0d      	ldr	r4, [pc, #52]	; (80034f0 <__libc_init_array+0x3c>)
 80034bc:	1b64      	subs	r4, r4, r5
 80034be:	10a4      	asrs	r4, r4, #2
 80034c0:	42a6      	cmp	r6, r4
 80034c2:	d109      	bne.n	80034d8 <__libc_init_array+0x24>
 80034c4:	f005 ffc4 	bl	8009450 <_init>
 80034c8:	2600      	movs	r6, #0
 80034ca:	4d0a      	ldr	r5, [pc, #40]	; (80034f4 <__libc_init_array+0x40>)
 80034cc:	4c0a      	ldr	r4, [pc, #40]	; (80034f8 <__libc_init_array+0x44>)
 80034ce:	1b64      	subs	r4, r4, r5
 80034d0:	10a4      	asrs	r4, r4, #2
 80034d2:	42a6      	cmp	r6, r4
 80034d4:	d105      	bne.n	80034e2 <__libc_init_array+0x2e>
 80034d6:	bd70      	pop	{r4, r5, r6, pc}
 80034d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034dc:	4798      	blx	r3
 80034de:	3601      	adds	r6, #1
 80034e0:	e7ee      	b.n	80034c0 <__libc_init_array+0xc>
 80034e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e6:	4798      	blx	r3
 80034e8:	3601      	adds	r6, #1
 80034ea:	e7f2      	b.n	80034d2 <__libc_init_array+0x1e>
 80034ec:	08009a5c 	.word	0x08009a5c
 80034f0:	08009a5c 	.word	0x08009a5c
 80034f4:	08009a5c 	.word	0x08009a5c
 80034f8:	08009a64 	.word	0x08009a64

080034fc <memcpy>:
 80034fc:	440a      	add	r2, r1
 80034fe:	4291      	cmp	r1, r2
 8003500:	f100 33ff 	add.w	r3, r0, #4294967295
 8003504:	d100      	bne.n	8003508 <memcpy+0xc>
 8003506:	4770      	bx	lr
 8003508:	b510      	push	{r4, lr}
 800350a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800350e:	4291      	cmp	r1, r2
 8003510:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003514:	d1f9      	bne.n	800350a <memcpy+0xe>
 8003516:	bd10      	pop	{r4, pc}

08003518 <memset>:
 8003518:	4603      	mov	r3, r0
 800351a:	4402      	add	r2, r0
 800351c:	4293      	cmp	r3, r2
 800351e:	d100      	bne.n	8003522 <memset+0xa>
 8003520:	4770      	bx	lr
 8003522:	f803 1b01 	strb.w	r1, [r3], #1
 8003526:	e7f9      	b.n	800351c <memset+0x4>

08003528 <printf>:
 8003528:	b40f      	push	{r0, r1, r2, r3}
 800352a:	b507      	push	{r0, r1, r2, lr}
 800352c:	4906      	ldr	r1, [pc, #24]	; (8003548 <printf+0x20>)
 800352e:	ab04      	add	r3, sp, #16
 8003530:	6808      	ldr	r0, [r1, #0]
 8003532:	f853 2b04 	ldr.w	r2, [r3], #4
 8003536:	6881      	ldr	r1, [r0, #8]
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	f001 fa4b 	bl	80049d4 <_vfprintf_r>
 800353e:	b003      	add	sp, #12
 8003540:	f85d eb04 	ldr.w	lr, [sp], #4
 8003544:	b004      	add	sp, #16
 8003546:	4770      	bx	lr
 8003548:	2000000c 	.word	0x2000000c

0800354c <_puts_r>:
 800354c:	b530      	push	{r4, r5, lr}
 800354e:	4605      	mov	r5, r0
 8003550:	b089      	sub	sp, #36	; 0x24
 8003552:	4608      	mov	r0, r1
 8003554:	460c      	mov	r4, r1
 8003556:	f7fc fdfb 	bl	8000150 <strlen>
 800355a:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <_puts_r+0x88>)
 800355c:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8003560:	9306      	str	r3, [sp, #24]
 8003562:	2301      	movs	r3, #1
 8003564:	4418      	add	r0, r3
 8003566:	9307      	str	r3, [sp, #28]
 8003568:	ab04      	add	r3, sp, #16
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	2302      	movs	r3, #2
 800356e:	9302      	str	r3, [sp, #8]
 8003570:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003572:	68ac      	ldr	r4, [r5, #8]
 8003574:	9003      	str	r0, [sp, #12]
 8003576:	b913      	cbnz	r3, 800357e <_puts_r+0x32>
 8003578:	4628      	mov	r0, r5
 800357a:	f003 fc39 	bl	8006df0 <__sinit>
 800357e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003580:	07db      	lsls	r3, r3, #31
 8003582:	d405      	bmi.n	8003590 <_puts_r+0x44>
 8003584:	89a3      	ldrh	r3, [r4, #12]
 8003586:	0598      	lsls	r0, r3, #22
 8003588:	d402      	bmi.n	8003590 <_puts_r+0x44>
 800358a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800358c:	f003 fef0 	bl	8007370 <__retarget_lock_acquire_recursive>
 8003590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003594:	0499      	lsls	r1, r3, #18
 8003596:	d406      	bmi.n	80035a6 <_puts_r+0x5a>
 8003598:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800359c:	81a3      	strh	r3, [r4, #12]
 800359e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035a4:	6663      	str	r3, [r4, #100]	; 0x64
 80035a6:	4628      	mov	r0, r5
 80035a8:	aa01      	add	r2, sp, #4
 80035aa:	4621      	mov	r1, r4
 80035ac:	f003 fd70 	bl	8007090 <__sfvwrite_r>
 80035b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035b2:	2800      	cmp	r0, #0
 80035b4:	bf14      	ite	ne
 80035b6:	f04f 35ff 	movne.w	r5, #4294967295
 80035ba:	250a      	moveq	r5, #10
 80035bc:	07da      	lsls	r2, r3, #31
 80035be:	d405      	bmi.n	80035cc <_puts_r+0x80>
 80035c0:	89a3      	ldrh	r3, [r4, #12]
 80035c2:	059b      	lsls	r3, r3, #22
 80035c4:	d402      	bmi.n	80035cc <_puts_r+0x80>
 80035c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035c8:	f003 fed3 	bl	8007372 <__retarget_lock_release_recursive>
 80035cc:	4628      	mov	r0, r5
 80035ce:	b009      	add	sp, #36	; 0x24
 80035d0:	bd30      	pop	{r4, r5, pc}
 80035d2:	bf00      	nop
 80035d4:	08009a46 	.word	0x08009a46

080035d8 <puts>:
 80035d8:	4b02      	ldr	r3, [pc, #8]	; (80035e4 <puts+0xc>)
 80035da:	4601      	mov	r1, r0
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	f7ff bfb5 	b.w	800354c <_puts_r>
 80035e2:	bf00      	nop
 80035e4:	2000000c 	.word	0x2000000c

080035e8 <sprintf>:
 80035e8:	b40e      	push	{r1, r2, r3}
 80035ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035ee:	b500      	push	{lr}
 80035f0:	b09c      	sub	sp, #112	; 0x70
 80035f2:	ab1d      	add	r3, sp, #116	; 0x74
 80035f4:	9002      	str	r0, [sp, #8]
 80035f6:	9006      	str	r0, [sp, #24]
 80035f8:	9107      	str	r1, [sp, #28]
 80035fa:	9104      	str	r1, [sp, #16]
 80035fc:	4808      	ldr	r0, [pc, #32]	; (8003620 <sprintf+0x38>)
 80035fe:	4909      	ldr	r1, [pc, #36]	; (8003624 <sprintf+0x3c>)
 8003600:	f853 2b04 	ldr.w	r2, [r3], #4
 8003604:	9105      	str	r1, [sp, #20]
 8003606:	6800      	ldr	r0, [r0, #0]
 8003608:	a902      	add	r1, sp, #8
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	f000 f80c 	bl	8003628 <_svfprintf_r>
 8003610:	2200      	movs	r2, #0
 8003612:	9b02      	ldr	r3, [sp, #8]
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	b01c      	add	sp, #112	; 0x70
 8003618:	f85d eb04 	ldr.w	lr, [sp], #4
 800361c:	b003      	add	sp, #12
 800361e:	4770      	bx	lr
 8003620:	2000000c 	.word	0x2000000c
 8003624:	ffff0208 	.word	0xffff0208

08003628 <_svfprintf_r>:
 8003628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362c:	b0d3      	sub	sp, #332	; 0x14c
 800362e:	468b      	mov	fp, r1
 8003630:	9207      	str	r2, [sp, #28]
 8003632:	461e      	mov	r6, r3
 8003634:	4681      	mov	r9, r0
 8003636:	f003 fe95 	bl	8007364 <_localeconv_r>
 800363a:	6803      	ldr	r3, [r0, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	9318      	str	r3, [sp, #96]	; 0x60
 8003640:	f7fc fd86 	bl	8000150 <strlen>
 8003644:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8003648:	9012      	str	r0, [sp, #72]	; 0x48
 800364a:	061a      	lsls	r2, r3, #24
 800364c:	d518      	bpl.n	8003680 <_svfprintf_r+0x58>
 800364e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8003652:	b9ab      	cbnz	r3, 8003680 <_svfprintf_r+0x58>
 8003654:	2140      	movs	r1, #64	; 0x40
 8003656:	4648      	mov	r0, r9
 8003658:	f003 fef8 	bl	800744c <_malloc_r>
 800365c:	f8cb 0000 	str.w	r0, [fp]
 8003660:	f8cb 0010 	str.w	r0, [fp, #16]
 8003664:	b948      	cbnz	r0, 800367a <_svfprintf_r+0x52>
 8003666:	230c      	movs	r3, #12
 8003668:	f8c9 3000 	str.w	r3, [r9]
 800366c:	f04f 33ff 	mov.w	r3, #4294967295
 8003670:	9313      	str	r3, [sp, #76]	; 0x4c
 8003672:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003674:	b053      	add	sp, #332	; 0x14c
 8003676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800367a:	2340      	movs	r3, #64	; 0x40
 800367c:	f8cb 3014 	str.w	r3, [fp, #20]
 8003680:	2500      	movs	r5, #0
 8003682:	2200      	movs	r2, #0
 8003684:	2300      	movs	r3, #0
 8003686:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 800368a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800368e:	e9cd 551a 	strd	r5, r5, [sp, #104]	; 0x68
 8003692:	ac29      	add	r4, sp, #164	; 0xa4
 8003694:	9426      	str	r4, [sp, #152]	; 0x98
 8003696:	9508      	str	r5, [sp, #32]
 8003698:	950e      	str	r5, [sp, #56]	; 0x38
 800369a:	9516      	str	r5, [sp, #88]	; 0x58
 800369c:	9519      	str	r5, [sp, #100]	; 0x64
 800369e:	9513      	str	r5, [sp, #76]	; 0x4c
 80036a0:	9b07      	ldr	r3, [sp, #28]
 80036a2:	461d      	mov	r5, r3
 80036a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036a8:	b10a      	cbz	r2, 80036ae <_svfprintf_r+0x86>
 80036aa:	2a25      	cmp	r2, #37	; 0x25
 80036ac:	d1f9      	bne.n	80036a2 <_svfprintf_r+0x7a>
 80036ae:	9b07      	ldr	r3, [sp, #28]
 80036b0:	1aef      	subs	r7, r5, r3
 80036b2:	d00d      	beq.n	80036d0 <_svfprintf_r+0xa8>
 80036b4:	e9c4 3700 	strd	r3, r7, [r4]
 80036b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80036ba:	443b      	add	r3, r7
 80036bc:	9328      	str	r3, [sp, #160]	; 0xa0
 80036be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80036c0:	3301      	adds	r3, #1
 80036c2:	2b07      	cmp	r3, #7
 80036c4:	9327      	str	r3, [sp, #156]	; 0x9c
 80036c6:	dc78      	bgt.n	80037ba <_svfprintf_r+0x192>
 80036c8:	3408      	adds	r4, #8
 80036ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80036cc:	443b      	add	r3, r7
 80036ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80036d0:	782b      	ldrb	r3, [r5, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f001 8142 	beq.w	800495c <_svfprintf_r+0x1334>
 80036d8:	2300      	movs	r3, #0
 80036da:	f04f 38ff 	mov.w	r8, #4294967295
 80036de:	469a      	mov	sl, r3
 80036e0:	270a      	movs	r7, #10
 80036e2:	212b      	movs	r1, #43	; 0x2b
 80036e4:	3501      	adds	r5, #1
 80036e6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80036ea:	9314      	str	r3, [sp, #80]	; 0x50
 80036ec:	462a      	mov	r2, r5
 80036ee:	f812 3b01 	ldrb.w	r3, [r2], #1
 80036f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80036f4:	920f      	str	r2, [sp, #60]	; 0x3c
 80036f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80036f8:	3b20      	subs	r3, #32
 80036fa:	2b5a      	cmp	r3, #90	; 0x5a
 80036fc:	f200 85a0 	bhi.w	8004240 <_svfprintf_r+0xc18>
 8003700:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003704:	059e007e 	.word	0x059e007e
 8003708:	0086059e 	.word	0x0086059e
 800370c:	059e059e 	.word	0x059e059e
 8003710:	0065059e 	.word	0x0065059e
 8003714:	059e059e 	.word	0x059e059e
 8003718:	00930089 	.word	0x00930089
 800371c:	0090059e 	.word	0x0090059e
 8003720:	059e0096 	.word	0x059e0096
 8003724:	00b300b0 	.word	0x00b300b0
 8003728:	00b300b3 	.word	0x00b300b3
 800372c:	00b300b3 	.word	0x00b300b3
 8003730:	00b300b3 	.word	0x00b300b3
 8003734:	00b300b3 	.word	0x00b300b3
 8003738:	059e059e 	.word	0x059e059e
 800373c:	059e059e 	.word	0x059e059e
 8003740:	059e059e 	.word	0x059e059e
 8003744:	011d059e 	.word	0x011d059e
 8003748:	00e0059e 	.word	0x00e0059e
 800374c:	011d00f3 	.word	0x011d00f3
 8003750:	011d011d 	.word	0x011d011d
 8003754:	059e059e 	.word	0x059e059e
 8003758:	059e059e 	.word	0x059e059e
 800375c:	059e00c3 	.word	0x059e00c3
 8003760:	0471059e 	.word	0x0471059e
 8003764:	059e059e 	.word	0x059e059e
 8003768:	04b8059e 	.word	0x04b8059e
 800376c:	04da059e 	.word	0x04da059e
 8003770:	059e059e 	.word	0x059e059e
 8003774:	059e04f9 	.word	0x059e04f9
 8003778:	059e059e 	.word	0x059e059e
 800377c:	059e059e 	.word	0x059e059e
 8003780:	059e059e 	.word	0x059e059e
 8003784:	011d059e 	.word	0x011d059e
 8003788:	00e0059e 	.word	0x00e0059e
 800378c:	011d00f5 	.word	0x011d00f5
 8003790:	011d011d 	.word	0x011d011d
 8003794:	00f500c6 	.word	0x00f500c6
 8003798:	059e00da 	.word	0x059e00da
 800379c:	059e00d3 	.word	0x059e00d3
 80037a0:	0473044e 	.word	0x0473044e
 80037a4:	00da04a7 	.word	0x00da04a7
 80037a8:	04b8059e 	.word	0x04b8059e
 80037ac:	04dc007c 	.word	0x04dc007c
 80037b0:	059e059e 	.word	0x059e059e
 80037b4:	059e0516 	.word	0x059e0516
 80037b8:	007c      	.short	0x007c
 80037ba:	4659      	mov	r1, fp
 80037bc:	4648      	mov	r0, r9
 80037be:	aa26      	add	r2, sp, #152	; 0x98
 80037c0:	f004 fe32 	bl	8008428 <__ssprint_r>
 80037c4:	2800      	cmp	r0, #0
 80037c6:	f040 8128 	bne.w	8003a1a <_svfprintf_r+0x3f2>
 80037ca:	ac29      	add	r4, sp, #164	; 0xa4
 80037cc:	e77d      	b.n	80036ca <_svfprintf_r+0xa2>
 80037ce:	4648      	mov	r0, r9
 80037d0:	f003 fdc8 	bl	8007364 <_localeconv_r>
 80037d4:	6843      	ldr	r3, [r0, #4]
 80037d6:	4618      	mov	r0, r3
 80037d8:	9319      	str	r3, [sp, #100]	; 0x64
 80037da:	f7fc fcb9 	bl	8000150 <strlen>
 80037de:	9016      	str	r0, [sp, #88]	; 0x58
 80037e0:	4648      	mov	r0, r9
 80037e2:	f003 fdbf 	bl	8007364 <_localeconv_r>
 80037e6:	6883      	ldr	r3, [r0, #8]
 80037e8:	212b      	movs	r1, #43	; 0x2b
 80037ea:	930e      	str	r3, [sp, #56]	; 0x38
 80037ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80037ee:	b12b      	cbz	r3, 80037fc <_svfprintf_r+0x1d4>
 80037f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037f2:	b11b      	cbz	r3, 80037fc <_svfprintf_r+0x1d4>
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	b10b      	cbz	r3, 80037fc <_svfprintf_r+0x1d4>
 80037f8:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80037fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80037fe:	e775      	b.n	80036ec <_svfprintf_r+0xc4>
 8003800:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f9      	bne.n	80037fc <_svfprintf_r+0x1d4>
 8003808:	2320      	movs	r3, #32
 800380a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800380e:	e7f5      	b.n	80037fc <_svfprintf_r+0x1d4>
 8003810:	f04a 0a01 	orr.w	sl, sl, #1
 8003814:	e7f2      	b.n	80037fc <_svfprintf_r+0x1d4>
 8003816:	f856 3b04 	ldr.w	r3, [r6], #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	9314      	str	r3, [sp, #80]	; 0x50
 800381e:	daed      	bge.n	80037fc <_svfprintf_r+0x1d4>
 8003820:	425b      	negs	r3, r3
 8003822:	9314      	str	r3, [sp, #80]	; 0x50
 8003824:	f04a 0a04 	orr.w	sl, sl, #4
 8003828:	e7e8      	b.n	80037fc <_svfprintf_r+0x1d4>
 800382a:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 800382e:	e7e5      	b.n	80037fc <_svfprintf_r+0x1d4>
 8003830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003832:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003836:	2b2a      	cmp	r3, #42	; 0x2a
 8003838:	930b      	str	r3, [sp, #44]	; 0x2c
 800383a:	d110      	bne.n	800385e <_svfprintf_r+0x236>
 800383c:	f856 0b04 	ldr.w	r0, [r6], #4
 8003840:	920f      	str	r2, [sp, #60]	; 0x3c
 8003842:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 8003846:	e7d9      	b.n	80037fc <_svfprintf_r+0x1d4>
 8003848:	fb07 3808 	mla	r8, r7, r8, r3
 800384c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003850:	930b      	str	r3, [sp, #44]	; 0x2c
 8003852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003854:	3b30      	subs	r3, #48	; 0x30
 8003856:	2b09      	cmp	r3, #9
 8003858:	d9f6      	bls.n	8003848 <_svfprintf_r+0x220>
 800385a:	920f      	str	r2, [sp, #60]	; 0x3c
 800385c:	e74b      	b.n	80036f6 <_svfprintf_r+0xce>
 800385e:	f04f 0800 	mov.w	r8, #0
 8003862:	e7f6      	b.n	8003852 <_svfprintf_r+0x22a>
 8003864:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8003868:	e7c8      	b.n	80037fc <_svfprintf_r+0x1d4>
 800386a:	2300      	movs	r3, #0
 800386c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800386e:	9314      	str	r3, [sp, #80]	; 0x50
 8003870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003872:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003874:	3b30      	subs	r3, #48	; 0x30
 8003876:	fb07 3300 	mla	r3, r7, r0, r3
 800387a:	9314      	str	r3, [sp, #80]	; 0x50
 800387c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003880:	930b      	str	r3, [sp, #44]	; 0x2c
 8003882:	3b30      	subs	r3, #48	; 0x30
 8003884:	2b09      	cmp	r3, #9
 8003886:	d9f3      	bls.n	8003870 <_svfprintf_r+0x248>
 8003888:	e7e7      	b.n	800385a <_svfprintf_r+0x232>
 800388a:	f04a 0a08 	orr.w	sl, sl, #8
 800388e:	e7b5      	b.n	80037fc <_svfprintf_r+0x1d4>
 8003890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b68      	cmp	r3, #104	; 0x68
 8003896:	bf01      	itttt	eq
 8003898:	9b0f      	ldreq	r3, [sp, #60]	; 0x3c
 800389a:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800389e:	3301      	addeq	r3, #1
 80038a0:	930f      	streq	r3, [sp, #60]	; 0x3c
 80038a2:	bf18      	it	ne
 80038a4:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 80038a8:	e7a8      	b.n	80037fc <_svfprintf_r+0x1d4>
 80038aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b6c      	cmp	r3, #108	; 0x6c
 80038b0:	d105      	bne.n	80038be <_svfprintf_r+0x296>
 80038b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038b4:	3301      	adds	r3, #1
 80038b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80038b8:	f04a 0a20 	orr.w	sl, sl, #32
 80038bc:	e79e      	b.n	80037fc <_svfprintf_r+0x1d4>
 80038be:	f04a 0a10 	orr.w	sl, sl, #16
 80038c2:	e79b      	b.n	80037fc <_svfprintf_r+0x1d4>
 80038c4:	4632      	mov	r2, r6
 80038c6:	2000      	movs	r0, #0
 80038c8:	f852 3b04 	ldr.w	r3, [r2], #4
 80038cc:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 80038d0:	920a      	str	r2, [sp, #40]	; 0x28
 80038d2:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 80038d6:	ab39      	add	r3, sp, #228	; 0xe4
 80038d8:	4607      	mov	r7, r0
 80038da:	f04f 0801 	mov.w	r8, #1
 80038de:	4606      	mov	r6, r0
 80038e0:	4605      	mov	r5, r0
 80038e2:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 80038e6:	9307      	str	r3, [sp, #28]
 80038e8:	e1a9      	b.n	8003c3e <_svfprintf_r+0x616>
 80038ea:	f04a 0a10 	orr.w	sl, sl, #16
 80038ee:	f01a 0f20 	tst.w	sl, #32
 80038f2:	d011      	beq.n	8003918 <_svfprintf_r+0x2f0>
 80038f4:	3607      	adds	r6, #7
 80038f6:	f026 0307 	bic.w	r3, r6, #7
 80038fa:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80038fe:	930a      	str	r3, [sp, #40]	; 0x28
 8003900:	2e00      	cmp	r6, #0
 8003902:	f177 0300 	sbcs.w	r3, r7, #0
 8003906:	da05      	bge.n	8003914 <_svfprintf_r+0x2ec>
 8003908:	232d      	movs	r3, #45	; 0x2d
 800390a:	4276      	negs	r6, r6
 800390c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8003910:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8003914:	2301      	movs	r3, #1
 8003916:	e377      	b.n	8004008 <_svfprintf_r+0x9e0>
 8003918:	1d33      	adds	r3, r6, #4
 800391a:	f01a 0f10 	tst.w	sl, #16
 800391e:	930a      	str	r3, [sp, #40]	; 0x28
 8003920:	d002      	beq.n	8003928 <_svfprintf_r+0x300>
 8003922:	6836      	ldr	r6, [r6, #0]
 8003924:	17f7      	asrs	r7, r6, #31
 8003926:	e7eb      	b.n	8003900 <_svfprintf_r+0x2d8>
 8003928:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800392c:	6836      	ldr	r6, [r6, #0]
 800392e:	d001      	beq.n	8003934 <_svfprintf_r+0x30c>
 8003930:	b236      	sxth	r6, r6
 8003932:	e7f7      	b.n	8003924 <_svfprintf_r+0x2fc>
 8003934:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8003938:	bf18      	it	ne
 800393a:	b276      	sxtbne	r6, r6
 800393c:	e7f2      	b.n	8003924 <_svfprintf_r+0x2fc>
 800393e:	3607      	adds	r6, #7
 8003940:	f026 0307 	bic.w	r3, r6, #7
 8003944:	4619      	mov	r1, r3
 8003946:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800394a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800394e:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 8003952:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003956:	910a      	str	r1, [sp, #40]	; 0x28
 8003958:	f04f 32ff 	mov.w	r2, #4294967295
 800395c:	4630      	mov	r0, r6
 800395e:	4629      	mov	r1, r5
 8003960:	4b32      	ldr	r3, [pc, #200]	; (8003a2c <_svfprintf_r+0x404>)
 8003962:	f7fd f853 	bl	8000a0c <__aeabi_dcmpun>
 8003966:	bb08      	cbnz	r0, 80039ac <_svfprintf_r+0x384>
 8003968:	f04f 32ff 	mov.w	r2, #4294967295
 800396c:	4630      	mov	r0, r6
 800396e:	4629      	mov	r1, r5
 8003970:	4b2e      	ldr	r3, [pc, #184]	; (8003a2c <_svfprintf_r+0x404>)
 8003972:	f7fd f82d 	bl	80009d0 <__aeabi_dcmple>
 8003976:	b9c8      	cbnz	r0, 80039ac <_svfprintf_r+0x384>
 8003978:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800397c:	2200      	movs	r2, #0
 800397e:	2300      	movs	r3, #0
 8003980:	f7fd f81c 	bl	80009bc <__aeabi_dcmplt>
 8003984:	b110      	cbz	r0, 800398c <_svfprintf_r+0x364>
 8003986:	232d      	movs	r3, #45	; 0x2d
 8003988:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800398c:	4a28      	ldr	r2, [pc, #160]	; (8003a30 <_svfprintf_r+0x408>)
 800398e:	4829      	ldr	r0, [pc, #164]	; (8003a34 <_svfprintf_r+0x40c>)
 8003990:	4613      	mov	r3, r2
 8003992:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003994:	2700      	movs	r7, #0
 8003996:	2947      	cmp	r1, #71	; 0x47
 8003998:	bfc8      	it	gt
 800399a:	4603      	movgt	r3, r0
 800399c:	f04f 0803 	mov.w	r8, #3
 80039a0:	9307      	str	r3, [sp, #28]
 80039a2:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 80039a6:	463e      	mov	r6, r7
 80039a8:	f000 bc24 	b.w	80041f4 <_svfprintf_r+0xbcc>
 80039ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	f7fd f82a 	bl	8000a0c <__aeabi_dcmpun>
 80039b8:	4607      	mov	r7, r0
 80039ba:	b148      	cbz	r0, 80039d0 <_svfprintf_r+0x3a8>
 80039bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80039be:	4a1e      	ldr	r2, [pc, #120]	; (8003a38 <_svfprintf_r+0x410>)
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bfb8      	it	lt
 80039c4:	232d      	movlt	r3, #45	; 0x2d
 80039c6:	481d      	ldr	r0, [pc, #116]	; (8003a3c <_svfprintf_r+0x414>)
 80039c8:	bfb8      	it	lt
 80039ca:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 80039ce:	e7df      	b.n	8003990 <_svfprintf_r+0x368>
 80039d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039d2:	f023 0320 	bic.w	r3, r3, #32
 80039d6:	2b41      	cmp	r3, #65	; 0x41
 80039d8:	930c      	str	r3, [sp, #48]	; 0x30
 80039da:	d131      	bne.n	8003a40 <_svfprintf_r+0x418>
 80039dc:	2330      	movs	r3, #48	; 0x30
 80039de:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80039e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039e4:	f04a 0a02 	orr.w	sl, sl, #2
 80039e8:	2b61      	cmp	r3, #97	; 0x61
 80039ea:	bf0c      	ite	eq
 80039ec:	2378      	moveq	r3, #120	; 0x78
 80039ee:	2358      	movne	r3, #88	; 0x58
 80039f0:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 80039f4:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80039f8:	f340 81fa 	ble.w	8003df0 <_svfprintf_r+0x7c8>
 80039fc:	4648      	mov	r0, r9
 80039fe:	f108 0101 	add.w	r1, r8, #1
 8003a02:	f003 fd23 	bl	800744c <_malloc_r>
 8003a06:	9007      	str	r0, [sp, #28]
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	f040 81f4 	bne.w	8003df6 <_svfprintf_r+0x7ce>
 8003a0e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8003a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a16:	f8ab 300c 	strh.w	r3, [fp, #12]
 8003a1a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8003a1e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003a24:	bf18      	it	ne
 8003a26:	f04f 33ff 	movne.w	r3, #4294967295
 8003a2a:	e621      	b.n	8003670 <_svfprintf_r+0x48>
 8003a2c:	7fefffff 	.word	0x7fefffff
 8003a30:	0800979c 	.word	0x0800979c
 8003a34:	080097a0 	.word	0x080097a0
 8003a38:	080097a4 	.word	0x080097a4
 8003a3c:	080097a8 	.word	0x080097a8
 8003a40:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003a44:	f000 81d9 	beq.w	8003dfa <_svfprintf_r+0x7d2>
 8003a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a4a:	2b47      	cmp	r3, #71	; 0x47
 8003a4c:	d105      	bne.n	8003a5a <_svfprintf_r+0x432>
 8003a4e:	f1b8 0f00 	cmp.w	r8, #0
 8003a52:	d102      	bne.n	8003a5a <_svfprintf_r+0x432>
 8003a54:	4647      	mov	r7, r8
 8003a56:	f04f 0801 	mov.w	r8, #1
 8003a5a:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8003a5e:	9315      	str	r3, [sp, #84]	; 0x54
 8003a60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a62:	1e1d      	subs	r5, r3, #0
 8003a64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003a66:	9308      	str	r3, [sp, #32]
 8003a68:	bfb7      	itett	lt
 8003a6a:	462b      	movlt	r3, r5
 8003a6c:	2300      	movge	r3, #0
 8003a6e:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 8003a72:	232d      	movlt	r3, #45	; 0x2d
 8003a74:	931c      	str	r3, [sp, #112]	; 0x70
 8003a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a78:	2b41      	cmp	r3, #65	; 0x41
 8003a7a:	f040 81d7 	bne.w	8003e2c <_svfprintf_r+0x804>
 8003a7e:	aa20      	add	r2, sp, #128	; 0x80
 8003a80:	4629      	mov	r1, r5
 8003a82:	9808      	ldr	r0, [sp, #32]
 8003a84:	f004 fc36 	bl	80082f4 <frexp>
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003a8e:	f7fc fd23 	bl	80004d8 <__aeabi_dmul>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f7fc ff83 	bl	80009a8 <__aeabi_dcmpeq>
 8003aa2:	b108      	cbz	r0, 8003aa8 <_svfprintf_r+0x480>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	9320      	str	r3, [sp, #128]	; 0x80
 8003aa8:	4eb4      	ldr	r6, [pc, #720]	; (8003d7c <_svfprintf_r+0x754>)
 8003aaa:	4bb5      	ldr	r3, [pc, #724]	; (8003d80 <_svfprintf_r+0x758>)
 8003aac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003aae:	9d07      	ldr	r5, [sp, #28]
 8003ab0:	2a61      	cmp	r2, #97	; 0x61
 8003ab2:	bf18      	it	ne
 8003ab4:	461e      	movne	r6, r3
 8003ab6:	9617      	str	r6, [sp, #92]	; 0x5c
 8003ab8:	f108 36ff 	add.w	r6, r8, #4294967295
 8003abc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4bb0      	ldr	r3, [pc, #704]	; (8003d84 <_svfprintf_r+0x75c>)
 8003ac4:	f7fc fd08 	bl	80004d8 <__aeabi_dmul>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003ad0:	f7fc ffb2 	bl	8000a38 <__aeabi_d2iz>
 8003ad4:	901d      	str	r0, [sp, #116]	; 0x74
 8003ad6:	f7fc fc95 	bl	8000404 <__aeabi_i2d>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003ae2:	f7fc fb41 	bl	8000168 <__aeabi_dsub>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003aee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003af0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003af2:	960d      	str	r6, [sp, #52]	; 0x34
 8003af4:	5c9b      	ldrb	r3, [r3, r2]
 8003af6:	f805 3b01 	strb.w	r3, [r5], #1
 8003afa:	1c73      	adds	r3, r6, #1
 8003afc:	d006      	beq.n	8003b0c <_svfprintf_r+0x4e4>
 8003afe:	2200      	movs	r2, #0
 8003b00:	2300      	movs	r3, #0
 8003b02:	3e01      	subs	r6, #1
 8003b04:	f7fc ff50 	bl	80009a8 <__aeabi_dcmpeq>
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	d0d7      	beq.n	8003abc <_svfprintf_r+0x494>
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003b12:	4b9d      	ldr	r3, [pc, #628]	; (8003d88 <_svfprintf_r+0x760>)
 8003b14:	f7fc ff70 	bl	80009f8 <__aeabi_dcmpgt>
 8003b18:	b960      	cbnz	r0, 8003b34 <_svfprintf_r+0x50c>
 8003b1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	4b99      	ldr	r3, [pc, #612]	; (8003d88 <_svfprintf_r+0x760>)
 8003b22:	f7fc ff41 	bl	80009a8 <__aeabi_dcmpeq>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	f000 817b 	beq.w	8003e22 <_svfprintf_r+0x7fa>
 8003b2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b2e:	07d8      	lsls	r0, r3, #31
 8003b30:	f140 8177 	bpl.w	8003e22 <_svfprintf_r+0x7fa>
 8003b34:	2030      	movs	r0, #48	; 0x30
 8003b36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003b38:	9524      	str	r5, [sp, #144]	; 0x90
 8003b3a:	7bd9      	ldrb	r1, [r3, #15]
 8003b3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003b3e:	1e53      	subs	r3, r2, #1
 8003b40:	9324      	str	r3, [sp, #144]	; 0x90
 8003b42:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8003b46:	428b      	cmp	r3, r1
 8003b48:	f000 815a 	beq.w	8003e00 <_svfprintf_r+0x7d8>
 8003b4c:	2b39      	cmp	r3, #57	; 0x39
 8003b4e:	bf0b      	itete	eq
 8003b50:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8003b52:	3301      	addne	r3, #1
 8003b54:	7a9b      	ldrbeq	r3, [r3, #10]
 8003b56:	b2db      	uxtbne	r3, r3
 8003b58:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003b5c:	9b07      	ldr	r3, [sp, #28]
 8003b5e:	1aeb      	subs	r3, r5, r3
 8003b60:	9308      	str	r3, [sp, #32]
 8003b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b64:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003b66:	2b47      	cmp	r3, #71	; 0x47
 8003b68:	f040 81ad 	bne.w	8003ec6 <_svfprintf_r+0x89e>
 8003b6c:	1ce9      	adds	r1, r5, #3
 8003b6e:	db02      	blt.n	8003b76 <_svfprintf_r+0x54e>
 8003b70:	45a8      	cmp	r8, r5
 8003b72:	f280 81cf 	bge.w	8003f14 <_svfprintf_r+0x8ec>
 8003b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b78:	3b02      	subs	r3, #2
 8003b7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b7e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8003b82:	f021 0120 	bic.w	r1, r1, #32
 8003b86:	2941      	cmp	r1, #65	; 0x41
 8003b88:	bf08      	it	eq
 8003b8a:	320f      	addeq	r2, #15
 8003b8c:	f105 33ff 	add.w	r3, r5, #4294967295
 8003b90:	bf06      	itte	eq
 8003b92:	b2d2      	uxtbeq	r2, r2
 8003b94:	2101      	moveq	r1, #1
 8003b96:	2100      	movne	r1, #0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8003b9e:	bfb4      	ite	lt
 8003ba0:	222d      	movlt	r2, #45	; 0x2d
 8003ba2:	222b      	movge	r2, #43	; 0x2b
 8003ba4:	9320      	str	r3, [sp, #128]	; 0x80
 8003ba6:	bfb8      	it	lt
 8003ba8:	f1c5 0301 	rsblt	r3, r5, #1
 8003bac:	2b09      	cmp	r3, #9
 8003bae:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8003bb2:	f340 819e 	ble.w	8003ef2 <_svfprintf_r+0x8ca>
 8003bb6:	260a      	movs	r6, #10
 8003bb8:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8003bbc:	fb93 f5f6 	sdiv	r5, r3, r6
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	fb06 3015 	mls	r0, r6, r5, r3
 8003bc6:	3030      	adds	r0, #48	; 0x30
 8003bc8:	f801 0c01 	strb.w	r0, [r1, #-1]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	2863      	cmp	r0, #99	; 0x63
 8003bd0:	462b      	mov	r3, r5
 8003bd2:	f102 32ff 	add.w	r2, r2, #4294967295
 8003bd6:	dcf1      	bgt.n	8003bbc <_svfprintf_r+0x594>
 8003bd8:	3330      	adds	r3, #48	; 0x30
 8003bda:	1e88      	subs	r0, r1, #2
 8003bdc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003be0:	4603      	mov	r3, r0
 8003be2:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8003be6:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 8003bea:	42ab      	cmp	r3, r5
 8003bec:	f0c0 817c 	bcc.w	8003ee8 <_svfprintf_r+0x8c0>
 8003bf0:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 8003bf4:	1a52      	subs	r2, r2, r1
 8003bf6:	42a8      	cmp	r0, r5
 8003bf8:	bf88      	it	hi
 8003bfa:	2200      	movhi	r2, #0
 8003bfc:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8003c00:	441a      	add	r2, r3
 8003c02:	ab22      	add	r3, sp, #136	; 0x88
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	9a08      	ldr	r2, [sp, #32]
 8003c08:	931a      	str	r3, [sp, #104]	; 0x68
 8003c0a:	2a01      	cmp	r2, #1
 8003c0c:	eb03 0802 	add.w	r8, r3, r2
 8003c10:	dc02      	bgt.n	8003c18 <_svfprintf_r+0x5f0>
 8003c12:	f01a 0f01 	tst.w	sl, #1
 8003c16:	d001      	beq.n	8003c1c <_svfprintf_r+0x5f4>
 8003c18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003c1a:	4498      	add	r8, r3
 8003c1c:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8003c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c24:	9315      	str	r3, [sp, #84]	; 0x54
 8003c26:	2300      	movs	r3, #0
 8003c28:	461d      	mov	r5, r3
 8003c2a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8003c2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003c30:	b113      	cbz	r3, 8003c38 <_svfprintf_r+0x610>
 8003c32:	232d      	movs	r3, #45	; 0x2d
 8003c34:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8003c38:	2600      	movs	r6, #0
 8003c3a:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8003c3e:	4546      	cmp	r6, r8
 8003c40:	4633      	mov	r3, r6
 8003c42:	bfb8      	it	lt
 8003c44:	4643      	movlt	r3, r8
 8003c46:	9315      	str	r3, [sp, #84]	; 0x54
 8003c48:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8003c4c:	b113      	cbz	r3, 8003c54 <_svfprintf_r+0x62c>
 8003c4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003c50:	3301      	adds	r3, #1
 8003c52:	9315      	str	r3, [sp, #84]	; 0x54
 8003c54:	f01a 0302 	ands.w	r3, sl, #2
 8003c58:	931c      	str	r3, [sp, #112]	; 0x70
 8003c5a:	bf1e      	ittt	ne
 8003c5c:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 8003c5e:	3302      	addne	r3, #2
 8003c60:	9315      	strne	r3, [sp, #84]	; 0x54
 8003c62:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8003c66:	931d      	str	r3, [sp, #116]	; 0x74
 8003c68:	d121      	bne.n	8003cae <_svfprintf_r+0x686>
 8003c6a:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	9317      	str	r3, [sp, #92]	; 0x5c
 8003c74:	dd1b      	ble.n	8003cae <_svfprintf_r+0x686>
 8003c76:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8003c7a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	2810      	cmp	r0, #16
 8003c80:	4842      	ldr	r0, [pc, #264]	; (8003d8c <_svfprintf_r+0x764>)
 8003c82:	f104 0108 	add.w	r1, r4, #8
 8003c86:	6020      	str	r0, [r4, #0]
 8003c88:	f300 82e6 	bgt.w	8004258 <_svfprintf_r+0xc30>
 8003c8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003c8e:	2b07      	cmp	r3, #7
 8003c90:	4402      	add	r2, r0
 8003c92:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8003c96:	6060      	str	r0, [r4, #4]
 8003c98:	f340 82f3 	ble.w	8004282 <_svfprintf_r+0xc5a>
 8003c9c:	4659      	mov	r1, fp
 8003c9e:	4648      	mov	r0, r9
 8003ca0:	aa26      	add	r2, sp, #152	; 0x98
 8003ca2:	f004 fbc1 	bl	8008428 <__ssprint_r>
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	f040 8636 	bne.w	8004918 <_svfprintf_r+0x12f0>
 8003cac:	ac29      	add	r4, sp, #164	; 0xa4
 8003cae:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8003cb2:	b173      	cbz	r3, 8003cd2 <_svfprintf_r+0x6aa>
 8003cb4:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	2301      	movs	r3, #1
 8003cbc:	6063      	str	r3, [r4, #4]
 8003cbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	9328      	str	r3, [sp, #160]	; 0xa0
 8003cc4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	2b07      	cmp	r3, #7
 8003cca:	9327      	str	r3, [sp, #156]	; 0x9c
 8003ccc:	f300 82db 	bgt.w	8004286 <_svfprintf_r+0xc5e>
 8003cd0:	3408      	adds	r4, #8
 8003cd2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003cd4:	b16b      	cbz	r3, 8003cf2 <_svfprintf_r+0x6ca>
 8003cd6:	ab1f      	add	r3, sp, #124	; 0x7c
 8003cd8:	6023      	str	r3, [r4, #0]
 8003cda:	2302      	movs	r3, #2
 8003cdc:	6063      	str	r3, [r4, #4]
 8003cde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	9328      	str	r3, [sp, #160]	; 0xa0
 8003ce4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	2b07      	cmp	r3, #7
 8003cea:	9327      	str	r3, [sp, #156]	; 0x9c
 8003cec:	f300 82d5 	bgt.w	800429a <_svfprintf_r+0xc72>
 8003cf0:	3408      	adds	r4, #8
 8003cf2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003cf4:	2b80      	cmp	r3, #128	; 0x80
 8003cf6:	d121      	bne.n	8003d3c <_svfprintf_r+0x714>
 8003cf8:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	9317      	str	r3, [sp, #92]	; 0x5c
 8003d02:	dd1b      	ble.n	8003d3c <_svfprintf_r+0x714>
 8003d04:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8003d08:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	2810      	cmp	r0, #16
 8003d0e:	4820      	ldr	r0, [pc, #128]	; (8003d90 <_svfprintf_r+0x768>)
 8003d10:	f104 0108 	add.w	r1, r4, #8
 8003d14:	6020      	str	r0, [r4, #0]
 8003d16:	f300 82ca 	bgt.w	80042ae <_svfprintf_r+0xc86>
 8003d1a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003d1c:	2b07      	cmp	r3, #7
 8003d1e:	4402      	add	r2, r0
 8003d20:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8003d24:	6060      	str	r0, [r4, #4]
 8003d26:	f340 82d7 	ble.w	80042d8 <_svfprintf_r+0xcb0>
 8003d2a:	4659      	mov	r1, fp
 8003d2c:	4648      	mov	r0, r9
 8003d2e:	aa26      	add	r2, sp, #152	; 0x98
 8003d30:	f004 fb7a 	bl	8008428 <__ssprint_r>
 8003d34:	2800      	cmp	r0, #0
 8003d36:	f040 85ef 	bne.w	8004918 <_svfprintf_r+0x12f0>
 8003d3a:	ac29      	add	r4, sp, #164	; 0xa4
 8003d3c:	eba6 0608 	sub.w	r6, r6, r8
 8003d40:	2e00      	cmp	r6, #0
 8003d42:	dd27      	ble.n	8003d94 <_svfprintf_r+0x76c>
 8003d44:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8003d48:	4811      	ldr	r0, [pc, #68]	; (8003d90 <_svfprintf_r+0x768>)
 8003d4a:	2e10      	cmp	r6, #16
 8003d4c:	f103 0301 	add.w	r3, r3, #1
 8003d50:	f104 0108 	add.w	r1, r4, #8
 8003d54:	6020      	str	r0, [r4, #0]
 8003d56:	f300 82c1 	bgt.w	80042dc <_svfprintf_r+0xcb4>
 8003d5a:	6066      	str	r6, [r4, #4]
 8003d5c:	2b07      	cmp	r3, #7
 8003d5e:	4416      	add	r6, r2
 8003d60:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 8003d64:	f340 82cd 	ble.w	8004302 <_svfprintf_r+0xcda>
 8003d68:	4659      	mov	r1, fp
 8003d6a:	4648      	mov	r0, r9
 8003d6c:	aa26      	add	r2, sp, #152	; 0x98
 8003d6e:	f004 fb5b 	bl	8008428 <__ssprint_r>
 8003d72:	2800      	cmp	r0, #0
 8003d74:	f040 85d0 	bne.w	8004918 <_svfprintf_r+0x12f0>
 8003d78:	ac29      	add	r4, sp, #164	; 0xa4
 8003d7a:	e00b      	b.n	8003d94 <_svfprintf_r+0x76c>
 8003d7c:	080097ac 	.word	0x080097ac
 8003d80:	080097bd 	.word	0x080097bd
 8003d84:	40300000 	.word	0x40300000
 8003d88:	3fe00000 	.word	0x3fe00000
 8003d8c:	080097d0 	.word	0x080097d0
 8003d90:	080097e0 	.word	0x080097e0
 8003d94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003d98:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8003d9a:	f040 82b9 	bne.w	8004310 <_svfprintf_r+0xce8>
 8003d9e:	9b07      	ldr	r3, [sp, #28]
 8003da0:	4446      	add	r6, r8
 8003da2:	e9c4 3800 	strd	r3, r8, [r4]
 8003da6:	9628      	str	r6, [sp, #160]	; 0xa0
 8003da8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003daa:	3301      	adds	r3, #1
 8003dac:	2b07      	cmp	r3, #7
 8003dae:	9327      	str	r3, [sp, #156]	; 0x9c
 8003db0:	f300 82f4 	bgt.w	800439c <_svfprintf_r+0xd74>
 8003db4:	3408      	adds	r4, #8
 8003db6:	f01a 0f04 	tst.w	sl, #4
 8003dba:	f040 858e 	bne.w	80048da <_svfprintf_r+0x12b2>
 8003dbe:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8003dc2:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003dc4:	428a      	cmp	r2, r1
 8003dc6:	bfac      	ite	ge
 8003dc8:	189b      	addge	r3, r3, r2
 8003dca:	185b      	addlt	r3, r3, r1
 8003dcc:	9313      	str	r3, [sp, #76]	; 0x4c
 8003dce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003dd0:	b13b      	cbz	r3, 8003de2 <_svfprintf_r+0x7ba>
 8003dd2:	4659      	mov	r1, fp
 8003dd4:	4648      	mov	r0, r9
 8003dd6:	aa26      	add	r2, sp, #152	; 0x98
 8003dd8:	f004 fb26 	bl	8008428 <__ssprint_r>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	f040 859b 	bne.w	8004918 <_svfprintf_r+0x12f0>
 8003de2:	2300      	movs	r3, #0
 8003de4:	9327      	str	r3, [sp, #156]	; 0x9c
 8003de6:	2f00      	cmp	r7, #0
 8003de8:	f040 85b2 	bne.w	8004950 <_svfprintf_r+0x1328>
 8003dec:	ac29      	add	r4, sp, #164	; 0xa4
 8003dee:	e0e3      	b.n	8003fb8 <_svfprintf_r+0x990>
 8003df0:	ab39      	add	r3, sp, #228	; 0xe4
 8003df2:	9307      	str	r3, [sp, #28]
 8003df4:	e631      	b.n	8003a5a <_svfprintf_r+0x432>
 8003df6:	9f07      	ldr	r7, [sp, #28]
 8003df8:	e62f      	b.n	8003a5a <_svfprintf_r+0x432>
 8003dfa:	f04f 0806 	mov.w	r8, #6
 8003dfe:	e62c      	b.n	8003a5a <_svfprintf_r+0x432>
 8003e00:	f802 0c01 	strb.w	r0, [r2, #-1]
 8003e04:	e69a      	b.n	8003b3c <_svfprintf_r+0x514>
 8003e06:	f803 0b01 	strb.w	r0, [r3], #1
 8003e0a:	1aca      	subs	r2, r1, r3
 8003e0c:	2a00      	cmp	r2, #0
 8003e0e:	dafa      	bge.n	8003e06 <_svfprintf_r+0x7de>
 8003e10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e14:	3201      	adds	r2, #1
 8003e16:	f103 0301 	add.w	r3, r3, #1
 8003e1a:	bfb8      	it	lt
 8003e1c:	2300      	movlt	r3, #0
 8003e1e:	441d      	add	r5, r3
 8003e20:	e69c      	b.n	8003b5c <_svfprintf_r+0x534>
 8003e22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e24:	462b      	mov	r3, r5
 8003e26:	2030      	movs	r0, #48	; 0x30
 8003e28:	18a9      	adds	r1, r5, r2
 8003e2a:	e7ee      	b.n	8003e0a <_svfprintf_r+0x7e2>
 8003e2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e2e:	2b46      	cmp	r3, #70	; 0x46
 8003e30:	d005      	beq.n	8003e3e <_svfprintf_r+0x816>
 8003e32:	2b45      	cmp	r3, #69	; 0x45
 8003e34:	d11b      	bne.n	8003e6e <_svfprintf_r+0x846>
 8003e36:	f108 0601 	add.w	r6, r8, #1
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e001      	b.n	8003e42 <_svfprintf_r+0x81a>
 8003e3e:	4646      	mov	r6, r8
 8003e40:	2303      	movs	r3, #3
 8003e42:	aa24      	add	r2, sp, #144	; 0x90
 8003e44:	9204      	str	r2, [sp, #16]
 8003e46:	aa21      	add	r2, sp, #132	; 0x84
 8003e48:	9203      	str	r2, [sp, #12]
 8003e4a:	aa20      	add	r2, sp, #128	; 0x80
 8003e4c:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	4648      	mov	r0, r9
 8003e54:	462b      	mov	r3, r5
 8003e56:	9a08      	ldr	r2, [sp, #32]
 8003e58:	f002 f912 	bl	8006080 <_dtoa_r>
 8003e5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e5e:	9007      	str	r0, [sp, #28]
 8003e60:	2b47      	cmp	r3, #71	; 0x47
 8003e62:	d106      	bne.n	8003e72 <_svfprintf_r+0x84a>
 8003e64:	f01a 0f01 	tst.w	sl, #1
 8003e68:	d103      	bne.n	8003e72 <_svfprintf_r+0x84a>
 8003e6a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8003e6c:	e676      	b.n	8003b5c <_svfprintf_r+0x534>
 8003e6e:	4646      	mov	r6, r8
 8003e70:	e7e3      	b.n	8003e3a <_svfprintf_r+0x812>
 8003e72:	9b07      	ldr	r3, [sp, #28]
 8003e74:	4433      	add	r3, r6
 8003e76:	930d      	str	r3, [sp, #52]	; 0x34
 8003e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e7a:	2b46      	cmp	r3, #70	; 0x46
 8003e7c:	d111      	bne.n	8003ea2 <_svfprintf_r+0x87a>
 8003e7e:	9b07      	ldr	r3, [sp, #28]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b30      	cmp	r3, #48	; 0x30
 8003e84:	d109      	bne.n	8003e9a <_svfprintf_r+0x872>
 8003e86:	2200      	movs	r2, #0
 8003e88:	2300      	movs	r3, #0
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	9808      	ldr	r0, [sp, #32]
 8003e8e:	f7fc fd8b 	bl	80009a8 <__aeabi_dcmpeq>
 8003e92:	b910      	cbnz	r0, 8003e9a <_svfprintf_r+0x872>
 8003e94:	f1c6 0601 	rsb	r6, r6, #1
 8003e98:	9620      	str	r6, [sp, #128]	; 0x80
 8003e9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003e9e:	441a      	add	r2, r3
 8003ea0:	920d      	str	r2, [sp, #52]	; 0x34
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	4629      	mov	r1, r5
 8003ea8:	9808      	ldr	r0, [sp, #32]
 8003eaa:	f7fc fd7d 	bl	80009a8 <__aeabi_dcmpeq>
 8003eae:	b108      	cbz	r0, 8003eb4 <_svfprintf_r+0x88c>
 8003eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003eb2:	9324      	str	r3, [sp, #144]	; 0x90
 8003eb4:	2230      	movs	r2, #48	; 0x30
 8003eb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003eb8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003eba:	4299      	cmp	r1, r3
 8003ebc:	d9d5      	bls.n	8003e6a <_svfprintf_r+0x842>
 8003ebe:	1c59      	adds	r1, r3, #1
 8003ec0:	9124      	str	r1, [sp, #144]	; 0x90
 8003ec2:	701a      	strb	r2, [r3, #0]
 8003ec4:	e7f7      	b.n	8003eb6 <_svfprintf_r+0x88e>
 8003ec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ec8:	2b46      	cmp	r3, #70	; 0x46
 8003eca:	f47f ae57 	bne.w	8003b7c <_svfprintf_r+0x554>
 8003ece:	f00a 0301 	and.w	r3, sl, #1
 8003ed2:	2d00      	cmp	r5, #0
 8003ed4:	ea43 0308 	orr.w	r3, r3, r8
 8003ed8:	dd18      	ble.n	8003f0c <_svfprintf_r+0x8e4>
 8003eda:	b383      	cbz	r3, 8003f3e <_svfprintf_r+0x916>
 8003edc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ede:	18eb      	adds	r3, r5, r3
 8003ee0:	4498      	add	r8, r3
 8003ee2:	2366      	movs	r3, #102	; 0x66
 8003ee4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ee6:	e030      	b.n	8003f4a <_svfprintf_r+0x922>
 8003ee8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003eec:	f802 6b01 	strb.w	r6, [r2], #1
 8003ef0:	e67b      	b.n	8003bea <_svfprintf_r+0x5c2>
 8003ef2:	b941      	cbnz	r1, 8003f06 <_svfprintf_r+0x8de>
 8003ef4:	2230      	movs	r2, #48	; 0x30
 8003ef6:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8003efa:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8003efe:	3330      	adds	r3, #48	; 0x30
 8003f00:	f802 3b01 	strb.w	r3, [r2], #1
 8003f04:	e67d      	b.n	8003c02 <_svfprintf_r+0x5da>
 8003f06:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8003f0a:	e7f8      	b.n	8003efe <_svfprintf_r+0x8d6>
 8003f0c:	b1cb      	cbz	r3, 8003f42 <_svfprintf_r+0x91a>
 8003f0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f10:	3301      	adds	r3, #1
 8003f12:	e7e5      	b.n	8003ee0 <_svfprintf_r+0x8b8>
 8003f14:	9b08      	ldr	r3, [sp, #32]
 8003f16:	429d      	cmp	r5, r3
 8003f18:	db07      	blt.n	8003f2a <_svfprintf_r+0x902>
 8003f1a:	f01a 0f01 	tst.w	sl, #1
 8003f1e:	d029      	beq.n	8003f74 <_svfprintf_r+0x94c>
 8003f20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f22:	eb05 0803 	add.w	r8, r5, r3
 8003f26:	2367      	movs	r3, #103	; 0x67
 8003f28:	e7dc      	b.n	8003ee4 <_svfprintf_r+0x8bc>
 8003f2a:	9b08      	ldr	r3, [sp, #32]
 8003f2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f2e:	2d00      	cmp	r5, #0
 8003f30:	eb03 0802 	add.w	r8, r3, r2
 8003f34:	dcf7      	bgt.n	8003f26 <_svfprintf_r+0x8fe>
 8003f36:	f1c5 0301 	rsb	r3, r5, #1
 8003f3a:	4498      	add	r8, r3
 8003f3c:	e7f3      	b.n	8003f26 <_svfprintf_r+0x8fe>
 8003f3e:	46a8      	mov	r8, r5
 8003f40:	e7cf      	b.n	8003ee2 <_svfprintf_r+0x8ba>
 8003f42:	2366      	movs	r3, #102	; 0x66
 8003f44:	f04f 0801 	mov.w	r8, #1
 8003f48:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f4a:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8003f4e:	930d      	str	r3, [sp, #52]	; 0x34
 8003f50:	d023      	beq.n	8003f9a <_svfprintf_r+0x972>
 8003f52:	2300      	movs	r3, #0
 8003f54:	2d00      	cmp	r5, #0
 8003f56:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8003f5a:	f77f ae68 	ble.w	8003c2e <_svfprintf_r+0x606>
 8003f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2bff      	cmp	r3, #255	; 0xff
 8003f64:	d108      	bne.n	8003f78 <_svfprintf_r+0x950>
 8003f66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003f6a:	4413      	add	r3, r2
 8003f6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003f6e:	fb02 8803 	mla	r8, r2, r3, r8
 8003f72:	e65c      	b.n	8003c2e <_svfprintf_r+0x606>
 8003f74:	46a8      	mov	r8, r5
 8003f76:	e7d6      	b.n	8003f26 <_svfprintf_r+0x8fe>
 8003f78:	42ab      	cmp	r3, r5
 8003f7a:	daf4      	bge.n	8003f66 <_svfprintf_r+0x93e>
 8003f7c:	1aed      	subs	r5, r5, r3
 8003f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f80:	785b      	ldrb	r3, [r3, #1]
 8003f82:	b133      	cbz	r3, 8003f92 <_svfprintf_r+0x96a>
 8003f84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f86:	3301      	adds	r3, #1
 8003f88:	930d      	str	r3, [sp, #52]	; 0x34
 8003f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	930e      	str	r3, [sp, #56]	; 0x38
 8003f90:	e7e5      	b.n	8003f5e <_svfprintf_r+0x936>
 8003f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f94:	3301      	adds	r3, #1
 8003f96:	930c      	str	r3, [sp, #48]	; 0x30
 8003f98:	e7e1      	b.n	8003f5e <_svfprintf_r+0x936>
 8003f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f9c:	930c      	str	r3, [sp, #48]	; 0x30
 8003f9e:	e646      	b.n	8003c2e <_svfprintf_r+0x606>
 8003fa0:	4632      	mov	r2, r6
 8003fa2:	f852 3b04 	ldr.w	r3, [r2], #4
 8003fa6:	f01a 0f20 	tst.w	sl, #32
 8003faa:	920a      	str	r2, [sp, #40]	; 0x28
 8003fac:	d009      	beq.n	8003fc2 <_svfprintf_r+0x99a>
 8003fae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	17d1      	asrs	r1, r2, #31
 8003fb4:	e9c3 0100 	strd	r0, r1, [r3]
 8003fb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003fba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003fbc:	9307      	str	r3, [sp, #28]
 8003fbe:	f7ff bb6f 	b.w	80036a0 <_svfprintf_r+0x78>
 8003fc2:	f01a 0f10 	tst.w	sl, #16
 8003fc6:	d002      	beq.n	8003fce <_svfprintf_r+0x9a6>
 8003fc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	e7f4      	b.n	8003fb8 <_svfprintf_r+0x990>
 8003fce:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8003fd2:	d002      	beq.n	8003fda <_svfprintf_r+0x9b2>
 8003fd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003fd6:	801a      	strh	r2, [r3, #0]
 8003fd8:	e7ee      	b.n	8003fb8 <_svfprintf_r+0x990>
 8003fda:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8003fde:	d0f3      	beq.n	8003fc8 <_svfprintf_r+0x9a0>
 8003fe0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003fe2:	701a      	strb	r2, [r3, #0]
 8003fe4:	e7e8      	b.n	8003fb8 <_svfprintf_r+0x990>
 8003fe6:	f04a 0a10 	orr.w	sl, sl, #16
 8003fea:	f01a 0f20 	tst.w	sl, #32
 8003fee:	d01e      	beq.n	800402e <_svfprintf_r+0xa06>
 8003ff0:	3607      	adds	r6, #7
 8003ff2:	f026 0307 	bic.w	r3, r6, #7
 8003ff6:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8003ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8004002:	2200      	movs	r2, #0
 8004004:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8004008:	f1b8 3fff 	cmp.w	r8, #4294967295
 800400c:	f000 84b1 	beq.w	8004972 <_svfprintf_r+0x134a>
 8004010:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8004014:	920c      	str	r2, [sp, #48]	; 0x30
 8004016:	ea56 0207 	orrs.w	r2, r6, r7
 800401a:	f040 84b0 	bne.w	800497e <_svfprintf_r+0x1356>
 800401e:	f1b8 0f00 	cmp.w	r8, #0
 8004022:	f000 8103 	beq.w	800422c <_svfprintf_r+0xc04>
 8004026:	2b01      	cmp	r3, #1
 8004028:	f040 84ac 	bne.w	8004984 <_svfprintf_r+0x135c>
 800402c:	e098      	b.n	8004160 <_svfprintf_r+0xb38>
 800402e:	1d33      	adds	r3, r6, #4
 8004030:	f01a 0f10 	tst.w	sl, #16
 8004034:	930a      	str	r3, [sp, #40]	; 0x28
 8004036:	d001      	beq.n	800403c <_svfprintf_r+0xa14>
 8004038:	6836      	ldr	r6, [r6, #0]
 800403a:	e003      	b.n	8004044 <_svfprintf_r+0xa1c>
 800403c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8004040:	d002      	beq.n	8004048 <_svfprintf_r+0xa20>
 8004042:	8836      	ldrh	r6, [r6, #0]
 8004044:	2700      	movs	r7, #0
 8004046:	e7d9      	b.n	8003ffc <_svfprintf_r+0x9d4>
 8004048:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800404c:	d0f4      	beq.n	8004038 <_svfprintf_r+0xa10>
 800404e:	7836      	ldrb	r6, [r6, #0]
 8004050:	e7f8      	b.n	8004044 <_svfprintf_r+0xa1c>
 8004052:	4633      	mov	r3, r6
 8004054:	f853 6b04 	ldr.w	r6, [r3], #4
 8004058:	2278      	movs	r2, #120	; 0x78
 800405a:	930a      	str	r3, [sp, #40]	; 0x28
 800405c:	f647 0330 	movw	r3, #30768	; 0x7830
 8004060:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8004064:	4ba8      	ldr	r3, [pc, #672]	; (8004308 <_svfprintf_r+0xce0>)
 8004066:	2700      	movs	r7, #0
 8004068:	931b      	str	r3, [sp, #108]	; 0x6c
 800406a:	f04a 0a02 	orr.w	sl, sl, #2
 800406e:	2302      	movs	r3, #2
 8004070:	920b      	str	r2, [sp, #44]	; 0x2c
 8004072:	e7c6      	b.n	8004002 <_svfprintf_r+0x9da>
 8004074:	4632      	mov	r2, r6
 8004076:	2500      	movs	r5, #0
 8004078:	f852 3b04 	ldr.w	r3, [r2], #4
 800407c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004080:	9307      	str	r3, [sp, #28]
 8004082:	920a      	str	r2, [sp, #40]	; 0x28
 8004084:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 8004088:	d010      	beq.n	80040ac <_svfprintf_r+0xa84>
 800408a:	4642      	mov	r2, r8
 800408c:	4629      	mov	r1, r5
 800408e:	9807      	ldr	r0, [sp, #28]
 8004090:	f003 fc1e 	bl	80078d0 <memchr>
 8004094:	4607      	mov	r7, r0
 8004096:	2800      	cmp	r0, #0
 8004098:	f43f ac85 	beq.w	80039a6 <_svfprintf_r+0x37e>
 800409c:	9b07      	ldr	r3, [sp, #28]
 800409e:	462f      	mov	r7, r5
 80040a0:	462e      	mov	r6, r5
 80040a2:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
 80040a6:	eba0 0803 	sub.w	r8, r0, r3
 80040aa:	e5c8      	b.n	8003c3e <_svfprintf_r+0x616>
 80040ac:	9807      	ldr	r0, [sp, #28]
 80040ae:	f7fc f84f 	bl	8000150 <strlen>
 80040b2:	462f      	mov	r7, r5
 80040b4:	4680      	mov	r8, r0
 80040b6:	e476      	b.n	80039a6 <_svfprintf_r+0x37e>
 80040b8:	f04a 0a10 	orr.w	sl, sl, #16
 80040bc:	f01a 0f20 	tst.w	sl, #32
 80040c0:	d007      	beq.n	80040d2 <_svfprintf_r+0xaaa>
 80040c2:	3607      	adds	r6, #7
 80040c4:	f026 0307 	bic.w	r3, r6, #7
 80040c8:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80040cc:	930a      	str	r3, [sp, #40]	; 0x28
 80040ce:	2301      	movs	r3, #1
 80040d0:	e797      	b.n	8004002 <_svfprintf_r+0x9da>
 80040d2:	1d33      	adds	r3, r6, #4
 80040d4:	f01a 0f10 	tst.w	sl, #16
 80040d8:	930a      	str	r3, [sp, #40]	; 0x28
 80040da:	d001      	beq.n	80040e0 <_svfprintf_r+0xab8>
 80040dc:	6836      	ldr	r6, [r6, #0]
 80040de:	e003      	b.n	80040e8 <_svfprintf_r+0xac0>
 80040e0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80040e4:	d002      	beq.n	80040ec <_svfprintf_r+0xac4>
 80040e6:	8836      	ldrh	r6, [r6, #0]
 80040e8:	2700      	movs	r7, #0
 80040ea:	e7f0      	b.n	80040ce <_svfprintf_r+0xaa6>
 80040ec:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80040f0:	d0f4      	beq.n	80040dc <_svfprintf_r+0xab4>
 80040f2:	7836      	ldrb	r6, [r6, #0]
 80040f4:	e7f8      	b.n	80040e8 <_svfprintf_r+0xac0>
 80040f6:	4b85      	ldr	r3, [pc, #532]	; (800430c <_svfprintf_r+0xce4>)
 80040f8:	f01a 0f20 	tst.w	sl, #32
 80040fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80040fe:	d019      	beq.n	8004134 <_svfprintf_r+0xb0c>
 8004100:	3607      	adds	r6, #7
 8004102:	f026 0307 	bic.w	r3, r6, #7
 8004106:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800410a:	930a      	str	r3, [sp, #40]	; 0x28
 800410c:	f01a 0f01 	tst.w	sl, #1
 8004110:	d00a      	beq.n	8004128 <_svfprintf_r+0xb00>
 8004112:	ea56 0307 	orrs.w	r3, r6, r7
 8004116:	d007      	beq.n	8004128 <_svfprintf_r+0xb00>
 8004118:	2330      	movs	r3, #48	; 0x30
 800411a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800411e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004120:	f04a 0a02 	orr.w	sl, sl, #2
 8004124:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8004128:	2302      	movs	r3, #2
 800412a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800412e:	e768      	b.n	8004002 <_svfprintf_r+0x9da>
 8004130:	4b75      	ldr	r3, [pc, #468]	; (8004308 <_svfprintf_r+0xce0>)
 8004132:	e7e1      	b.n	80040f8 <_svfprintf_r+0xad0>
 8004134:	1d33      	adds	r3, r6, #4
 8004136:	f01a 0f10 	tst.w	sl, #16
 800413a:	930a      	str	r3, [sp, #40]	; 0x28
 800413c:	d001      	beq.n	8004142 <_svfprintf_r+0xb1a>
 800413e:	6836      	ldr	r6, [r6, #0]
 8004140:	e003      	b.n	800414a <_svfprintf_r+0xb22>
 8004142:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8004146:	d002      	beq.n	800414e <_svfprintf_r+0xb26>
 8004148:	8836      	ldrh	r6, [r6, #0]
 800414a:	2700      	movs	r7, #0
 800414c:	e7de      	b.n	800410c <_svfprintf_r+0xae4>
 800414e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8004152:	d0f4      	beq.n	800413e <_svfprintf_r+0xb16>
 8004154:	7836      	ldrb	r6, [r6, #0]
 8004156:	e7f8      	b.n	800414a <_svfprintf_r+0xb22>
 8004158:	2f00      	cmp	r7, #0
 800415a:	bf08      	it	eq
 800415c:	2e0a      	cmpeq	r6, #10
 800415e:	d206      	bcs.n	800416e <_svfprintf_r+0xb46>
 8004160:	3630      	adds	r6, #48	; 0x30
 8004162:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 8004166:	f20d 1347 	addw	r3, sp, #327	; 0x147
 800416a:	f000 bc2d 	b.w	80049c8 <_svfprintf_r+0x13a0>
 800416e:	2300      	movs	r3, #0
 8004170:	9308      	str	r3, [sp, #32]
 8004172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004174:	ad52      	add	r5, sp, #328	; 0x148
 8004176:	f403 6a80 	and.w	sl, r3, #1024	; 0x400
 800417a:	1e6b      	subs	r3, r5, #1
 800417c:	9307      	str	r3, [sp, #28]
 800417e:	220a      	movs	r2, #10
 8004180:	2300      	movs	r3, #0
 8004182:	4630      	mov	r0, r6
 8004184:	4639      	mov	r1, r7
 8004186:	f7fc fc7f 	bl	8000a88 <__aeabi_uldivmod>
 800418a:	9b08      	ldr	r3, [sp, #32]
 800418c:	3230      	adds	r2, #48	; 0x30
 800418e:	3301      	adds	r3, #1
 8004190:	f805 2c01 	strb.w	r2, [r5, #-1]
 8004194:	9308      	str	r3, [sp, #32]
 8004196:	f1ba 0f00 	cmp.w	sl, #0
 800419a:	d019      	beq.n	80041d0 <_svfprintf_r+0xba8>
 800419c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800419e:	9a08      	ldr	r2, [sp, #32]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d114      	bne.n	80041d0 <_svfprintf_r+0xba8>
 80041a6:	2aff      	cmp	r2, #255	; 0xff
 80041a8:	d012      	beq.n	80041d0 <_svfprintf_r+0xba8>
 80041aa:	2f00      	cmp	r7, #0
 80041ac:	bf08      	it	eq
 80041ae:	2e0a      	cmpeq	r6, #10
 80041b0:	d30e      	bcc.n	80041d0 <_svfprintf_r+0xba8>
 80041b2:	9b07      	ldr	r3, [sp, #28]
 80041b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80041b6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	9307      	str	r3, [sp, #28]
 80041be:	f004 f920 	bl	8008402 <strncpy>
 80041c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041c4:	785d      	ldrb	r5, [r3, #1]
 80041c6:	b1ed      	cbz	r5, 8004204 <_svfprintf_r+0xbdc>
 80041c8:	3301      	adds	r3, #1
 80041ca:	930e      	str	r3, [sp, #56]	; 0x38
 80041cc:	2300      	movs	r3, #0
 80041ce:	9308      	str	r3, [sp, #32]
 80041d0:	220a      	movs	r2, #10
 80041d2:	2300      	movs	r3, #0
 80041d4:	4630      	mov	r0, r6
 80041d6:	4639      	mov	r1, r7
 80041d8:	f7fc fc56 	bl	8000a88 <__aeabi_uldivmod>
 80041dc:	2f00      	cmp	r7, #0
 80041de:	bf08      	it	eq
 80041e0:	2e0a      	cmpeq	r6, #10
 80041e2:	d20b      	bcs.n	80041fc <_svfprintf_r+0xbd4>
 80041e4:	2700      	movs	r7, #0
 80041e6:	9b07      	ldr	r3, [sp, #28]
 80041e8:	aa52      	add	r2, sp, #328	; 0x148
 80041ea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80041ee:	4646      	mov	r6, r8
 80041f0:	eba2 0803 	sub.w	r8, r2, r3
 80041f4:	463d      	mov	r5, r7
 80041f6:	e9cd 770c 	strd	r7, r7, [sp, #48]	; 0x30
 80041fa:	e520      	b.n	8003c3e <_svfprintf_r+0x616>
 80041fc:	4606      	mov	r6, r0
 80041fe:	460f      	mov	r7, r1
 8004200:	9d07      	ldr	r5, [sp, #28]
 8004202:	e7ba      	b.n	800417a <_svfprintf_r+0xb52>
 8004204:	9508      	str	r5, [sp, #32]
 8004206:	e7e3      	b.n	80041d0 <_svfprintf_r+0xba8>
 8004208:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800420a:	f006 030f 	and.w	r3, r6, #15
 800420e:	5cd3      	ldrb	r3, [r2, r3]
 8004210:	9a07      	ldr	r2, [sp, #28]
 8004212:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8004216:	0933      	lsrs	r3, r6, #4
 8004218:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800421c:	9207      	str	r2, [sp, #28]
 800421e:	093a      	lsrs	r2, r7, #4
 8004220:	461e      	mov	r6, r3
 8004222:	4617      	mov	r7, r2
 8004224:	ea56 0307 	orrs.w	r3, r6, r7
 8004228:	d1ee      	bne.n	8004208 <_svfprintf_r+0xbe0>
 800422a:	e7db      	b.n	80041e4 <_svfprintf_r+0xbbc>
 800422c:	b933      	cbnz	r3, 800423c <_svfprintf_r+0xc14>
 800422e:	f01a 0f01 	tst.w	sl, #1
 8004232:	d003      	beq.n	800423c <_svfprintf_r+0xc14>
 8004234:	2330      	movs	r3, #48	; 0x30
 8004236:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 800423a:	e794      	b.n	8004166 <_svfprintf_r+0xb3e>
 800423c:	ab52      	add	r3, sp, #328	; 0x148
 800423e:	e3c3      	b.n	80049c8 <_svfprintf_r+0x13a0>
 8004240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 838a 	beq.w	800495c <_svfprintf_r+0x1334>
 8004248:	2000      	movs	r0, #0
 800424a:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800424e:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8004252:	960a      	str	r6, [sp, #40]	; 0x28
 8004254:	f7ff bb3f 	b.w	80038d6 <_svfprintf_r+0x2ae>
 8004258:	2010      	movs	r0, #16
 800425a:	2b07      	cmp	r3, #7
 800425c:	4402      	add	r2, r0
 800425e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8004262:	6060      	str	r0, [r4, #4]
 8004264:	dd08      	ble.n	8004278 <_svfprintf_r+0xc50>
 8004266:	4659      	mov	r1, fp
 8004268:	4648      	mov	r0, r9
 800426a:	aa26      	add	r2, sp, #152	; 0x98
 800426c:	f004 f8dc 	bl	8008428 <__ssprint_r>
 8004270:	2800      	cmp	r0, #0
 8004272:	f040 8351 	bne.w	8004918 <_svfprintf_r+0x12f0>
 8004276:	a929      	add	r1, sp, #164	; 0xa4
 8004278:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800427a:	460c      	mov	r4, r1
 800427c:	3b10      	subs	r3, #16
 800427e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004280:	e4f9      	b.n	8003c76 <_svfprintf_r+0x64e>
 8004282:	460c      	mov	r4, r1
 8004284:	e513      	b.n	8003cae <_svfprintf_r+0x686>
 8004286:	4659      	mov	r1, fp
 8004288:	4648      	mov	r0, r9
 800428a:	aa26      	add	r2, sp, #152	; 0x98
 800428c:	f004 f8cc 	bl	8008428 <__ssprint_r>
 8004290:	2800      	cmp	r0, #0
 8004292:	f040 8341 	bne.w	8004918 <_svfprintf_r+0x12f0>
 8004296:	ac29      	add	r4, sp, #164	; 0xa4
 8004298:	e51b      	b.n	8003cd2 <_svfprintf_r+0x6aa>
 800429a:	4659      	mov	r1, fp
 800429c:	4648      	mov	r0, r9
 800429e:	aa26      	add	r2, sp, #152	; 0x98
 80042a0:	f004 f8c2 	bl	8008428 <__ssprint_r>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	f040 8337 	bne.w	8004918 <_svfprintf_r+0x12f0>
 80042aa:	ac29      	add	r4, sp, #164	; 0xa4
 80042ac:	e521      	b.n	8003cf2 <_svfprintf_r+0x6ca>
 80042ae:	2010      	movs	r0, #16
 80042b0:	2b07      	cmp	r3, #7
 80042b2:	4402      	add	r2, r0
 80042b4:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80042b8:	6060      	str	r0, [r4, #4]
 80042ba:	dd08      	ble.n	80042ce <_svfprintf_r+0xca6>
 80042bc:	4659      	mov	r1, fp
 80042be:	4648      	mov	r0, r9
 80042c0:	aa26      	add	r2, sp, #152	; 0x98
 80042c2:	f004 f8b1 	bl	8008428 <__ssprint_r>
 80042c6:	2800      	cmp	r0, #0
 80042c8:	f040 8326 	bne.w	8004918 <_svfprintf_r+0x12f0>
 80042cc:	a929      	add	r1, sp, #164	; 0xa4
 80042ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042d0:	460c      	mov	r4, r1
 80042d2:	3b10      	subs	r3, #16
 80042d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80042d6:	e515      	b.n	8003d04 <_svfprintf_r+0x6dc>
 80042d8:	460c      	mov	r4, r1
 80042da:	e52f      	b.n	8003d3c <_svfprintf_r+0x714>
 80042dc:	2010      	movs	r0, #16
 80042de:	2b07      	cmp	r3, #7
 80042e0:	4402      	add	r2, r0
 80042e2:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80042e6:	6060      	str	r0, [r4, #4]
 80042e8:	dd08      	ble.n	80042fc <_svfprintf_r+0xcd4>
 80042ea:	4659      	mov	r1, fp
 80042ec:	4648      	mov	r0, r9
 80042ee:	aa26      	add	r2, sp, #152	; 0x98
 80042f0:	f004 f89a 	bl	8008428 <__ssprint_r>
 80042f4:	2800      	cmp	r0, #0
 80042f6:	f040 830f 	bne.w	8004918 <_svfprintf_r+0x12f0>
 80042fa:	a929      	add	r1, sp, #164	; 0xa4
 80042fc:	460c      	mov	r4, r1
 80042fe:	3e10      	subs	r6, #16
 8004300:	e520      	b.n	8003d44 <_svfprintf_r+0x71c>
 8004302:	460c      	mov	r4, r1
 8004304:	e546      	b.n	8003d94 <_svfprintf_r+0x76c>
 8004306:	bf00      	nop
 8004308:	080097ac 	.word	0x080097ac
 800430c:	080097bd 	.word	0x080097bd
 8004310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004312:	2b65      	cmp	r3, #101	; 0x65
 8004314:	f340 824a 	ble.w	80047ac <_svfprintf_r+0x1184>
 8004318:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800431c:	2200      	movs	r2, #0
 800431e:	2300      	movs	r3, #0
 8004320:	f7fc fb42 	bl	80009a8 <__aeabi_dcmpeq>
 8004324:	2800      	cmp	r0, #0
 8004326:	d06a      	beq.n	80043fe <_svfprintf_r+0xdd6>
 8004328:	4b6f      	ldr	r3, [pc, #444]	; (80044e8 <_svfprintf_r+0xec0>)
 800432a:	6023      	str	r3, [r4, #0]
 800432c:	2301      	movs	r3, #1
 800432e:	441e      	add	r6, r3
 8004330:	6063      	str	r3, [r4, #4]
 8004332:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004334:	9628      	str	r6, [sp, #160]	; 0xa0
 8004336:	3301      	adds	r3, #1
 8004338:	2b07      	cmp	r3, #7
 800433a:	9327      	str	r3, [sp, #156]	; 0x9c
 800433c:	dc38      	bgt.n	80043b0 <_svfprintf_r+0xd88>
 800433e:	3408      	adds	r4, #8
 8004340:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004342:	9a08      	ldr	r2, [sp, #32]
 8004344:	4293      	cmp	r3, r2
 8004346:	db03      	blt.n	8004350 <_svfprintf_r+0xd28>
 8004348:	f01a 0f01 	tst.w	sl, #1
 800434c:	f43f ad33 	beq.w	8003db6 <_svfprintf_r+0x78e>
 8004350:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004352:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004358:	6063      	str	r3, [r4, #4]
 800435a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800435c:	4413      	add	r3, r2
 800435e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004360:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004362:	3301      	adds	r3, #1
 8004364:	2b07      	cmp	r3, #7
 8004366:	9327      	str	r3, [sp, #156]	; 0x9c
 8004368:	dc2c      	bgt.n	80043c4 <_svfprintf_r+0xd9c>
 800436a:	3408      	adds	r4, #8
 800436c:	9b08      	ldr	r3, [sp, #32]
 800436e:	1e5d      	subs	r5, r3, #1
 8004370:	2d00      	cmp	r5, #0
 8004372:	f77f ad20 	ble.w	8003db6 <_svfprintf_r+0x78e>
 8004376:	f04f 0810 	mov.w	r8, #16
 800437a:	4e5c      	ldr	r6, [pc, #368]	; (80044ec <_svfprintf_r+0xec4>)
 800437c:	2d10      	cmp	r5, #16
 800437e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8004382:	f104 0108 	add.w	r1, r4, #8
 8004386:	f103 0301 	add.w	r3, r3, #1
 800438a:	6026      	str	r6, [r4, #0]
 800438c:	dc24      	bgt.n	80043d8 <_svfprintf_r+0xdb0>
 800438e:	6065      	str	r5, [r4, #4]
 8004390:	2b07      	cmp	r3, #7
 8004392:	4415      	add	r5, r2
 8004394:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8004398:	f340 829c 	ble.w	80048d4 <_svfprintf_r+0x12ac>
 800439c:	4659      	mov	r1, fp
 800439e:	4648      	mov	r0, r9
 80043a0:	aa26      	add	r2, sp, #152	; 0x98
 80043a2:	f004 f841 	bl	8008428 <__ssprint_r>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	f040 82b6 	bne.w	8004918 <_svfprintf_r+0x12f0>
 80043ac:	ac29      	add	r4, sp, #164	; 0xa4
 80043ae:	e502      	b.n	8003db6 <_svfprintf_r+0x78e>
 80043b0:	4659      	mov	r1, fp
 80043b2:	4648      	mov	r0, r9
 80043b4:	aa26      	add	r2, sp, #152	; 0x98
 80043b6:	f004 f837 	bl	8008428 <__ssprint_r>
 80043ba:	2800      	cmp	r0, #0
 80043bc:	f040 82ac 	bne.w	8004918 <_svfprintf_r+0x12f0>
 80043c0:	ac29      	add	r4, sp, #164	; 0xa4
 80043c2:	e7bd      	b.n	8004340 <_svfprintf_r+0xd18>
 80043c4:	4659      	mov	r1, fp
 80043c6:	4648      	mov	r0, r9
 80043c8:	aa26      	add	r2, sp, #152	; 0x98
 80043ca:	f004 f82d 	bl	8008428 <__ssprint_r>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	f040 82a2 	bne.w	8004918 <_svfprintf_r+0x12f0>
 80043d4:	ac29      	add	r4, sp, #164	; 0xa4
 80043d6:	e7c9      	b.n	800436c <_svfprintf_r+0xd44>
 80043d8:	3210      	adds	r2, #16
 80043da:	2b07      	cmp	r3, #7
 80043dc:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80043e0:	f8c4 8004 	str.w	r8, [r4, #4]
 80043e4:	dd08      	ble.n	80043f8 <_svfprintf_r+0xdd0>
 80043e6:	4659      	mov	r1, fp
 80043e8:	4648      	mov	r0, r9
 80043ea:	aa26      	add	r2, sp, #152	; 0x98
 80043ec:	f004 f81c 	bl	8008428 <__ssprint_r>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	f040 8291 	bne.w	8004918 <_svfprintf_r+0x12f0>
 80043f6:	a929      	add	r1, sp, #164	; 0xa4
 80043f8:	460c      	mov	r4, r1
 80043fa:	3d10      	subs	r5, #16
 80043fc:	e7be      	b.n	800437c <_svfprintf_r+0xd54>
 80043fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004400:	2b00      	cmp	r3, #0
 8004402:	dc75      	bgt.n	80044f0 <_svfprintf_r+0xec8>
 8004404:	4b38      	ldr	r3, [pc, #224]	; (80044e8 <_svfprintf_r+0xec0>)
 8004406:	6023      	str	r3, [r4, #0]
 8004408:	2301      	movs	r3, #1
 800440a:	441e      	add	r6, r3
 800440c:	6063      	str	r3, [r4, #4]
 800440e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004410:	9628      	str	r6, [sp, #160]	; 0xa0
 8004412:	3301      	adds	r3, #1
 8004414:	2b07      	cmp	r3, #7
 8004416:	9327      	str	r3, [sp, #156]	; 0x9c
 8004418:	dc3e      	bgt.n	8004498 <_svfprintf_r+0xe70>
 800441a:	3408      	adds	r4, #8
 800441c:	9908      	ldr	r1, [sp, #32]
 800441e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004420:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004422:	430a      	orrs	r2, r1
 8004424:	f00a 0101 	and.w	r1, sl, #1
 8004428:	430a      	orrs	r2, r1
 800442a:	f43f acc4 	beq.w	8003db6 <_svfprintf_r+0x78e>
 800442e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004430:	6022      	str	r2, [r4, #0]
 8004432:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004434:	4413      	add	r3, r2
 8004436:	9328      	str	r3, [sp, #160]	; 0xa0
 8004438:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800443a:	6062      	str	r2, [r4, #4]
 800443c:	3301      	adds	r3, #1
 800443e:	2b07      	cmp	r3, #7
 8004440:	9327      	str	r3, [sp, #156]	; 0x9c
 8004442:	dc33      	bgt.n	80044ac <_svfprintf_r+0xe84>
 8004444:	3408      	adds	r4, #8
 8004446:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004448:	2d00      	cmp	r5, #0
 800444a:	da1c      	bge.n	8004486 <_svfprintf_r+0xe5e>
 800444c:	4623      	mov	r3, r4
 800444e:	f04f 0810 	mov.w	r8, #16
 8004452:	4e26      	ldr	r6, [pc, #152]	; (80044ec <_svfprintf_r+0xec4>)
 8004454:	426d      	negs	r5, r5
 8004456:	2d10      	cmp	r5, #16
 8004458:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 800445c:	f104 0408 	add.w	r4, r4, #8
 8004460:	f102 0201 	add.w	r2, r2, #1
 8004464:	601e      	str	r6, [r3, #0]
 8004466:	dc2b      	bgt.n	80044c0 <_svfprintf_r+0xe98>
 8004468:	605d      	str	r5, [r3, #4]
 800446a:	2a07      	cmp	r2, #7
 800446c:	440d      	add	r5, r1
 800446e:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8004472:	dd08      	ble.n	8004486 <_svfprintf_r+0xe5e>
 8004474:	4659      	mov	r1, fp
 8004476:	4648      	mov	r0, r9
 8004478:	aa26      	add	r2, sp, #152	; 0x98
 800447a:	f003 ffd5 	bl	8008428 <__ssprint_r>
 800447e:	2800      	cmp	r0, #0
 8004480:	f040 824a 	bne.w	8004918 <_svfprintf_r+0x12f0>
 8004484:	ac29      	add	r4, sp, #164	; 0xa4
 8004486:	9b07      	ldr	r3, [sp, #28]
 8004488:	9a08      	ldr	r2, [sp, #32]
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	9b08      	ldr	r3, [sp, #32]
 800448e:	6063      	str	r3, [r4, #4]
 8004490:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004492:	4413      	add	r3, r2
 8004494:	9328      	str	r3, [sp, #160]	; 0xa0
 8004496:	e487      	b.n	8003da8 <_svfprintf_r+0x780>
 8004498:	4659      	mov	r1, fp
 800449a:	4648      	mov	r0, r9
 800449c:	aa26      	add	r2, sp, #152	; 0x98
 800449e:	f003 ffc3 	bl	8008428 <__ssprint_r>
 80044a2:	2800      	cmp	r0, #0
 80044a4:	f040 8238 	bne.w	8004918 <_svfprintf_r+0x12f0>
 80044a8:	ac29      	add	r4, sp, #164	; 0xa4
 80044aa:	e7b7      	b.n	800441c <_svfprintf_r+0xdf4>
 80044ac:	4659      	mov	r1, fp
 80044ae:	4648      	mov	r0, r9
 80044b0:	aa26      	add	r2, sp, #152	; 0x98
 80044b2:	f003 ffb9 	bl	8008428 <__ssprint_r>
 80044b6:	2800      	cmp	r0, #0
 80044b8:	f040 822e 	bne.w	8004918 <_svfprintf_r+0x12f0>
 80044bc:	ac29      	add	r4, sp, #164	; 0xa4
 80044be:	e7c2      	b.n	8004446 <_svfprintf_r+0xe1e>
 80044c0:	3110      	adds	r1, #16
 80044c2:	2a07      	cmp	r2, #7
 80044c4:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 80044c8:	f8c3 8004 	str.w	r8, [r3, #4]
 80044cc:	dd08      	ble.n	80044e0 <_svfprintf_r+0xeb8>
 80044ce:	4659      	mov	r1, fp
 80044d0:	4648      	mov	r0, r9
 80044d2:	aa26      	add	r2, sp, #152	; 0x98
 80044d4:	f003 ffa8 	bl	8008428 <__ssprint_r>
 80044d8:	2800      	cmp	r0, #0
 80044da:	f040 821d 	bne.w	8004918 <_svfprintf_r+0x12f0>
 80044de:	ac29      	add	r4, sp, #164	; 0xa4
 80044e0:	4623      	mov	r3, r4
 80044e2:	3d10      	subs	r5, #16
 80044e4:	e7b7      	b.n	8004456 <_svfprintf_r+0xe2e>
 80044e6:	bf00      	nop
 80044e8:	080097ce 	.word	0x080097ce
 80044ec:	080097e0 	.word	0x080097e0
 80044f0:	9b08      	ldr	r3, [sp, #32]
 80044f2:	42ab      	cmp	r3, r5
 80044f4:	bfa8      	it	ge
 80044f6:	462b      	movge	r3, r5
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	4698      	mov	r8, r3
 80044fc:	dd0b      	ble.n	8004516 <_svfprintf_r+0xeee>
 80044fe:	9b07      	ldr	r3, [sp, #28]
 8004500:	4446      	add	r6, r8
 8004502:	e9c4 3800 	strd	r3, r8, [r4]
 8004506:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004508:	9628      	str	r6, [sp, #160]	; 0xa0
 800450a:	3301      	adds	r3, #1
 800450c:	2b07      	cmp	r3, #7
 800450e:	9327      	str	r3, [sp, #156]	; 0x9c
 8004510:	f300 808f 	bgt.w	8004632 <_svfprintf_r+0x100a>
 8004514:	3408      	adds	r4, #8
 8004516:	f1b8 0f00 	cmp.w	r8, #0
 800451a:	bfb4      	ite	lt
 800451c:	462e      	movlt	r6, r5
 800451e:	eba5 0608 	subge.w	r6, r5, r8
 8004522:	2e00      	cmp	r6, #0
 8004524:	dd1c      	ble.n	8004560 <_svfprintf_r+0xf38>
 8004526:	f8df 8280 	ldr.w	r8, [pc, #640]	; 80047a8 <_svfprintf_r+0x1180>
 800452a:	2e10      	cmp	r6, #16
 800452c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8004530:	f104 0108 	add.w	r1, r4, #8
 8004534:	f103 0301 	add.w	r3, r3, #1
 8004538:	f8c4 8000 	str.w	r8, [r4]
 800453c:	f300 8083 	bgt.w	8004646 <_svfprintf_r+0x101e>
 8004540:	6066      	str	r6, [r4, #4]
 8004542:	2b07      	cmp	r3, #7
 8004544:	4416      	add	r6, r2
 8004546:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 800454a:	f340 808f 	ble.w	800466c <_svfprintf_r+0x1044>
 800454e:	4659      	mov	r1, fp
 8004550:	4648      	mov	r0, r9
 8004552:	aa26      	add	r2, sp, #152	; 0x98
 8004554:	f003 ff68 	bl	8008428 <__ssprint_r>
 8004558:	2800      	cmp	r0, #0
 800455a:	f040 81dd 	bne.w	8004918 <_svfprintf_r+0x12f0>
 800455e:	ac29      	add	r4, sp, #164	; 0xa4
 8004560:	9b07      	ldr	r3, [sp, #28]
 8004562:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8004566:	441d      	add	r5, r3
 8004568:	d00c      	beq.n	8004584 <_svfprintf_r+0xf5c>
 800456a:	4e8f      	ldr	r6, [pc, #572]	; (80047a8 <_svfprintf_r+0x1180>)
 800456c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800456e:	2b00      	cmp	r3, #0
 8004570:	d17e      	bne.n	8004670 <_svfprintf_r+0x1048>
 8004572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004574:	2b00      	cmp	r3, #0
 8004576:	d17e      	bne.n	8004676 <_svfprintf_r+0x104e>
 8004578:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800457c:	4413      	add	r3, r2
 800457e:	429d      	cmp	r5, r3
 8004580:	bf28      	it	cs
 8004582:	461d      	movcs	r5, r3
 8004584:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004586:	9a08      	ldr	r2, [sp, #32]
 8004588:	4293      	cmp	r3, r2
 800458a:	db02      	blt.n	8004592 <_svfprintf_r+0xf6a>
 800458c:	f01a 0f01 	tst.w	sl, #1
 8004590:	d00e      	beq.n	80045b0 <_svfprintf_r+0xf88>
 8004592:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004594:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004596:	6023      	str	r3, [r4, #0]
 8004598:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800459a:	6063      	str	r3, [r4, #4]
 800459c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800459e:	4413      	add	r3, r2
 80045a0:	9328      	str	r3, [sp, #160]	; 0xa0
 80045a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80045a4:	3301      	adds	r3, #1
 80045a6:	2b07      	cmp	r3, #7
 80045a8:	9327      	str	r3, [sp, #156]	; 0x9c
 80045aa:	f300 80e8 	bgt.w	800477e <_svfprintf_r+0x1156>
 80045ae:	3408      	adds	r4, #8
 80045b0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80045b2:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 80045b6:	440b      	add	r3, r1
 80045b8:	1b8e      	subs	r6, r1, r6
 80045ba:	1b5a      	subs	r2, r3, r5
 80045bc:	4296      	cmp	r6, r2
 80045be:	bfa8      	it	ge
 80045c0:	4616      	movge	r6, r2
 80045c2:	2e00      	cmp	r6, #0
 80045c4:	dd0b      	ble.n	80045de <_svfprintf_r+0xfb6>
 80045c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80045c8:	e9c4 5600 	strd	r5, r6, [r4]
 80045cc:	4433      	add	r3, r6
 80045ce:	9328      	str	r3, [sp, #160]	; 0xa0
 80045d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80045d2:	3301      	adds	r3, #1
 80045d4:	2b07      	cmp	r3, #7
 80045d6:	9327      	str	r3, [sp, #156]	; 0x9c
 80045d8:	f300 80db 	bgt.w	8004792 <_svfprintf_r+0x116a>
 80045dc:	3408      	adds	r4, #8
 80045de:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80045e0:	9b08      	ldr	r3, [sp, #32]
 80045e2:	2e00      	cmp	r6, #0
 80045e4:	eba3 0505 	sub.w	r5, r3, r5
 80045e8:	bfa8      	it	ge
 80045ea:	1bad      	subge	r5, r5, r6
 80045ec:	2d00      	cmp	r5, #0
 80045ee:	f77f abe2 	ble.w	8003db6 <_svfprintf_r+0x78e>
 80045f2:	f04f 0810 	mov.w	r8, #16
 80045f6:	4e6c      	ldr	r6, [pc, #432]	; (80047a8 <_svfprintf_r+0x1180>)
 80045f8:	2d10      	cmp	r5, #16
 80045fa:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80045fe:	f104 0108 	add.w	r1, r4, #8
 8004602:	f103 0301 	add.w	r3, r3, #1
 8004606:	6026      	str	r6, [r4, #0]
 8004608:	f77f aec1 	ble.w	800438e <_svfprintf_r+0xd66>
 800460c:	3210      	adds	r2, #16
 800460e:	2b07      	cmp	r3, #7
 8004610:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8004614:	f8c4 8004 	str.w	r8, [r4, #4]
 8004618:	dd08      	ble.n	800462c <_svfprintf_r+0x1004>
 800461a:	4659      	mov	r1, fp
 800461c:	4648      	mov	r0, r9
 800461e:	aa26      	add	r2, sp, #152	; 0x98
 8004620:	f003 ff02 	bl	8008428 <__ssprint_r>
 8004624:	2800      	cmp	r0, #0
 8004626:	f040 8177 	bne.w	8004918 <_svfprintf_r+0x12f0>
 800462a:	a929      	add	r1, sp, #164	; 0xa4
 800462c:	460c      	mov	r4, r1
 800462e:	3d10      	subs	r5, #16
 8004630:	e7e2      	b.n	80045f8 <_svfprintf_r+0xfd0>
 8004632:	4659      	mov	r1, fp
 8004634:	4648      	mov	r0, r9
 8004636:	aa26      	add	r2, sp, #152	; 0x98
 8004638:	f003 fef6 	bl	8008428 <__ssprint_r>
 800463c:	2800      	cmp	r0, #0
 800463e:	f040 816b 	bne.w	8004918 <_svfprintf_r+0x12f0>
 8004642:	ac29      	add	r4, sp, #164	; 0xa4
 8004644:	e767      	b.n	8004516 <_svfprintf_r+0xeee>
 8004646:	2010      	movs	r0, #16
 8004648:	2b07      	cmp	r3, #7
 800464a:	4402      	add	r2, r0
 800464c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8004650:	6060      	str	r0, [r4, #4]
 8004652:	dd08      	ble.n	8004666 <_svfprintf_r+0x103e>
 8004654:	4659      	mov	r1, fp
 8004656:	4648      	mov	r0, r9
 8004658:	aa26      	add	r2, sp, #152	; 0x98
 800465a:	f003 fee5 	bl	8008428 <__ssprint_r>
 800465e:	2800      	cmp	r0, #0
 8004660:	f040 815a 	bne.w	8004918 <_svfprintf_r+0x12f0>
 8004664:	a929      	add	r1, sp, #164	; 0xa4
 8004666:	460c      	mov	r4, r1
 8004668:	3e10      	subs	r6, #16
 800466a:	e75e      	b.n	800452a <_svfprintf_r+0xf02>
 800466c:	460c      	mov	r4, r1
 800466e:	e777      	b.n	8004560 <_svfprintf_r+0xf38>
 8004670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004672:	2b00      	cmp	r3, #0
 8004674:	d052      	beq.n	800471c <_svfprintf_r+0x10f4>
 8004676:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004678:	3b01      	subs	r3, #1
 800467a:	930c      	str	r3, [sp, #48]	; 0x30
 800467c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800467e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004684:	6063      	str	r3, [r4, #4]
 8004686:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004688:	4413      	add	r3, r2
 800468a:	9328      	str	r3, [sp, #160]	; 0xa0
 800468c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800468e:	3301      	adds	r3, #1
 8004690:	2b07      	cmp	r3, #7
 8004692:	9327      	str	r3, [sp, #156]	; 0x9c
 8004694:	dc49      	bgt.n	800472a <_svfprintf_r+0x1102>
 8004696:	3408      	adds	r4, #8
 8004698:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800469c:	eb03 0802 	add.w	r8, r3, r2
 80046a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046a2:	eba8 0805 	sub.w	r8, r8, r5
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	4598      	cmp	r8, r3
 80046aa:	bfa8      	it	ge
 80046ac:	4698      	movge	r8, r3
 80046ae:	f1b8 0f00 	cmp.w	r8, #0
 80046b2:	dd0a      	ble.n	80046ca <_svfprintf_r+0x10a2>
 80046b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80046b6:	e9c4 5800 	strd	r5, r8, [r4]
 80046ba:	4443      	add	r3, r8
 80046bc:	9328      	str	r3, [sp, #160]	; 0xa0
 80046be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80046c0:	3301      	adds	r3, #1
 80046c2:	2b07      	cmp	r3, #7
 80046c4:	9327      	str	r3, [sp, #156]	; 0x9c
 80046c6:	dc3a      	bgt.n	800473e <_svfprintf_r+0x1116>
 80046c8:	3408      	adds	r4, #8
 80046ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046cc:	f1b8 0f00 	cmp.w	r8, #0
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	bfb4      	ite	lt
 80046d4:	4698      	movlt	r8, r3
 80046d6:	eba3 0808 	subge.w	r8, r3, r8
 80046da:	f1b8 0f00 	cmp.w	r8, #0
 80046de:	dd19      	ble.n	8004714 <_svfprintf_r+0x10ec>
 80046e0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 80046e4:	f1b8 0f10 	cmp.w	r8, #16
 80046e8:	f102 0201 	add.w	r2, r2, #1
 80046ec:	f104 0108 	add.w	r1, r4, #8
 80046f0:	6026      	str	r6, [r4, #0]
 80046f2:	dc2e      	bgt.n	8004752 <_svfprintf_r+0x112a>
 80046f4:	4443      	add	r3, r8
 80046f6:	2a07      	cmp	r2, #7
 80046f8:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80046fc:	f8c4 8004 	str.w	r8, [r4, #4]
 8004700:	dd3b      	ble.n	800477a <_svfprintf_r+0x1152>
 8004702:	4659      	mov	r1, fp
 8004704:	4648      	mov	r0, r9
 8004706:	aa26      	add	r2, sp, #152	; 0x98
 8004708:	f003 fe8e 	bl	8008428 <__ssprint_r>
 800470c:	2800      	cmp	r0, #0
 800470e:	f040 8103 	bne.w	8004918 <_svfprintf_r+0x12f0>
 8004712:	ac29      	add	r4, sp, #164	; 0xa4
 8004714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	441d      	add	r5, r3
 800471a:	e727      	b.n	800456c <_svfprintf_r+0xf44>
 800471c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800471e:	3b01      	subs	r3, #1
 8004720:	930e      	str	r3, [sp, #56]	; 0x38
 8004722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004724:	3b01      	subs	r3, #1
 8004726:	930d      	str	r3, [sp, #52]	; 0x34
 8004728:	e7a8      	b.n	800467c <_svfprintf_r+0x1054>
 800472a:	4659      	mov	r1, fp
 800472c:	4648      	mov	r0, r9
 800472e:	aa26      	add	r2, sp, #152	; 0x98
 8004730:	f003 fe7a 	bl	8008428 <__ssprint_r>
 8004734:	2800      	cmp	r0, #0
 8004736:	f040 80ef 	bne.w	8004918 <_svfprintf_r+0x12f0>
 800473a:	ac29      	add	r4, sp, #164	; 0xa4
 800473c:	e7ac      	b.n	8004698 <_svfprintf_r+0x1070>
 800473e:	4659      	mov	r1, fp
 8004740:	4648      	mov	r0, r9
 8004742:	aa26      	add	r2, sp, #152	; 0x98
 8004744:	f003 fe70 	bl	8008428 <__ssprint_r>
 8004748:	2800      	cmp	r0, #0
 800474a:	f040 80e5 	bne.w	8004918 <_svfprintf_r+0x12f0>
 800474e:	ac29      	add	r4, sp, #164	; 0xa4
 8004750:	e7bb      	b.n	80046ca <_svfprintf_r+0x10a2>
 8004752:	2010      	movs	r0, #16
 8004754:	2a07      	cmp	r2, #7
 8004756:	4403      	add	r3, r0
 8004758:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800475c:	6060      	str	r0, [r4, #4]
 800475e:	dd08      	ble.n	8004772 <_svfprintf_r+0x114a>
 8004760:	4659      	mov	r1, fp
 8004762:	4648      	mov	r0, r9
 8004764:	aa26      	add	r2, sp, #152	; 0x98
 8004766:	f003 fe5f 	bl	8008428 <__ssprint_r>
 800476a:	2800      	cmp	r0, #0
 800476c:	f040 80d4 	bne.w	8004918 <_svfprintf_r+0x12f0>
 8004770:	a929      	add	r1, sp, #164	; 0xa4
 8004772:	460c      	mov	r4, r1
 8004774:	f1a8 0810 	sub.w	r8, r8, #16
 8004778:	e7b2      	b.n	80046e0 <_svfprintf_r+0x10b8>
 800477a:	460c      	mov	r4, r1
 800477c:	e7ca      	b.n	8004714 <_svfprintf_r+0x10ec>
 800477e:	4659      	mov	r1, fp
 8004780:	4648      	mov	r0, r9
 8004782:	aa26      	add	r2, sp, #152	; 0x98
 8004784:	f003 fe50 	bl	8008428 <__ssprint_r>
 8004788:	2800      	cmp	r0, #0
 800478a:	f040 80c5 	bne.w	8004918 <_svfprintf_r+0x12f0>
 800478e:	ac29      	add	r4, sp, #164	; 0xa4
 8004790:	e70e      	b.n	80045b0 <_svfprintf_r+0xf88>
 8004792:	4659      	mov	r1, fp
 8004794:	4648      	mov	r0, r9
 8004796:	aa26      	add	r2, sp, #152	; 0x98
 8004798:	f003 fe46 	bl	8008428 <__ssprint_r>
 800479c:	2800      	cmp	r0, #0
 800479e:	f040 80bb 	bne.w	8004918 <_svfprintf_r+0x12f0>
 80047a2:	ac29      	add	r4, sp, #164	; 0xa4
 80047a4:	e71b      	b.n	80045de <_svfprintf_r+0xfb6>
 80047a6:	bf00      	nop
 80047a8:	080097e0 	.word	0x080097e0
 80047ac:	9a08      	ldr	r2, [sp, #32]
 80047ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80047b0:	2a01      	cmp	r2, #1
 80047b2:	9a07      	ldr	r2, [sp, #28]
 80047b4:	f106 0601 	add.w	r6, r6, #1
 80047b8:	6022      	str	r2, [r4, #0]
 80047ba:	f04f 0201 	mov.w	r2, #1
 80047be:	f103 0301 	add.w	r3, r3, #1
 80047c2:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 80047c6:	f104 0508 	add.w	r5, r4, #8
 80047ca:	6062      	str	r2, [r4, #4]
 80047cc:	dc02      	bgt.n	80047d4 <_svfprintf_r+0x11ac>
 80047ce:	f01a 0f01 	tst.w	sl, #1
 80047d2:	d07a      	beq.n	80048ca <_svfprintf_r+0x12a2>
 80047d4:	2b07      	cmp	r3, #7
 80047d6:	dd08      	ble.n	80047ea <_svfprintf_r+0x11c2>
 80047d8:	4659      	mov	r1, fp
 80047da:	4648      	mov	r0, r9
 80047dc:	aa26      	add	r2, sp, #152	; 0x98
 80047de:	f003 fe23 	bl	8008428 <__ssprint_r>
 80047e2:	2800      	cmp	r0, #0
 80047e4:	f040 8098 	bne.w	8004918 <_svfprintf_r+0x12f0>
 80047e8:	ad29      	add	r5, sp, #164	; 0xa4
 80047ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80047ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80047ee:	602b      	str	r3, [r5, #0]
 80047f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80047f2:	606b      	str	r3, [r5, #4]
 80047f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80047f6:	4413      	add	r3, r2
 80047f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80047fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80047fc:	3301      	adds	r3, #1
 80047fe:	2b07      	cmp	r3, #7
 8004800:	9327      	str	r3, [sp, #156]	; 0x9c
 8004802:	dc32      	bgt.n	800486a <_svfprintf_r+0x1242>
 8004804:	3508      	adds	r5, #8
 8004806:	9b08      	ldr	r3, [sp, #32]
 8004808:	2200      	movs	r2, #0
 800480a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800480e:	1e5c      	subs	r4, r3, #1
 8004810:	2300      	movs	r3, #0
 8004812:	f7fc f8c9 	bl	80009a8 <__aeabi_dcmpeq>
 8004816:	2800      	cmp	r0, #0
 8004818:	d130      	bne.n	800487c <_svfprintf_r+0x1254>
 800481a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800481c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800481e:	9807      	ldr	r0, [sp, #28]
 8004820:	9a08      	ldr	r2, [sp, #32]
 8004822:	3101      	adds	r1, #1
 8004824:	3b01      	subs	r3, #1
 8004826:	3001      	adds	r0, #1
 8004828:	4413      	add	r3, r2
 800482a:	2907      	cmp	r1, #7
 800482c:	e9c5 0400 	strd	r0, r4, [r5]
 8004830:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 8004834:	dd4c      	ble.n	80048d0 <_svfprintf_r+0x12a8>
 8004836:	4659      	mov	r1, fp
 8004838:	4648      	mov	r0, r9
 800483a:	aa26      	add	r2, sp, #152	; 0x98
 800483c:	f003 fdf4 	bl	8008428 <__ssprint_r>
 8004840:	2800      	cmp	r0, #0
 8004842:	d169      	bne.n	8004918 <_svfprintf_r+0x12f0>
 8004844:	ad29      	add	r5, sp, #164	; 0xa4
 8004846:	ab22      	add	r3, sp, #136	; 0x88
 8004848:	602b      	str	r3, [r5, #0]
 800484a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800484c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800484e:	606b      	str	r3, [r5, #4]
 8004850:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004852:	4413      	add	r3, r2
 8004854:	9328      	str	r3, [sp, #160]	; 0xa0
 8004856:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004858:	3301      	adds	r3, #1
 800485a:	2b07      	cmp	r3, #7
 800485c:	9327      	str	r3, [sp, #156]	; 0x9c
 800485e:	f73f ad9d 	bgt.w	800439c <_svfprintf_r+0xd74>
 8004862:	f105 0408 	add.w	r4, r5, #8
 8004866:	f7ff baa6 	b.w	8003db6 <_svfprintf_r+0x78e>
 800486a:	4659      	mov	r1, fp
 800486c:	4648      	mov	r0, r9
 800486e:	aa26      	add	r2, sp, #152	; 0x98
 8004870:	f003 fdda 	bl	8008428 <__ssprint_r>
 8004874:	2800      	cmp	r0, #0
 8004876:	d14f      	bne.n	8004918 <_svfprintf_r+0x12f0>
 8004878:	ad29      	add	r5, sp, #164	; 0xa4
 800487a:	e7c4      	b.n	8004806 <_svfprintf_r+0x11de>
 800487c:	2c00      	cmp	r4, #0
 800487e:	dde2      	ble.n	8004846 <_svfprintf_r+0x121e>
 8004880:	f04f 0810 	mov.w	r8, #16
 8004884:	4e51      	ldr	r6, [pc, #324]	; (80049cc <_svfprintf_r+0x13a4>)
 8004886:	2c10      	cmp	r4, #16
 8004888:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800488c:	f105 0108 	add.w	r1, r5, #8
 8004890:	f103 0301 	add.w	r3, r3, #1
 8004894:	602e      	str	r6, [r5, #0]
 8004896:	dc07      	bgt.n	80048a8 <_svfprintf_r+0x1280>
 8004898:	606c      	str	r4, [r5, #4]
 800489a:	2b07      	cmp	r3, #7
 800489c:	4414      	add	r4, r2
 800489e:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 80048a2:	dcc8      	bgt.n	8004836 <_svfprintf_r+0x120e>
 80048a4:	460d      	mov	r5, r1
 80048a6:	e7ce      	b.n	8004846 <_svfprintf_r+0x121e>
 80048a8:	3210      	adds	r2, #16
 80048aa:	2b07      	cmp	r3, #7
 80048ac:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80048b0:	f8c5 8004 	str.w	r8, [r5, #4]
 80048b4:	dd06      	ble.n	80048c4 <_svfprintf_r+0x129c>
 80048b6:	4659      	mov	r1, fp
 80048b8:	4648      	mov	r0, r9
 80048ba:	aa26      	add	r2, sp, #152	; 0x98
 80048bc:	f003 fdb4 	bl	8008428 <__ssprint_r>
 80048c0:	bb50      	cbnz	r0, 8004918 <_svfprintf_r+0x12f0>
 80048c2:	a929      	add	r1, sp, #164	; 0xa4
 80048c4:	460d      	mov	r5, r1
 80048c6:	3c10      	subs	r4, #16
 80048c8:	e7dd      	b.n	8004886 <_svfprintf_r+0x125e>
 80048ca:	2b07      	cmp	r3, #7
 80048cc:	ddbb      	ble.n	8004846 <_svfprintf_r+0x121e>
 80048ce:	e7b2      	b.n	8004836 <_svfprintf_r+0x120e>
 80048d0:	3508      	adds	r5, #8
 80048d2:	e7b8      	b.n	8004846 <_svfprintf_r+0x121e>
 80048d4:	460c      	mov	r4, r1
 80048d6:	f7ff ba6e 	b.w	8003db6 <_svfprintf_r+0x78e>
 80048da:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 80048de:	1a9d      	subs	r5, r3, r2
 80048e0:	2d00      	cmp	r5, #0
 80048e2:	f77f aa6c 	ble.w	8003dbe <_svfprintf_r+0x796>
 80048e6:	f04f 0810 	mov.w	r8, #16
 80048ea:	4e39      	ldr	r6, [pc, #228]	; (80049d0 <_svfprintf_r+0x13a8>)
 80048ec:	2d10      	cmp	r5, #16
 80048ee:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80048f2:	6026      	str	r6, [r4, #0]
 80048f4:	f103 0301 	add.w	r3, r3, #1
 80048f8:	dc17      	bgt.n	800492a <_svfprintf_r+0x1302>
 80048fa:	6065      	str	r5, [r4, #4]
 80048fc:	2b07      	cmp	r3, #7
 80048fe:	4415      	add	r5, r2
 8004900:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8004904:	f77f aa5b 	ble.w	8003dbe <_svfprintf_r+0x796>
 8004908:	4659      	mov	r1, fp
 800490a:	4648      	mov	r0, r9
 800490c:	aa26      	add	r2, sp, #152	; 0x98
 800490e:	f003 fd8b 	bl	8008428 <__ssprint_r>
 8004912:	2800      	cmp	r0, #0
 8004914:	f43f aa53 	beq.w	8003dbe <_svfprintf_r+0x796>
 8004918:	2f00      	cmp	r7, #0
 800491a:	f43f a87e 	beq.w	8003a1a <_svfprintf_r+0x3f2>
 800491e:	4639      	mov	r1, r7
 8004920:	4648      	mov	r0, r9
 8004922:	f002 faf5 	bl	8006f10 <_free_r>
 8004926:	f7ff b878 	b.w	8003a1a <_svfprintf_r+0x3f2>
 800492a:	3210      	adds	r2, #16
 800492c:	2b07      	cmp	r3, #7
 800492e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8004932:	f8c4 8004 	str.w	r8, [r4, #4]
 8004936:	dc02      	bgt.n	800493e <_svfprintf_r+0x1316>
 8004938:	3408      	adds	r4, #8
 800493a:	3d10      	subs	r5, #16
 800493c:	e7d6      	b.n	80048ec <_svfprintf_r+0x12c4>
 800493e:	4659      	mov	r1, fp
 8004940:	4648      	mov	r0, r9
 8004942:	aa26      	add	r2, sp, #152	; 0x98
 8004944:	f003 fd70 	bl	8008428 <__ssprint_r>
 8004948:	2800      	cmp	r0, #0
 800494a:	d1e5      	bne.n	8004918 <_svfprintf_r+0x12f0>
 800494c:	ac29      	add	r4, sp, #164	; 0xa4
 800494e:	e7f4      	b.n	800493a <_svfprintf_r+0x1312>
 8004950:	4639      	mov	r1, r7
 8004952:	4648      	mov	r0, r9
 8004954:	f002 fadc 	bl	8006f10 <_free_r>
 8004958:	f7ff ba48 	b.w	8003dec <_svfprintf_r+0x7c4>
 800495c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800495e:	2b00      	cmp	r3, #0
 8004960:	f43f a85b 	beq.w	8003a1a <_svfprintf_r+0x3f2>
 8004964:	4659      	mov	r1, fp
 8004966:	4648      	mov	r0, r9
 8004968:	aa26      	add	r2, sp, #152	; 0x98
 800496a:	f003 fd5d 	bl	8008428 <__ssprint_r>
 800496e:	f7ff b854 	b.w	8003a1a <_svfprintf_r+0x3f2>
 8004972:	ea56 0207 	orrs.w	r2, r6, r7
 8004976:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800497a:	f43f ab54 	beq.w	8004026 <_svfprintf_r+0x9fe>
 800497e:	2b01      	cmp	r3, #1
 8004980:	f43f abea 	beq.w	8004158 <_svfprintf_r+0xb30>
 8004984:	2b02      	cmp	r3, #2
 8004986:	ab52      	add	r3, sp, #328	; 0x148
 8004988:	9307      	str	r3, [sp, #28]
 800498a:	f43f ac3d 	beq.w	8004208 <_svfprintf_r+0xbe0>
 800498e:	9907      	ldr	r1, [sp, #28]
 8004990:	f006 0307 	and.w	r3, r6, #7
 8004994:	460a      	mov	r2, r1
 8004996:	3330      	adds	r3, #48	; 0x30
 8004998:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800499c:	9207      	str	r2, [sp, #28]
 800499e:	08f2      	lsrs	r2, r6, #3
 80049a0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80049a4:	08f8      	lsrs	r0, r7, #3
 80049a6:	4616      	mov	r6, r2
 80049a8:	4607      	mov	r7, r0
 80049aa:	ea56 0207 	orrs.w	r2, r6, r7
 80049ae:	d1ee      	bne.n	800498e <_svfprintf_r+0x1366>
 80049b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049b2:	07d2      	lsls	r2, r2, #31
 80049b4:	f57f ac16 	bpl.w	80041e4 <_svfprintf_r+0xbbc>
 80049b8:	2b30      	cmp	r3, #48	; 0x30
 80049ba:	f43f ac13 	beq.w	80041e4 <_svfprintf_r+0xbbc>
 80049be:	2330      	movs	r3, #48	; 0x30
 80049c0:	9a07      	ldr	r2, [sp, #28]
 80049c2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80049c6:	1e8b      	subs	r3, r1, #2
 80049c8:	9307      	str	r3, [sp, #28]
 80049ca:	e40b      	b.n	80041e4 <_svfprintf_r+0xbbc>
 80049cc:	080097e0 	.word	0x080097e0
 80049d0:	080097d0 	.word	0x080097d0

080049d4 <_vfprintf_r>:
 80049d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d8:	b0d3      	sub	sp, #332	; 0x14c
 80049da:	468a      	mov	sl, r1
 80049dc:	4691      	mov	r9, r2
 80049de:	461c      	mov	r4, r3
 80049e0:	461e      	mov	r6, r3
 80049e2:	4683      	mov	fp, r0
 80049e4:	f002 fcbe 	bl	8007364 <_localeconv_r>
 80049e8:	6803      	ldr	r3, [r0, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	9318      	str	r3, [sp, #96]	; 0x60
 80049ee:	f7fb fbaf 	bl	8000150 <strlen>
 80049f2:	9012      	str	r0, [sp, #72]	; 0x48
 80049f4:	f1bb 0f00 	cmp.w	fp, #0
 80049f8:	d005      	beq.n	8004a06 <_vfprintf_r+0x32>
 80049fa:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 80049fe:	b913      	cbnz	r3, 8004a06 <_vfprintf_r+0x32>
 8004a00:	4658      	mov	r0, fp
 8004a02:	f002 f9f5 	bl	8006df0 <__sinit>
 8004a06:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 8004a0a:	07da      	lsls	r2, r3, #31
 8004a0c:	d407      	bmi.n	8004a1e <_vfprintf_r+0x4a>
 8004a0e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004a12:	059b      	lsls	r3, r3, #22
 8004a14:	d403      	bmi.n	8004a1e <_vfprintf_r+0x4a>
 8004a16:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 8004a1a:	f002 fca9 	bl	8007370 <__retarget_lock_acquire_recursive>
 8004a1e:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8004a22:	049f      	lsls	r7, r3, #18
 8004a24:	d409      	bmi.n	8004a3a <_vfprintf_r+0x66>
 8004a26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a2a:	f8aa 300c 	strh.w	r3, [sl, #12]
 8004a2e:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 8004a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a36:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 8004a3a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004a3e:	071d      	lsls	r5, r3, #28
 8004a40:	d502      	bpl.n	8004a48 <_vfprintf_r+0x74>
 8004a42:	f8da 3010 	ldr.w	r3, [sl, #16]
 8004a46:	b9c3      	cbnz	r3, 8004a7a <_vfprintf_r+0xa6>
 8004a48:	4651      	mov	r1, sl
 8004a4a:	4658      	mov	r0, fp
 8004a4c:	f001 fa22 	bl	8005e94 <__swsetup_r>
 8004a50:	b198      	cbz	r0, 8004a7a <_vfprintf_r+0xa6>
 8004a52:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 8004a56:	07dc      	lsls	r4, r3, #31
 8004a58:	d506      	bpl.n	8004a68 <_vfprintf_r+0x94>
 8004a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a60:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004a62:	b053      	add	sp, #332	; 0x14c
 8004a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a68:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004a6c:	0598      	lsls	r0, r3, #22
 8004a6e:	d4f4      	bmi.n	8004a5a <_vfprintf_r+0x86>
 8004a70:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 8004a74:	f002 fc7d 	bl	8007372 <__retarget_lock_release_recursive>
 8004a78:	e7ef      	b.n	8004a5a <_vfprintf_r+0x86>
 8004a7a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004a7e:	f003 021a 	and.w	r2, r3, #26
 8004a82:	2a0a      	cmp	r2, #10
 8004a84:	d115      	bne.n	8004ab2 <_vfprintf_r+0xde>
 8004a86:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 8004a8a:	2a00      	cmp	r2, #0
 8004a8c:	db11      	blt.n	8004ab2 <_vfprintf_r+0xde>
 8004a8e:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
 8004a92:	07d1      	lsls	r1, r2, #31
 8004a94:	d405      	bmi.n	8004aa2 <_vfprintf_r+0xce>
 8004a96:	059a      	lsls	r2, r3, #22
 8004a98:	d403      	bmi.n	8004aa2 <_vfprintf_r+0xce>
 8004a9a:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 8004a9e:	f002 fc68 	bl	8007372 <__retarget_lock_release_recursive>
 8004aa2:	4623      	mov	r3, r4
 8004aa4:	464a      	mov	r2, r9
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	4658      	mov	r0, fp
 8004aaa:	f001 f9b3 	bl	8005e14 <__sbprintf>
 8004aae:	9013      	str	r0, [sp, #76]	; 0x4c
 8004ab0:	e7d6      	b.n	8004a60 <_vfprintf_r+0x8c>
 8004ab2:	2500      	movs	r5, #0
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 8004abc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004ac0:	e9cd 551a 	strd	r5, r5, [sp, #104]	; 0x68
 8004ac4:	ac29      	add	r4, sp, #164	; 0xa4
 8004ac6:	9426      	str	r4, [sp, #152]	; 0x98
 8004ac8:	9508      	str	r5, [sp, #32]
 8004aca:	950e      	str	r5, [sp, #56]	; 0x38
 8004acc:	9516      	str	r5, [sp, #88]	; 0x58
 8004ace:	9519      	str	r5, [sp, #100]	; 0x64
 8004ad0:	9513      	str	r5, [sp, #76]	; 0x4c
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	461d      	mov	r5, r3
 8004ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ada:	b10a      	cbz	r2, 8004ae0 <_vfprintf_r+0x10c>
 8004adc:	2a25      	cmp	r2, #37	; 0x25
 8004ade:	d1f9      	bne.n	8004ad4 <_vfprintf_r+0x100>
 8004ae0:	ebb5 0709 	subs.w	r7, r5, r9
 8004ae4:	d00d      	beq.n	8004b02 <_vfprintf_r+0x12e>
 8004ae6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004ae8:	e9c4 9700 	strd	r9, r7, [r4]
 8004aec:	443b      	add	r3, r7
 8004aee:	9328      	str	r3, [sp, #160]	; 0xa0
 8004af0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004af2:	3301      	adds	r3, #1
 8004af4:	2b07      	cmp	r3, #7
 8004af6:	9327      	str	r3, [sp, #156]	; 0x9c
 8004af8:	dc7a      	bgt.n	8004bf0 <_vfprintf_r+0x21c>
 8004afa:	3408      	adds	r4, #8
 8004afc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004afe:	443b      	add	r3, r7
 8004b00:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b02:	782b      	ldrb	r3, [r5, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f001 813d 	beq.w	8005d84 <_vfprintf_r+0x13b0>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b10:	4698      	mov	r8, r3
 8004b12:	270a      	movs	r7, #10
 8004b14:	212b      	movs	r1, #43	; 0x2b
 8004b16:	3501      	adds	r5, #1
 8004b18:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8004b1c:	9207      	str	r2, [sp, #28]
 8004b1e:	9314      	str	r3, [sp, #80]	; 0x50
 8004b20:	462a      	mov	r2, r5
 8004b22:	f812 3b01 	ldrb.w	r3, [r2], #1
 8004b26:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b28:	4613      	mov	r3, r2
 8004b2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b2e:	3b20      	subs	r3, #32
 8004b30:	2b5a      	cmp	r3, #90	; 0x5a
 8004b32:	f200 85a6 	bhi.w	8005682 <_vfprintf_r+0xcae>
 8004b36:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b3a:	007e      	.short	0x007e
 8004b3c:	05a405a4 	.word	0x05a405a4
 8004b40:	05a40086 	.word	0x05a40086
 8004b44:	05a405a4 	.word	0x05a405a4
 8004b48:	05a40065 	.word	0x05a40065
 8004b4c:	008905a4 	.word	0x008905a4
 8004b50:	05a40093 	.word	0x05a40093
 8004b54:	00960090 	.word	0x00960090
 8004b58:	00b205a4 	.word	0x00b205a4
 8004b5c:	00b500b5 	.word	0x00b500b5
 8004b60:	00b500b5 	.word	0x00b500b5
 8004b64:	00b500b5 	.word	0x00b500b5
 8004b68:	00b500b5 	.word	0x00b500b5
 8004b6c:	05a400b5 	.word	0x05a400b5
 8004b70:	05a405a4 	.word	0x05a405a4
 8004b74:	05a405a4 	.word	0x05a405a4
 8004b78:	05a405a4 	.word	0x05a405a4
 8004b7c:	05a4011f 	.word	0x05a4011f
 8004b80:	00f500e2 	.word	0x00f500e2
 8004b84:	011f011f 	.word	0x011f011f
 8004b88:	05a4011f 	.word	0x05a4011f
 8004b8c:	05a405a4 	.word	0x05a405a4
 8004b90:	00c505a4 	.word	0x00c505a4
 8004b94:	05a405a4 	.word	0x05a405a4
 8004b98:	05a40484 	.word	0x05a40484
 8004b9c:	05a405a4 	.word	0x05a405a4
 8004ba0:	05a404cb 	.word	0x05a404cb
 8004ba4:	05a404ec 	.word	0x05a404ec
 8004ba8:	050b05a4 	.word	0x050b05a4
 8004bac:	05a405a4 	.word	0x05a405a4
 8004bb0:	05a405a4 	.word	0x05a405a4
 8004bb4:	05a405a4 	.word	0x05a405a4
 8004bb8:	05a405a4 	.word	0x05a405a4
 8004bbc:	05a4011f 	.word	0x05a4011f
 8004bc0:	00f700e2 	.word	0x00f700e2
 8004bc4:	011f011f 	.word	0x011f011f
 8004bc8:	00c8011f 	.word	0x00c8011f
 8004bcc:	00dc00f7 	.word	0x00dc00f7
 8004bd0:	00d505a4 	.word	0x00d505a4
 8004bd4:	046105a4 	.word	0x046105a4
 8004bd8:	04ba0486 	.word	0x04ba0486
 8004bdc:	05a400dc 	.word	0x05a400dc
 8004be0:	007c04cb 	.word	0x007c04cb
 8004be4:	05a404ee 	.word	0x05a404ee
 8004be8:	052805a4 	.word	0x052805a4
 8004bec:	007c05a4 	.word	0x007c05a4
 8004bf0:	4651      	mov	r1, sl
 8004bf2:	4658      	mov	r0, fp
 8004bf4:	aa26      	add	r2, sp, #152	; 0x98
 8004bf6:	f003 fc9f 	bl	8008538 <__sprint_r>
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	f040 8127 	bne.w	8004e4e <_vfprintf_r+0x47a>
 8004c00:	ac29      	add	r4, sp, #164	; 0xa4
 8004c02:	e77b      	b.n	8004afc <_vfprintf_r+0x128>
 8004c04:	4658      	mov	r0, fp
 8004c06:	f002 fbad 	bl	8007364 <_localeconv_r>
 8004c0a:	6843      	ldr	r3, [r0, #4]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	9319      	str	r3, [sp, #100]	; 0x64
 8004c10:	f7fb fa9e 	bl	8000150 <strlen>
 8004c14:	9016      	str	r0, [sp, #88]	; 0x58
 8004c16:	4658      	mov	r0, fp
 8004c18:	f002 fba4 	bl	8007364 <_localeconv_r>
 8004c1c:	6883      	ldr	r3, [r0, #8]
 8004c1e:	212b      	movs	r1, #43	; 0x2b
 8004c20:	930e      	str	r3, [sp, #56]	; 0x38
 8004c22:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004c24:	b12b      	cbz	r3, 8004c32 <_vfprintf_r+0x25e>
 8004c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c28:	b11b      	cbz	r3, 8004c32 <_vfprintf_r+0x25e>
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	b10b      	cbz	r3, 8004c32 <_vfprintf_r+0x25e>
 8004c2e:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 8004c32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004c34:	e774      	b.n	8004b20 <_vfprintf_r+0x14c>
 8004c36:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f9      	bne.n	8004c32 <_vfprintf_r+0x25e>
 8004c3e:	2320      	movs	r3, #32
 8004c40:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8004c44:	e7f5      	b.n	8004c32 <_vfprintf_r+0x25e>
 8004c46:	f048 0801 	orr.w	r8, r8, #1
 8004c4a:	e7f2      	b.n	8004c32 <_vfprintf_r+0x25e>
 8004c4c:	f856 3b04 	ldr.w	r3, [r6], #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	9314      	str	r3, [sp, #80]	; 0x50
 8004c54:	daed      	bge.n	8004c32 <_vfprintf_r+0x25e>
 8004c56:	425b      	negs	r3, r3
 8004c58:	9314      	str	r3, [sp, #80]	; 0x50
 8004c5a:	f048 0804 	orr.w	r8, r8, #4
 8004c5e:	e7e8      	b.n	8004c32 <_vfprintf_r+0x25e>
 8004c60:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 8004c64:	e7e5      	b.n	8004c32 <_vfprintf_r+0x25e>
 8004c66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c6c:	2a2a      	cmp	r2, #42	; 0x2a
 8004c6e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c70:	d112      	bne.n	8004c98 <_vfprintf_r+0x2c4>
 8004c72:	f856 0b04 	ldr.w	r0, [r6], #4
 8004c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c78:	ea40 72e0 	orr.w	r2, r0, r0, asr #31
 8004c7c:	9207      	str	r2, [sp, #28]
 8004c7e:	e7d8      	b.n	8004c32 <_vfprintf_r+0x25e>
 8004c80:	9807      	ldr	r0, [sp, #28]
 8004c82:	fb07 2200 	mla	r2, r7, r0, r2
 8004c86:	9207      	str	r2, [sp, #28]
 8004c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c8c:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c90:	3a30      	subs	r2, #48	; 0x30
 8004c92:	2a09      	cmp	r2, #9
 8004c94:	d9f4      	bls.n	8004c80 <_vfprintf_r+0x2ac>
 8004c96:	e748      	b.n	8004b2a <_vfprintf_r+0x156>
 8004c98:	2200      	movs	r2, #0
 8004c9a:	9207      	str	r2, [sp, #28]
 8004c9c:	e7f7      	b.n	8004c8e <_vfprintf_r+0x2ba>
 8004c9e:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8004ca2:	e7c6      	b.n	8004c32 <_vfprintf_r+0x25e>
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ca8:	9214      	str	r2, [sp, #80]	; 0x50
 8004caa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cac:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004cae:	3a30      	subs	r2, #48	; 0x30
 8004cb0:	fb07 2200 	mla	r2, r7, r0, r2
 8004cb4:	9214      	str	r2, [sp, #80]	; 0x50
 8004cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cba:	920b      	str	r2, [sp, #44]	; 0x2c
 8004cbc:	3a30      	subs	r2, #48	; 0x30
 8004cbe:	2a09      	cmp	r2, #9
 8004cc0:	d9f3      	bls.n	8004caa <_vfprintf_r+0x2d6>
 8004cc2:	e732      	b.n	8004b2a <_vfprintf_r+0x156>
 8004cc4:	f048 0808 	orr.w	r8, r8, #8
 8004cc8:	e7b3      	b.n	8004c32 <_vfprintf_r+0x25e>
 8004cca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b68      	cmp	r3, #104	; 0x68
 8004cd0:	bf01      	itttt	eq
 8004cd2:	9b0f      	ldreq	r3, [sp, #60]	; 0x3c
 8004cd4:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 8004cd8:	3301      	addeq	r3, #1
 8004cda:	930f      	streq	r3, [sp, #60]	; 0x3c
 8004cdc:	bf18      	it	ne
 8004cde:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8004ce2:	e7a6      	b.n	8004c32 <_vfprintf_r+0x25e>
 8004ce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b6c      	cmp	r3, #108	; 0x6c
 8004cea:	d105      	bne.n	8004cf8 <_vfprintf_r+0x324>
 8004cec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cee:	3301      	adds	r3, #1
 8004cf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cf2:	f048 0820 	orr.w	r8, r8, #32
 8004cf6:	e79c      	b.n	8004c32 <_vfprintf_r+0x25e>
 8004cf8:	f048 0810 	orr.w	r8, r8, #16
 8004cfc:	e799      	b.n	8004c32 <_vfprintf_r+0x25e>
 8004cfe:	4632      	mov	r2, r6
 8004d00:	2000      	movs	r0, #0
 8004d02:	f852 3b04 	ldr.w	r3, [r2], #4
 8004d06:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8004d0a:	920a      	str	r2, [sp, #40]	; 0x28
 8004d0c:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8004d10:	2301      	movs	r3, #1
 8004d12:	4607      	mov	r7, r0
 8004d14:	4606      	mov	r6, r0
 8004d16:	4605      	mov	r5, r0
 8004d18:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8004d1c:	9307      	str	r3, [sp, #28]
 8004d1e:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 8004d22:	e1b4      	b.n	800508e <_vfprintf_r+0x6ba>
 8004d24:	f048 0810 	orr.w	r8, r8, #16
 8004d28:	f018 0f20 	tst.w	r8, #32
 8004d2c:	d011      	beq.n	8004d52 <_vfprintf_r+0x37e>
 8004d2e:	3607      	adds	r6, #7
 8004d30:	f026 0307 	bic.w	r3, r6, #7
 8004d34:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8004d38:	930a      	str	r3, [sp, #40]	; 0x28
 8004d3a:	2e00      	cmp	r6, #0
 8004d3c:	f177 0300 	sbcs.w	r3, r7, #0
 8004d40:	da05      	bge.n	8004d4e <_vfprintf_r+0x37a>
 8004d42:	232d      	movs	r3, #45	; 0x2d
 8004d44:	4276      	negs	r6, r6
 8004d46:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004d4a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e388      	b.n	8005464 <_vfprintf_r+0xa90>
 8004d52:	1d33      	adds	r3, r6, #4
 8004d54:	f018 0f10 	tst.w	r8, #16
 8004d58:	930a      	str	r3, [sp, #40]	; 0x28
 8004d5a:	d002      	beq.n	8004d62 <_vfprintf_r+0x38e>
 8004d5c:	6836      	ldr	r6, [r6, #0]
 8004d5e:	17f7      	asrs	r7, r6, #31
 8004d60:	e7eb      	b.n	8004d3a <_vfprintf_r+0x366>
 8004d62:	f018 0f40 	tst.w	r8, #64	; 0x40
 8004d66:	6836      	ldr	r6, [r6, #0]
 8004d68:	d001      	beq.n	8004d6e <_vfprintf_r+0x39a>
 8004d6a:	b236      	sxth	r6, r6
 8004d6c:	e7f7      	b.n	8004d5e <_vfprintf_r+0x38a>
 8004d6e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8004d72:	bf18      	it	ne
 8004d74:	b276      	sxtbne	r6, r6
 8004d76:	e7f2      	b.n	8004d5e <_vfprintf_r+0x38a>
 8004d78:	3607      	adds	r6, #7
 8004d7a:	f026 0307 	bic.w	r3, r6, #7
 8004d7e:	4619      	mov	r1, r3
 8004d80:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004d84:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004d88:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 8004d8c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004d90:	910a      	str	r1, [sp, #40]	; 0x28
 8004d92:	f04f 32ff 	mov.w	r2, #4294967295
 8004d96:	4630      	mov	r0, r6
 8004d98:	4629      	mov	r1, r5
 8004d9a:	4b3c      	ldr	r3, [pc, #240]	; (8004e8c <_vfprintf_r+0x4b8>)
 8004d9c:	f7fb fe36 	bl	8000a0c <__aeabi_dcmpun>
 8004da0:	bb00      	cbnz	r0, 8004de4 <_vfprintf_r+0x410>
 8004da2:	f04f 32ff 	mov.w	r2, #4294967295
 8004da6:	4630      	mov	r0, r6
 8004da8:	4629      	mov	r1, r5
 8004daa:	4b38      	ldr	r3, [pc, #224]	; (8004e8c <_vfprintf_r+0x4b8>)
 8004dac:	f7fb fe10 	bl	80009d0 <__aeabi_dcmple>
 8004db0:	b9c0      	cbnz	r0, 8004de4 <_vfprintf_r+0x410>
 8004db2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004db6:	2200      	movs	r2, #0
 8004db8:	2300      	movs	r3, #0
 8004dba:	f7fb fdff 	bl	80009bc <__aeabi_dcmplt>
 8004dbe:	b110      	cbz	r0, 8004dc6 <_vfprintf_r+0x3f2>
 8004dc0:	232d      	movs	r3, #45	; 0x2d
 8004dc2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8004dc6:	4a32      	ldr	r2, [pc, #200]	; (8004e90 <_vfprintf_r+0x4bc>)
 8004dc8:	4832      	ldr	r0, [pc, #200]	; (8004e94 <_vfprintf_r+0x4c0>)
 8004dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dcc:	2700      	movs	r7, #0
 8004dce:	2b47      	cmp	r3, #71	; 0x47
 8004dd0:	bfd4      	ite	le
 8004dd2:	4691      	movle	r9, r2
 8004dd4:	4681      	movgt	r9, r0
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8004ddc:	9307      	str	r3, [sp, #28]
 8004dde:	463e      	mov	r6, r7
 8004de0:	f001 b80e 	b.w	8005e00 <_vfprintf_r+0x142c>
 8004de4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004de8:	4610      	mov	r0, r2
 8004dea:	4619      	mov	r1, r3
 8004dec:	f7fb fe0e 	bl	8000a0c <__aeabi_dcmpun>
 8004df0:	4607      	mov	r7, r0
 8004df2:	b148      	cbz	r0, 8004e08 <_vfprintf_r+0x434>
 8004df4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004df6:	4a28      	ldr	r2, [pc, #160]	; (8004e98 <_vfprintf_r+0x4c4>)
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bfb8      	it	lt
 8004dfc:	232d      	movlt	r3, #45	; 0x2d
 8004dfe:	4827      	ldr	r0, [pc, #156]	; (8004e9c <_vfprintf_r+0x4c8>)
 8004e00:	bfb8      	it	lt
 8004e02:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8004e06:	e7e0      	b.n	8004dca <_vfprintf_r+0x3f6>
 8004e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e0a:	f023 0320 	bic.w	r3, r3, #32
 8004e0e:	2b41      	cmp	r3, #65	; 0x41
 8004e10:	930c      	str	r3, [sp, #48]	; 0x30
 8004e12:	d12e      	bne.n	8004e72 <_vfprintf_r+0x49e>
 8004e14:	2330      	movs	r3, #48	; 0x30
 8004e16:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8004e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e1c:	f048 0802 	orr.w	r8, r8, #2
 8004e20:	2b61      	cmp	r3, #97	; 0x61
 8004e22:	bf0c      	ite	eq
 8004e24:	2378      	moveq	r3, #120	; 0x78
 8004e26:	2358      	movne	r3, #88	; 0x58
 8004e28:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8004e2c:	9b07      	ldr	r3, [sp, #28]
 8004e2e:	2b63      	cmp	r3, #99	; 0x63
 8004e30:	dd36      	ble.n	8004ea0 <_vfprintf_r+0x4cc>
 8004e32:	4658      	mov	r0, fp
 8004e34:	1c59      	adds	r1, r3, #1
 8004e36:	f002 fb09 	bl	800744c <_malloc_r>
 8004e3a:	4681      	mov	r9, r0
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	f040 8201 	bne.w	8005244 <_vfprintf_r+0x870>
 8004e42:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e4a:	f8aa 300c 	strh.w	r3, [sl, #12]
 8004e4e:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 8004e52:	07d9      	lsls	r1, r3, #31
 8004e54:	d407      	bmi.n	8004e66 <_vfprintf_r+0x492>
 8004e56:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004e5a:	059a      	lsls	r2, r3, #22
 8004e5c:	d403      	bmi.n	8004e66 <_vfprintf_r+0x492>
 8004e5e:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 8004e62:	f002 fa86 	bl	8007372 <__retarget_lock_release_recursive>
 8004e66:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004e6a:	065b      	lsls	r3, r3, #25
 8004e6c:	f57f adf8 	bpl.w	8004a60 <_vfprintf_r+0x8c>
 8004e70:	e5f3      	b.n	8004a5a <_vfprintf_r+0x86>
 8004e72:	9b07      	ldr	r3, [sp, #28]
 8004e74:	3301      	adds	r3, #1
 8004e76:	f000 81e7 	beq.w	8005248 <_vfprintf_r+0x874>
 8004e7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e7c:	2b47      	cmp	r3, #71	; 0x47
 8004e7e:	d111      	bne.n	8004ea4 <_vfprintf_r+0x4d0>
 8004e80:	9b07      	ldr	r3, [sp, #28]
 8004e82:	b97b      	cbnz	r3, 8004ea4 <_vfprintf_r+0x4d0>
 8004e84:	461f      	mov	r7, r3
 8004e86:	2301      	movs	r3, #1
 8004e88:	9307      	str	r3, [sp, #28]
 8004e8a:	e00b      	b.n	8004ea4 <_vfprintf_r+0x4d0>
 8004e8c:	7fefffff 	.word	0x7fefffff
 8004e90:	0800979c 	.word	0x0800979c
 8004e94:	080097a0 	.word	0x080097a0
 8004e98:	080097a4 	.word	0x080097a4
 8004e9c:	080097a8 	.word	0x080097a8
 8004ea0:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 8004ea4:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 8004ea8:	9315      	str	r3, [sp, #84]	; 0x54
 8004eaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004eac:	1e1d      	subs	r5, r3, #0
 8004eae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004eb0:	9308      	str	r3, [sp, #32]
 8004eb2:	bfb7      	itett	lt
 8004eb4:	462b      	movlt	r3, r5
 8004eb6:	2300      	movge	r3, #0
 8004eb8:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 8004ebc:	232d      	movlt	r3, #45	; 0x2d
 8004ebe:	931c      	str	r3, [sp, #112]	; 0x70
 8004ec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ec2:	2b41      	cmp	r3, #65	; 0x41
 8004ec4:	f040 81d8 	bne.w	8005278 <_vfprintf_r+0x8a4>
 8004ec8:	aa20      	add	r2, sp, #128	; 0x80
 8004eca:	4629      	mov	r1, r5
 8004ecc:	9808      	ldr	r0, [sp, #32]
 8004ece:	f003 fa11 	bl	80082f4 <frexp>
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004ed8:	f7fb fafe 	bl	80004d8 <__aeabi_dmul>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f7fb fd5e 	bl	80009a8 <__aeabi_dcmpeq>
 8004eec:	b108      	cbz	r0, 8004ef2 <_vfprintf_r+0x51e>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	9320      	str	r3, [sp, #128]	; 0x80
 8004ef2:	4bb2      	ldr	r3, [pc, #712]	; (80051bc <_vfprintf_r+0x7e8>)
 8004ef4:	4eb2      	ldr	r6, [pc, #712]	; (80051c0 <_vfprintf_r+0x7ec>)
 8004ef6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ef8:	464d      	mov	r5, r9
 8004efa:	2a61      	cmp	r2, #97	; 0x61
 8004efc:	bf18      	it	ne
 8004efe:	461e      	movne	r6, r3
 8004f00:	9b07      	ldr	r3, [sp, #28]
 8004f02:	9617      	str	r6, [sp, #92]	; 0x5c
 8004f04:	1e5e      	subs	r6, r3, #1
 8004f06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	4bad      	ldr	r3, [pc, #692]	; (80051c4 <_vfprintf_r+0x7f0>)
 8004f0e:	f7fb fae3 	bl	80004d8 <__aeabi_dmul>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004f1a:	f7fb fd8d 	bl	8000a38 <__aeabi_d2iz>
 8004f1e:	901d      	str	r0, [sp, #116]	; 0x74
 8004f20:	f7fb fa70 	bl	8000404 <__aeabi_i2d>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f2c:	f7fb f91c 	bl	8000168 <__aeabi_dsub>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004f38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f3a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004f3c:	960d      	str	r6, [sp, #52]	; 0x34
 8004f3e:	5c9b      	ldrb	r3, [r3, r2]
 8004f40:	f805 3b01 	strb.w	r3, [r5], #1
 8004f44:	1c73      	adds	r3, r6, #1
 8004f46:	d006      	beq.n	8004f56 <_vfprintf_r+0x582>
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	3e01      	subs	r6, #1
 8004f4e:	f7fb fd2b 	bl	80009a8 <__aeabi_dcmpeq>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d0d7      	beq.n	8004f06 <_vfprintf_r+0x532>
 8004f56:	2200      	movs	r2, #0
 8004f58:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f5c:	4b9a      	ldr	r3, [pc, #616]	; (80051c8 <_vfprintf_r+0x7f4>)
 8004f5e:	f7fb fd4b 	bl	80009f8 <__aeabi_dcmpgt>
 8004f62:	b960      	cbnz	r0, 8004f7e <_vfprintf_r+0x5aa>
 8004f64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	4b97      	ldr	r3, [pc, #604]	; (80051c8 <_vfprintf_r+0x7f4>)
 8004f6c:	f7fb fd1c 	bl	80009a8 <__aeabi_dcmpeq>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	f000 817c 	beq.w	800526e <_vfprintf_r+0x89a>
 8004f76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f78:	07da      	lsls	r2, r3, #31
 8004f7a:	f140 8178 	bpl.w	800526e <_vfprintf_r+0x89a>
 8004f7e:	2030      	movs	r0, #48	; 0x30
 8004f80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f82:	9524      	str	r5, [sp, #144]	; 0x90
 8004f84:	7bd9      	ldrb	r1, [r3, #15]
 8004f86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f88:	1e53      	subs	r3, r2, #1
 8004f8a:	9324      	str	r3, [sp, #144]	; 0x90
 8004f8c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8004f90:	428b      	cmp	r3, r1
 8004f92:	f000 815b 	beq.w	800524c <_vfprintf_r+0x878>
 8004f96:	2b39      	cmp	r3, #57	; 0x39
 8004f98:	bf0b      	itete	eq
 8004f9a:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8004f9c:	3301      	addne	r3, #1
 8004f9e:	7a9b      	ldrbeq	r3, [r3, #10]
 8004fa0:	b2db      	uxtbne	r3, r3
 8004fa2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004fa6:	eba5 0309 	sub.w	r3, r5, r9
 8004faa:	9308      	str	r3, [sp, #32]
 8004fac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fae:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004fb0:	2b47      	cmp	r3, #71	; 0x47
 8004fb2:	f040 81ae 	bne.w	8005312 <_vfprintf_r+0x93e>
 8004fb6:	1ceb      	adds	r3, r5, #3
 8004fb8:	db03      	blt.n	8004fc2 <_vfprintf_r+0x5ee>
 8004fba:	9b07      	ldr	r3, [sp, #28]
 8004fbc:	429d      	cmp	r5, r3
 8004fbe:	f340 81d3 	ble.w	8005368 <_vfprintf_r+0x994>
 8004fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fc4:	3b02      	subs	r3, #2
 8004fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fca:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8004fce:	f021 0120 	bic.w	r1, r1, #32
 8004fd2:	2941      	cmp	r1, #65	; 0x41
 8004fd4:	bf08      	it	eq
 8004fd6:	320f      	addeq	r2, #15
 8004fd8:	f105 33ff 	add.w	r3, r5, #4294967295
 8004fdc:	bf06      	itte	eq
 8004fde:	b2d2      	uxtbeq	r2, r2
 8004fe0:	2101      	moveq	r1, #1
 8004fe2:	2100      	movne	r1, #0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8004fea:	bfb4      	ite	lt
 8004fec:	222d      	movlt	r2, #45	; 0x2d
 8004fee:	222b      	movge	r2, #43	; 0x2b
 8004ff0:	9320      	str	r3, [sp, #128]	; 0x80
 8004ff2:	bfb8      	it	lt
 8004ff4:	f1c5 0301 	rsblt	r3, r5, #1
 8004ff8:	2b09      	cmp	r3, #9
 8004ffa:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8004ffe:	f340 81a1 	ble.w	8005344 <_vfprintf_r+0x970>
 8005002:	260a      	movs	r6, #10
 8005004:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8005008:	fb93 f5f6 	sdiv	r5, r3, r6
 800500c:	4611      	mov	r1, r2
 800500e:	fb06 3015 	mls	r0, r6, r5, r3
 8005012:	3030      	adds	r0, #48	; 0x30
 8005014:	f801 0c01 	strb.w	r0, [r1, #-1]
 8005018:	4618      	mov	r0, r3
 800501a:	2863      	cmp	r0, #99	; 0x63
 800501c:	462b      	mov	r3, r5
 800501e:	f102 32ff 	add.w	r2, r2, #4294967295
 8005022:	dcf1      	bgt.n	8005008 <_vfprintf_r+0x634>
 8005024:	3330      	adds	r3, #48	; 0x30
 8005026:	1e88      	subs	r0, r1, #2
 8005028:	f802 3c01 	strb.w	r3, [r2, #-1]
 800502c:	4603      	mov	r3, r0
 800502e:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8005032:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 8005036:	42ab      	cmp	r3, r5
 8005038:	f0c0 817f 	bcc.w	800533a <_vfprintf_r+0x966>
 800503c:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 8005040:	1a52      	subs	r2, r2, r1
 8005042:	42a8      	cmp	r0, r5
 8005044:	bf88      	it	hi
 8005046:	2200      	movhi	r2, #0
 8005048:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 800504c:	441a      	add	r2, r3
 800504e:	ab22      	add	r3, sp, #136	; 0x88
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	9a08      	ldr	r2, [sp, #32]
 8005054:	931a      	str	r3, [sp, #104]	; 0x68
 8005056:	2a01      	cmp	r2, #1
 8005058:	4413      	add	r3, r2
 800505a:	9307      	str	r3, [sp, #28]
 800505c:	dc02      	bgt.n	8005064 <_vfprintf_r+0x690>
 800505e:	f018 0f01 	tst.w	r8, #1
 8005062:	d003      	beq.n	800506c <_vfprintf_r+0x698>
 8005064:	9b07      	ldr	r3, [sp, #28]
 8005066:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005068:	4413      	add	r3, r2
 800506a:	9307      	str	r3, [sp, #28]
 800506c:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8005070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005074:	9315      	str	r3, [sp, #84]	; 0x54
 8005076:	2300      	movs	r3, #0
 8005078:	461d      	mov	r5, r3
 800507a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800507e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005080:	b113      	cbz	r3, 8005088 <_vfprintf_r+0x6b4>
 8005082:	232d      	movs	r3, #45	; 0x2d
 8005084:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8005088:	2600      	movs	r6, #0
 800508a:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800508e:	9b07      	ldr	r3, [sp, #28]
 8005090:	42b3      	cmp	r3, r6
 8005092:	bfb8      	it	lt
 8005094:	4633      	movlt	r3, r6
 8005096:	9315      	str	r3, [sp, #84]	; 0x54
 8005098:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800509c:	b113      	cbz	r3, 80050a4 <_vfprintf_r+0x6d0>
 800509e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050a0:	3301      	adds	r3, #1
 80050a2:	9315      	str	r3, [sp, #84]	; 0x54
 80050a4:	f018 0302 	ands.w	r3, r8, #2
 80050a8:	931c      	str	r3, [sp, #112]	; 0x70
 80050aa:	bf1e      	ittt	ne
 80050ac:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 80050ae:	3302      	addne	r3, #2
 80050b0:	9315      	strne	r3, [sp, #84]	; 0x54
 80050b2:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 80050b6:	931d      	str	r3, [sp, #116]	; 0x74
 80050b8:	d121      	bne.n	80050fe <_vfprintf_r+0x72a>
 80050ba:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	9317      	str	r3, [sp, #92]	; 0x5c
 80050c4:	dd1b      	ble.n	80050fe <_vfprintf_r+0x72a>
 80050c6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80050ca:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80050cc:	3301      	adds	r3, #1
 80050ce:	2810      	cmp	r0, #16
 80050d0:	483e      	ldr	r0, [pc, #248]	; (80051cc <_vfprintf_r+0x7f8>)
 80050d2:	f104 0108 	add.w	r1, r4, #8
 80050d6:	6020      	str	r0, [r4, #0]
 80050d8:	f300 82df 	bgt.w	800569a <_vfprintf_r+0xcc6>
 80050dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80050de:	2b07      	cmp	r3, #7
 80050e0:	4402      	add	r2, r0
 80050e2:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80050e6:	6060      	str	r0, [r4, #4]
 80050e8:	f340 82ec 	ble.w	80056c4 <_vfprintf_r+0xcf0>
 80050ec:	4651      	mov	r1, sl
 80050ee:	4658      	mov	r0, fp
 80050f0:	aa26      	add	r2, sp, #152	; 0x98
 80050f2:	f003 fa21 	bl	8008538 <__sprint_r>
 80050f6:	2800      	cmp	r0, #0
 80050f8:	f040 8622 	bne.w	8005d40 <_vfprintf_r+0x136c>
 80050fc:	ac29      	add	r4, sp, #164	; 0xa4
 80050fe:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8005102:	b173      	cbz	r3, 8005122 <_vfprintf_r+0x74e>
 8005104:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	2301      	movs	r3, #1
 800510c:	6063      	str	r3, [r4, #4]
 800510e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005110:	3301      	adds	r3, #1
 8005112:	9328      	str	r3, [sp, #160]	; 0xa0
 8005114:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005116:	3301      	adds	r3, #1
 8005118:	2b07      	cmp	r3, #7
 800511a:	9327      	str	r3, [sp, #156]	; 0x9c
 800511c:	f300 82d4 	bgt.w	80056c8 <_vfprintf_r+0xcf4>
 8005120:	3408      	adds	r4, #8
 8005122:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005124:	b16b      	cbz	r3, 8005142 <_vfprintf_r+0x76e>
 8005126:	ab1f      	add	r3, sp, #124	; 0x7c
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	2302      	movs	r3, #2
 800512c:	6063      	str	r3, [r4, #4]
 800512e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005130:	3302      	adds	r3, #2
 8005132:	9328      	str	r3, [sp, #160]	; 0xa0
 8005134:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005136:	3301      	adds	r3, #1
 8005138:	2b07      	cmp	r3, #7
 800513a:	9327      	str	r3, [sp, #156]	; 0x9c
 800513c:	f300 82ce 	bgt.w	80056dc <_vfprintf_r+0xd08>
 8005140:	3408      	adds	r4, #8
 8005142:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005144:	2b80      	cmp	r3, #128	; 0x80
 8005146:	d121      	bne.n	800518c <_vfprintf_r+0x7b8>
 8005148:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	2b00      	cmp	r3, #0
 8005150:	9317      	str	r3, [sp, #92]	; 0x5c
 8005152:	dd1b      	ble.n	800518c <_vfprintf_r+0x7b8>
 8005154:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005158:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800515a:	3301      	adds	r3, #1
 800515c:	2810      	cmp	r0, #16
 800515e:	481c      	ldr	r0, [pc, #112]	; (80051d0 <_vfprintf_r+0x7fc>)
 8005160:	f104 0108 	add.w	r1, r4, #8
 8005164:	6020      	str	r0, [r4, #0]
 8005166:	f300 82c3 	bgt.w	80056f0 <_vfprintf_r+0xd1c>
 800516a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800516c:	2b07      	cmp	r3, #7
 800516e:	4402      	add	r2, r0
 8005170:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005174:	6060      	str	r0, [r4, #4]
 8005176:	f340 82d0 	ble.w	800571a <_vfprintf_r+0xd46>
 800517a:	4651      	mov	r1, sl
 800517c:	4658      	mov	r0, fp
 800517e:	aa26      	add	r2, sp, #152	; 0x98
 8005180:	f003 f9da 	bl	8008538 <__sprint_r>
 8005184:	2800      	cmp	r0, #0
 8005186:	f040 85db 	bne.w	8005d40 <_vfprintf_r+0x136c>
 800518a:	ac29      	add	r4, sp, #164	; 0xa4
 800518c:	9b07      	ldr	r3, [sp, #28]
 800518e:	1af6      	subs	r6, r6, r3
 8005190:	2e00      	cmp	r6, #0
 8005192:	dd28      	ble.n	80051e6 <_vfprintf_r+0x812>
 8005194:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005198:	480d      	ldr	r0, [pc, #52]	; (80051d0 <_vfprintf_r+0x7fc>)
 800519a:	2e10      	cmp	r6, #16
 800519c:	f103 0301 	add.w	r3, r3, #1
 80051a0:	f104 0108 	add.w	r1, r4, #8
 80051a4:	6020      	str	r0, [r4, #0]
 80051a6:	f300 82ba 	bgt.w	800571e <_vfprintf_r+0xd4a>
 80051aa:	6066      	str	r6, [r4, #4]
 80051ac:	2b07      	cmp	r3, #7
 80051ae:	4416      	add	r6, r2
 80051b0:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 80051b4:	f340 82c6 	ble.w	8005744 <_vfprintf_r+0xd70>
 80051b8:	e00c      	b.n	80051d4 <_vfprintf_r+0x800>
 80051ba:	bf00      	nop
 80051bc:	080097bd 	.word	0x080097bd
 80051c0:	080097ac 	.word	0x080097ac
 80051c4:	40300000 	.word	0x40300000
 80051c8:	3fe00000 	.word	0x3fe00000
 80051cc:	080097f0 	.word	0x080097f0
 80051d0:	08009800 	.word	0x08009800
 80051d4:	4651      	mov	r1, sl
 80051d6:	4658      	mov	r0, fp
 80051d8:	aa26      	add	r2, sp, #152	; 0x98
 80051da:	f003 f9ad 	bl	8008538 <__sprint_r>
 80051de:	2800      	cmp	r0, #0
 80051e0:	f040 85ae 	bne.w	8005d40 <_vfprintf_r+0x136c>
 80051e4:	ac29      	add	r4, sp, #164	; 0xa4
 80051e6:	f418 7f80 	tst.w	r8, #256	; 0x100
 80051ea:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80051ec:	f040 82b0 	bne.w	8005750 <_vfprintf_r+0xd7c>
 80051f0:	9b07      	ldr	r3, [sp, #28]
 80051f2:	f8c4 9000 	str.w	r9, [r4]
 80051f6:	441e      	add	r6, r3
 80051f8:	6063      	str	r3, [r4, #4]
 80051fa:	9628      	str	r6, [sp, #160]	; 0xa0
 80051fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80051fe:	3301      	adds	r3, #1
 8005200:	2b07      	cmp	r3, #7
 8005202:	9327      	str	r3, [sp, #156]	; 0x9c
 8005204:	f300 82ea 	bgt.w	80057dc <_vfprintf_r+0xe08>
 8005208:	3408      	adds	r4, #8
 800520a:	f018 0f04 	tst.w	r8, #4
 800520e:	f040 8578 	bne.w	8005d02 <_vfprintf_r+0x132e>
 8005212:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8005216:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005218:	428a      	cmp	r2, r1
 800521a:	bfac      	ite	ge
 800521c:	189b      	addge	r3, r3, r2
 800521e:	185b      	addlt	r3, r3, r1
 8005220:	9313      	str	r3, [sp, #76]	; 0x4c
 8005222:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005224:	b13b      	cbz	r3, 8005236 <_vfprintf_r+0x862>
 8005226:	4651      	mov	r1, sl
 8005228:	4658      	mov	r0, fp
 800522a:	aa26      	add	r2, sp, #152	; 0x98
 800522c:	f003 f984 	bl	8008538 <__sprint_r>
 8005230:	2800      	cmp	r0, #0
 8005232:	f040 8585 	bne.w	8005d40 <_vfprintf_r+0x136c>
 8005236:	2300      	movs	r3, #0
 8005238:	9327      	str	r3, [sp, #156]	; 0x9c
 800523a:	2f00      	cmp	r7, #0
 800523c:	f040 859c 	bne.w	8005d78 <_vfprintf_r+0x13a4>
 8005240:	ac29      	add	r4, sp, #164	; 0xa4
 8005242:	e0e7      	b.n	8005414 <_vfprintf_r+0xa40>
 8005244:	4607      	mov	r7, r0
 8005246:	e62d      	b.n	8004ea4 <_vfprintf_r+0x4d0>
 8005248:	2306      	movs	r3, #6
 800524a:	e61d      	b.n	8004e88 <_vfprintf_r+0x4b4>
 800524c:	f802 0c01 	strb.w	r0, [r2, #-1]
 8005250:	e699      	b.n	8004f86 <_vfprintf_r+0x5b2>
 8005252:	f803 0b01 	strb.w	r0, [r3], #1
 8005256:	1aca      	subs	r2, r1, r3
 8005258:	2a00      	cmp	r2, #0
 800525a:	dafa      	bge.n	8005252 <_vfprintf_r+0x87e>
 800525c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800525e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005260:	3201      	adds	r2, #1
 8005262:	f103 0301 	add.w	r3, r3, #1
 8005266:	bfb8      	it	lt
 8005268:	2300      	movlt	r3, #0
 800526a:	441d      	add	r5, r3
 800526c:	e69b      	b.n	8004fa6 <_vfprintf_r+0x5d2>
 800526e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005270:	462b      	mov	r3, r5
 8005272:	2030      	movs	r0, #48	; 0x30
 8005274:	18a9      	adds	r1, r5, r2
 8005276:	e7ee      	b.n	8005256 <_vfprintf_r+0x882>
 8005278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800527a:	2b46      	cmp	r3, #70	; 0x46
 800527c:	d005      	beq.n	800528a <_vfprintf_r+0x8b6>
 800527e:	2b45      	cmp	r3, #69	; 0x45
 8005280:	d11b      	bne.n	80052ba <_vfprintf_r+0x8e6>
 8005282:	9b07      	ldr	r3, [sp, #28]
 8005284:	1c5e      	adds	r6, r3, #1
 8005286:	2302      	movs	r3, #2
 8005288:	e001      	b.n	800528e <_vfprintf_r+0x8ba>
 800528a:	2303      	movs	r3, #3
 800528c:	9e07      	ldr	r6, [sp, #28]
 800528e:	aa24      	add	r2, sp, #144	; 0x90
 8005290:	9204      	str	r2, [sp, #16]
 8005292:	aa21      	add	r2, sp, #132	; 0x84
 8005294:	9203      	str	r2, [sp, #12]
 8005296:	aa20      	add	r2, sp, #128	; 0x80
 8005298:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	4658      	mov	r0, fp
 80052a0:	462b      	mov	r3, r5
 80052a2:	9a08      	ldr	r2, [sp, #32]
 80052a4:	f000 feec 	bl	8006080 <_dtoa_r>
 80052a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052aa:	4681      	mov	r9, r0
 80052ac:	2b47      	cmp	r3, #71	; 0x47
 80052ae:	d106      	bne.n	80052be <_vfprintf_r+0x8ea>
 80052b0:	f018 0f01 	tst.w	r8, #1
 80052b4:	d103      	bne.n	80052be <_vfprintf_r+0x8ea>
 80052b6:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80052b8:	e675      	b.n	8004fa6 <_vfprintf_r+0x5d2>
 80052ba:	9e07      	ldr	r6, [sp, #28]
 80052bc:	e7e3      	b.n	8005286 <_vfprintf_r+0x8b2>
 80052be:	eb09 0306 	add.w	r3, r9, r6
 80052c2:	930d      	str	r3, [sp, #52]	; 0x34
 80052c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052c6:	2b46      	cmp	r3, #70	; 0x46
 80052c8:	d111      	bne.n	80052ee <_vfprintf_r+0x91a>
 80052ca:	f899 3000 	ldrb.w	r3, [r9]
 80052ce:	2b30      	cmp	r3, #48	; 0x30
 80052d0:	d109      	bne.n	80052e6 <_vfprintf_r+0x912>
 80052d2:	2200      	movs	r2, #0
 80052d4:	2300      	movs	r3, #0
 80052d6:	4629      	mov	r1, r5
 80052d8:	9808      	ldr	r0, [sp, #32]
 80052da:	f7fb fb65 	bl	80009a8 <__aeabi_dcmpeq>
 80052de:	b910      	cbnz	r0, 80052e6 <_vfprintf_r+0x912>
 80052e0:	f1c6 0601 	rsb	r6, r6, #1
 80052e4:	9620      	str	r6, [sp, #128]	; 0x80
 80052e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80052e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80052ea:	441a      	add	r2, r3
 80052ec:	920d      	str	r2, [sp, #52]	; 0x34
 80052ee:	2200      	movs	r2, #0
 80052f0:	2300      	movs	r3, #0
 80052f2:	4629      	mov	r1, r5
 80052f4:	9808      	ldr	r0, [sp, #32]
 80052f6:	f7fb fb57 	bl	80009a8 <__aeabi_dcmpeq>
 80052fa:	b108      	cbz	r0, 8005300 <_vfprintf_r+0x92c>
 80052fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052fe:	9324      	str	r3, [sp, #144]	; 0x90
 8005300:	2230      	movs	r2, #48	; 0x30
 8005302:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005304:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005306:	4299      	cmp	r1, r3
 8005308:	d9d5      	bls.n	80052b6 <_vfprintf_r+0x8e2>
 800530a:	1c59      	adds	r1, r3, #1
 800530c:	9124      	str	r1, [sp, #144]	; 0x90
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	e7f7      	b.n	8005302 <_vfprintf_r+0x92e>
 8005312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005314:	2b46      	cmp	r3, #70	; 0x46
 8005316:	f47f ae57 	bne.w	8004fc8 <_vfprintf_r+0x5f4>
 800531a:	9a07      	ldr	r2, [sp, #28]
 800531c:	f008 0301 	and.w	r3, r8, #1
 8005320:	2d00      	cmp	r5, #0
 8005322:	ea43 0302 	orr.w	r3, r3, r2
 8005326:	dd1a      	ble.n	800535e <_vfprintf_r+0x98a>
 8005328:	2b00      	cmp	r3, #0
 800532a:	d034      	beq.n	8005396 <_vfprintf_r+0x9c2>
 800532c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800532e:	18eb      	adds	r3, r5, r3
 8005330:	441a      	add	r2, r3
 8005332:	9207      	str	r2, [sp, #28]
 8005334:	2366      	movs	r3, #102	; 0x66
 8005336:	930b      	str	r3, [sp, #44]	; 0x2c
 8005338:	e033      	b.n	80053a2 <_vfprintf_r+0x9ce>
 800533a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800533e:	f802 6b01 	strb.w	r6, [r2], #1
 8005342:	e678      	b.n	8005036 <_vfprintf_r+0x662>
 8005344:	b941      	cbnz	r1, 8005358 <_vfprintf_r+0x984>
 8005346:	2230      	movs	r2, #48	; 0x30
 8005348:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 800534c:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8005350:	3330      	adds	r3, #48	; 0x30
 8005352:	f802 3b01 	strb.w	r3, [r2], #1
 8005356:	e67a      	b.n	800504e <_vfprintf_r+0x67a>
 8005358:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 800535c:	e7f8      	b.n	8005350 <_vfprintf_r+0x97c>
 800535e:	b1e3      	cbz	r3, 800539a <_vfprintf_r+0x9c6>
 8005360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005362:	9a07      	ldr	r2, [sp, #28]
 8005364:	3301      	adds	r3, #1
 8005366:	e7e3      	b.n	8005330 <_vfprintf_r+0x95c>
 8005368:	9b08      	ldr	r3, [sp, #32]
 800536a:	429d      	cmp	r5, r3
 800536c:	db07      	blt.n	800537e <_vfprintf_r+0x9aa>
 800536e:	f018 0f01 	tst.w	r8, #1
 8005372:	d02d      	beq.n	80053d0 <_vfprintf_r+0x9fc>
 8005374:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005376:	18eb      	adds	r3, r5, r3
 8005378:	9307      	str	r3, [sp, #28]
 800537a:	2367      	movs	r3, #103	; 0x67
 800537c:	e7db      	b.n	8005336 <_vfprintf_r+0x962>
 800537e:	9b08      	ldr	r3, [sp, #32]
 8005380:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005382:	2d00      	cmp	r5, #0
 8005384:	4413      	add	r3, r2
 8005386:	9307      	str	r3, [sp, #28]
 8005388:	dcf7      	bgt.n	800537a <_vfprintf_r+0x9a6>
 800538a:	9a07      	ldr	r2, [sp, #28]
 800538c:	f1c5 0301 	rsb	r3, r5, #1
 8005390:	441a      	add	r2, r3
 8005392:	4613      	mov	r3, r2
 8005394:	e7f0      	b.n	8005378 <_vfprintf_r+0x9a4>
 8005396:	9507      	str	r5, [sp, #28]
 8005398:	e7cc      	b.n	8005334 <_vfprintf_r+0x960>
 800539a:	2366      	movs	r3, #102	; 0x66
 800539c:	930b      	str	r3, [sp, #44]	; 0x2c
 800539e:	2301      	movs	r3, #1
 80053a0:	9307      	str	r3, [sp, #28]
 80053a2:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 80053a6:	930d      	str	r3, [sp, #52]	; 0x34
 80053a8:	d025      	beq.n	80053f6 <_vfprintf_r+0xa22>
 80053aa:	2300      	movs	r3, #0
 80053ac:	2d00      	cmp	r5, #0
 80053ae:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 80053b2:	f77f ae64 	ble.w	800507e <_vfprintf_r+0x6aa>
 80053b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2bff      	cmp	r3, #255	; 0xff
 80053bc:	d10a      	bne.n	80053d4 <_vfprintf_r+0xa00>
 80053be:	9907      	ldr	r1, [sp, #28]
 80053c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80053c4:	4413      	add	r3, r2
 80053c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80053c8:	fb02 1303 	mla	r3, r2, r3, r1
 80053cc:	9307      	str	r3, [sp, #28]
 80053ce:	e656      	b.n	800507e <_vfprintf_r+0x6aa>
 80053d0:	9507      	str	r5, [sp, #28]
 80053d2:	e7d2      	b.n	800537a <_vfprintf_r+0x9a6>
 80053d4:	42ab      	cmp	r3, r5
 80053d6:	daf2      	bge.n	80053be <_vfprintf_r+0x9ea>
 80053d8:	1aed      	subs	r5, r5, r3
 80053da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	b133      	cbz	r3, 80053ee <_vfprintf_r+0xa1a>
 80053e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053e2:	3301      	adds	r3, #1
 80053e4:	930d      	str	r3, [sp, #52]	; 0x34
 80053e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053e8:	3301      	adds	r3, #1
 80053ea:	930e      	str	r3, [sp, #56]	; 0x38
 80053ec:	e7e3      	b.n	80053b6 <_vfprintf_r+0x9e2>
 80053ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053f0:	3301      	adds	r3, #1
 80053f2:	930c      	str	r3, [sp, #48]	; 0x30
 80053f4:	e7df      	b.n	80053b6 <_vfprintf_r+0x9e2>
 80053f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053f8:	930c      	str	r3, [sp, #48]	; 0x30
 80053fa:	e640      	b.n	800507e <_vfprintf_r+0x6aa>
 80053fc:	4632      	mov	r2, r6
 80053fe:	f852 3b04 	ldr.w	r3, [r2], #4
 8005402:	f018 0f20 	tst.w	r8, #32
 8005406:	920a      	str	r2, [sp, #40]	; 0x28
 8005408:	d009      	beq.n	800541e <_vfprintf_r+0xa4a>
 800540a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800540c:	4610      	mov	r0, r2
 800540e:	17d1      	asrs	r1, r2, #31
 8005410:	e9c3 0100 	strd	r0, r1, [r3]
 8005414:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005416:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800541a:	f7ff bb5a 	b.w	8004ad2 <_vfprintf_r+0xfe>
 800541e:	f018 0f10 	tst.w	r8, #16
 8005422:	d002      	beq.n	800542a <_vfprintf_r+0xa56>
 8005424:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	e7f4      	b.n	8005414 <_vfprintf_r+0xa40>
 800542a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800542e:	d002      	beq.n	8005436 <_vfprintf_r+0xa62>
 8005430:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	e7ee      	b.n	8005414 <_vfprintf_r+0xa40>
 8005436:	f418 7f00 	tst.w	r8, #512	; 0x200
 800543a:	d0f3      	beq.n	8005424 <_vfprintf_r+0xa50>
 800543c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800543e:	701a      	strb	r2, [r3, #0]
 8005440:	e7e8      	b.n	8005414 <_vfprintf_r+0xa40>
 8005442:	f048 0810 	orr.w	r8, r8, #16
 8005446:	f018 0f20 	tst.w	r8, #32
 800544a:	d01e      	beq.n	800548a <_vfprintf_r+0xab6>
 800544c:	3607      	adds	r6, #7
 800544e:	f026 0307 	bic.w	r3, r6, #7
 8005452:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8005456:	930a      	str	r3, [sp, #40]	; 0x28
 8005458:	2300      	movs	r3, #0
 800545a:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 800545e:	2200      	movs	r2, #0
 8005460:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8005464:	9a07      	ldr	r2, [sp, #28]
 8005466:	3201      	adds	r2, #1
 8005468:	f000 849b 	beq.w	8005da2 <_vfprintf_r+0x13ce>
 800546c:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 8005470:	920c      	str	r2, [sp, #48]	; 0x30
 8005472:	ea56 0207 	orrs.w	r2, r6, r7
 8005476:	f040 849a 	bne.w	8005dae <_vfprintf_r+0x13da>
 800547a:	9a07      	ldr	r2, [sp, #28]
 800547c:	2a00      	cmp	r2, #0
 800547e:	f000 80f5 	beq.w	800566c <_vfprintf_r+0xc98>
 8005482:	2b01      	cmp	r3, #1
 8005484:	f040 8496 	bne.w	8005db4 <_vfprintf_r+0x13e0>
 8005488:	e097      	b.n	80055ba <_vfprintf_r+0xbe6>
 800548a:	1d33      	adds	r3, r6, #4
 800548c:	f018 0f10 	tst.w	r8, #16
 8005490:	930a      	str	r3, [sp, #40]	; 0x28
 8005492:	d001      	beq.n	8005498 <_vfprintf_r+0xac4>
 8005494:	6836      	ldr	r6, [r6, #0]
 8005496:	e003      	b.n	80054a0 <_vfprintf_r+0xacc>
 8005498:	f018 0f40 	tst.w	r8, #64	; 0x40
 800549c:	d002      	beq.n	80054a4 <_vfprintf_r+0xad0>
 800549e:	8836      	ldrh	r6, [r6, #0]
 80054a0:	2700      	movs	r7, #0
 80054a2:	e7d9      	b.n	8005458 <_vfprintf_r+0xa84>
 80054a4:	f418 7f00 	tst.w	r8, #512	; 0x200
 80054a8:	d0f4      	beq.n	8005494 <_vfprintf_r+0xac0>
 80054aa:	7836      	ldrb	r6, [r6, #0]
 80054ac:	e7f8      	b.n	80054a0 <_vfprintf_r+0xacc>
 80054ae:	4633      	mov	r3, r6
 80054b0:	f853 6b04 	ldr.w	r6, [r3], #4
 80054b4:	2278      	movs	r2, #120	; 0x78
 80054b6:	930a      	str	r3, [sp, #40]	; 0x28
 80054b8:	f647 0330 	movw	r3, #30768	; 0x7830
 80054bc:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 80054c0:	4ba1      	ldr	r3, [pc, #644]	; (8005748 <_vfprintf_r+0xd74>)
 80054c2:	2700      	movs	r7, #0
 80054c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80054c6:	f048 0802 	orr.w	r8, r8, #2
 80054ca:	2302      	movs	r3, #2
 80054cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80054ce:	e7c6      	b.n	800545e <_vfprintf_r+0xa8a>
 80054d0:	4633      	mov	r3, r6
 80054d2:	2500      	movs	r5, #0
 80054d4:	f853 9b04 	ldr.w	r9, [r3], #4
 80054d8:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 80054dc:	930a      	str	r3, [sp, #40]	; 0x28
 80054de:	9b07      	ldr	r3, [sp, #28]
 80054e0:	1c5e      	adds	r6, r3, #1
 80054e2:	d010      	beq.n	8005506 <_vfprintf_r+0xb32>
 80054e4:	461a      	mov	r2, r3
 80054e6:	4629      	mov	r1, r5
 80054e8:	4648      	mov	r0, r9
 80054ea:	f002 f9f1 	bl	80078d0 <memchr>
 80054ee:	4607      	mov	r7, r0
 80054f0:	2800      	cmp	r0, #0
 80054f2:	f43f ac74 	beq.w	8004dde <_vfprintf_r+0x40a>
 80054f6:	eba0 0309 	sub.w	r3, r0, r9
 80054fa:	462f      	mov	r7, r5
 80054fc:	462e      	mov	r6, r5
 80054fe:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
 8005502:	9307      	str	r3, [sp, #28]
 8005504:	e5c3      	b.n	800508e <_vfprintf_r+0x6ba>
 8005506:	4648      	mov	r0, r9
 8005508:	f7fa fe22 	bl	8000150 <strlen>
 800550c:	462f      	mov	r7, r5
 800550e:	9007      	str	r0, [sp, #28]
 8005510:	e465      	b.n	8004dde <_vfprintf_r+0x40a>
 8005512:	f048 0810 	orr.w	r8, r8, #16
 8005516:	f018 0f20 	tst.w	r8, #32
 800551a:	d007      	beq.n	800552c <_vfprintf_r+0xb58>
 800551c:	3607      	adds	r6, #7
 800551e:	f026 0307 	bic.w	r3, r6, #7
 8005522:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8005526:	930a      	str	r3, [sp, #40]	; 0x28
 8005528:	2301      	movs	r3, #1
 800552a:	e798      	b.n	800545e <_vfprintf_r+0xa8a>
 800552c:	1d33      	adds	r3, r6, #4
 800552e:	f018 0f10 	tst.w	r8, #16
 8005532:	930a      	str	r3, [sp, #40]	; 0x28
 8005534:	d001      	beq.n	800553a <_vfprintf_r+0xb66>
 8005536:	6836      	ldr	r6, [r6, #0]
 8005538:	e003      	b.n	8005542 <_vfprintf_r+0xb6e>
 800553a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800553e:	d002      	beq.n	8005546 <_vfprintf_r+0xb72>
 8005540:	8836      	ldrh	r6, [r6, #0]
 8005542:	2700      	movs	r7, #0
 8005544:	e7f0      	b.n	8005528 <_vfprintf_r+0xb54>
 8005546:	f418 7f00 	tst.w	r8, #512	; 0x200
 800554a:	d0f4      	beq.n	8005536 <_vfprintf_r+0xb62>
 800554c:	7836      	ldrb	r6, [r6, #0]
 800554e:	e7f8      	b.n	8005542 <_vfprintf_r+0xb6e>
 8005550:	4b7e      	ldr	r3, [pc, #504]	; (800574c <_vfprintf_r+0xd78>)
 8005552:	f018 0f20 	tst.w	r8, #32
 8005556:	931b      	str	r3, [sp, #108]	; 0x6c
 8005558:	d019      	beq.n	800558e <_vfprintf_r+0xbba>
 800555a:	3607      	adds	r6, #7
 800555c:	f026 0307 	bic.w	r3, r6, #7
 8005560:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8005564:	930a      	str	r3, [sp, #40]	; 0x28
 8005566:	f018 0f01 	tst.w	r8, #1
 800556a:	d00a      	beq.n	8005582 <_vfprintf_r+0xbae>
 800556c:	ea56 0307 	orrs.w	r3, r6, r7
 8005570:	d007      	beq.n	8005582 <_vfprintf_r+0xbae>
 8005572:	2330      	movs	r3, #48	; 0x30
 8005574:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8005578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800557a:	f048 0802 	orr.w	r8, r8, #2
 800557e:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8005582:	2302      	movs	r3, #2
 8005584:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8005588:	e769      	b.n	800545e <_vfprintf_r+0xa8a>
 800558a:	4b6f      	ldr	r3, [pc, #444]	; (8005748 <_vfprintf_r+0xd74>)
 800558c:	e7e1      	b.n	8005552 <_vfprintf_r+0xb7e>
 800558e:	1d33      	adds	r3, r6, #4
 8005590:	f018 0f10 	tst.w	r8, #16
 8005594:	930a      	str	r3, [sp, #40]	; 0x28
 8005596:	d001      	beq.n	800559c <_vfprintf_r+0xbc8>
 8005598:	6836      	ldr	r6, [r6, #0]
 800559a:	e003      	b.n	80055a4 <_vfprintf_r+0xbd0>
 800559c:	f018 0f40 	tst.w	r8, #64	; 0x40
 80055a0:	d002      	beq.n	80055a8 <_vfprintf_r+0xbd4>
 80055a2:	8836      	ldrh	r6, [r6, #0]
 80055a4:	2700      	movs	r7, #0
 80055a6:	e7de      	b.n	8005566 <_vfprintf_r+0xb92>
 80055a8:	f418 7f00 	tst.w	r8, #512	; 0x200
 80055ac:	d0f4      	beq.n	8005598 <_vfprintf_r+0xbc4>
 80055ae:	7836      	ldrb	r6, [r6, #0]
 80055b0:	e7f8      	b.n	80055a4 <_vfprintf_r+0xbd0>
 80055b2:	2f00      	cmp	r7, #0
 80055b4:	bf08      	it	eq
 80055b6:	2e0a      	cmpeq	r6, #10
 80055b8:	d206      	bcs.n	80055c8 <_vfprintf_r+0xbf4>
 80055ba:	3630      	adds	r6, #48	; 0x30
 80055bc:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 80055c0:	f20d 1947 	addw	r9, sp, #327	; 0x147
 80055c4:	f000 bc14 	b.w	8005df0 <_vfprintf_r+0x141c>
 80055c8:	2300      	movs	r3, #0
 80055ca:	9308      	str	r3, [sp, #32]
 80055cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055ce:	ad52      	add	r5, sp, #328	; 0x148
 80055d0:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 80055d4:	220a      	movs	r2, #10
 80055d6:	2300      	movs	r3, #0
 80055d8:	4630      	mov	r0, r6
 80055da:	4639      	mov	r1, r7
 80055dc:	f7fb fa54 	bl	8000a88 <__aeabi_uldivmod>
 80055e0:	9b08      	ldr	r3, [sp, #32]
 80055e2:	3230      	adds	r2, #48	; 0x30
 80055e4:	3301      	adds	r3, #1
 80055e6:	f105 39ff 	add.w	r9, r5, #4294967295
 80055ea:	f805 2c01 	strb.w	r2, [r5, #-1]
 80055ee:	9308      	str	r3, [sp, #32]
 80055f0:	f1b8 0f00 	cmp.w	r8, #0
 80055f4:	d019      	beq.n	800562a <_vfprintf_r+0xc56>
 80055f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055f8:	9a08      	ldr	r2, [sp, #32]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d114      	bne.n	800562a <_vfprintf_r+0xc56>
 8005600:	2aff      	cmp	r2, #255	; 0xff
 8005602:	d012      	beq.n	800562a <_vfprintf_r+0xc56>
 8005604:	2f00      	cmp	r7, #0
 8005606:	bf08      	it	eq
 8005608:	2e0a      	cmpeq	r6, #10
 800560a:	d30e      	bcc.n	800562a <_vfprintf_r+0xc56>
 800560c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800560e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005610:	eba9 0903 	sub.w	r9, r9, r3
 8005614:	461a      	mov	r2, r3
 8005616:	4648      	mov	r0, r9
 8005618:	f002 fef3 	bl	8008402 <strncpy>
 800561c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800561e:	785d      	ldrb	r5, [r3, #1]
 8005620:	b195      	cbz	r5, 8005648 <_vfprintf_r+0xc74>
 8005622:	3301      	adds	r3, #1
 8005624:	930e      	str	r3, [sp, #56]	; 0x38
 8005626:	2300      	movs	r3, #0
 8005628:	9308      	str	r3, [sp, #32]
 800562a:	220a      	movs	r2, #10
 800562c:	2300      	movs	r3, #0
 800562e:	4630      	mov	r0, r6
 8005630:	4639      	mov	r1, r7
 8005632:	f7fb fa29 	bl	8000a88 <__aeabi_uldivmod>
 8005636:	2f00      	cmp	r7, #0
 8005638:	bf08      	it	eq
 800563a:	2e0a      	cmpeq	r6, #10
 800563c:	f0c0 83d8 	bcc.w	8005df0 <_vfprintf_r+0x141c>
 8005640:	4606      	mov	r6, r0
 8005642:	460f      	mov	r7, r1
 8005644:	464d      	mov	r5, r9
 8005646:	e7c5      	b.n	80055d4 <_vfprintf_r+0xc00>
 8005648:	9508      	str	r5, [sp, #32]
 800564a:	e7ee      	b.n	800562a <_vfprintf_r+0xc56>
 800564c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800564e:	f006 030f 	and.w	r3, r6, #15
 8005652:	5cd3      	ldrb	r3, [r2, r3]
 8005654:	093a      	lsrs	r2, r7, #4
 8005656:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800565a:	0933      	lsrs	r3, r6, #4
 800565c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005660:	461e      	mov	r6, r3
 8005662:	4617      	mov	r7, r2
 8005664:	ea56 0307 	orrs.w	r3, r6, r7
 8005668:	d1f0      	bne.n	800564c <_vfprintf_r+0xc78>
 800566a:	e3c1      	b.n	8005df0 <_vfprintf_r+0x141c>
 800566c:	b933      	cbnz	r3, 800567c <_vfprintf_r+0xca8>
 800566e:	f018 0f01 	tst.w	r8, #1
 8005672:	d003      	beq.n	800567c <_vfprintf_r+0xca8>
 8005674:	2330      	movs	r3, #48	; 0x30
 8005676:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 800567a:	e7a1      	b.n	80055c0 <_vfprintf_r+0xbec>
 800567c:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8005680:	e3b6      	b.n	8005df0 <_vfprintf_r+0x141c>
 8005682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 837d 	beq.w	8005d84 <_vfprintf_r+0x13b0>
 800568a:	2000      	movs	r0, #0
 800568c:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8005690:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8005694:	960a      	str	r6, [sp, #40]	; 0x28
 8005696:	f7ff bb3b 	b.w	8004d10 <_vfprintf_r+0x33c>
 800569a:	2010      	movs	r0, #16
 800569c:	2b07      	cmp	r3, #7
 800569e:	4402      	add	r2, r0
 80056a0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80056a4:	6060      	str	r0, [r4, #4]
 80056a6:	dd08      	ble.n	80056ba <_vfprintf_r+0xce6>
 80056a8:	4651      	mov	r1, sl
 80056aa:	4658      	mov	r0, fp
 80056ac:	aa26      	add	r2, sp, #152	; 0x98
 80056ae:	f002 ff43 	bl	8008538 <__sprint_r>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	f040 8344 	bne.w	8005d40 <_vfprintf_r+0x136c>
 80056b8:	a929      	add	r1, sp, #164	; 0xa4
 80056ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056bc:	460c      	mov	r4, r1
 80056be:	3b10      	subs	r3, #16
 80056c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80056c2:	e500      	b.n	80050c6 <_vfprintf_r+0x6f2>
 80056c4:	460c      	mov	r4, r1
 80056c6:	e51a      	b.n	80050fe <_vfprintf_r+0x72a>
 80056c8:	4651      	mov	r1, sl
 80056ca:	4658      	mov	r0, fp
 80056cc:	aa26      	add	r2, sp, #152	; 0x98
 80056ce:	f002 ff33 	bl	8008538 <__sprint_r>
 80056d2:	2800      	cmp	r0, #0
 80056d4:	f040 8334 	bne.w	8005d40 <_vfprintf_r+0x136c>
 80056d8:	ac29      	add	r4, sp, #164	; 0xa4
 80056da:	e522      	b.n	8005122 <_vfprintf_r+0x74e>
 80056dc:	4651      	mov	r1, sl
 80056de:	4658      	mov	r0, fp
 80056e0:	aa26      	add	r2, sp, #152	; 0x98
 80056e2:	f002 ff29 	bl	8008538 <__sprint_r>
 80056e6:	2800      	cmp	r0, #0
 80056e8:	f040 832a 	bne.w	8005d40 <_vfprintf_r+0x136c>
 80056ec:	ac29      	add	r4, sp, #164	; 0xa4
 80056ee:	e528      	b.n	8005142 <_vfprintf_r+0x76e>
 80056f0:	2010      	movs	r0, #16
 80056f2:	2b07      	cmp	r3, #7
 80056f4:	4402      	add	r2, r0
 80056f6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80056fa:	6060      	str	r0, [r4, #4]
 80056fc:	dd08      	ble.n	8005710 <_vfprintf_r+0xd3c>
 80056fe:	4651      	mov	r1, sl
 8005700:	4658      	mov	r0, fp
 8005702:	aa26      	add	r2, sp, #152	; 0x98
 8005704:	f002 ff18 	bl	8008538 <__sprint_r>
 8005708:	2800      	cmp	r0, #0
 800570a:	f040 8319 	bne.w	8005d40 <_vfprintf_r+0x136c>
 800570e:	a929      	add	r1, sp, #164	; 0xa4
 8005710:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005712:	460c      	mov	r4, r1
 8005714:	3b10      	subs	r3, #16
 8005716:	9317      	str	r3, [sp, #92]	; 0x5c
 8005718:	e51c      	b.n	8005154 <_vfprintf_r+0x780>
 800571a:	460c      	mov	r4, r1
 800571c:	e536      	b.n	800518c <_vfprintf_r+0x7b8>
 800571e:	2010      	movs	r0, #16
 8005720:	2b07      	cmp	r3, #7
 8005722:	4402      	add	r2, r0
 8005724:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005728:	6060      	str	r0, [r4, #4]
 800572a:	dd08      	ble.n	800573e <_vfprintf_r+0xd6a>
 800572c:	4651      	mov	r1, sl
 800572e:	4658      	mov	r0, fp
 8005730:	aa26      	add	r2, sp, #152	; 0x98
 8005732:	f002 ff01 	bl	8008538 <__sprint_r>
 8005736:	2800      	cmp	r0, #0
 8005738:	f040 8302 	bne.w	8005d40 <_vfprintf_r+0x136c>
 800573c:	a929      	add	r1, sp, #164	; 0xa4
 800573e:	460c      	mov	r4, r1
 8005740:	3e10      	subs	r6, #16
 8005742:	e527      	b.n	8005194 <_vfprintf_r+0x7c0>
 8005744:	460c      	mov	r4, r1
 8005746:	e54e      	b.n	80051e6 <_vfprintf_r+0x812>
 8005748:	080097ac 	.word	0x080097ac
 800574c:	080097bd 	.word	0x080097bd
 8005750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005752:	2b65      	cmp	r3, #101	; 0x65
 8005754:	f340 8238 	ble.w	8005bc8 <_vfprintf_r+0x11f4>
 8005758:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800575c:	2200      	movs	r2, #0
 800575e:	2300      	movs	r3, #0
 8005760:	f7fb f922 	bl	80009a8 <__aeabi_dcmpeq>
 8005764:	2800      	cmp	r0, #0
 8005766:	d06a      	beq.n	800583e <_vfprintf_r+0xe6a>
 8005768:	4b6e      	ldr	r3, [pc, #440]	; (8005924 <_vfprintf_r+0xf50>)
 800576a:	6023      	str	r3, [r4, #0]
 800576c:	2301      	movs	r3, #1
 800576e:	441e      	add	r6, r3
 8005770:	6063      	str	r3, [r4, #4]
 8005772:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005774:	9628      	str	r6, [sp, #160]	; 0xa0
 8005776:	3301      	adds	r3, #1
 8005778:	2b07      	cmp	r3, #7
 800577a:	9327      	str	r3, [sp, #156]	; 0x9c
 800577c:	dc38      	bgt.n	80057f0 <_vfprintf_r+0xe1c>
 800577e:	3408      	adds	r4, #8
 8005780:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005782:	9a08      	ldr	r2, [sp, #32]
 8005784:	4293      	cmp	r3, r2
 8005786:	db03      	blt.n	8005790 <_vfprintf_r+0xdbc>
 8005788:	f018 0f01 	tst.w	r8, #1
 800578c:	f43f ad3d 	beq.w	800520a <_vfprintf_r+0x836>
 8005790:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005792:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005798:	6063      	str	r3, [r4, #4]
 800579a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800579c:	4413      	add	r3, r2
 800579e:	9328      	str	r3, [sp, #160]	; 0xa0
 80057a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80057a2:	3301      	adds	r3, #1
 80057a4:	2b07      	cmp	r3, #7
 80057a6:	9327      	str	r3, [sp, #156]	; 0x9c
 80057a8:	dc2c      	bgt.n	8005804 <_vfprintf_r+0xe30>
 80057aa:	3408      	adds	r4, #8
 80057ac:	9b08      	ldr	r3, [sp, #32]
 80057ae:	1e5d      	subs	r5, r3, #1
 80057b0:	2d00      	cmp	r5, #0
 80057b2:	f77f ad2a 	ble.w	800520a <_vfprintf_r+0x836>
 80057b6:	f04f 0910 	mov.w	r9, #16
 80057ba:	4e5b      	ldr	r6, [pc, #364]	; (8005928 <_vfprintf_r+0xf54>)
 80057bc:	2d10      	cmp	r5, #16
 80057be:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80057c2:	f104 0108 	add.w	r1, r4, #8
 80057c6:	f103 0301 	add.w	r3, r3, #1
 80057ca:	6026      	str	r6, [r4, #0]
 80057cc:	dc24      	bgt.n	8005818 <_vfprintf_r+0xe44>
 80057ce:	6065      	str	r5, [r4, #4]
 80057d0:	2b07      	cmp	r3, #7
 80057d2:	4415      	add	r5, r2
 80057d4:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80057d8:	f340 8290 	ble.w	8005cfc <_vfprintf_r+0x1328>
 80057dc:	4651      	mov	r1, sl
 80057de:	4658      	mov	r0, fp
 80057e0:	aa26      	add	r2, sp, #152	; 0x98
 80057e2:	f002 fea9 	bl	8008538 <__sprint_r>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	f040 82aa 	bne.w	8005d40 <_vfprintf_r+0x136c>
 80057ec:	ac29      	add	r4, sp, #164	; 0xa4
 80057ee:	e50c      	b.n	800520a <_vfprintf_r+0x836>
 80057f0:	4651      	mov	r1, sl
 80057f2:	4658      	mov	r0, fp
 80057f4:	aa26      	add	r2, sp, #152	; 0x98
 80057f6:	f002 fe9f 	bl	8008538 <__sprint_r>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	f040 82a0 	bne.w	8005d40 <_vfprintf_r+0x136c>
 8005800:	ac29      	add	r4, sp, #164	; 0xa4
 8005802:	e7bd      	b.n	8005780 <_vfprintf_r+0xdac>
 8005804:	4651      	mov	r1, sl
 8005806:	4658      	mov	r0, fp
 8005808:	aa26      	add	r2, sp, #152	; 0x98
 800580a:	f002 fe95 	bl	8008538 <__sprint_r>
 800580e:	2800      	cmp	r0, #0
 8005810:	f040 8296 	bne.w	8005d40 <_vfprintf_r+0x136c>
 8005814:	ac29      	add	r4, sp, #164	; 0xa4
 8005816:	e7c9      	b.n	80057ac <_vfprintf_r+0xdd8>
 8005818:	3210      	adds	r2, #16
 800581a:	2b07      	cmp	r3, #7
 800581c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005820:	f8c4 9004 	str.w	r9, [r4, #4]
 8005824:	dd08      	ble.n	8005838 <_vfprintf_r+0xe64>
 8005826:	4651      	mov	r1, sl
 8005828:	4658      	mov	r0, fp
 800582a:	aa26      	add	r2, sp, #152	; 0x98
 800582c:	f002 fe84 	bl	8008538 <__sprint_r>
 8005830:	2800      	cmp	r0, #0
 8005832:	f040 8285 	bne.w	8005d40 <_vfprintf_r+0x136c>
 8005836:	a929      	add	r1, sp, #164	; 0xa4
 8005838:	460c      	mov	r4, r1
 800583a:	3d10      	subs	r5, #16
 800583c:	e7be      	b.n	80057bc <_vfprintf_r+0xde8>
 800583e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005840:	2b00      	cmp	r3, #0
 8005842:	dc73      	bgt.n	800592c <_vfprintf_r+0xf58>
 8005844:	4b37      	ldr	r3, [pc, #220]	; (8005924 <_vfprintf_r+0xf50>)
 8005846:	6023      	str	r3, [r4, #0]
 8005848:	2301      	movs	r3, #1
 800584a:	441e      	add	r6, r3
 800584c:	6063      	str	r3, [r4, #4]
 800584e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005850:	9628      	str	r6, [sp, #160]	; 0xa0
 8005852:	3301      	adds	r3, #1
 8005854:	2b07      	cmp	r3, #7
 8005856:	9327      	str	r3, [sp, #156]	; 0x9c
 8005858:	dc3c      	bgt.n	80058d4 <_vfprintf_r+0xf00>
 800585a:	3408      	adds	r4, #8
 800585c:	9908      	ldr	r1, [sp, #32]
 800585e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005860:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005862:	430a      	orrs	r2, r1
 8005864:	f008 0101 	and.w	r1, r8, #1
 8005868:	430a      	orrs	r2, r1
 800586a:	f43f acce 	beq.w	800520a <_vfprintf_r+0x836>
 800586e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005870:	6022      	str	r2, [r4, #0]
 8005872:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005874:	4413      	add	r3, r2
 8005876:	9328      	str	r3, [sp, #160]	; 0xa0
 8005878:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800587a:	6062      	str	r2, [r4, #4]
 800587c:	3301      	adds	r3, #1
 800587e:	2b07      	cmp	r3, #7
 8005880:	9327      	str	r3, [sp, #156]	; 0x9c
 8005882:	dc31      	bgt.n	80058e8 <_vfprintf_r+0xf14>
 8005884:	3408      	adds	r4, #8
 8005886:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005888:	2d00      	cmp	r5, #0
 800588a:	da1a      	bge.n	80058c2 <_vfprintf_r+0xeee>
 800588c:	4623      	mov	r3, r4
 800588e:	4e26      	ldr	r6, [pc, #152]	; (8005928 <_vfprintf_r+0xf54>)
 8005890:	426d      	negs	r5, r5
 8005892:	2d10      	cmp	r5, #16
 8005894:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8005898:	f104 0408 	add.w	r4, r4, #8
 800589c:	f102 0201 	add.w	r2, r2, #1
 80058a0:	601e      	str	r6, [r3, #0]
 80058a2:	dc2b      	bgt.n	80058fc <_vfprintf_r+0xf28>
 80058a4:	605d      	str	r5, [r3, #4]
 80058a6:	2a07      	cmp	r2, #7
 80058a8:	440d      	add	r5, r1
 80058aa:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 80058ae:	dd08      	ble.n	80058c2 <_vfprintf_r+0xeee>
 80058b0:	4651      	mov	r1, sl
 80058b2:	4658      	mov	r0, fp
 80058b4:	aa26      	add	r2, sp, #152	; 0x98
 80058b6:	f002 fe3f 	bl	8008538 <__sprint_r>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	f040 8240 	bne.w	8005d40 <_vfprintf_r+0x136c>
 80058c0:	ac29      	add	r4, sp, #164	; 0xa4
 80058c2:	9b08      	ldr	r3, [sp, #32]
 80058c4:	9a08      	ldr	r2, [sp, #32]
 80058c6:	6063      	str	r3, [r4, #4]
 80058c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80058ca:	f8c4 9000 	str.w	r9, [r4]
 80058ce:	4413      	add	r3, r2
 80058d0:	9328      	str	r3, [sp, #160]	; 0xa0
 80058d2:	e493      	b.n	80051fc <_vfprintf_r+0x828>
 80058d4:	4651      	mov	r1, sl
 80058d6:	4658      	mov	r0, fp
 80058d8:	aa26      	add	r2, sp, #152	; 0x98
 80058da:	f002 fe2d 	bl	8008538 <__sprint_r>
 80058de:	2800      	cmp	r0, #0
 80058e0:	f040 822e 	bne.w	8005d40 <_vfprintf_r+0x136c>
 80058e4:	ac29      	add	r4, sp, #164	; 0xa4
 80058e6:	e7b9      	b.n	800585c <_vfprintf_r+0xe88>
 80058e8:	4651      	mov	r1, sl
 80058ea:	4658      	mov	r0, fp
 80058ec:	aa26      	add	r2, sp, #152	; 0x98
 80058ee:	f002 fe23 	bl	8008538 <__sprint_r>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	f040 8224 	bne.w	8005d40 <_vfprintf_r+0x136c>
 80058f8:	ac29      	add	r4, sp, #164	; 0xa4
 80058fa:	e7c4      	b.n	8005886 <_vfprintf_r+0xeb2>
 80058fc:	2010      	movs	r0, #16
 80058fe:	2a07      	cmp	r2, #7
 8005900:	4401      	add	r1, r0
 8005902:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8005906:	6058      	str	r0, [r3, #4]
 8005908:	dd08      	ble.n	800591c <_vfprintf_r+0xf48>
 800590a:	4651      	mov	r1, sl
 800590c:	4658      	mov	r0, fp
 800590e:	aa26      	add	r2, sp, #152	; 0x98
 8005910:	f002 fe12 	bl	8008538 <__sprint_r>
 8005914:	2800      	cmp	r0, #0
 8005916:	f040 8213 	bne.w	8005d40 <_vfprintf_r+0x136c>
 800591a:	ac29      	add	r4, sp, #164	; 0xa4
 800591c:	4623      	mov	r3, r4
 800591e:	3d10      	subs	r5, #16
 8005920:	e7b7      	b.n	8005892 <_vfprintf_r+0xebe>
 8005922:	bf00      	nop
 8005924:	080097ce 	.word	0x080097ce
 8005928:	08009800 	.word	0x08009800
 800592c:	9b08      	ldr	r3, [sp, #32]
 800592e:	42ab      	cmp	r3, r5
 8005930:	bfa8      	it	ge
 8005932:	462b      	movge	r3, r5
 8005934:	2b00      	cmp	r3, #0
 8005936:	9307      	str	r3, [sp, #28]
 8005938:	dd0a      	ble.n	8005950 <_vfprintf_r+0xf7c>
 800593a:	441e      	add	r6, r3
 800593c:	e9c4 9300 	strd	r9, r3, [r4]
 8005940:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005942:	9628      	str	r6, [sp, #160]	; 0xa0
 8005944:	3301      	adds	r3, #1
 8005946:	2b07      	cmp	r3, #7
 8005948:	9327      	str	r3, [sp, #156]	; 0x9c
 800594a:	f300 8088 	bgt.w	8005a5e <_vfprintf_r+0x108a>
 800594e:	3408      	adds	r4, #8
 8005950:	9b07      	ldr	r3, [sp, #28]
 8005952:	2b00      	cmp	r3, #0
 8005954:	bfb4      	ite	lt
 8005956:	462e      	movlt	r6, r5
 8005958:	1aee      	subge	r6, r5, r3
 800595a:	2e00      	cmp	r6, #0
 800595c:	dd19      	ble.n	8005992 <_vfprintf_r+0xfbe>
 800595e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005962:	4898      	ldr	r0, [pc, #608]	; (8005bc4 <_vfprintf_r+0x11f0>)
 8005964:	2e10      	cmp	r6, #16
 8005966:	f103 0301 	add.w	r3, r3, #1
 800596a:	f104 0108 	add.w	r1, r4, #8
 800596e:	6020      	str	r0, [r4, #0]
 8005970:	dc7f      	bgt.n	8005a72 <_vfprintf_r+0x109e>
 8005972:	6066      	str	r6, [r4, #4]
 8005974:	2b07      	cmp	r3, #7
 8005976:	4416      	add	r6, r2
 8005978:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 800597c:	f340 808c 	ble.w	8005a98 <_vfprintf_r+0x10c4>
 8005980:	4651      	mov	r1, sl
 8005982:	4658      	mov	r0, fp
 8005984:	aa26      	add	r2, sp, #152	; 0x98
 8005986:	f002 fdd7 	bl	8008538 <__sprint_r>
 800598a:	2800      	cmp	r0, #0
 800598c:	f040 81d8 	bne.w	8005d40 <_vfprintf_r+0x136c>
 8005990:	ac29      	add	r4, sp, #164	; 0xa4
 8005992:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8005996:	444d      	add	r5, r9
 8005998:	d00a      	beq.n	80059b0 <_vfprintf_r+0xfdc>
 800599a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800599c:	2b00      	cmp	r3, #0
 800599e:	d17d      	bne.n	8005a9c <_vfprintf_r+0x10c8>
 80059a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d17d      	bne.n	8005aa2 <_vfprintf_r+0x10ce>
 80059a6:	9b08      	ldr	r3, [sp, #32]
 80059a8:	444b      	add	r3, r9
 80059aa:	429d      	cmp	r5, r3
 80059ac:	bf28      	it	cs
 80059ae:	461d      	movcs	r5, r3
 80059b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80059b2:	9a08      	ldr	r2, [sp, #32]
 80059b4:	4293      	cmp	r3, r2
 80059b6:	db02      	blt.n	80059be <_vfprintf_r+0xfea>
 80059b8:	f018 0f01 	tst.w	r8, #1
 80059bc:	d00e      	beq.n	80059dc <_vfprintf_r+0x1008>
 80059be:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80059c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059c2:	6023      	str	r3, [r4, #0]
 80059c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059c6:	6063      	str	r3, [r4, #4]
 80059c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80059ca:	4413      	add	r3, r2
 80059cc:	9328      	str	r3, [sp, #160]	; 0xa0
 80059ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80059d0:	3301      	adds	r3, #1
 80059d2:	2b07      	cmp	r3, #7
 80059d4:	9327      	str	r3, [sp, #156]	; 0x9c
 80059d6:	f300 80e0 	bgt.w	8005b9a <_vfprintf_r+0x11c6>
 80059da:	3408      	adds	r4, #8
 80059dc:	9b08      	ldr	r3, [sp, #32]
 80059de:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80059e0:	eb09 0203 	add.w	r2, r9, r3
 80059e4:	1b9e      	subs	r6, r3, r6
 80059e6:	1b52      	subs	r2, r2, r5
 80059e8:	4296      	cmp	r6, r2
 80059ea:	bfa8      	it	ge
 80059ec:	4616      	movge	r6, r2
 80059ee:	2e00      	cmp	r6, #0
 80059f0:	dd0b      	ble.n	8005a0a <_vfprintf_r+0x1036>
 80059f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80059f4:	e9c4 5600 	strd	r5, r6, [r4]
 80059f8:	4433      	add	r3, r6
 80059fa:	9328      	str	r3, [sp, #160]	; 0xa0
 80059fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80059fe:	3301      	adds	r3, #1
 8005a00:	2b07      	cmp	r3, #7
 8005a02:	9327      	str	r3, [sp, #156]	; 0x9c
 8005a04:	f300 80d3 	bgt.w	8005bae <_vfprintf_r+0x11da>
 8005a08:	3408      	adds	r4, #8
 8005a0a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005a0c:	9b08      	ldr	r3, [sp, #32]
 8005a0e:	2e00      	cmp	r6, #0
 8005a10:	eba3 0505 	sub.w	r5, r3, r5
 8005a14:	bfa8      	it	ge
 8005a16:	1bad      	subge	r5, r5, r6
 8005a18:	2d00      	cmp	r5, #0
 8005a1a:	f77f abf6 	ble.w	800520a <_vfprintf_r+0x836>
 8005a1e:	f04f 0910 	mov.w	r9, #16
 8005a22:	4e68      	ldr	r6, [pc, #416]	; (8005bc4 <_vfprintf_r+0x11f0>)
 8005a24:	2d10      	cmp	r5, #16
 8005a26:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005a2a:	f104 0108 	add.w	r1, r4, #8
 8005a2e:	f103 0301 	add.w	r3, r3, #1
 8005a32:	6026      	str	r6, [r4, #0]
 8005a34:	f77f aecb 	ble.w	80057ce <_vfprintf_r+0xdfa>
 8005a38:	3210      	adds	r2, #16
 8005a3a:	2b07      	cmp	r3, #7
 8005a3c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005a40:	f8c4 9004 	str.w	r9, [r4, #4]
 8005a44:	dd08      	ble.n	8005a58 <_vfprintf_r+0x1084>
 8005a46:	4651      	mov	r1, sl
 8005a48:	4658      	mov	r0, fp
 8005a4a:	aa26      	add	r2, sp, #152	; 0x98
 8005a4c:	f002 fd74 	bl	8008538 <__sprint_r>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	f040 8175 	bne.w	8005d40 <_vfprintf_r+0x136c>
 8005a56:	a929      	add	r1, sp, #164	; 0xa4
 8005a58:	460c      	mov	r4, r1
 8005a5a:	3d10      	subs	r5, #16
 8005a5c:	e7e2      	b.n	8005a24 <_vfprintf_r+0x1050>
 8005a5e:	4651      	mov	r1, sl
 8005a60:	4658      	mov	r0, fp
 8005a62:	aa26      	add	r2, sp, #152	; 0x98
 8005a64:	f002 fd68 	bl	8008538 <__sprint_r>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	f040 8169 	bne.w	8005d40 <_vfprintf_r+0x136c>
 8005a6e:	ac29      	add	r4, sp, #164	; 0xa4
 8005a70:	e76e      	b.n	8005950 <_vfprintf_r+0xf7c>
 8005a72:	2010      	movs	r0, #16
 8005a74:	2b07      	cmp	r3, #7
 8005a76:	4402      	add	r2, r0
 8005a78:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005a7c:	6060      	str	r0, [r4, #4]
 8005a7e:	dd08      	ble.n	8005a92 <_vfprintf_r+0x10be>
 8005a80:	4651      	mov	r1, sl
 8005a82:	4658      	mov	r0, fp
 8005a84:	aa26      	add	r2, sp, #152	; 0x98
 8005a86:	f002 fd57 	bl	8008538 <__sprint_r>
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	f040 8158 	bne.w	8005d40 <_vfprintf_r+0x136c>
 8005a90:	a929      	add	r1, sp, #164	; 0xa4
 8005a92:	460c      	mov	r4, r1
 8005a94:	3e10      	subs	r6, #16
 8005a96:	e762      	b.n	800595e <_vfprintf_r+0xf8a>
 8005a98:	460c      	mov	r4, r1
 8005a9a:	e77a      	b.n	8005992 <_vfprintf_r+0xfbe>
 8005a9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d04b      	beq.n	8005b3a <_vfprintf_r+0x1166>
 8005aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	930c      	str	r3, [sp, #48]	; 0x30
 8005aa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005aaa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005aac:	6023      	str	r3, [r4, #0]
 8005aae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ab0:	6063      	str	r3, [r4, #4]
 8005ab2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005ab4:	4413      	add	r3, r2
 8005ab6:	9328      	str	r3, [sp, #160]	; 0xa0
 8005ab8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005aba:	3301      	adds	r3, #1
 8005abc:	2b07      	cmp	r3, #7
 8005abe:	9327      	str	r3, [sp, #156]	; 0x9c
 8005ac0:	dc42      	bgt.n	8005b48 <_vfprintf_r+0x1174>
 8005ac2:	3408      	adds	r4, #8
 8005ac4:	9b08      	ldr	r3, [sp, #32]
 8005ac6:	444b      	add	r3, r9
 8005ac8:	1b5a      	subs	r2, r3, r5
 8005aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	bfa8      	it	ge
 8005ad2:	4613      	movge	r3, r2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	461e      	mov	r6, r3
 8005ad8:	dd0a      	ble.n	8005af0 <_vfprintf_r+0x111c>
 8005ada:	e9c4 5300 	strd	r5, r3, [r4]
 8005ade:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005ae0:	4433      	add	r3, r6
 8005ae2:	9328      	str	r3, [sp, #160]	; 0xa0
 8005ae4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	2b07      	cmp	r3, #7
 8005aea:	9327      	str	r3, [sp, #156]	; 0x9c
 8005aec:	dc36      	bgt.n	8005b5c <_vfprintf_r+0x1188>
 8005aee:	3408      	adds	r4, #8
 8005af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005af2:	2e00      	cmp	r6, #0
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	bfb4      	ite	lt
 8005af8:	461e      	movlt	r6, r3
 8005afa:	1b9e      	subge	r6, r3, r6
 8005afc:	2e00      	cmp	r6, #0
 8005afe:	dd18      	ble.n	8005b32 <_vfprintf_r+0x115e>
 8005b00:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8005b04:	482f      	ldr	r0, [pc, #188]	; (8005bc4 <_vfprintf_r+0x11f0>)
 8005b06:	2e10      	cmp	r6, #16
 8005b08:	f102 0201 	add.w	r2, r2, #1
 8005b0c:	f104 0108 	add.w	r1, r4, #8
 8005b10:	6020      	str	r0, [r4, #0]
 8005b12:	dc2d      	bgt.n	8005b70 <_vfprintf_r+0x119c>
 8005b14:	4433      	add	r3, r6
 8005b16:	2a07      	cmp	r2, #7
 8005b18:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8005b1c:	6066      	str	r6, [r4, #4]
 8005b1e:	dd3a      	ble.n	8005b96 <_vfprintf_r+0x11c2>
 8005b20:	4651      	mov	r1, sl
 8005b22:	4658      	mov	r0, fp
 8005b24:	aa26      	add	r2, sp, #152	; 0x98
 8005b26:	f002 fd07 	bl	8008538 <__sprint_r>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	f040 8108 	bne.w	8005d40 <_vfprintf_r+0x136c>
 8005b30:	ac29      	add	r4, sp, #164	; 0xa4
 8005b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	441d      	add	r5, r3
 8005b38:	e72f      	b.n	800599a <_vfprintf_r+0xfc6>
 8005b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	930e      	str	r3, [sp, #56]	; 0x38
 8005b40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b42:	3b01      	subs	r3, #1
 8005b44:	930d      	str	r3, [sp, #52]	; 0x34
 8005b46:	e7af      	b.n	8005aa8 <_vfprintf_r+0x10d4>
 8005b48:	4651      	mov	r1, sl
 8005b4a:	4658      	mov	r0, fp
 8005b4c:	aa26      	add	r2, sp, #152	; 0x98
 8005b4e:	f002 fcf3 	bl	8008538 <__sprint_r>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	f040 80f4 	bne.w	8005d40 <_vfprintf_r+0x136c>
 8005b58:	ac29      	add	r4, sp, #164	; 0xa4
 8005b5a:	e7b3      	b.n	8005ac4 <_vfprintf_r+0x10f0>
 8005b5c:	4651      	mov	r1, sl
 8005b5e:	4658      	mov	r0, fp
 8005b60:	aa26      	add	r2, sp, #152	; 0x98
 8005b62:	f002 fce9 	bl	8008538 <__sprint_r>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	f040 80ea 	bne.w	8005d40 <_vfprintf_r+0x136c>
 8005b6c:	ac29      	add	r4, sp, #164	; 0xa4
 8005b6e:	e7bf      	b.n	8005af0 <_vfprintf_r+0x111c>
 8005b70:	2010      	movs	r0, #16
 8005b72:	2a07      	cmp	r2, #7
 8005b74:	4403      	add	r3, r0
 8005b76:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8005b7a:	6060      	str	r0, [r4, #4]
 8005b7c:	dd08      	ble.n	8005b90 <_vfprintf_r+0x11bc>
 8005b7e:	4651      	mov	r1, sl
 8005b80:	4658      	mov	r0, fp
 8005b82:	aa26      	add	r2, sp, #152	; 0x98
 8005b84:	f002 fcd8 	bl	8008538 <__sprint_r>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	f040 80d9 	bne.w	8005d40 <_vfprintf_r+0x136c>
 8005b8e:	a929      	add	r1, sp, #164	; 0xa4
 8005b90:	460c      	mov	r4, r1
 8005b92:	3e10      	subs	r6, #16
 8005b94:	e7b4      	b.n	8005b00 <_vfprintf_r+0x112c>
 8005b96:	460c      	mov	r4, r1
 8005b98:	e7cb      	b.n	8005b32 <_vfprintf_r+0x115e>
 8005b9a:	4651      	mov	r1, sl
 8005b9c:	4658      	mov	r0, fp
 8005b9e:	aa26      	add	r2, sp, #152	; 0x98
 8005ba0:	f002 fcca 	bl	8008538 <__sprint_r>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	f040 80cb 	bne.w	8005d40 <_vfprintf_r+0x136c>
 8005baa:	ac29      	add	r4, sp, #164	; 0xa4
 8005bac:	e716      	b.n	80059dc <_vfprintf_r+0x1008>
 8005bae:	4651      	mov	r1, sl
 8005bb0:	4658      	mov	r0, fp
 8005bb2:	aa26      	add	r2, sp, #152	; 0x98
 8005bb4:	f002 fcc0 	bl	8008538 <__sprint_r>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	f040 80c1 	bne.w	8005d40 <_vfprintf_r+0x136c>
 8005bbe:	ac29      	add	r4, sp, #164	; 0xa4
 8005bc0:	e723      	b.n	8005a0a <_vfprintf_r+0x1036>
 8005bc2:	bf00      	nop
 8005bc4:	08009800 	.word	0x08009800
 8005bc8:	9a08      	ldr	r2, [sp, #32]
 8005bca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005bcc:	2a01      	cmp	r2, #1
 8005bce:	f106 0601 	add.w	r6, r6, #1
 8005bd2:	f103 0301 	add.w	r3, r3, #1
 8005bd6:	f104 0508 	add.w	r5, r4, #8
 8005bda:	dc03      	bgt.n	8005be4 <_vfprintf_r+0x1210>
 8005bdc:	f018 0f01 	tst.w	r8, #1
 8005be0:	f000 8081 	beq.w	8005ce6 <_vfprintf_r+0x1312>
 8005be4:	2201      	movs	r2, #1
 8005be6:	2b07      	cmp	r3, #7
 8005be8:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 8005bec:	f8c4 9000 	str.w	r9, [r4]
 8005bf0:	6062      	str	r2, [r4, #4]
 8005bf2:	dd08      	ble.n	8005c06 <_vfprintf_r+0x1232>
 8005bf4:	4651      	mov	r1, sl
 8005bf6:	4658      	mov	r0, fp
 8005bf8:	aa26      	add	r2, sp, #152	; 0x98
 8005bfa:	f002 fc9d 	bl	8008538 <__sprint_r>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	f040 809e 	bne.w	8005d40 <_vfprintf_r+0x136c>
 8005c04:	ad29      	add	r5, sp, #164	; 0xa4
 8005c06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005c08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c0a:	602b      	str	r3, [r5, #0]
 8005c0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c0e:	606b      	str	r3, [r5, #4]
 8005c10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005c12:	4413      	add	r3, r2
 8005c14:	9328      	str	r3, [sp, #160]	; 0xa0
 8005c16:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005c18:	3301      	adds	r3, #1
 8005c1a:	2b07      	cmp	r3, #7
 8005c1c:	9327      	str	r3, [sp, #156]	; 0x9c
 8005c1e:	dc32      	bgt.n	8005c86 <_vfprintf_r+0x12b2>
 8005c20:	3508      	adds	r5, #8
 8005c22:	9b08      	ldr	r3, [sp, #32]
 8005c24:	2200      	movs	r2, #0
 8005c26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c2a:	1e5c      	subs	r4, r3, #1
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f7fa febb 	bl	80009a8 <__aeabi_dcmpeq>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d130      	bne.n	8005c98 <_vfprintf_r+0x12c4>
 8005c36:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8005c38:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005c3a:	9a08      	ldr	r2, [sp, #32]
 8005c3c:	3101      	adds	r1, #1
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	f109 0001 	add.w	r0, r9, #1
 8005c44:	4413      	add	r3, r2
 8005c46:	2907      	cmp	r1, #7
 8005c48:	e9c5 0400 	strd	r0, r4, [r5]
 8005c4c:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 8005c50:	dd52      	ble.n	8005cf8 <_vfprintf_r+0x1324>
 8005c52:	4651      	mov	r1, sl
 8005c54:	4658      	mov	r0, fp
 8005c56:	aa26      	add	r2, sp, #152	; 0x98
 8005c58:	f002 fc6e 	bl	8008538 <__sprint_r>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d16f      	bne.n	8005d40 <_vfprintf_r+0x136c>
 8005c60:	ad29      	add	r5, sp, #164	; 0xa4
 8005c62:	ab22      	add	r3, sp, #136	; 0x88
 8005c64:	602b      	str	r3, [r5, #0]
 8005c66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005c68:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005c6a:	606b      	str	r3, [r5, #4]
 8005c6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005c6e:	4413      	add	r3, r2
 8005c70:	9328      	str	r3, [sp, #160]	; 0xa0
 8005c72:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005c74:	3301      	adds	r3, #1
 8005c76:	2b07      	cmp	r3, #7
 8005c78:	9327      	str	r3, [sp, #156]	; 0x9c
 8005c7a:	f73f adaf 	bgt.w	80057dc <_vfprintf_r+0xe08>
 8005c7e:	f105 0408 	add.w	r4, r5, #8
 8005c82:	f7ff bac2 	b.w	800520a <_vfprintf_r+0x836>
 8005c86:	4651      	mov	r1, sl
 8005c88:	4658      	mov	r0, fp
 8005c8a:	aa26      	add	r2, sp, #152	; 0x98
 8005c8c:	f002 fc54 	bl	8008538 <__sprint_r>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d155      	bne.n	8005d40 <_vfprintf_r+0x136c>
 8005c94:	ad29      	add	r5, sp, #164	; 0xa4
 8005c96:	e7c4      	b.n	8005c22 <_vfprintf_r+0x124e>
 8005c98:	2c00      	cmp	r4, #0
 8005c9a:	dde2      	ble.n	8005c62 <_vfprintf_r+0x128e>
 8005c9c:	f04f 0910 	mov.w	r9, #16
 8005ca0:	4e5a      	ldr	r6, [pc, #360]	; (8005e0c <_vfprintf_r+0x1438>)
 8005ca2:	2c10      	cmp	r4, #16
 8005ca4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005ca8:	f105 0108 	add.w	r1, r5, #8
 8005cac:	f103 0301 	add.w	r3, r3, #1
 8005cb0:	602e      	str	r6, [r5, #0]
 8005cb2:	dc07      	bgt.n	8005cc4 <_vfprintf_r+0x12f0>
 8005cb4:	606c      	str	r4, [r5, #4]
 8005cb6:	2b07      	cmp	r3, #7
 8005cb8:	4414      	add	r4, r2
 8005cba:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 8005cbe:	dcc8      	bgt.n	8005c52 <_vfprintf_r+0x127e>
 8005cc0:	460d      	mov	r5, r1
 8005cc2:	e7ce      	b.n	8005c62 <_vfprintf_r+0x128e>
 8005cc4:	3210      	adds	r2, #16
 8005cc6:	2b07      	cmp	r3, #7
 8005cc8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005ccc:	f8c5 9004 	str.w	r9, [r5, #4]
 8005cd0:	dd06      	ble.n	8005ce0 <_vfprintf_r+0x130c>
 8005cd2:	4651      	mov	r1, sl
 8005cd4:	4658      	mov	r0, fp
 8005cd6:	aa26      	add	r2, sp, #152	; 0x98
 8005cd8:	f002 fc2e 	bl	8008538 <__sprint_r>
 8005cdc:	bb80      	cbnz	r0, 8005d40 <_vfprintf_r+0x136c>
 8005cde:	a929      	add	r1, sp, #164	; 0xa4
 8005ce0:	460d      	mov	r5, r1
 8005ce2:	3c10      	subs	r4, #16
 8005ce4:	e7dd      	b.n	8005ca2 <_vfprintf_r+0x12ce>
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	2b07      	cmp	r3, #7
 8005cea:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 8005cee:	f8c4 9000 	str.w	r9, [r4]
 8005cf2:	6062      	str	r2, [r4, #4]
 8005cf4:	ddb5      	ble.n	8005c62 <_vfprintf_r+0x128e>
 8005cf6:	e7ac      	b.n	8005c52 <_vfprintf_r+0x127e>
 8005cf8:	3508      	adds	r5, #8
 8005cfa:	e7b2      	b.n	8005c62 <_vfprintf_r+0x128e>
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	f7ff ba84 	b.w	800520a <_vfprintf_r+0x836>
 8005d02:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 8005d06:	1a9d      	subs	r5, r3, r2
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	f77f aa82 	ble.w	8005212 <_vfprintf_r+0x83e>
 8005d0e:	f04f 0810 	mov.w	r8, #16
 8005d12:	4e3f      	ldr	r6, [pc, #252]	; (8005e10 <_vfprintf_r+0x143c>)
 8005d14:	2d10      	cmp	r5, #16
 8005d16:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005d1a:	6026      	str	r6, [r4, #0]
 8005d1c:	f103 0301 	add.w	r3, r3, #1
 8005d20:	dc17      	bgt.n	8005d52 <_vfprintf_r+0x137e>
 8005d22:	6065      	str	r5, [r4, #4]
 8005d24:	2b07      	cmp	r3, #7
 8005d26:	4415      	add	r5, r2
 8005d28:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8005d2c:	f77f aa71 	ble.w	8005212 <_vfprintf_r+0x83e>
 8005d30:	4651      	mov	r1, sl
 8005d32:	4658      	mov	r0, fp
 8005d34:	aa26      	add	r2, sp, #152	; 0x98
 8005d36:	f002 fbff 	bl	8008538 <__sprint_r>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	f43f aa69 	beq.w	8005212 <_vfprintf_r+0x83e>
 8005d40:	2f00      	cmp	r7, #0
 8005d42:	f43f a884 	beq.w	8004e4e <_vfprintf_r+0x47a>
 8005d46:	4639      	mov	r1, r7
 8005d48:	4658      	mov	r0, fp
 8005d4a:	f001 f8e1 	bl	8006f10 <_free_r>
 8005d4e:	f7ff b87e 	b.w	8004e4e <_vfprintf_r+0x47a>
 8005d52:	3210      	adds	r2, #16
 8005d54:	2b07      	cmp	r3, #7
 8005d56:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005d5a:	f8c4 8004 	str.w	r8, [r4, #4]
 8005d5e:	dc02      	bgt.n	8005d66 <_vfprintf_r+0x1392>
 8005d60:	3408      	adds	r4, #8
 8005d62:	3d10      	subs	r5, #16
 8005d64:	e7d6      	b.n	8005d14 <_vfprintf_r+0x1340>
 8005d66:	4651      	mov	r1, sl
 8005d68:	4658      	mov	r0, fp
 8005d6a:	aa26      	add	r2, sp, #152	; 0x98
 8005d6c:	f002 fbe4 	bl	8008538 <__sprint_r>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d1e5      	bne.n	8005d40 <_vfprintf_r+0x136c>
 8005d74:	ac29      	add	r4, sp, #164	; 0xa4
 8005d76:	e7f4      	b.n	8005d62 <_vfprintf_r+0x138e>
 8005d78:	4639      	mov	r1, r7
 8005d7a:	4658      	mov	r0, fp
 8005d7c:	f001 f8c8 	bl	8006f10 <_free_r>
 8005d80:	f7ff ba5e 	b.w	8005240 <_vfprintf_r+0x86c>
 8005d84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005d86:	b91b      	cbnz	r3, 8005d90 <_vfprintf_r+0x13bc>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	9327      	str	r3, [sp, #156]	; 0x9c
 8005d8c:	f7ff b85f 	b.w	8004e4e <_vfprintf_r+0x47a>
 8005d90:	4651      	mov	r1, sl
 8005d92:	4658      	mov	r0, fp
 8005d94:	aa26      	add	r2, sp, #152	; 0x98
 8005d96:	f002 fbcf 	bl	8008538 <__sprint_r>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	d0f4      	beq.n	8005d88 <_vfprintf_r+0x13b4>
 8005d9e:	f7ff b856 	b.w	8004e4e <_vfprintf_r+0x47a>
 8005da2:	ea56 0207 	orrs.w	r2, r6, r7
 8005da6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8005daa:	f43f ab6a 	beq.w	8005482 <_vfprintf_r+0xaae>
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	f43f abff 	beq.w	80055b2 <_vfprintf_r+0xbde>
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8005dba:	f43f ac47 	beq.w	800564c <_vfprintf_r+0xc78>
 8005dbe:	08f2      	lsrs	r2, r6, #3
 8005dc0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8005dc4:	08f8      	lsrs	r0, r7, #3
 8005dc6:	f006 0307 	and.w	r3, r6, #7
 8005dca:	4607      	mov	r7, r0
 8005dcc:	4616      	mov	r6, r2
 8005dce:	3330      	adds	r3, #48	; 0x30
 8005dd0:	ea56 0207 	orrs.w	r2, r6, r7
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8005dda:	d1f0      	bne.n	8005dbe <_vfprintf_r+0x13ea>
 8005ddc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dde:	07d0      	lsls	r0, r2, #31
 8005de0:	d506      	bpl.n	8005df0 <_vfprintf_r+0x141c>
 8005de2:	2b30      	cmp	r3, #48	; 0x30
 8005de4:	d004      	beq.n	8005df0 <_vfprintf_r+0x141c>
 8005de6:	2330      	movs	r3, #48	; 0x30
 8005de8:	f809 3c01 	strb.w	r3, [r9, #-1]
 8005dec:	f1a1 0902 	sub.w	r9, r1, #2
 8005df0:	2700      	movs	r7, #0
 8005df2:	ab52      	add	r3, sp, #328	; 0x148
 8005df4:	eba3 0309 	sub.w	r3, r3, r9
 8005df8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005dfc:	9e07      	ldr	r6, [sp, #28]
 8005dfe:	9307      	str	r3, [sp, #28]
 8005e00:	463d      	mov	r5, r7
 8005e02:	e9cd 770c 	strd	r7, r7, [sp, #48]	; 0x30
 8005e06:	f7ff b942 	b.w	800508e <_vfprintf_r+0x6ba>
 8005e0a:	bf00      	nop
 8005e0c:	08009800 	.word	0x08009800
 8005e10:	080097f0 	.word	0x080097f0

08005e14 <__sbprintf>:
 8005e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e16:	461f      	mov	r7, r3
 8005e18:	898b      	ldrh	r3, [r1, #12]
 8005e1a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8005e1e:	f023 0302 	bic.w	r3, r3, #2
 8005e22:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005e26:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8005e28:	4615      	mov	r5, r2
 8005e2a:	9319      	str	r3, [sp, #100]	; 0x64
 8005e2c:	89cb      	ldrh	r3, [r1, #14]
 8005e2e:	4606      	mov	r6, r0
 8005e30:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005e34:	69cb      	ldr	r3, [r1, #28]
 8005e36:	a816      	add	r0, sp, #88	; 0x58
 8005e38:	9307      	str	r3, [sp, #28]
 8005e3a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e40:	ab1a      	add	r3, sp, #104	; 0x68
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	9304      	str	r3, [sp, #16]
 8005e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e4a:	9302      	str	r3, [sp, #8]
 8005e4c:	9305      	str	r3, [sp, #20]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	9306      	str	r3, [sp, #24]
 8005e52:	f001 fa8b 	bl	800736c <__retarget_lock_init_recursive>
 8005e56:	462a      	mov	r2, r5
 8005e58:	463b      	mov	r3, r7
 8005e5a:	4669      	mov	r1, sp
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	f7fe fdb9 	bl	80049d4 <_vfprintf_r>
 8005e62:	1e05      	subs	r5, r0, #0
 8005e64:	db07      	blt.n	8005e76 <__sbprintf+0x62>
 8005e66:	4669      	mov	r1, sp
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f000 ff55 	bl	8006d18 <_fflush_r>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	bf18      	it	ne
 8005e72:	f04f 35ff 	movne.w	r5, #4294967295
 8005e76:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005e7a:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005e7c:	065b      	lsls	r3, r3, #25
 8005e7e:	bf42      	ittt	mi
 8005e80:	89a3      	ldrhmi	r3, [r4, #12]
 8005e82:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8005e86:	81a3      	strhmi	r3, [r4, #12]
 8005e88:	f001 fa71 	bl	800736e <__retarget_lock_close_recursive>
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8005e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e94 <__swsetup_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	4b2a      	ldr	r3, [pc, #168]	; (8005f40 <__swsetup_r+0xac>)
 8005e98:	4605      	mov	r5, r0
 8005e9a:	6818      	ldr	r0, [r3, #0]
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	b118      	cbz	r0, 8005ea8 <__swsetup_r+0x14>
 8005ea0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005ea2:	b90b      	cbnz	r3, 8005ea8 <__swsetup_r+0x14>
 8005ea4:	f000 ffa4 	bl	8006df0 <__sinit>
 8005ea8:	89a3      	ldrh	r3, [r4, #12]
 8005eaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005eae:	0718      	lsls	r0, r3, #28
 8005eb0:	d422      	bmi.n	8005ef8 <__swsetup_r+0x64>
 8005eb2:	06d9      	lsls	r1, r3, #27
 8005eb4:	d407      	bmi.n	8005ec6 <__swsetup_r+0x32>
 8005eb6:	2309      	movs	r3, #9
 8005eb8:	602b      	str	r3, [r5, #0]
 8005eba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	e034      	b.n	8005f30 <__swsetup_r+0x9c>
 8005ec6:	0758      	lsls	r0, r3, #29
 8005ec8:	d512      	bpl.n	8005ef0 <__swsetup_r+0x5c>
 8005eca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005ecc:	b141      	cbz	r1, 8005ee0 <__swsetup_r+0x4c>
 8005ece:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8005ed2:	4299      	cmp	r1, r3
 8005ed4:	d002      	beq.n	8005edc <__swsetup_r+0x48>
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f001 f81a 	bl	8006f10 <_free_r>
 8005edc:	2300      	movs	r3, #0
 8005ede:	6323      	str	r3, [r4, #48]	; 0x30
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ee6:	81a3      	strh	r3, [r4, #12]
 8005ee8:	2300      	movs	r3, #0
 8005eea:	6063      	str	r3, [r4, #4]
 8005eec:	6923      	ldr	r3, [r4, #16]
 8005eee:	6023      	str	r3, [r4, #0]
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	f043 0308 	orr.w	r3, r3, #8
 8005ef6:	81a3      	strh	r3, [r4, #12]
 8005ef8:	6923      	ldr	r3, [r4, #16]
 8005efa:	b94b      	cbnz	r3, 8005f10 <__swsetup_r+0x7c>
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f06:	d003      	beq.n	8005f10 <__swsetup_r+0x7c>
 8005f08:	4621      	mov	r1, r4
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f001 fa5e 	bl	80073cc <__smakebuf_r>
 8005f10:	89a0      	ldrh	r0, [r4, #12]
 8005f12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f16:	f010 0301 	ands.w	r3, r0, #1
 8005f1a:	d00a      	beq.n	8005f32 <__swsetup_r+0x9e>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60a3      	str	r3, [r4, #8]
 8005f20:	6963      	ldr	r3, [r4, #20]
 8005f22:	425b      	negs	r3, r3
 8005f24:	61a3      	str	r3, [r4, #24]
 8005f26:	6923      	ldr	r3, [r4, #16]
 8005f28:	b943      	cbnz	r3, 8005f3c <__swsetup_r+0xa8>
 8005f2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f2e:	d1c4      	bne.n	8005eba <__swsetup_r+0x26>
 8005f30:	bd38      	pop	{r3, r4, r5, pc}
 8005f32:	0781      	lsls	r1, r0, #30
 8005f34:	bf58      	it	pl
 8005f36:	6963      	ldrpl	r3, [r4, #20]
 8005f38:	60a3      	str	r3, [r4, #8]
 8005f3a:	e7f4      	b.n	8005f26 <__swsetup_r+0x92>
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	e7f7      	b.n	8005f30 <__swsetup_r+0x9c>
 8005f40:	2000000c 	.word	0x2000000c

08005f44 <register_fini>:
 8005f44:	4b02      	ldr	r3, [pc, #8]	; (8005f50 <register_fini+0xc>)
 8005f46:	b113      	cbz	r3, 8005f4e <register_fini+0xa>
 8005f48:	4802      	ldr	r0, [pc, #8]	; (8005f54 <register_fini+0x10>)
 8005f4a:	f000 b805 	b.w	8005f58 <atexit>
 8005f4e:	4770      	bx	lr
 8005f50:	00000000 	.word	0x00000000
 8005f54:	08006e41 	.word	0x08006e41

08005f58 <atexit>:
 8005f58:	2300      	movs	r3, #0
 8005f5a:	4601      	mov	r1, r0
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f002 bfee 	b.w	8008f40 <__register_exitproc>

08005f64 <quorem>:
 8005f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f68:	6903      	ldr	r3, [r0, #16]
 8005f6a:	690c      	ldr	r4, [r1, #16]
 8005f6c:	4607      	mov	r7, r0
 8005f6e:	42a3      	cmp	r3, r4
 8005f70:	f2c0 8083 	blt.w	800607a <quorem+0x116>
 8005f74:	3c01      	subs	r4, #1
 8005f76:	f100 0514 	add.w	r5, r0, #20
 8005f7a:	f101 0814 	add.w	r8, r1, #20
 8005f7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f82:	9301      	str	r3, [sp, #4]
 8005f84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f9c:	d332      	bcc.n	8006004 <quorem+0xa0>
 8005f9e:	f04f 0e00 	mov.w	lr, #0
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	46ac      	mov	ip, r5
 8005fa6:	46f2      	mov	sl, lr
 8005fa8:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fac:	b293      	uxth	r3, r2
 8005fae:	fb06 e303 	mla	r3, r6, r3, lr
 8005fb2:	0c12      	lsrs	r2, r2, #16
 8005fb4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005fb8:	fb06 e202 	mla	r2, r6, r2, lr
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	ebaa 0303 	sub.w	r3, sl, r3
 8005fc2:	f8dc a000 	ldr.w	sl, [ip]
 8005fc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005fca:	fa1f fa8a 	uxth.w	sl, sl
 8005fce:	4453      	add	r3, sl
 8005fd0:	fa1f fa82 	uxth.w	sl, r2
 8005fd4:	f8dc 2000 	ldr.w	r2, [ip]
 8005fd8:	4581      	cmp	r9, r0
 8005fda:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005fde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fe8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005fec:	f84c 3b04 	str.w	r3, [ip], #4
 8005ff0:	d2da      	bcs.n	8005fa8 <quorem+0x44>
 8005ff2:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ff6:	b92b      	cbnz	r3, 8006004 <quorem+0xa0>
 8005ff8:	9b01      	ldr	r3, [sp, #4]
 8005ffa:	3b04      	subs	r3, #4
 8005ffc:	429d      	cmp	r5, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	d32f      	bcc.n	8006062 <quorem+0xfe>
 8006002:	613c      	str	r4, [r7, #16]
 8006004:	4638      	mov	r0, r7
 8006006:	f001 fec3 	bl	8007d90 <__mcmp>
 800600a:	2800      	cmp	r0, #0
 800600c:	db25      	blt.n	800605a <quorem+0xf6>
 800600e:	4628      	mov	r0, r5
 8006010:	f04f 0c00 	mov.w	ip, #0
 8006014:	3601      	adds	r6, #1
 8006016:	f858 1b04 	ldr.w	r1, [r8], #4
 800601a:	f8d0 e000 	ldr.w	lr, [r0]
 800601e:	b28b      	uxth	r3, r1
 8006020:	ebac 0303 	sub.w	r3, ip, r3
 8006024:	fa1f f28e 	uxth.w	r2, lr
 8006028:	4413      	add	r3, r2
 800602a:	0c0a      	lsrs	r2, r1, #16
 800602c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006030:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006034:	b29b      	uxth	r3, r3
 8006036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800603a:	45c1      	cmp	r9, r8
 800603c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006040:	f840 3b04 	str.w	r3, [r0], #4
 8006044:	d2e7      	bcs.n	8006016 <quorem+0xb2>
 8006046:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800604a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800604e:	b922      	cbnz	r2, 800605a <quorem+0xf6>
 8006050:	3b04      	subs	r3, #4
 8006052:	429d      	cmp	r5, r3
 8006054:	461a      	mov	r2, r3
 8006056:	d30a      	bcc.n	800606e <quorem+0x10a>
 8006058:	613c      	str	r4, [r7, #16]
 800605a:	4630      	mov	r0, r6
 800605c:	b003      	add	sp, #12
 800605e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006062:	6812      	ldr	r2, [r2, #0]
 8006064:	3b04      	subs	r3, #4
 8006066:	2a00      	cmp	r2, #0
 8006068:	d1cb      	bne.n	8006002 <quorem+0x9e>
 800606a:	3c01      	subs	r4, #1
 800606c:	e7c6      	b.n	8005ffc <quorem+0x98>
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	3b04      	subs	r3, #4
 8006072:	2a00      	cmp	r2, #0
 8006074:	d1f0      	bne.n	8006058 <quorem+0xf4>
 8006076:	3c01      	subs	r4, #1
 8006078:	e7eb      	b.n	8006052 <quorem+0xee>
 800607a:	2000      	movs	r0, #0
 800607c:	e7ee      	b.n	800605c <quorem+0xf8>
	...

08006080 <_dtoa_r>:
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006086:	b097      	sub	sp, #92	; 0x5c
 8006088:	4681      	mov	r9, r0
 800608a:	4614      	mov	r4, r2
 800608c:	461d      	mov	r5, r3
 800608e:	4692      	mov	sl, r2
 8006090:	469b      	mov	fp, r3
 8006092:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8006094:	b149      	cbz	r1, 80060aa <_dtoa_r+0x2a>
 8006096:	2301      	movs	r3, #1
 8006098:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800609a:	4093      	lsls	r3, r2
 800609c:	608b      	str	r3, [r1, #8]
 800609e:	604a      	str	r2, [r1, #4]
 80060a0:	f001 fc6f 	bl	8007982 <_Bfree>
 80060a4:	2300      	movs	r3, #0
 80060a6:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 80060aa:	1e2b      	subs	r3, r5, #0
 80060ac:	bfad      	iteet	ge
 80060ae:	2300      	movge	r3, #0
 80060b0:	2201      	movlt	r2, #1
 80060b2:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80060b6:	6033      	strge	r3, [r6, #0]
 80060b8:	4ba3      	ldr	r3, [pc, #652]	; (8006348 <_dtoa_r+0x2c8>)
 80060ba:	bfb8      	it	lt
 80060bc:	6032      	strlt	r2, [r6, #0]
 80060be:	ea33 030b 	bics.w	r3, r3, fp
 80060c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80060c6:	d119      	bne.n	80060fc <_dtoa_r+0x7c>
 80060c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80060cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80060ce:	6013      	str	r3, [r2, #0]
 80060d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060d4:	4323      	orrs	r3, r4
 80060d6:	f000 857b 	beq.w	8006bd0 <_dtoa_r+0xb50>
 80060da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80060dc:	b90b      	cbnz	r3, 80060e2 <_dtoa_r+0x62>
 80060de:	4b9b      	ldr	r3, [pc, #620]	; (800634c <_dtoa_r+0x2cc>)
 80060e0:	e020      	b.n	8006124 <_dtoa_r+0xa4>
 80060e2:	4b9a      	ldr	r3, [pc, #616]	; (800634c <_dtoa_r+0x2cc>)
 80060e4:	9306      	str	r3, [sp, #24]
 80060e6:	3303      	adds	r3, #3
 80060e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060ea:	6013      	str	r3, [r2, #0]
 80060ec:	9806      	ldr	r0, [sp, #24]
 80060ee:	b017      	add	sp, #92	; 0x5c
 80060f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f4:	4b96      	ldr	r3, [pc, #600]	; (8006350 <_dtoa_r+0x2d0>)
 80060f6:	9306      	str	r3, [sp, #24]
 80060f8:	3308      	adds	r3, #8
 80060fa:	e7f5      	b.n	80060e8 <_dtoa_r+0x68>
 80060fc:	2200      	movs	r2, #0
 80060fe:	2300      	movs	r3, #0
 8006100:	4650      	mov	r0, sl
 8006102:	4659      	mov	r1, fp
 8006104:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8006108:	f7fa fc4e 	bl	80009a8 <__aeabi_dcmpeq>
 800610c:	4607      	mov	r7, r0
 800610e:	b158      	cbz	r0, 8006128 <_dtoa_r+0xa8>
 8006110:	2301      	movs	r3, #1
 8006112:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8556 	beq.w	8006bca <_dtoa_r+0xb4a>
 800611e:	488d      	ldr	r0, [pc, #564]	; (8006354 <_dtoa_r+0x2d4>)
 8006120:	6018      	str	r0, [r3, #0]
 8006122:	1e43      	subs	r3, r0, #1
 8006124:	9306      	str	r3, [sp, #24]
 8006126:	e7e1      	b.n	80060ec <_dtoa_r+0x6c>
 8006128:	ab14      	add	r3, sp, #80	; 0x50
 800612a:	9301      	str	r3, [sp, #4]
 800612c:	ab15      	add	r3, sp, #84	; 0x54
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	4648      	mov	r0, r9
 8006132:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006136:	f001 fed7 	bl	8007ee8 <__d2b>
 800613a:	9b03      	ldr	r3, [sp, #12]
 800613c:	4680      	mov	r8, r0
 800613e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8006142:	2e00      	cmp	r6, #0
 8006144:	d07f      	beq.n	8006246 <_dtoa_r+0x1c6>
 8006146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800614a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800614c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8006150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006154:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006158:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800615c:	9713      	str	r7, [sp, #76]	; 0x4c
 800615e:	2200      	movs	r2, #0
 8006160:	4b7d      	ldr	r3, [pc, #500]	; (8006358 <_dtoa_r+0x2d8>)
 8006162:	f7fa f801 	bl	8000168 <__aeabi_dsub>
 8006166:	a372      	add	r3, pc, #456	; (adr r3, 8006330 <_dtoa_r+0x2b0>)
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	f7fa f9b4 	bl	80004d8 <__aeabi_dmul>
 8006170:	a371      	add	r3, pc, #452	; (adr r3, 8006338 <_dtoa_r+0x2b8>)
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	f7f9 fff9 	bl	800016c <__adddf3>
 800617a:	4604      	mov	r4, r0
 800617c:	4630      	mov	r0, r6
 800617e:	460d      	mov	r5, r1
 8006180:	f7fa f940 	bl	8000404 <__aeabi_i2d>
 8006184:	a36e      	add	r3, pc, #440	; (adr r3, 8006340 <_dtoa_r+0x2c0>)
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	f7fa f9a5 	bl	80004d8 <__aeabi_dmul>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	4620      	mov	r0, r4
 8006194:	4629      	mov	r1, r5
 8006196:	f7f9 ffe9 	bl	800016c <__adddf3>
 800619a:	4604      	mov	r4, r0
 800619c:	460d      	mov	r5, r1
 800619e:	f7fa fc4b 	bl	8000a38 <__aeabi_d2iz>
 80061a2:	2200      	movs	r2, #0
 80061a4:	9003      	str	r0, [sp, #12]
 80061a6:	2300      	movs	r3, #0
 80061a8:	4620      	mov	r0, r4
 80061aa:	4629      	mov	r1, r5
 80061ac:	f7fa fc06 	bl	80009bc <__aeabi_dcmplt>
 80061b0:	b150      	cbz	r0, 80061c8 <_dtoa_r+0x148>
 80061b2:	9803      	ldr	r0, [sp, #12]
 80061b4:	f7fa f926 	bl	8000404 <__aeabi_i2d>
 80061b8:	4622      	mov	r2, r4
 80061ba:	462b      	mov	r3, r5
 80061bc:	f7fa fbf4 	bl	80009a8 <__aeabi_dcmpeq>
 80061c0:	b910      	cbnz	r0, 80061c8 <_dtoa_r+0x148>
 80061c2:	9b03      	ldr	r3, [sp, #12]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	9303      	str	r3, [sp, #12]
 80061c8:	9b03      	ldr	r3, [sp, #12]
 80061ca:	2b16      	cmp	r3, #22
 80061cc:	d858      	bhi.n	8006280 <_dtoa_r+0x200>
 80061ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061d2:	9a03      	ldr	r2, [sp, #12]
 80061d4:	4b61      	ldr	r3, [pc, #388]	; (800635c <_dtoa_r+0x2dc>)
 80061d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	f7fa fbed 	bl	80009bc <__aeabi_dcmplt>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d04e      	beq.n	8006284 <_dtoa_r+0x204>
 80061e6:	9b03      	ldr	r3, [sp, #12]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	9303      	str	r3, [sp, #12]
 80061ec:	2300      	movs	r3, #0
 80061ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80061f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061f2:	1b9e      	subs	r6, r3, r6
 80061f4:	1e73      	subs	r3, r6, #1
 80061f6:	9309      	str	r3, [sp, #36]	; 0x24
 80061f8:	bf49      	itett	mi
 80061fa:	f1c6 0301 	rsbmi	r3, r6, #1
 80061fe:	2300      	movpl	r3, #0
 8006200:	9308      	strmi	r3, [sp, #32]
 8006202:	2300      	movmi	r3, #0
 8006204:	bf54      	ite	pl
 8006206:	9308      	strpl	r3, [sp, #32]
 8006208:	9309      	strmi	r3, [sp, #36]	; 0x24
 800620a:	9b03      	ldr	r3, [sp, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	db3b      	blt.n	8006288 <_dtoa_r+0x208>
 8006210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006212:	9a03      	ldr	r2, [sp, #12]
 8006214:	4413      	add	r3, r2
 8006216:	9309      	str	r3, [sp, #36]	; 0x24
 8006218:	2300      	movs	r3, #0
 800621a:	920e      	str	r2, [sp, #56]	; 0x38
 800621c:	930a      	str	r3, [sp, #40]	; 0x28
 800621e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006220:	2b09      	cmp	r3, #9
 8006222:	d86b      	bhi.n	80062fc <_dtoa_r+0x27c>
 8006224:	2b05      	cmp	r3, #5
 8006226:	bfc4      	itt	gt
 8006228:	3b04      	subgt	r3, #4
 800622a:	9320      	strgt	r3, [sp, #128]	; 0x80
 800622c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800622e:	bfc8      	it	gt
 8006230:	2400      	movgt	r4, #0
 8006232:	f1a3 0302 	sub.w	r3, r3, #2
 8006236:	bfd8      	it	le
 8006238:	2401      	movle	r4, #1
 800623a:	2b03      	cmp	r3, #3
 800623c:	d869      	bhi.n	8006312 <_dtoa_r+0x292>
 800623e:	e8df f003 	tbb	[pc, r3]
 8006242:	392c      	.short	0x392c
 8006244:	5b37      	.short	0x5b37
 8006246:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 800624a:	441e      	add	r6, r3
 800624c:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8006250:	2b20      	cmp	r3, #32
 8006252:	dd10      	ble.n	8006276 <_dtoa_r+0x1f6>
 8006254:	9a03      	ldr	r2, [sp, #12]
 8006256:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800625a:	f206 4012 	addw	r0, r6, #1042	; 0x412
 800625e:	409a      	lsls	r2, r3
 8006260:	fa24 f000 	lsr.w	r0, r4, r0
 8006264:	4310      	orrs	r0, r2
 8006266:	f7fa f8bd 	bl	80003e4 <__aeabi_ui2d>
 800626a:	2301      	movs	r3, #1
 800626c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006270:	3e01      	subs	r6, #1
 8006272:	9313      	str	r3, [sp, #76]	; 0x4c
 8006274:	e773      	b.n	800615e <_dtoa_r+0xde>
 8006276:	f1c3 0320 	rsb	r3, r3, #32
 800627a:	fa04 f003 	lsl.w	r0, r4, r3
 800627e:	e7f2      	b.n	8006266 <_dtoa_r+0x1e6>
 8006280:	2301      	movs	r3, #1
 8006282:	e7b4      	b.n	80061ee <_dtoa_r+0x16e>
 8006284:	900f      	str	r0, [sp, #60]	; 0x3c
 8006286:	e7b3      	b.n	80061f0 <_dtoa_r+0x170>
 8006288:	9b08      	ldr	r3, [sp, #32]
 800628a:	9a03      	ldr	r2, [sp, #12]
 800628c:	1a9b      	subs	r3, r3, r2
 800628e:	9308      	str	r3, [sp, #32]
 8006290:	4253      	negs	r3, r2
 8006292:	930a      	str	r3, [sp, #40]	; 0x28
 8006294:	2300      	movs	r3, #0
 8006296:	930e      	str	r3, [sp, #56]	; 0x38
 8006298:	e7c1      	b.n	800621e <_dtoa_r+0x19e>
 800629a:	2300      	movs	r3, #0
 800629c:	930b      	str	r3, [sp, #44]	; 0x2c
 800629e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	dc39      	bgt.n	8006318 <_dtoa_r+0x298>
 80062a4:	2301      	movs	r3, #1
 80062a6:	461a      	mov	r2, r3
 80062a8:	9304      	str	r3, [sp, #16]
 80062aa:	9307      	str	r3, [sp, #28]
 80062ac:	9221      	str	r2, [sp, #132]	; 0x84
 80062ae:	e00c      	b.n	80062ca <_dtoa_r+0x24a>
 80062b0:	2301      	movs	r3, #1
 80062b2:	e7f3      	b.n	800629c <_dtoa_r+0x21c>
 80062b4:	2300      	movs	r3, #0
 80062b6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80062ba:	9b03      	ldr	r3, [sp, #12]
 80062bc:	4413      	add	r3, r2
 80062be:	9304      	str	r3, [sp, #16]
 80062c0:	3301      	adds	r3, #1
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	9307      	str	r3, [sp, #28]
 80062c6:	bfb8      	it	lt
 80062c8:	2301      	movlt	r3, #1
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c9 2044 	str.w	r2, [r9, #68]	; 0x44
 80062d0:	2204      	movs	r2, #4
 80062d2:	f102 0014 	add.w	r0, r2, #20
 80062d6:	4298      	cmp	r0, r3
 80062d8:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 80062dc:	d920      	bls.n	8006320 <_dtoa_r+0x2a0>
 80062de:	4648      	mov	r0, r9
 80062e0:	f001 fb2a 	bl	8007938 <_Balloc>
 80062e4:	9006      	str	r0, [sp, #24]
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d13e      	bne.n	8006368 <_dtoa_r+0x2e8>
 80062ea:	4602      	mov	r2, r0
 80062ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80062f0:	4b1b      	ldr	r3, [pc, #108]	; (8006360 <_dtoa_r+0x2e0>)
 80062f2:	481c      	ldr	r0, [pc, #112]	; (8006364 <_dtoa_r+0x2e4>)
 80062f4:	f002 fe64 	bl	8008fc0 <__assert_func>
 80062f8:	2301      	movs	r3, #1
 80062fa:	e7dc      	b.n	80062b6 <_dtoa_r+0x236>
 80062fc:	2401      	movs	r4, #1
 80062fe:	2300      	movs	r3, #0
 8006300:	940b      	str	r4, [sp, #44]	; 0x2c
 8006302:	9320      	str	r3, [sp, #128]	; 0x80
 8006304:	f04f 33ff 	mov.w	r3, #4294967295
 8006308:	2200      	movs	r2, #0
 800630a:	9304      	str	r3, [sp, #16]
 800630c:	9307      	str	r3, [sp, #28]
 800630e:	2312      	movs	r3, #18
 8006310:	e7cc      	b.n	80062ac <_dtoa_r+0x22c>
 8006312:	2301      	movs	r3, #1
 8006314:	930b      	str	r3, [sp, #44]	; 0x2c
 8006316:	e7f5      	b.n	8006304 <_dtoa_r+0x284>
 8006318:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800631a:	9304      	str	r3, [sp, #16]
 800631c:	9307      	str	r3, [sp, #28]
 800631e:	e7d4      	b.n	80062ca <_dtoa_r+0x24a>
 8006320:	3101      	adds	r1, #1
 8006322:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8006326:	0052      	lsls	r2, r2, #1
 8006328:	e7d3      	b.n	80062d2 <_dtoa_r+0x252>
 800632a:	bf00      	nop
 800632c:	f3af 8000 	nop.w
 8006330:	636f4361 	.word	0x636f4361
 8006334:	3fd287a7 	.word	0x3fd287a7
 8006338:	8b60c8b3 	.word	0x8b60c8b3
 800633c:	3fc68a28 	.word	0x3fc68a28
 8006340:	509f79fb 	.word	0x509f79fb
 8006344:	3fd34413 	.word	0x3fd34413
 8006348:	7ff00000 	.word	0x7ff00000
 800634c:	08009810 	.word	0x08009810
 8006350:	08009814 	.word	0x08009814
 8006354:	080097cf 	.word	0x080097cf
 8006358:	3ff80000 	.word	0x3ff80000
 800635c:	08009918 	.word	0x08009918
 8006360:	0800981d 	.word	0x0800981d
 8006364:	0800982e 	.word	0x0800982e
 8006368:	9b06      	ldr	r3, [sp, #24]
 800636a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800636e:	9b07      	ldr	r3, [sp, #28]
 8006370:	2b0e      	cmp	r3, #14
 8006372:	f200 80a1 	bhi.w	80064b8 <_dtoa_r+0x438>
 8006376:	2c00      	cmp	r4, #0
 8006378:	f000 809e 	beq.w	80064b8 <_dtoa_r+0x438>
 800637c:	9b03      	ldr	r3, [sp, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	dd34      	ble.n	80063ec <_dtoa_r+0x36c>
 8006382:	4a96      	ldr	r2, [pc, #600]	; (80065dc <_dtoa_r+0x55c>)
 8006384:	f003 030f 	and.w	r3, r3, #15
 8006388:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800638c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006390:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006394:	9b03      	ldr	r3, [sp, #12]
 8006396:	05d8      	lsls	r0, r3, #23
 8006398:	ea4f 1523 	mov.w	r5, r3, asr #4
 800639c:	d516      	bpl.n	80063cc <_dtoa_r+0x34c>
 800639e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063a2:	4b8f      	ldr	r3, [pc, #572]	; (80065e0 <_dtoa_r+0x560>)
 80063a4:	2603      	movs	r6, #3
 80063a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063aa:	f7fa f9bf 	bl	800072c <__aeabi_ddiv>
 80063ae:	4682      	mov	sl, r0
 80063b0:	468b      	mov	fp, r1
 80063b2:	f005 050f 	and.w	r5, r5, #15
 80063b6:	4c8a      	ldr	r4, [pc, #552]	; (80065e0 <_dtoa_r+0x560>)
 80063b8:	b955      	cbnz	r5, 80063d0 <_dtoa_r+0x350>
 80063ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063be:	4650      	mov	r0, sl
 80063c0:	4659      	mov	r1, fp
 80063c2:	f7fa f9b3 	bl	800072c <__aeabi_ddiv>
 80063c6:	4682      	mov	sl, r0
 80063c8:	468b      	mov	fp, r1
 80063ca:	e028      	b.n	800641e <_dtoa_r+0x39e>
 80063cc:	2602      	movs	r6, #2
 80063ce:	e7f2      	b.n	80063b6 <_dtoa_r+0x336>
 80063d0:	07e9      	lsls	r1, r5, #31
 80063d2:	d508      	bpl.n	80063e6 <_dtoa_r+0x366>
 80063d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063d8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80063dc:	f7fa f87c 	bl	80004d8 <__aeabi_dmul>
 80063e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063e4:	3601      	adds	r6, #1
 80063e6:	106d      	asrs	r5, r5, #1
 80063e8:	3408      	adds	r4, #8
 80063ea:	e7e5      	b.n	80063b8 <_dtoa_r+0x338>
 80063ec:	f000 809f 	beq.w	800652e <_dtoa_r+0x4ae>
 80063f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063f4:	9b03      	ldr	r3, [sp, #12]
 80063f6:	2602      	movs	r6, #2
 80063f8:	425c      	negs	r4, r3
 80063fa:	4b78      	ldr	r3, [pc, #480]	; (80065dc <_dtoa_r+0x55c>)
 80063fc:	f004 020f 	and.w	r2, r4, #15
 8006400:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f7fa f866 	bl	80004d8 <__aeabi_dmul>
 800640c:	2300      	movs	r3, #0
 800640e:	4682      	mov	sl, r0
 8006410:	468b      	mov	fp, r1
 8006412:	4d73      	ldr	r5, [pc, #460]	; (80065e0 <_dtoa_r+0x560>)
 8006414:	1124      	asrs	r4, r4, #4
 8006416:	2c00      	cmp	r4, #0
 8006418:	d17e      	bne.n	8006518 <_dtoa_r+0x498>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1d3      	bne.n	80063c6 <_dtoa_r+0x346>
 800641e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8086 	beq.w	8006532 <_dtoa_r+0x4b2>
 8006426:	2200      	movs	r2, #0
 8006428:	4650      	mov	r0, sl
 800642a:	4659      	mov	r1, fp
 800642c:	4b6d      	ldr	r3, [pc, #436]	; (80065e4 <_dtoa_r+0x564>)
 800642e:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 8006432:	f7fa fac3 	bl	80009bc <__aeabi_dcmplt>
 8006436:	2800      	cmp	r0, #0
 8006438:	d07b      	beq.n	8006532 <_dtoa_r+0x4b2>
 800643a:	9b07      	ldr	r3, [sp, #28]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d078      	beq.n	8006532 <_dtoa_r+0x4b2>
 8006440:	9b04      	ldr	r3, [sp, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	dd36      	ble.n	80064b4 <_dtoa_r+0x434>
 8006446:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800644a:	9b03      	ldr	r3, [sp, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	1e5d      	subs	r5, r3, #1
 8006450:	4b65      	ldr	r3, [pc, #404]	; (80065e8 <_dtoa_r+0x568>)
 8006452:	f7fa f841 	bl	80004d8 <__aeabi_dmul>
 8006456:	4682      	mov	sl, r0
 8006458:	468b      	mov	fp, r1
 800645a:	9c04      	ldr	r4, [sp, #16]
 800645c:	3601      	adds	r6, #1
 800645e:	4630      	mov	r0, r6
 8006460:	f7f9 ffd0 	bl	8000404 <__aeabi_i2d>
 8006464:	4652      	mov	r2, sl
 8006466:	465b      	mov	r3, fp
 8006468:	f7fa f836 	bl	80004d8 <__aeabi_dmul>
 800646c:	2200      	movs	r2, #0
 800646e:	4b5f      	ldr	r3, [pc, #380]	; (80065ec <_dtoa_r+0x56c>)
 8006470:	f7f9 fe7c 	bl	800016c <__adddf3>
 8006474:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006478:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800647c:	9611      	str	r6, [sp, #68]	; 0x44
 800647e:	2c00      	cmp	r4, #0
 8006480:	d15a      	bne.n	8006538 <_dtoa_r+0x4b8>
 8006482:	2200      	movs	r2, #0
 8006484:	4650      	mov	r0, sl
 8006486:	4659      	mov	r1, fp
 8006488:	4b59      	ldr	r3, [pc, #356]	; (80065f0 <_dtoa_r+0x570>)
 800648a:	f7f9 fe6d 	bl	8000168 <__aeabi_dsub>
 800648e:	4633      	mov	r3, r6
 8006490:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006492:	4682      	mov	sl, r0
 8006494:	468b      	mov	fp, r1
 8006496:	f7fa faaf 	bl	80009f8 <__aeabi_dcmpgt>
 800649a:	2800      	cmp	r0, #0
 800649c:	f040 828b 	bne.w	80069b6 <_dtoa_r+0x936>
 80064a0:	4650      	mov	r0, sl
 80064a2:	4659      	mov	r1, fp
 80064a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064a6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80064aa:	f7fa fa87 	bl	80009bc <__aeabi_dcmplt>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	f040 827f 	bne.w	80069b2 <_dtoa_r+0x932>
 80064b4:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 80064b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f2c0 814d 	blt.w	800675a <_dtoa_r+0x6da>
 80064c0:	9a03      	ldr	r2, [sp, #12]
 80064c2:	2a0e      	cmp	r2, #14
 80064c4:	f300 8149 	bgt.w	800675a <_dtoa_r+0x6da>
 80064c8:	4b44      	ldr	r3, [pc, #272]	; (80065dc <_dtoa_r+0x55c>)
 80064ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80064d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f280 80d6 	bge.w	800668a <_dtoa_r+0x60a>
 80064de:	9b07      	ldr	r3, [sp, #28]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f300 80d2 	bgt.w	800668a <_dtoa_r+0x60a>
 80064e6:	f040 8263 	bne.w	80069b0 <_dtoa_r+0x930>
 80064ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064ee:	2200      	movs	r2, #0
 80064f0:	4b3f      	ldr	r3, [pc, #252]	; (80065f0 <_dtoa_r+0x570>)
 80064f2:	f7f9 fff1 	bl	80004d8 <__aeabi_dmul>
 80064f6:	4652      	mov	r2, sl
 80064f8:	465b      	mov	r3, fp
 80064fa:	f7fa fa73 	bl	80009e4 <__aeabi_dcmpge>
 80064fe:	9c07      	ldr	r4, [sp, #28]
 8006500:	4625      	mov	r5, r4
 8006502:	2800      	cmp	r0, #0
 8006504:	f040 823c 	bne.w	8006980 <_dtoa_r+0x900>
 8006508:	2331      	movs	r3, #49	; 0x31
 800650a:	9e06      	ldr	r6, [sp, #24]
 800650c:	f806 3b01 	strb.w	r3, [r6], #1
 8006510:	9b03      	ldr	r3, [sp, #12]
 8006512:	3301      	adds	r3, #1
 8006514:	9303      	str	r3, [sp, #12]
 8006516:	e237      	b.n	8006988 <_dtoa_r+0x908>
 8006518:	07e2      	lsls	r2, r4, #31
 800651a:	d505      	bpl.n	8006528 <_dtoa_r+0x4a8>
 800651c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006520:	f7f9 ffda 	bl	80004d8 <__aeabi_dmul>
 8006524:	2301      	movs	r3, #1
 8006526:	3601      	adds	r6, #1
 8006528:	1064      	asrs	r4, r4, #1
 800652a:	3508      	adds	r5, #8
 800652c:	e773      	b.n	8006416 <_dtoa_r+0x396>
 800652e:	2602      	movs	r6, #2
 8006530:	e775      	b.n	800641e <_dtoa_r+0x39e>
 8006532:	9d03      	ldr	r5, [sp, #12]
 8006534:	9c07      	ldr	r4, [sp, #28]
 8006536:	e792      	b.n	800645e <_dtoa_r+0x3de>
 8006538:	9906      	ldr	r1, [sp, #24]
 800653a:	4b28      	ldr	r3, [pc, #160]	; (80065dc <_dtoa_r+0x55c>)
 800653c:	4421      	add	r1, r4
 800653e:	9112      	str	r1, [sp, #72]	; 0x48
 8006540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006542:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006546:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800654a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800654e:	2900      	cmp	r1, #0
 8006550:	d052      	beq.n	80065f8 <_dtoa_r+0x578>
 8006552:	2000      	movs	r0, #0
 8006554:	4927      	ldr	r1, [pc, #156]	; (80065f4 <_dtoa_r+0x574>)
 8006556:	f7fa f8e9 	bl	800072c <__aeabi_ddiv>
 800655a:	4632      	mov	r2, r6
 800655c:	463b      	mov	r3, r7
 800655e:	f7f9 fe03 	bl	8000168 <__aeabi_dsub>
 8006562:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006566:	9e06      	ldr	r6, [sp, #24]
 8006568:	4659      	mov	r1, fp
 800656a:	4650      	mov	r0, sl
 800656c:	f7fa fa64 	bl	8000a38 <__aeabi_d2iz>
 8006570:	4604      	mov	r4, r0
 8006572:	f7f9 ff47 	bl	8000404 <__aeabi_i2d>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4650      	mov	r0, sl
 800657c:	4659      	mov	r1, fp
 800657e:	f7f9 fdf3 	bl	8000168 <__aeabi_dsub>
 8006582:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006586:	3430      	adds	r4, #48	; 0x30
 8006588:	f806 4b01 	strb.w	r4, [r6], #1
 800658c:	4682      	mov	sl, r0
 800658e:	468b      	mov	fp, r1
 8006590:	f7fa fa14 	bl	80009bc <__aeabi_dcmplt>
 8006594:	2800      	cmp	r0, #0
 8006596:	d170      	bne.n	800667a <_dtoa_r+0x5fa>
 8006598:	4652      	mov	r2, sl
 800659a:	465b      	mov	r3, fp
 800659c:	2000      	movs	r0, #0
 800659e:	4911      	ldr	r1, [pc, #68]	; (80065e4 <_dtoa_r+0x564>)
 80065a0:	f7f9 fde2 	bl	8000168 <__aeabi_dsub>
 80065a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065a8:	f7fa fa08 	bl	80009bc <__aeabi_dcmplt>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	f040 80b6 	bne.w	800671e <_dtoa_r+0x69e>
 80065b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065b4:	429e      	cmp	r6, r3
 80065b6:	f43f af7d 	beq.w	80064b4 <_dtoa_r+0x434>
 80065ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065be:	2200      	movs	r2, #0
 80065c0:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <_dtoa_r+0x568>)
 80065c2:	f7f9 ff89 	bl	80004d8 <__aeabi_dmul>
 80065c6:	2200      	movs	r2, #0
 80065c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065cc:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <_dtoa_r+0x568>)
 80065ce:	4650      	mov	r0, sl
 80065d0:	4659      	mov	r1, fp
 80065d2:	f7f9 ff81 	bl	80004d8 <__aeabi_dmul>
 80065d6:	4682      	mov	sl, r0
 80065d8:	468b      	mov	fp, r1
 80065da:	e7c5      	b.n	8006568 <_dtoa_r+0x4e8>
 80065dc:	08009918 	.word	0x08009918
 80065e0:	080098f0 	.word	0x080098f0
 80065e4:	3ff00000 	.word	0x3ff00000
 80065e8:	40240000 	.word	0x40240000
 80065ec:	401c0000 	.word	0x401c0000
 80065f0:	40140000 	.word	0x40140000
 80065f4:	3fe00000 	.word	0x3fe00000
 80065f8:	4630      	mov	r0, r6
 80065fa:	4639      	mov	r1, r7
 80065fc:	f7f9 ff6c 	bl	80004d8 <__aeabi_dmul>
 8006600:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006604:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006606:	9e06      	ldr	r6, [sp, #24]
 8006608:	4659      	mov	r1, fp
 800660a:	4650      	mov	r0, sl
 800660c:	f7fa fa14 	bl	8000a38 <__aeabi_d2iz>
 8006610:	4604      	mov	r4, r0
 8006612:	f7f9 fef7 	bl	8000404 <__aeabi_i2d>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4650      	mov	r0, sl
 800661c:	4659      	mov	r1, fp
 800661e:	f7f9 fda3 	bl	8000168 <__aeabi_dsub>
 8006622:	3430      	adds	r4, #48	; 0x30
 8006624:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006626:	f806 4b01 	strb.w	r4, [r6], #1
 800662a:	429e      	cmp	r6, r3
 800662c:	4682      	mov	sl, r0
 800662e:	468b      	mov	fp, r1
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	d123      	bne.n	800667e <_dtoa_r+0x5fe>
 8006636:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800663a:	4bb2      	ldr	r3, [pc, #712]	; (8006904 <_dtoa_r+0x884>)
 800663c:	f7f9 fd96 	bl	800016c <__adddf3>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4650      	mov	r0, sl
 8006646:	4659      	mov	r1, fp
 8006648:	f7fa f9d6 	bl	80009f8 <__aeabi_dcmpgt>
 800664c:	2800      	cmp	r0, #0
 800664e:	d166      	bne.n	800671e <_dtoa_r+0x69e>
 8006650:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006654:	2000      	movs	r0, #0
 8006656:	49ab      	ldr	r1, [pc, #684]	; (8006904 <_dtoa_r+0x884>)
 8006658:	f7f9 fd86 	bl	8000168 <__aeabi_dsub>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	4650      	mov	r0, sl
 8006662:	4659      	mov	r1, fp
 8006664:	f7fa f9aa 	bl	80009bc <__aeabi_dcmplt>
 8006668:	2800      	cmp	r0, #0
 800666a:	f43f af23 	beq.w	80064b4 <_dtoa_r+0x434>
 800666e:	463e      	mov	r6, r7
 8006670:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006674:	3f01      	subs	r7, #1
 8006676:	2b30      	cmp	r3, #48	; 0x30
 8006678:	d0f9      	beq.n	800666e <_dtoa_r+0x5ee>
 800667a:	9503      	str	r5, [sp, #12]
 800667c:	e03e      	b.n	80066fc <_dtoa_r+0x67c>
 800667e:	4ba2      	ldr	r3, [pc, #648]	; (8006908 <_dtoa_r+0x888>)
 8006680:	f7f9 ff2a 	bl	80004d8 <__aeabi_dmul>
 8006684:	4682      	mov	sl, r0
 8006686:	468b      	mov	fp, r1
 8006688:	e7be      	b.n	8006608 <_dtoa_r+0x588>
 800668a:	4654      	mov	r4, sl
 800668c:	f04f 0a00 	mov.w	sl, #0
 8006690:	465d      	mov	r5, fp
 8006692:	9e06      	ldr	r6, [sp, #24]
 8006694:	f8df b270 	ldr.w	fp, [pc, #624]	; 8006908 <_dtoa_r+0x888>
 8006698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800669c:	4620      	mov	r0, r4
 800669e:	4629      	mov	r1, r5
 80066a0:	f7fa f844 	bl	800072c <__aeabi_ddiv>
 80066a4:	f7fa f9c8 	bl	8000a38 <__aeabi_d2iz>
 80066a8:	4607      	mov	r7, r0
 80066aa:	f7f9 feab 	bl	8000404 <__aeabi_i2d>
 80066ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066b2:	f7f9 ff11 	bl	80004d8 <__aeabi_dmul>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	4620      	mov	r0, r4
 80066bc:	4629      	mov	r1, r5
 80066be:	f7f9 fd53 	bl	8000168 <__aeabi_dsub>
 80066c2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80066c6:	f806 4b01 	strb.w	r4, [r6], #1
 80066ca:	9c06      	ldr	r4, [sp, #24]
 80066cc:	9d07      	ldr	r5, [sp, #28]
 80066ce:	1b34      	subs	r4, r6, r4
 80066d0:	42a5      	cmp	r5, r4
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	d133      	bne.n	8006740 <_dtoa_r+0x6c0>
 80066d8:	f7f9 fd48 	bl	800016c <__adddf3>
 80066dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066e0:	4604      	mov	r4, r0
 80066e2:	460d      	mov	r5, r1
 80066e4:	f7fa f988 	bl	80009f8 <__aeabi_dcmpgt>
 80066e8:	b9c0      	cbnz	r0, 800671c <_dtoa_r+0x69c>
 80066ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066ee:	4620      	mov	r0, r4
 80066f0:	4629      	mov	r1, r5
 80066f2:	f7fa f959 	bl	80009a8 <__aeabi_dcmpeq>
 80066f6:	b108      	cbz	r0, 80066fc <_dtoa_r+0x67c>
 80066f8:	07fb      	lsls	r3, r7, #31
 80066fa:	d40f      	bmi.n	800671c <_dtoa_r+0x69c>
 80066fc:	4648      	mov	r0, r9
 80066fe:	4641      	mov	r1, r8
 8006700:	f001 f93f 	bl	8007982 <_Bfree>
 8006704:	2300      	movs	r3, #0
 8006706:	9803      	ldr	r0, [sp, #12]
 8006708:	7033      	strb	r3, [r6, #0]
 800670a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800670c:	3001      	adds	r0, #1
 800670e:	6018      	str	r0, [r3, #0]
 8006710:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006712:	2b00      	cmp	r3, #0
 8006714:	f43f acea 	beq.w	80060ec <_dtoa_r+0x6c>
 8006718:	601e      	str	r6, [r3, #0]
 800671a:	e4e7      	b.n	80060ec <_dtoa_r+0x6c>
 800671c:	9d03      	ldr	r5, [sp, #12]
 800671e:	4633      	mov	r3, r6
 8006720:	461e      	mov	r6, r3
 8006722:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006726:	2a39      	cmp	r2, #57	; 0x39
 8006728:	d106      	bne.n	8006738 <_dtoa_r+0x6b8>
 800672a:	9a06      	ldr	r2, [sp, #24]
 800672c:	429a      	cmp	r2, r3
 800672e:	d1f7      	bne.n	8006720 <_dtoa_r+0x6a0>
 8006730:	2230      	movs	r2, #48	; 0x30
 8006732:	9906      	ldr	r1, [sp, #24]
 8006734:	3501      	adds	r5, #1
 8006736:	700a      	strb	r2, [r1, #0]
 8006738:	781a      	ldrb	r2, [r3, #0]
 800673a:	3201      	adds	r2, #1
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	e79c      	b.n	800667a <_dtoa_r+0x5fa>
 8006740:	4652      	mov	r2, sl
 8006742:	465b      	mov	r3, fp
 8006744:	f7f9 fec8 	bl	80004d8 <__aeabi_dmul>
 8006748:	2200      	movs	r2, #0
 800674a:	2300      	movs	r3, #0
 800674c:	4604      	mov	r4, r0
 800674e:	460d      	mov	r5, r1
 8006750:	f7fa f92a 	bl	80009a8 <__aeabi_dcmpeq>
 8006754:	2800      	cmp	r0, #0
 8006756:	d09f      	beq.n	8006698 <_dtoa_r+0x618>
 8006758:	e7d0      	b.n	80066fc <_dtoa_r+0x67c>
 800675a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800675c:	2a00      	cmp	r2, #0
 800675e:	f000 80cb 	beq.w	80068f8 <_dtoa_r+0x878>
 8006762:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006764:	2a01      	cmp	r2, #1
 8006766:	f300 80ae 	bgt.w	80068c6 <_dtoa_r+0x846>
 800676a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800676c:	2a00      	cmp	r2, #0
 800676e:	f000 80a6 	beq.w	80068be <_dtoa_r+0x83e>
 8006772:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006776:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006778:	9e08      	ldr	r6, [sp, #32]
 800677a:	9a08      	ldr	r2, [sp, #32]
 800677c:	2101      	movs	r1, #1
 800677e:	441a      	add	r2, r3
 8006780:	9208      	str	r2, [sp, #32]
 8006782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006784:	4648      	mov	r0, r9
 8006786:	441a      	add	r2, r3
 8006788:	9209      	str	r2, [sp, #36]	; 0x24
 800678a:	f001 f99b 	bl	8007ac4 <__i2b>
 800678e:	4605      	mov	r5, r0
 8006790:	2e00      	cmp	r6, #0
 8006792:	dd0c      	ble.n	80067ae <_dtoa_r+0x72e>
 8006794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006796:	2b00      	cmp	r3, #0
 8006798:	dd09      	ble.n	80067ae <_dtoa_r+0x72e>
 800679a:	42b3      	cmp	r3, r6
 800679c:	bfa8      	it	ge
 800679e:	4633      	movge	r3, r6
 80067a0:	9a08      	ldr	r2, [sp, #32]
 80067a2:	1af6      	subs	r6, r6, r3
 80067a4:	1ad2      	subs	r2, r2, r3
 80067a6:	9208      	str	r2, [sp, #32]
 80067a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	9309      	str	r3, [sp, #36]	; 0x24
 80067ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b0:	b1f3      	cbz	r3, 80067f0 <_dtoa_r+0x770>
 80067b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 80a3 	beq.w	8006900 <_dtoa_r+0x880>
 80067ba:	2c00      	cmp	r4, #0
 80067bc:	dd10      	ble.n	80067e0 <_dtoa_r+0x760>
 80067be:	4629      	mov	r1, r5
 80067c0:	4622      	mov	r2, r4
 80067c2:	4648      	mov	r0, r9
 80067c4:	f001 fa38 	bl	8007c38 <__pow5mult>
 80067c8:	4642      	mov	r2, r8
 80067ca:	4601      	mov	r1, r0
 80067cc:	4605      	mov	r5, r0
 80067ce:	4648      	mov	r0, r9
 80067d0:	f001 f98e 	bl	8007af0 <__multiply>
 80067d4:	4607      	mov	r7, r0
 80067d6:	4641      	mov	r1, r8
 80067d8:	4648      	mov	r0, r9
 80067da:	f001 f8d2 	bl	8007982 <_Bfree>
 80067de:	46b8      	mov	r8, r7
 80067e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e2:	1b1a      	subs	r2, r3, r4
 80067e4:	d004      	beq.n	80067f0 <_dtoa_r+0x770>
 80067e6:	4641      	mov	r1, r8
 80067e8:	4648      	mov	r0, r9
 80067ea:	f001 fa25 	bl	8007c38 <__pow5mult>
 80067ee:	4680      	mov	r8, r0
 80067f0:	2101      	movs	r1, #1
 80067f2:	4648      	mov	r0, r9
 80067f4:	f001 f966 	bl	8007ac4 <__i2b>
 80067f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067fa:	4604      	mov	r4, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f340 8085 	ble.w	800690c <_dtoa_r+0x88c>
 8006802:	461a      	mov	r2, r3
 8006804:	4601      	mov	r1, r0
 8006806:	4648      	mov	r0, r9
 8006808:	f001 fa16 	bl	8007c38 <__pow5mult>
 800680c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800680e:	4604      	mov	r4, r0
 8006810:	2b01      	cmp	r3, #1
 8006812:	dd7e      	ble.n	8006912 <_dtoa_r+0x892>
 8006814:	2700      	movs	r7, #0
 8006816:	6923      	ldr	r3, [r4, #16]
 8006818:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800681c:	6918      	ldr	r0, [r3, #16]
 800681e:	f001 f903 	bl	8007a28 <__hi0bits>
 8006822:	f1c0 0020 	rsb	r0, r0, #32
 8006826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006828:	4418      	add	r0, r3
 800682a:	f010 001f 	ands.w	r0, r0, #31
 800682e:	f000 808e 	beq.w	800694e <_dtoa_r+0x8ce>
 8006832:	f1c0 0320 	rsb	r3, r0, #32
 8006836:	2b04      	cmp	r3, #4
 8006838:	f340 8087 	ble.w	800694a <_dtoa_r+0x8ca>
 800683c:	f1c0 001c 	rsb	r0, r0, #28
 8006840:	9b08      	ldr	r3, [sp, #32]
 8006842:	4406      	add	r6, r0
 8006844:	4403      	add	r3, r0
 8006846:	9308      	str	r3, [sp, #32]
 8006848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684a:	4403      	add	r3, r0
 800684c:	9309      	str	r3, [sp, #36]	; 0x24
 800684e:	9b08      	ldr	r3, [sp, #32]
 8006850:	2b00      	cmp	r3, #0
 8006852:	dd05      	ble.n	8006860 <_dtoa_r+0x7e0>
 8006854:	4641      	mov	r1, r8
 8006856:	461a      	mov	r2, r3
 8006858:	4648      	mov	r0, r9
 800685a:	f001 fa2d 	bl	8007cb8 <__lshift>
 800685e:	4680      	mov	r8, r0
 8006860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006862:	2b00      	cmp	r3, #0
 8006864:	dd05      	ble.n	8006872 <_dtoa_r+0x7f2>
 8006866:	4621      	mov	r1, r4
 8006868:	461a      	mov	r2, r3
 800686a:	4648      	mov	r0, r9
 800686c:	f001 fa24 	bl	8007cb8 <__lshift>
 8006870:	4604      	mov	r4, r0
 8006872:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006874:	2b00      	cmp	r3, #0
 8006876:	d06c      	beq.n	8006952 <_dtoa_r+0x8d2>
 8006878:	4621      	mov	r1, r4
 800687a:	4640      	mov	r0, r8
 800687c:	f001 fa88 	bl	8007d90 <__mcmp>
 8006880:	2800      	cmp	r0, #0
 8006882:	da66      	bge.n	8006952 <_dtoa_r+0x8d2>
 8006884:	9b03      	ldr	r3, [sp, #12]
 8006886:	4641      	mov	r1, r8
 8006888:	3b01      	subs	r3, #1
 800688a:	9303      	str	r3, [sp, #12]
 800688c:	220a      	movs	r2, #10
 800688e:	2300      	movs	r3, #0
 8006890:	4648      	mov	r0, r9
 8006892:	f001 f87f 	bl	8007994 <__multadd>
 8006896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006898:	4680      	mov	r8, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 819f 	beq.w	8006bde <_dtoa_r+0xb5e>
 80068a0:	2300      	movs	r3, #0
 80068a2:	4629      	mov	r1, r5
 80068a4:	220a      	movs	r2, #10
 80068a6:	4648      	mov	r0, r9
 80068a8:	f001 f874 	bl	8007994 <__multadd>
 80068ac:	9b04      	ldr	r3, [sp, #16]
 80068ae:	4605      	mov	r5, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f300 8089 	bgt.w	80069c8 <_dtoa_r+0x948>
 80068b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	dc52      	bgt.n	8006962 <_dtoa_r+0x8e2>
 80068bc:	e084      	b.n	80069c8 <_dtoa_r+0x948>
 80068be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068c4:	e757      	b.n	8006776 <_dtoa_r+0x6f6>
 80068c6:	9b07      	ldr	r3, [sp, #28]
 80068c8:	1e5c      	subs	r4, r3, #1
 80068ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068cc:	42a3      	cmp	r3, r4
 80068ce:	bfb7      	itett	lt
 80068d0:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80068d2:	1b1c      	subge	r4, r3, r4
 80068d4:	1ae2      	sublt	r2, r4, r3
 80068d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80068d8:	bfbe      	ittt	lt
 80068da:	940a      	strlt	r4, [sp, #40]	; 0x28
 80068dc:	189b      	addlt	r3, r3, r2
 80068de:	930e      	strlt	r3, [sp, #56]	; 0x38
 80068e0:	9b07      	ldr	r3, [sp, #28]
 80068e2:	bfb8      	it	lt
 80068e4:	2400      	movlt	r4, #0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	bfb7      	itett	lt
 80068ea:	e9dd 2307 	ldrdlt	r2, r3, [sp, #28]
 80068ee:	e9dd 3607 	ldrdge	r3, r6, [sp, #28]
 80068f2:	1a9e      	sublt	r6, r3, r2
 80068f4:	2300      	movlt	r3, #0
 80068f6:	e740      	b.n	800677a <_dtoa_r+0x6fa>
 80068f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80068fa:	9e08      	ldr	r6, [sp, #32]
 80068fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80068fe:	e747      	b.n	8006790 <_dtoa_r+0x710>
 8006900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006902:	e770      	b.n	80067e6 <_dtoa_r+0x766>
 8006904:	3fe00000 	.word	0x3fe00000
 8006908:	40240000 	.word	0x40240000
 800690c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800690e:	2b01      	cmp	r3, #1
 8006910:	dc17      	bgt.n	8006942 <_dtoa_r+0x8c2>
 8006912:	f1ba 0f00 	cmp.w	sl, #0
 8006916:	d114      	bne.n	8006942 <_dtoa_r+0x8c2>
 8006918:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800691c:	b99b      	cbnz	r3, 8006946 <_dtoa_r+0x8c6>
 800691e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8006922:	0d3f      	lsrs	r7, r7, #20
 8006924:	053f      	lsls	r7, r7, #20
 8006926:	b137      	cbz	r7, 8006936 <_dtoa_r+0x8b6>
 8006928:	2701      	movs	r7, #1
 800692a:	9b08      	ldr	r3, [sp, #32]
 800692c:	3301      	adds	r3, #1
 800692e:	9308      	str	r3, [sp, #32]
 8006930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006932:	3301      	adds	r3, #1
 8006934:	9309      	str	r3, [sp, #36]	; 0x24
 8006936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006938:	2b00      	cmp	r3, #0
 800693a:	f47f af6c 	bne.w	8006816 <_dtoa_r+0x796>
 800693e:	2001      	movs	r0, #1
 8006940:	e771      	b.n	8006826 <_dtoa_r+0x7a6>
 8006942:	2700      	movs	r7, #0
 8006944:	e7f7      	b.n	8006936 <_dtoa_r+0x8b6>
 8006946:	4657      	mov	r7, sl
 8006948:	e7f5      	b.n	8006936 <_dtoa_r+0x8b6>
 800694a:	d080      	beq.n	800684e <_dtoa_r+0x7ce>
 800694c:	4618      	mov	r0, r3
 800694e:	301c      	adds	r0, #28
 8006950:	e776      	b.n	8006840 <_dtoa_r+0x7c0>
 8006952:	9b07      	ldr	r3, [sp, #28]
 8006954:	2b00      	cmp	r3, #0
 8006956:	dc31      	bgt.n	80069bc <_dtoa_r+0x93c>
 8006958:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800695a:	2b02      	cmp	r3, #2
 800695c:	dd2e      	ble.n	80069bc <_dtoa_r+0x93c>
 800695e:	9b07      	ldr	r3, [sp, #28]
 8006960:	9304      	str	r3, [sp, #16]
 8006962:	9b04      	ldr	r3, [sp, #16]
 8006964:	b963      	cbnz	r3, 8006980 <_dtoa_r+0x900>
 8006966:	4621      	mov	r1, r4
 8006968:	2205      	movs	r2, #5
 800696a:	4648      	mov	r0, r9
 800696c:	f001 f812 	bl	8007994 <__multadd>
 8006970:	4601      	mov	r1, r0
 8006972:	4604      	mov	r4, r0
 8006974:	4640      	mov	r0, r8
 8006976:	f001 fa0b 	bl	8007d90 <__mcmp>
 800697a:	2800      	cmp	r0, #0
 800697c:	f73f adc4 	bgt.w	8006508 <_dtoa_r+0x488>
 8006980:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006982:	9e06      	ldr	r6, [sp, #24]
 8006984:	43db      	mvns	r3, r3
 8006986:	9303      	str	r3, [sp, #12]
 8006988:	2700      	movs	r7, #0
 800698a:	4621      	mov	r1, r4
 800698c:	4648      	mov	r0, r9
 800698e:	f000 fff8 	bl	8007982 <_Bfree>
 8006992:	2d00      	cmp	r5, #0
 8006994:	f43f aeb2 	beq.w	80066fc <_dtoa_r+0x67c>
 8006998:	b12f      	cbz	r7, 80069a6 <_dtoa_r+0x926>
 800699a:	42af      	cmp	r7, r5
 800699c:	d003      	beq.n	80069a6 <_dtoa_r+0x926>
 800699e:	4639      	mov	r1, r7
 80069a0:	4648      	mov	r0, r9
 80069a2:	f000 ffee 	bl	8007982 <_Bfree>
 80069a6:	4629      	mov	r1, r5
 80069a8:	4648      	mov	r0, r9
 80069aa:	f000 ffea 	bl	8007982 <_Bfree>
 80069ae:	e6a5      	b.n	80066fc <_dtoa_r+0x67c>
 80069b0:	2400      	movs	r4, #0
 80069b2:	4625      	mov	r5, r4
 80069b4:	e7e4      	b.n	8006980 <_dtoa_r+0x900>
 80069b6:	9503      	str	r5, [sp, #12]
 80069b8:	4625      	mov	r5, r4
 80069ba:	e5a5      	b.n	8006508 <_dtoa_r+0x488>
 80069bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 80c4 	beq.w	8006b4c <_dtoa_r+0xacc>
 80069c4:	9b07      	ldr	r3, [sp, #28]
 80069c6:	9304      	str	r3, [sp, #16]
 80069c8:	2e00      	cmp	r6, #0
 80069ca:	dd05      	ble.n	80069d8 <_dtoa_r+0x958>
 80069cc:	4629      	mov	r1, r5
 80069ce:	4632      	mov	r2, r6
 80069d0:	4648      	mov	r0, r9
 80069d2:	f001 f971 	bl	8007cb8 <__lshift>
 80069d6:	4605      	mov	r5, r0
 80069d8:	2f00      	cmp	r7, #0
 80069da:	d058      	beq.n	8006a8e <_dtoa_r+0xa0e>
 80069dc:	4648      	mov	r0, r9
 80069de:	6869      	ldr	r1, [r5, #4]
 80069e0:	f000 ffaa 	bl	8007938 <_Balloc>
 80069e4:	4606      	mov	r6, r0
 80069e6:	b920      	cbnz	r0, 80069f2 <_dtoa_r+0x972>
 80069e8:	4602      	mov	r2, r0
 80069ea:	f240 21ea 	movw	r1, #746	; 0x2ea
 80069ee:	4b80      	ldr	r3, [pc, #512]	; (8006bf0 <_dtoa_r+0xb70>)
 80069f0:	e47f      	b.n	80062f2 <_dtoa_r+0x272>
 80069f2:	692a      	ldr	r2, [r5, #16]
 80069f4:	f105 010c 	add.w	r1, r5, #12
 80069f8:	3202      	adds	r2, #2
 80069fa:	0092      	lsls	r2, r2, #2
 80069fc:	300c      	adds	r0, #12
 80069fe:	f7fc fd7d 	bl	80034fc <memcpy>
 8006a02:	2201      	movs	r2, #1
 8006a04:	4631      	mov	r1, r6
 8006a06:	4648      	mov	r0, r9
 8006a08:	f001 f956 	bl	8007cb8 <__lshift>
 8006a0c:	462f      	mov	r7, r5
 8006a0e:	4605      	mov	r5, r0
 8006a10:	9b06      	ldr	r3, [sp, #24]
 8006a12:	9a06      	ldr	r2, [sp, #24]
 8006a14:	3301      	adds	r3, #1
 8006a16:	9307      	str	r3, [sp, #28]
 8006a18:	9b04      	ldr	r3, [sp, #16]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	930a      	str	r3, [sp, #40]	; 0x28
 8006a1e:	f00a 0301 	and.w	r3, sl, #1
 8006a22:	9309      	str	r3, [sp, #36]	; 0x24
 8006a24:	9b07      	ldr	r3, [sp, #28]
 8006a26:	4621      	mov	r1, r4
 8006a28:	4640      	mov	r0, r8
 8006a2a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006a2e:	f7ff fa99 	bl	8005f64 <quorem>
 8006a32:	4639      	mov	r1, r7
 8006a34:	9004      	str	r0, [sp, #16]
 8006a36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	f001 f9a8 	bl	8007d90 <__mcmp>
 8006a40:	462a      	mov	r2, r5
 8006a42:	9008      	str	r0, [sp, #32]
 8006a44:	4621      	mov	r1, r4
 8006a46:	4648      	mov	r0, r9
 8006a48:	f001 f9be 	bl	8007dc8 <__mdiff>
 8006a4c:	68c2      	ldr	r2, [r0, #12]
 8006a4e:	4606      	mov	r6, r0
 8006a50:	b9fa      	cbnz	r2, 8006a92 <_dtoa_r+0xa12>
 8006a52:	4601      	mov	r1, r0
 8006a54:	4640      	mov	r0, r8
 8006a56:	f001 f99b 	bl	8007d90 <__mcmp>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4648      	mov	r0, r9
 8006a60:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a62:	f000 ff8e 	bl	8007982 <_Bfree>
 8006a66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006a68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a6a:	9e07      	ldr	r6, [sp, #28]
 8006a6c:	ea43 0102 	orr.w	r1, r3, r2
 8006a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a72:	430b      	orrs	r3, r1
 8006a74:	d10f      	bne.n	8006a96 <_dtoa_r+0xa16>
 8006a76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a7a:	d028      	beq.n	8006ace <_dtoa_r+0xa4e>
 8006a7c:	9b08      	ldr	r3, [sp, #32]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	dd02      	ble.n	8006a88 <_dtoa_r+0xa08>
 8006a82:	9b04      	ldr	r3, [sp, #16]
 8006a84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006a88:	f88b a000 	strb.w	sl, [fp]
 8006a8c:	e77d      	b.n	800698a <_dtoa_r+0x90a>
 8006a8e:	4628      	mov	r0, r5
 8006a90:	e7bc      	b.n	8006a0c <_dtoa_r+0x98c>
 8006a92:	2201      	movs	r2, #1
 8006a94:	e7e2      	b.n	8006a5c <_dtoa_r+0x9dc>
 8006a96:	9b08      	ldr	r3, [sp, #32]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	db04      	blt.n	8006aa6 <_dtoa_r+0xa26>
 8006a9c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006a9e:	430b      	orrs	r3, r1
 8006aa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aa2:	430b      	orrs	r3, r1
 8006aa4:	d120      	bne.n	8006ae8 <_dtoa_r+0xa68>
 8006aa6:	2a00      	cmp	r2, #0
 8006aa8:	ddee      	ble.n	8006a88 <_dtoa_r+0xa08>
 8006aaa:	4641      	mov	r1, r8
 8006aac:	2201      	movs	r2, #1
 8006aae:	4648      	mov	r0, r9
 8006ab0:	f001 f902 	bl	8007cb8 <__lshift>
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	4680      	mov	r8, r0
 8006ab8:	f001 f96a 	bl	8007d90 <__mcmp>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	dc03      	bgt.n	8006ac8 <_dtoa_r+0xa48>
 8006ac0:	d1e2      	bne.n	8006a88 <_dtoa_r+0xa08>
 8006ac2:	f01a 0f01 	tst.w	sl, #1
 8006ac6:	d0df      	beq.n	8006a88 <_dtoa_r+0xa08>
 8006ac8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006acc:	d1d9      	bne.n	8006a82 <_dtoa_r+0xa02>
 8006ace:	2339      	movs	r3, #57	; 0x39
 8006ad0:	f88b 3000 	strb.w	r3, [fp]
 8006ad4:	4633      	mov	r3, r6
 8006ad6:	461e      	mov	r6, r3
 8006ad8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	2a39      	cmp	r2, #57	; 0x39
 8006ae0:	d06a      	beq.n	8006bb8 <_dtoa_r+0xb38>
 8006ae2:	3201      	adds	r2, #1
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	e750      	b.n	800698a <_dtoa_r+0x90a>
 8006ae8:	2a00      	cmp	r2, #0
 8006aea:	dd07      	ble.n	8006afc <_dtoa_r+0xa7c>
 8006aec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006af0:	d0ed      	beq.n	8006ace <_dtoa_r+0xa4e>
 8006af2:	f10a 0301 	add.w	r3, sl, #1
 8006af6:	f88b 3000 	strb.w	r3, [fp]
 8006afa:	e746      	b.n	800698a <_dtoa_r+0x90a>
 8006afc:	9b07      	ldr	r3, [sp, #28]
 8006afe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b00:	f803 ac01 	strb.w	sl, [r3, #-1]
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d041      	beq.n	8006b8c <_dtoa_r+0xb0c>
 8006b08:	4641      	mov	r1, r8
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	220a      	movs	r2, #10
 8006b0e:	4648      	mov	r0, r9
 8006b10:	f000 ff40 	bl	8007994 <__multadd>
 8006b14:	42af      	cmp	r7, r5
 8006b16:	4680      	mov	r8, r0
 8006b18:	f04f 0300 	mov.w	r3, #0
 8006b1c:	f04f 020a 	mov.w	r2, #10
 8006b20:	4639      	mov	r1, r7
 8006b22:	4648      	mov	r0, r9
 8006b24:	d107      	bne.n	8006b36 <_dtoa_r+0xab6>
 8006b26:	f000 ff35 	bl	8007994 <__multadd>
 8006b2a:	4607      	mov	r7, r0
 8006b2c:	4605      	mov	r5, r0
 8006b2e:	9b07      	ldr	r3, [sp, #28]
 8006b30:	3301      	adds	r3, #1
 8006b32:	9307      	str	r3, [sp, #28]
 8006b34:	e776      	b.n	8006a24 <_dtoa_r+0x9a4>
 8006b36:	f000 ff2d 	bl	8007994 <__multadd>
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	4607      	mov	r7, r0
 8006b3e:	2300      	movs	r3, #0
 8006b40:	220a      	movs	r2, #10
 8006b42:	4648      	mov	r0, r9
 8006b44:	f000 ff26 	bl	8007994 <__multadd>
 8006b48:	4605      	mov	r5, r0
 8006b4a:	e7f0      	b.n	8006b2e <_dtoa_r+0xaae>
 8006b4c:	9b07      	ldr	r3, [sp, #28]
 8006b4e:	9304      	str	r3, [sp, #16]
 8006b50:	9e06      	ldr	r6, [sp, #24]
 8006b52:	4621      	mov	r1, r4
 8006b54:	4640      	mov	r0, r8
 8006b56:	f7ff fa05 	bl	8005f64 <quorem>
 8006b5a:	9b06      	ldr	r3, [sp, #24]
 8006b5c:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006b60:	f806 ab01 	strb.w	sl, [r6], #1
 8006b64:	1af2      	subs	r2, r6, r3
 8006b66:	9b04      	ldr	r3, [sp, #16]
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	dd07      	ble.n	8006b7c <_dtoa_r+0xafc>
 8006b6c:	4641      	mov	r1, r8
 8006b6e:	2300      	movs	r3, #0
 8006b70:	220a      	movs	r2, #10
 8006b72:	4648      	mov	r0, r9
 8006b74:	f000 ff0e 	bl	8007994 <__multadd>
 8006b78:	4680      	mov	r8, r0
 8006b7a:	e7ea      	b.n	8006b52 <_dtoa_r+0xad2>
 8006b7c:	9b04      	ldr	r3, [sp, #16]
 8006b7e:	2700      	movs	r7, #0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	bfcc      	ite	gt
 8006b84:	461e      	movgt	r6, r3
 8006b86:	2601      	movle	r6, #1
 8006b88:	9b06      	ldr	r3, [sp, #24]
 8006b8a:	441e      	add	r6, r3
 8006b8c:	4641      	mov	r1, r8
 8006b8e:	2201      	movs	r2, #1
 8006b90:	4648      	mov	r0, r9
 8006b92:	f001 f891 	bl	8007cb8 <__lshift>
 8006b96:	4621      	mov	r1, r4
 8006b98:	4680      	mov	r8, r0
 8006b9a:	f001 f8f9 	bl	8007d90 <__mcmp>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	dc98      	bgt.n	8006ad4 <_dtoa_r+0xa54>
 8006ba2:	d102      	bne.n	8006baa <_dtoa_r+0xb2a>
 8006ba4:	f01a 0f01 	tst.w	sl, #1
 8006ba8:	d194      	bne.n	8006ad4 <_dtoa_r+0xa54>
 8006baa:	4633      	mov	r3, r6
 8006bac:	461e      	mov	r6, r3
 8006bae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bb2:	2a30      	cmp	r2, #48	; 0x30
 8006bb4:	d0fa      	beq.n	8006bac <_dtoa_r+0xb2c>
 8006bb6:	e6e8      	b.n	800698a <_dtoa_r+0x90a>
 8006bb8:	9a06      	ldr	r2, [sp, #24]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d18b      	bne.n	8006ad6 <_dtoa_r+0xa56>
 8006bbe:	9b03      	ldr	r3, [sp, #12]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	9303      	str	r3, [sp, #12]
 8006bc4:	2331      	movs	r3, #49	; 0x31
 8006bc6:	7013      	strb	r3, [r2, #0]
 8006bc8:	e6df      	b.n	800698a <_dtoa_r+0x90a>
 8006bca:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <_dtoa_r+0xb74>)
 8006bcc:	f7ff baaa 	b.w	8006124 <_dtoa_r+0xa4>
 8006bd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f47f aa8e 	bne.w	80060f4 <_dtoa_r+0x74>
 8006bd8:	4b07      	ldr	r3, [pc, #28]	; (8006bf8 <_dtoa_r+0xb78>)
 8006bda:	f7ff baa3 	b.w	8006124 <_dtoa_r+0xa4>
 8006bde:	9b04      	ldr	r3, [sp, #16]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	dcb5      	bgt.n	8006b50 <_dtoa_r+0xad0>
 8006be4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	f73f aebb 	bgt.w	8006962 <_dtoa_r+0x8e2>
 8006bec:	e7b0      	b.n	8006b50 <_dtoa_r+0xad0>
 8006bee:	bf00      	nop
 8006bf0:	0800981d 	.word	0x0800981d
 8006bf4:	080097ce 	.word	0x080097ce
 8006bf8:	08009814 	.word	0x08009814

08006bfc <__sflush_r>:
 8006bfc:	898b      	ldrh	r3, [r1, #12]
 8006bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c02:	4605      	mov	r5, r0
 8006c04:	0718      	lsls	r0, r3, #28
 8006c06:	460c      	mov	r4, r1
 8006c08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c0c:	d45f      	bmi.n	8006cce <__sflush_r+0xd2>
 8006c0e:	684b      	ldr	r3, [r1, #4]
 8006c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	818a      	strh	r2, [r1, #12]
 8006c18:	dc05      	bgt.n	8006c26 <__sflush_r+0x2a>
 8006c1a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	dc02      	bgt.n	8006c26 <__sflush_r+0x2a>
 8006c20:	2000      	movs	r0, #0
 8006c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c28:	2e00      	cmp	r6, #0
 8006c2a:	d0f9      	beq.n	8006c20 <__sflush_r+0x24>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c32:	682f      	ldr	r7, [r5, #0]
 8006c34:	602b      	str	r3, [r5, #0]
 8006c36:	d036      	beq.n	8006ca6 <__sflush_r+0xaa>
 8006c38:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	075a      	lsls	r2, r3, #29
 8006c3e:	d505      	bpl.n	8006c4c <__sflush_r+0x50>
 8006c40:	6863      	ldr	r3, [r4, #4]
 8006c42:	1ac0      	subs	r0, r0, r3
 8006c44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006c46:	b10b      	cbz	r3, 8006c4c <__sflush_r+0x50>
 8006c48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006c4a:	1ac0      	subs	r0, r0, r3
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	4602      	mov	r2, r0
 8006c50:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c52:	4628      	mov	r0, r5
 8006c54:	69e1      	ldr	r1, [r4, #28]
 8006c56:	47b0      	blx	r6
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	89a3      	ldrh	r3, [r4, #12]
 8006c5c:	d106      	bne.n	8006c6c <__sflush_r+0x70>
 8006c5e:	6829      	ldr	r1, [r5, #0]
 8006c60:	291d      	cmp	r1, #29
 8006c62:	d830      	bhi.n	8006cc6 <__sflush_r+0xca>
 8006c64:	4a2b      	ldr	r2, [pc, #172]	; (8006d14 <__sflush_r+0x118>)
 8006c66:	40ca      	lsrs	r2, r1
 8006c68:	07d6      	lsls	r6, r2, #31
 8006c6a:	d52c      	bpl.n	8006cc6 <__sflush_r+0xca>
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c72:	b21b      	sxth	r3, r3
 8006c74:	6062      	str	r2, [r4, #4]
 8006c76:	6922      	ldr	r2, [r4, #16]
 8006c78:	04d9      	lsls	r1, r3, #19
 8006c7a:	81a3      	strh	r3, [r4, #12]
 8006c7c:	6022      	str	r2, [r4, #0]
 8006c7e:	d504      	bpl.n	8006c8a <__sflush_r+0x8e>
 8006c80:	1c42      	adds	r2, r0, #1
 8006c82:	d101      	bne.n	8006c88 <__sflush_r+0x8c>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	b903      	cbnz	r3, 8006c8a <__sflush_r+0x8e>
 8006c88:	6520      	str	r0, [r4, #80]	; 0x50
 8006c8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006c8c:	602f      	str	r7, [r5, #0]
 8006c8e:	2900      	cmp	r1, #0
 8006c90:	d0c6      	beq.n	8006c20 <__sflush_r+0x24>
 8006c92:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006c96:	4299      	cmp	r1, r3
 8006c98:	d002      	beq.n	8006ca0 <__sflush_r+0xa4>
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	f000 f938 	bl	8006f10 <_free_r>
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	6320      	str	r0, [r4, #48]	; 0x30
 8006ca4:	e7bd      	b.n	8006c22 <__sflush_r+0x26>
 8006ca6:	69e1      	ldr	r1, [r4, #28]
 8006ca8:	2301      	movs	r3, #1
 8006caa:	4628      	mov	r0, r5
 8006cac:	47b0      	blx	r6
 8006cae:	1c41      	adds	r1, r0, #1
 8006cb0:	d1c3      	bne.n	8006c3a <__sflush_r+0x3e>
 8006cb2:	682b      	ldr	r3, [r5, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0c0      	beq.n	8006c3a <__sflush_r+0x3e>
 8006cb8:	2b1d      	cmp	r3, #29
 8006cba:	d001      	beq.n	8006cc0 <__sflush_r+0xc4>
 8006cbc:	2b16      	cmp	r3, #22
 8006cbe:	d101      	bne.n	8006cc4 <__sflush_r+0xc8>
 8006cc0:	602f      	str	r7, [r5, #0]
 8006cc2:	e7ad      	b.n	8006c20 <__sflush_r+0x24>
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cca:	81a3      	strh	r3, [r4, #12]
 8006ccc:	e7a9      	b.n	8006c22 <__sflush_r+0x26>
 8006cce:	690f      	ldr	r7, [r1, #16]
 8006cd0:	2f00      	cmp	r7, #0
 8006cd2:	d0a5      	beq.n	8006c20 <__sflush_r+0x24>
 8006cd4:	079b      	lsls	r3, r3, #30
 8006cd6:	bf18      	it	ne
 8006cd8:	2300      	movne	r3, #0
 8006cda:	680e      	ldr	r6, [r1, #0]
 8006cdc:	bf08      	it	eq
 8006cde:	694b      	ldreq	r3, [r1, #20]
 8006ce0:	eba6 0807 	sub.w	r8, r6, r7
 8006ce4:	600f      	str	r7, [r1, #0]
 8006ce6:	608b      	str	r3, [r1, #8]
 8006ce8:	f1b8 0f00 	cmp.w	r8, #0
 8006cec:	dd98      	ble.n	8006c20 <__sflush_r+0x24>
 8006cee:	4643      	mov	r3, r8
 8006cf0:	463a      	mov	r2, r7
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	69e1      	ldr	r1, [r4, #28]
 8006cf6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006cf8:	47b0      	blx	r6
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	dc06      	bgt.n	8006d0c <__sflush_r+0x110>
 8006cfe:	89a3      	ldrh	r3, [r4, #12]
 8006d00:	f04f 30ff 	mov.w	r0, #4294967295
 8006d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d08:	81a3      	strh	r3, [r4, #12]
 8006d0a:	e78a      	b.n	8006c22 <__sflush_r+0x26>
 8006d0c:	4407      	add	r7, r0
 8006d0e:	eba8 0800 	sub.w	r8, r8, r0
 8006d12:	e7e9      	b.n	8006ce8 <__sflush_r+0xec>
 8006d14:	20400001 	.word	0x20400001

08006d18 <_fflush_r>:
 8006d18:	b538      	push	{r3, r4, r5, lr}
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	4605      	mov	r5, r0
 8006d1e:	b118      	cbz	r0, 8006d28 <_fflush_r+0x10>
 8006d20:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006d22:	b90b      	cbnz	r3, 8006d28 <_fflush_r+0x10>
 8006d24:	f000 f864 	bl	8006df0 <__sinit>
 8006d28:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8006d2c:	b1b8      	cbz	r0, 8006d5e <_fflush_r+0x46>
 8006d2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d30:	07db      	lsls	r3, r3, #31
 8006d32:	d404      	bmi.n	8006d3e <_fflush_r+0x26>
 8006d34:	0581      	lsls	r1, r0, #22
 8006d36:	d402      	bmi.n	8006d3e <_fflush_r+0x26>
 8006d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d3a:	f000 fb19 	bl	8007370 <__retarget_lock_acquire_recursive>
 8006d3e:	4628      	mov	r0, r5
 8006d40:	4621      	mov	r1, r4
 8006d42:	f7ff ff5b 	bl	8006bfc <__sflush_r>
 8006d46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d48:	4605      	mov	r5, r0
 8006d4a:	07da      	lsls	r2, r3, #31
 8006d4c:	d405      	bmi.n	8006d5a <_fflush_r+0x42>
 8006d4e:	89a3      	ldrh	r3, [r4, #12]
 8006d50:	059b      	lsls	r3, r3, #22
 8006d52:	d402      	bmi.n	8006d5a <_fflush_r+0x42>
 8006d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d56:	f000 fb0c 	bl	8007372 <__retarget_lock_release_recursive>
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	bd38      	pop	{r3, r4, r5, pc}
 8006d5e:	4605      	mov	r5, r0
 8006d60:	e7fb      	b.n	8006d5a <_fflush_r+0x42>
	...

08006d64 <std>:
 8006d64:	2300      	movs	r3, #0
 8006d66:	b510      	push	{r4, lr}
 8006d68:	4604      	mov	r4, r0
 8006d6a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d72:	6083      	str	r3, [r0, #8]
 8006d74:	8181      	strh	r1, [r0, #12]
 8006d76:	6643      	str	r3, [r0, #100]	; 0x64
 8006d78:	81c2      	strh	r2, [r0, #14]
 8006d7a:	6183      	str	r3, [r0, #24]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	2208      	movs	r2, #8
 8006d80:	305c      	adds	r0, #92	; 0x5c
 8006d82:	f7fc fbc9 	bl	8003518 <memset>
 8006d86:	4b07      	ldr	r3, [pc, #28]	; (8006da4 <std+0x40>)
 8006d88:	61e4      	str	r4, [r4, #28]
 8006d8a:	6223      	str	r3, [r4, #32]
 8006d8c:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <std+0x44>)
 8006d8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d92:	6263      	str	r3, [r4, #36]	; 0x24
 8006d94:	4b05      	ldr	r3, [pc, #20]	; (8006dac <std+0x48>)
 8006d96:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d98:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <std+0x4c>)
 8006d9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da0:	f000 bae4 	b.w	800736c <__retarget_lock_init_recursive>
 8006da4:	0800837d 	.word	0x0800837d
 8006da8:	0800839f 	.word	0x0800839f
 8006dac:	080083d7 	.word	0x080083d7
 8006db0:	080083fb 	.word	0x080083fb

08006db4 <_cleanup_r>:
 8006db4:	4901      	ldr	r1, [pc, #4]	; (8006dbc <_cleanup_r+0x8>)
 8006db6:	f000 bab5 	b.w	8007324 <_fwalk_reent>
 8006dba:	bf00      	nop
 8006dbc:	08009079 	.word	0x08009079

08006dc0 <__sfp_lock_acquire>:
 8006dc0:	4801      	ldr	r0, [pc, #4]	; (8006dc8 <__sfp_lock_acquire+0x8>)
 8006dc2:	f000 bad5 	b.w	8007370 <__retarget_lock_acquire_recursive>
 8006dc6:	bf00      	nop
 8006dc8:	20000c58 	.word	0x20000c58

08006dcc <__sfp_lock_release>:
 8006dcc:	4801      	ldr	r0, [pc, #4]	; (8006dd4 <__sfp_lock_release+0x8>)
 8006dce:	f000 bad0 	b.w	8007372 <__retarget_lock_release_recursive>
 8006dd2:	bf00      	nop
 8006dd4:	20000c58 	.word	0x20000c58

08006dd8 <__sinit_lock_acquire>:
 8006dd8:	4801      	ldr	r0, [pc, #4]	; (8006de0 <__sinit_lock_acquire+0x8>)
 8006dda:	f000 bac9 	b.w	8007370 <__retarget_lock_acquire_recursive>
 8006dde:	bf00      	nop
 8006de0:	20000c53 	.word	0x20000c53

08006de4 <__sinit_lock_release>:
 8006de4:	4801      	ldr	r0, [pc, #4]	; (8006dec <__sinit_lock_release+0x8>)
 8006de6:	f000 bac4 	b.w	8007372 <__retarget_lock_release_recursive>
 8006dea:	bf00      	nop
 8006dec:	20000c53 	.word	0x20000c53

08006df0 <__sinit>:
 8006df0:	b510      	push	{r4, lr}
 8006df2:	4604      	mov	r4, r0
 8006df4:	f7ff fff0 	bl	8006dd8 <__sinit_lock_acquire>
 8006df8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006dfa:	b11a      	cbz	r2, 8006e04 <__sinit+0x14>
 8006dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e00:	f7ff bff0 	b.w	8006de4 <__sinit_lock_release>
 8006e04:	4b0d      	ldr	r3, [pc, #52]	; (8006e3c <__sinit+0x4c>)
 8006e06:	2104      	movs	r1, #4
 8006e08:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8006e10:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8006e14:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8006e18:	6860      	ldr	r0, [r4, #4]
 8006e1a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8006e1e:	f7ff ffa1 	bl	8006d64 <std>
 8006e22:	2201      	movs	r2, #1
 8006e24:	2109      	movs	r1, #9
 8006e26:	68a0      	ldr	r0, [r4, #8]
 8006e28:	f7ff ff9c 	bl	8006d64 <std>
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	2112      	movs	r1, #18
 8006e30:	68e0      	ldr	r0, [r4, #12]
 8006e32:	f7ff ff97 	bl	8006d64 <std>
 8006e36:	2301      	movs	r3, #1
 8006e38:	63a3      	str	r3, [r4, #56]	; 0x38
 8006e3a:	e7df      	b.n	8006dfc <__sinit+0xc>
 8006e3c:	08006db5 	.word	0x08006db5

08006e40 <__libc_fini_array>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4d07      	ldr	r5, [pc, #28]	; (8006e60 <__libc_fini_array+0x20>)
 8006e44:	4c07      	ldr	r4, [pc, #28]	; (8006e64 <__libc_fini_array+0x24>)
 8006e46:	1b64      	subs	r4, r4, r5
 8006e48:	10a4      	asrs	r4, r4, #2
 8006e4a:	b91c      	cbnz	r4, 8006e54 <__libc_fini_array+0x14>
 8006e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e50:	f002 bb04 	b.w	800945c <_fini>
 8006e54:	3c01      	subs	r4, #1
 8006e56:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006e5a:	4798      	blx	r3
 8006e5c:	e7f5      	b.n	8006e4a <__libc_fini_array+0xa>
 8006e5e:	bf00      	nop
 8006e60:	08009a64 	.word	0x08009a64
 8006e64:	08009a68 	.word	0x08009a68

08006e68 <_malloc_trim_r>:
 8006e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	2008      	movs	r0, #8
 8006e70:	460c      	mov	r4, r1
 8006e72:	f001 fb54 	bl	800851e <sysconf>
 8006e76:	4680      	mov	r8, r0
 8006e78:	4f22      	ldr	r7, [pc, #136]	; (8006f04 <_malloc_trim_r+0x9c>)
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f000 fd50 	bl	8007920 <__malloc_lock>
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	685d      	ldr	r5, [r3, #4]
 8006e84:	f025 0503 	bic.w	r5, r5, #3
 8006e88:	1b2c      	subs	r4, r5, r4
 8006e8a:	3c11      	subs	r4, #17
 8006e8c:	4444      	add	r4, r8
 8006e8e:	fbb4 f4f8 	udiv	r4, r4, r8
 8006e92:	3c01      	subs	r4, #1
 8006e94:	fb08 f404 	mul.w	r4, r8, r4
 8006e98:	45a0      	cmp	r8, r4
 8006e9a:	dd05      	ble.n	8006ea8 <_malloc_trim_r+0x40>
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f000 fd45 	bl	800792c <__malloc_unlock>
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f001 fa56 	bl	800835c <_sbrk_r>
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	442b      	add	r3, r5
 8006eb4:	4298      	cmp	r0, r3
 8006eb6:	d1f1      	bne.n	8006e9c <_malloc_trim_r+0x34>
 8006eb8:	4630      	mov	r0, r6
 8006eba:	4261      	negs	r1, r4
 8006ebc:	f001 fa4e 	bl	800835c <_sbrk_r>
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	d110      	bne.n	8006ee6 <_malloc_trim_r+0x7e>
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	f001 fa48 	bl	800835c <_sbrk_r>
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	1a83      	subs	r3, r0, r2
 8006ed0:	2b0f      	cmp	r3, #15
 8006ed2:	dde3      	ble.n	8006e9c <_malloc_trim_r+0x34>
 8006ed4:	490c      	ldr	r1, [pc, #48]	; (8006f08 <_malloc_trim_r+0xa0>)
 8006ed6:	f043 0301 	orr.w	r3, r3, #1
 8006eda:	6809      	ldr	r1, [r1, #0]
 8006edc:	6053      	str	r3, [r2, #4]
 8006ede:	1a40      	subs	r0, r0, r1
 8006ee0:	490a      	ldr	r1, [pc, #40]	; (8006f0c <_malloc_trim_r+0xa4>)
 8006ee2:	6008      	str	r0, [r1, #0]
 8006ee4:	e7da      	b.n	8006e9c <_malloc_trim_r+0x34>
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	4a08      	ldr	r2, [pc, #32]	; (8006f0c <_malloc_trim_r+0xa4>)
 8006eea:	1b2d      	subs	r5, r5, r4
 8006eec:	f045 0501 	orr.w	r5, r5, #1
 8006ef0:	605d      	str	r5, [r3, #4]
 8006ef2:	6813      	ldr	r3, [r2, #0]
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	1b1c      	subs	r4, r3, r4
 8006ef8:	6014      	str	r4, [r2, #0]
 8006efa:	f000 fd17 	bl	800792c <__malloc_unlock>
 8006efe:	2001      	movs	r0, #1
 8006f00:	e7d0      	b.n	8006ea4 <_malloc_trim_r+0x3c>
 8006f02:	bf00      	nop
 8006f04:	2000043c 	.word	0x2000043c
 8006f08:	20000844 	.word	0x20000844
 8006f0c:	200009d8 	.word	0x200009d8

08006f10 <_free_r>:
 8006f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f12:	4605      	mov	r5, r0
 8006f14:	460f      	mov	r7, r1
 8006f16:	2900      	cmp	r1, #0
 8006f18:	f000 80b1 	beq.w	800707e <_free_r+0x16e>
 8006f1c:	f000 fd00 	bl	8007920 <__malloc_lock>
 8006f20:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006f24:	4856      	ldr	r0, [pc, #344]	; (8007080 <_free_r+0x170>)
 8006f26:	f022 0401 	bic.w	r4, r2, #1
 8006f2a:	f1a7 0308 	sub.w	r3, r7, #8
 8006f2e:	eb03 0c04 	add.w	ip, r3, r4
 8006f32:	6881      	ldr	r1, [r0, #8]
 8006f34:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8006f38:	4561      	cmp	r1, ip
 8006f3a:	f026 0603 	bic.w	r6, r6, #3
 8006f3e:	f002 0201 	and.w	r2, r2, #1
 8006f42:	d11b      	bne.n	8006f7c <_free_r+0x6c>
 8006f44:	4434      	add	r4, r6
 8006f46:	b93a      	cbnz	r2, 8006f58 <_free_r+0x48>
 8006f48:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8006f4c:	1a9b      	subs	r3, r3, r2
 8006f4e:	4414      	add	r4, r2
 8006f50:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8006f54:	60ca      	str	r2, [r1, #12]
 8006f56:	6091      	str	r1, [r2, #8]
 8006f58:	f044 0201 	orr.w	r2, r4, #1
 8006f5c:	605a      	str	r2, [r3, #4]
 8006f5e:	6083      	str	r3, [r0, #8]
 8006f60:	4b48      	ldr	r3, [pc, #288]	; (8007084 <_free_r+0x174>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d804      	bhi.n	8006f72 <_free_r+0x62>
 8006f68:	4b47      	ldr	r3, [pc, #284]	; (8007088 <_free_r+0x178>)
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	6819      	ldr	r1, [r3, #0]
 8006f6e:	f7ff ff7b 	bl	8006e68 <_malloc_trim_r>
 8006f72:	4628      	mov	r0, r5
 8006f74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f78:	f000 bcd8 	b.w	800792c <__malloc_unlock>
 8006f7c:	f8cc 6004 	str.w	r6, [ip, #4]
 8006f80:	2a00      	cmp	r2, #0
 8006f82:	d138      	bne.n	8006ff6 <_free_r+0xe6>
 8006f84:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8006f88:	f100 0708 	add.w	r7, r0, #8
 8006f8c:	1a5b      	subs	r3, r3, r1
 8006f8e:	440c      	add	r4, r1
 8006f90:	6899      	ldr	r1, [r3, #8]
 8006f92:	42b9      	cmp	r1, r7
 8006f94:	d031      	beq.n	8006ffa <_free_r+0xea>
 8006f96:	68df      	ldr	r7, [r3, #12]
 8006f98:	60cf      	str	r7, [r1, #12]
 8006f9a:	60b9      	str	r1, [r7, #8]
 8006f9c:	eb0c 0106 	add.w	r1, ip, r6
 8006fa0:	6849      	ldr	r1, [r1, #4]
 8006fa2:	07c9      	lsls	r1, r1, #31
 8006fa4:	d40b      	bmi.n	8006fbe <_free_r+0xae>
 8006fa6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8006faa:	4434      	add	r4, r6
 8006fac:	bb3a      	cbnz	r2, 8006ffe <_free_r+0xee>
 8006fae:	4e37      	ldr	r6, [pc, #220]	; (800708c <_free_r+0x17c>)
 8006fb0:	42b1      	cmp	r1, r6
 8006fb2:	d124      	bne.n	8006ffe <_free_r+0xee>
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fba:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8006fbe:	f044 0101 	orr.w	r1, r4, #1
 8006fc2:	6059      	str	r1, [r3, #4]
 8006fc4:	511c      	str	r4, [r3, r4]
 8006fc6:	2a00      	cmp	r2, #0
 8006fc8:	d1d3      	bne.n	8006f72 <_free_r+0x62>
 8006fca:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8006fce:	d21b      	bcs.n	8007008 <_free_r+0xf8>
 8006fd0:	0961      	lsrs	r1, r4, #5
 8006fd2:	08e2      	lsrs	r2, r4, #3
 8006fd4:	2401      	movs	r4, #1
 8006fd6:	408c      	lsls	r4, r1
 8006fd8:	6841      	ldr	r1, [r0, #4]
 8006fda:	3201      	adds	r2, #1
 8006fdc:	430c      	orrs	r4, r1
 8006fde:	6044      	str	r4, [r0, #4]
 8006fe0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8006fe4:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8006fe8:	3908      	subs	r1, #8
 8006fea:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8006fee:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8006ff2:	60e3      	str	r3, [r4, #12]
 8006ff4:	e7bd      	b.n	8006f72 <_free_r+0x62>
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	e7d0      	b.n	8006f9c <_free_r+0x8c>
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	e7ce      	b.n	8006f9c <_free_r+0x8c>
 8006ffe:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8007002:	60ce      	str	r6, [r1, #12]
 8007004:	60b1      	str	r1, [r6, #8]
 8007006:	e7da      	b.n	8006fbe <_free_r+0xae>
 8007008:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800700c:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8007010:	d214      	bcs.n	800703c <_free_r+0x12c>
 8007012:	09a2      	lsrs	r2, r4, #6
 8007014:	3238      	adds	r2, #56	; 0x38
 8007016:	1c51      	adds	r1, r2, #1
 8007018:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800701c:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8007020:	428e      	cmp	r6, r1
 8007022:	d125      	bne.n	8007070 <_free_r+0x160>
 8007024:	2401      	movs	r4, #1
 8007026:	1092      	asrs	r2, r2, #2
 8007028:	fa04 f202 	lsl.w	r2, r4, r2
 800702c:	6844      	ldr	r4, [r0, #4]
 800702e:	4322      	orrs	r2, r4
 8007030:	6042      	str	r2, [r0, #4]
 8007032:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8007036:	60b3      	str	r3, [r6, #8]
 8007038:	60cb      	str	r3, [r1, #12]
 800703a:	e79a      	b.n	8006f72 <_free_r+0x62>
 800703c:	2a14      	cmp	r2, #20
 800703e:	d801      	bhi.n	8007044 <_free_r+0x134>
 8007040:	325b      	adds	r2, #91	; 0x5b
 8007042:	e7e8      	b.n	8007016 <_free_r+0x106>
 8007044:	2a54      	cmp	r2, #84	; 0x54
 8007046:	d802      	bhi.n	800704e <_free_r+0x13e>
 8007048:	0b22      	lsrs	r2, r4, #12
 800704a:	326e      	adds	r2, #110	; 0x6e
 800704c:	e7e3      	b.n	8007016 <_free_r+0x106>
 800704e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007052:	d802      	bhi.n	800705a <_free_r+0x14a>
 8007054:	0be2      	lsrs	r2, r4, #15
 8007056:	3277      	adds	r2, #119	; 0x77
 8007058:	e7dd      	b.n	8007016 <_free_r+0x106>
 800705a:	f240 5154 	movw	r1, #1364	; 0x554
 800705e:	428a      	cmp	r2, r1
 8007060:	bf96      	itet	ls
 8007062:	0ca2      	lsrls	r2, r4, #18
 8007064:	227e      	movhi	r2, #126	; 0x7e
 8007066:	327c      	addls	r2, #124	; 0x7c
 8007068:	e7d5      	b.n	8007016 <_free_r+0x106>
 800706a:	6889      	ldr	r1, [r1, #8]
 800706c:	428e      	cmp	r6, r1
 800706e:	d004      	beq.n	800707a <_free_r+0x16a>
 8007070:	684a      	ldr	r2, [r1, #4]
 8007072:	f022 0203 	bic.w	r2, r2, #3
 8007076:	42a2      	cmp	r2, r4
 8007078:	d8f7      	bhi.n	800706a <_free_r+0x15a>
 800707a:	68ce      	ldr	r6, [r1, #12]
 800707c:	e7d9      	b.n	8007032 <_free_r+0x122>
 800707e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007080:	2000043c 	.word	0x2000043c
 8007084:	20000848 	.word	0x20000848
 8007088:	20000a08 	.word	0x20000a08
 800708c:	20000444 	.word	0x20000444

08007090 <__sfvwrite_r>:
 8007090:	6893      	ldr	r3, [r2, #8]
 8007092:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007096:	4606      	mov	r6, r0
 8007098:	460c      	mov	r4, r1
 800709a:	4690      	mov	r8, r2
 800709c:	b91b      	cbnz	r3, 80070a6 <__sfvwrite_r+0x16>
 800709e:	2000      	movs	r0, #0
 80070a0:	b003      	add	sp, #12
 80070a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a6:	898b      	ldrh	r3, [r1, #12]
 80070a8:	0718      	lsls	r0, r3, #28
 80070aa:	d550      	bpl.n	800714e <__sfvwrite_r+0xbe>
 80070ac:	690b      	ldr	r3, [r1, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d04d      	beq.n	800714e <__sfvwrite_r+0xbe>
 80070b2:	89a3      	ldrh	r3, [r4, #12]
 80070b4:	f8d8 7000 	ldr.w	r7, [r8]
 80070b8:	f013 0902 	ands.w	r9, r3, #2
 80070bc:	d16c      	bne.n	8007198 <__sfvwrite_r+0x108>
 80070be:	f013 0301 	ands.w	r3, r3, #1
 80070c2:	f000 809c 	beq.w	80071fe <__sfvwrite_r+0x16e>
 80070c6:	4648      	mov	r0, r9
 80070c8:	46ca      	mov	sl, r9
 80070ca:	46cb      	mov	fp, r9
 80070cc:	f1bb 0f00 	cmp.w	fp, #0
 80070d0:	f000 8103 	beq.w	80072da <__sfvwrite_r+0x24a>
 80070d4:	b950      	cbnz	r0, 80070ec <__sfvwrite_r+0x5c>
 80070d6:	465a      	mov	r2, fp
 80070d8:	210a      	movs	r1, #10
 80070da:	4650      	mov	r0, sl
 80070dc:	f000 fbf8 	bl	80078d0 <memchr>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	f000 80ff 	beq.w	80072e4 <__sfvwrite_r+0x254>
 80070e6:	3001      	adds	r0, #1
 80070e8:	eba0 090a 	sub.w	r9, r0, sl
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	6921      	ldr	r1, [r4, #16]
 80070f0:	45d9      	cmp	r9, fp
 80070f2:	464a      	mov	r2, r9
 80070f4:	bf28      	it	cs
 80070f6:	465a      	movcs	r2, fp
 80070f8:	4288      	cmp	r0, r1
 80070fa:	6963      	ldr	r3, [r4, #20]
 80070fc:	f240 80f5 	bls.w	80072ea <__sfvwrite_r+0x25a>
 8007100:	68a5      	ldr	r5, [r4, #8]
 8007102:	441d      	add	r5, r3
 8007104:	42aa      	cmp	r2, r5
 8007106:	f340 80f0 	ble.w	80072ea <__sfvwrite_r+0x25a>
 800710a:	4651      	mov	r1, sl
 800710c:	462a      	mov	r2, r5
 800710e:	f000 fbed 	bl	80078ec <memmove>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	4621      	mov	r1, r4
 8007116:	442b      	add	r3, r5
 8007118:	4630      	mov	r0, r6
 800711a:	6023      	str	r3, [r4, #0]
 800711c:	f7ff fdfc 	bl	8006d18 <_fflush_r>
 8007120:	2800      	cmp	r0, #0
 8007122:	d167      	bne.n	80071f4 <__sfvwrite_r+0x164>
 8007124:	ebb9 0905 	subs.w	r9, r9, r5
 8007128:	f040 80f7 	bne.w	800731a <__sfvwrite_r+0x28a>
 800712c:	4621      	mov	r1, r4
 800712e:	4630      	mov	r0, r6
 8007130:	f7ff fdf2 	bl	8006d18 <_fflush_r>
 8007134:	2800      	cmp	r0, #0
 8007136:	d15d      	bne.n	80071f4 <__sfvwrite_r+0x164>
 8007138:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800713c:	44aa      	add	sl, r5
 800713e:	ebab 0b05 	sub.w	fp, fp, r5
 8007142:	1b55      	subs	r5, r2, r5
 8007144:	f8c8 5008 	str.w	r5, [r8, #8]
 8007148:	2d00      	cmp	r5, #0
 800714a:	d1bf      	bne.n	80070cc <__sfvwrite_r+0x3c>
 800714c:	e7a7      	b.n	800709e <__sfvwrite_r+0xe>
 800714e:	4621      	mov	r1, r4
 8007150:	4630      	mov	r0, r6
 8007152:	f7fe fe9f 	bl	8005e94 <__swsetup_r>
 8007156:	2800      	cmp	r0, #0
 8007158:	d0ab      	beq.n	80070b2 <__sfvwrite_r+0x22>
 800715a:	f04f 30ff 	mov.w	r0, #4294967295
 800715e:	e79f      	b.n	80070a0 <__sfvwrite_r+0x10>
 8007160:	e9d7 b900 	ldrd	fp, r9, [r7]
 8007164:	3708      	adds	r7, #8
 8007166:	f1b9 0f00 	cmp.w	r9, #0
 800716a:	d0f9      	beq.n	8007160 <__sfvwrite_r+0xd0>
 800716c:	45d1      	cmp	r9, sl
 800716e:	464b      	mov	r3, r9
 8007170:	465a      	mov	r2, fp
 8007172:	bf28      	it	cs
 8007174:	4653      	movcs	r3, sl
 8007176:	4630      	mov	r0, r6
 8007178:	69e1      	ldr	r1, [r4, #28]
 800717a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800717c:	47a8      	blx	r5
 800717e:	2800      	cmp	r0, #0
 8007180:	dd38      	ble.n	80071f4 <__sfvwrite_r+0x164>
 8007182:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007186:	4483      	add	fp, r0
 8007188:	eba9 0900 	sub.w	r9, r9, r0
 800718c:	1a18      	subs	r0, r3, r0
 800718e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007192:	2800      	cmp	r0, #0
 8007194:	d1e7      	bne.n	8007166 <__sfvwrite_r+0xd6>
 8007196:	e782      	b.n	800709e <__sfvwrite_r+0xe>
 8007198:	f04f 0b00 	mov.w	fp, #0
 800719c:	f8df a180 	ldr.w	sl, [pc, #384]	; 8007320 <__sfvwrite_r+0x290>
 80071a0:	46d9      	mov	r9, fp
 80071a2:	e7e0      	b.n	8007166 <__sfvwrite_r+0xd6>
 80071a4:	e9d7 9a00 	ldrd	r9, sl, [r7]
 80071a8:	3708      	adds	r7, #8
 80071aa:	f1ba 0f00 	cmp.w	sl, #0
 80071ae:	d0f9      	beq.n	80071a4 <__sfvwrite_r+0x114>
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	68a2      	ldr	r2, [r4, #8]
 80071b4:	0599      	lsls	r1, r3, #22
 80071b6:	6820      	ldr	r0, [r4, #0]
 80071b8:	d563      	bpl.n	8007282 <__sfvwrite_r+0x1f2>
 80071ba:	4552      	cmp	r2, sl
 80071bc:	d836      	bhi.n	800722c <__sfvwrite_r+0x19c>
 80071be:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80071c2:	d033      	beq.n	800722c <__sfvwrite_r+0x19c>
 80071c4:	6921      	ldr	r1, [r4, #16]
 80071c6:	6965      	ldr	r5, [r4, #20]
 80071c8:	eba0 0b01 	sub.w	fp, r0, r1
 80071cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071d4:	f10b 0201 	add.w	r2, fp, #1
 80071d8:	106d      	asrs	r5, r5, #1
 80071da:	4452      	add	r2, sl
 80071dc:	4295      	cmp	r5, r2
 80071de:	bf38      	it	cc
 80071e0:	4615      	movcc	r5, r2
 80071e2:	055b      	lsls	r3, r3, #21
 80071e4:	d53d      	bpl.n	8007262 <__sfvwrite_r+0x1d2>
 80071e6:	4629      	mov	r1, r5
 80071e8:	4630      	mov	r0, r6
 80071ea:	f000 f92f 	bl	800744c <_malloc_r>
 80071ee:	b948      	cbnz	r0, 8007204 <__sfvwrite_r+0x174>
 80071f0:	230c      	movs	r3, #12
 80071f2:	6033      	str	r3, [r6, #0]
 80071f4:	89a3      	ldrh	r3, [r4, #12]
 80071f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071fa:	81a3      	strh	r3, [r4, #12]
 80071fc:	e7ad      	b.n	800715a <__sfvwrite_r+0xca>
 80071fe:	4699      	mov	r9, r3
 8007200:	469a      	mov	sl, r3
 8007202:	e7d2      	b.n	80071aa <__sfvwrite_r+0x11a>
 8007204:	465a      	mov	r2, fp
 8007206:	6921      	ldr	r1, [r4, #16]
 8007208:	9001      	str	r0, [sp, #4]
 800720a:	f7fc f977 	bl	80034fc <memcpy>
 800720e:	89a2      	ldrh	r2, [r4, #12]
 8007210:	9b01      	ldr	r3, [sp, #4]
 8007212:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007216:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800721a:	81a2      	strh	r2, [r4, #12]
 800721c:	4652      	mov	r2, sl
 800721e:	6123      	str	r3, [r4, #16]
 8007220:	6165      	str	r5, [r4, #20]
 8007222:	445b      	add	r3, fp
 8007224:	eba5 050b 	sub.w	r5, r5, fp
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	60a5      	str	r5, [r4, #8]
 800722c:	4552      	cmp	r2, sl
 800722e:	bf28      	it	cs
 8007230:	4652      	movcs	r2, sl
 8007232:	4655      	mov	r5, sl
 8007234:	4649      	mov	r1, r9
 8007236:	6820      	ldr	r0, [r4, #0]
 8007238:	9201      	str	r2, [sp, #4]
 800723a:	f000 fb57 	bl	80078ec <memmove>
 800723e:	68a3      	ldr	r3, [r4, #8]
 8007240:	9a01      	ldr	r2, [sp, #4]
 8007242:	1a9b      	subs	r3, r3, r2
 8007244:	60a3      	str	r3, [r4, #8]
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	441a      	add	r2, r3
 800724a:	6022      	str	r2, [r4, #0]
 800724c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8007250:	44a9      	add	r9, r5
 8007252:	ebaa 0a05 	sub.w	sl, sl, r5
 8007256:	1b45      	subs	r5, r0, r5
 8007258:	f8c8 5008 	str.w	r5, [r8, #8]
 800725c:	2d00      	cmp	r5, #0
 800725e:	d1a4      	bne.n	80071aa <__sfvwrite_r+0x11a>
 8007260:	e71d      	b.n	800709e <__sfvwrite_r+0xe>
 8007262:	462a      	mov	r2, r5
 8007264:	4630      	mov	r0, r6
 8007266:	f000 fe9b 	bl	8007fa0 <_realloc_r>
 800726a:	4603      	mov	r3, r0
 800726c:	2800      	cmp	r0, #0
 800726e:	d1d5      	bne.n	800721c <__sfvwrite_r+0x18c>
 8007270:	4630      	mov	r0, r6
 8007272:	6921      	ldr	r1, [r4, #16]
 8007274:	f7ff fe4c 	bl	8006f10 <_free_r>
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800727e:	81a3      	strh	r3, [r4, #12]
 8007280:	e7b6      	b.n	80071f0 <__sfvwrite_r+0x160>
 8007282:	6923      	ldr	r3, [r4, #16]
 8007284:	4283      	cmp	r3, r0
 8007286:	d302      	bcc.n	800728e <__sfvwrite_r+0x1fe>
 8007288:	6961      	ldr	r1, [r4, #20]
 800728a:	4551      	cmp	r1, sl
 800728c:	d915      	bls.n	80072ba <__sfvwrite_r+0x22a>
 800728e:	4552      	cmp	r2, sl
 8007290:	bf28      	it	cs
 8007292:	4652      	movcs	r2, sl
 8007294:	4615      	mov	r5, r2
 8007296:	4649      	mov	r1, r9
 8007298:	f000 fb28 	bl	80078ec <memmove>
 800729c:	68a3      	ldr	r3, [r4, #8]
 800729e:	6822      	ldr	r2, [r4, #0]
 80072a0:	1b5b      	subs	r3, r3, r5
 80072a2:	442a      	add	r2, r5
 80072a4:	60a3      	str	r3, [r4, #8]
 80072a6:	6022      	str	r2, [r4, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1cf      	bne.n	800724c <__sfvwrite_r+0x1bc>
 80072ac:	4621      	mov	r1, r4
 80072ae:	4630      	mov	r0, r6
 80072b0:	f7ff fd32 	bl	8006d18 <_fflush_r>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d0c9      	beq.n	800724c <__sfvwrite_r+0x1bc>
 80072b8:	e79c      	b.n	80071f4 <__sfvwrite_r+0x164>
 80072ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80072be:	459a      	cmp	sl, r3
 80072c0:	bf38      	it	cc
 80072c2:	4653      	movcc	r3, sl
 80072c4:	fb93 f3f1 	sdiv	r3, r3, r1
 80072c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80072ca:	434b      	muls	r3, r1
 80072cc:	464a      	mov	r2, r9
 80072ce:	4630      	mov	r0, r6
 80072d0:	69e1      	ldr	r1, [r4, #28]
 80072d2:	47a8      	blx	r5
 80072d4:	1e05      	subs	r5, r0, #0
 80072d6:	dcb9      	bgt.n	800724c <__sfvwrite_r+0x1bc>
 80072d8:	e78c      	b.n	80071f4 <__sfvwrite_r+0x164>
 80072da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072de:	2000      	movs	r0, #0
 80072e0:	3708      	adds	r7, #8
 80072e2:	e6f3      	b.n	80070cc <__sfvwrite_r+0x3c>
 80072e4:	f10b 0901 	add.w	r9, fp, #1
 80072e8:	e700      	b.n	80070ec <__sfvwrite_r+0x5c>
 80072ea:	4293      	cmp	r3, r2
 80072ec:	dc08      	bgt.n	8007300 <__sfvwrite_r+0x270>
 80072ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80072f0:	4652      	mov	r2, sl
 80072f2:	4630      	mov	r0, r6
 80072f4:	69e1      	ldr	r1, [r4, #28]
 80072f6:	47a8      	blx	r5
 80072f8:	1e05      	subs	r5, r0, #0
 80072fa:	f73f af13 	bgt.w	8007124 <__sfvwrite_r+0x94>
 80072fe:	e779      	b.n	80071f4 <__sfvwrite_r+0x164>
 8007300:	4651      	mov	r1, sl
 8007302:	9201      	str	r2, [sp, #4]
 8007304:	f000 faf2 	bl	80078ec <memmove>
 8007308:	9a01      	ldr	r2, [sp, #4]
 800730a:	68a3      	ldr	r3, [r4, #8]
 800730c:	4615      	mov	r5, r2
 800730e:	1a9b      	subs	r3, r3, r2
 8007310:	60a3      	str	r3, [r4, #8]
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	4413      	add	r3, r2
 8007316:	6023      	str	r3, [r4, #0]
 8007318:	e704      	b.n	8007124 <__sfvwrite_r+0x94>
 800731a:	2001      	movs	r0, #1
 800731c:	e70c      	b.n	8007138 <__sfvwrite_r+0xa8>
 800731e:	bf00      	nop
 8007320:	7ffffc00 	.word	0x7ffffc00

08007324 <_fwalk_reent>:
 8007324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007328:	4606      	mov	r6, r0
 800732a:	4688      	mov	r8, r1
 800732c:	2700      	movs	r7, #0
 800732e:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8007332:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007336:	f1b9 0901 	subs.w	r9, r9, #1
 800733a:	d505      	bpl.n	8007348 <_fwalk_reent+0x24>
 800733c:	6824      	ldr	r4, [r4, #0]
 800733e:	2c00      	cmp	r4, #0
 8007340:	d1f7      	bne.n	8007332 <_fwalk_reent+0xe>
 8007342:	4638      	mov	r0, r7
 8007344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007348:	89ab      	ldrh	r3, [r5, #12]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d907      	bls.n	800735e <_fwalk_reent+0x3a>
 800734e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007352:	3301      	adds	r3, #1
 8007354:	d003      	beq.n	800735e <_fwalk_reent+0x3a>
 8007356:	4629      	mov	r1, r5
 8007358:	4630      	mov	r0, r6
 800735a:	47c0      	blx	r8
 800735c:	4307      	orrs	r7, r0
 800735e:	3568      	adds	r5, #104	; 0x68
 8007360:	e7e9      	b.n	8007336 <_fwalk_reent+0x12>
	...

08007364 <_localeconv_r>:
 8007364:	4800      	ldr	r0, [pc, #0]	; (8007368 <_localeconv_r+0x4>)
 8007366:	4770      	bx	lr
 8007368:	2000093c 	.word	0x2000093c

0800736c <__retarget_lock_init_recursive>:
 800736c:	4770      	bx	lr

0800736e <__retarget_lock_close_recursive>:
 800736e:	4770      	bx	lr

08007370 <__retarget_lock_acquire_recursive>:
 8007370:	4770      	bx	lr

08007372 <__retarget_lock_release_recursive>:
 8007372:	4770      	bx	lr

08007374 <__swhatbuf_r>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	460e      	mov	r6, r1
 8007378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800737c:	4614      	mov	r4, r2
 800737e:	2900      	cmp	r1, #0
 8007380:	461d      	mov	r5, r3
 8007382:	b096      	sub	sp, #88	; 0x58
 8007384:	da09      	bge.n	800739a <__swhatbuf_r+0x26>
 8007386:	2200      	movs	r2, #0
 8007388:	89b3      	ldrh	r3, [r6, #12]
 800738a:	602a      	str	r2, [r5, #0]
 800738c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007390:	d116      	bne.n	80073c0 <__swhatbuf_r+0x4c>
 8007392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007396:	6023      	str	r3, [r4, #0]
 8007398:	e015      	b.n	80073c6 <__swhatbuf_r+0x52>
 800739a:	466a      	mov	r2, sp
 800739c:	f001 ff40 	bl	8009220 <_fstat_r>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	dbf0      	blt.n	8007386 <__swhatbuf_r+0x12>
 80073a4:	9a01      	ldr	r2, [sp, #4]
 80073a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80073aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80073ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80073b2:	425a      	negs	r2, r3
 80073b4:	415a      	adcs	r2, r3
 80073b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073ba:	602a      	str	r2, [r5, #0]
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	e002      	b.n	80073c6 <__swhatbuf_r+0x52>
 80073c0:	2340      	movs	r3, #64	; 0x40
 80073c2:	4610      	mov	r0, r2
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	b016      	add	sp, #88	; 0x58
 80073c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080073cc <__smakebuf_r>:
 80073cc:	898b      	ldrh	r3, [r1, #12]
 80073ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073d0:	079d      	lsls	r5, r3, #30
 80073d2:	4606      	mov	r6, r0
 80073d4:	460c      	mov	r4, r1
 80073d6:	d507      	bpl.n	80073e8 <__smakebuf_r+0x1c>
 80073d8:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	6123      	str	r3, [r4, #16]
 80073e0:	2301      	movs	r3, #1
 80073e2:	6163      	str	r3, [r4, #20]
 80073e4:	b002      	add	sp, #8
 80073e6:	bd70      	pop	{r4, r5, r6, pc}
 80073e8:	466a      	mov	r2, sp
 80073ea:	ab01      	add	r3, sp, #4
 80073ec:	f7ff ffc2 	bl	8007374 <__swhatbuf_r>
 80073f0:	9900      	ldr	r1, [sp, #0]
 80073f2:	4605      	mov	r5, r0
 80073f4:	4630      	mov	r0, r6
 80073f6:	f000 f829 	bl	800744c <_malloc_r>
 80073fa:	b948      	cbnz	r0, 8007410 <__smakebuf_r+0x44>
 80073fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007400:	059a      	lsls	r2, r3, #22
 8007402:	d4ef      	bmi.n	80073e4 <__smakebuf_r+0x18>
 8007404:	f023 0303 	bic.w	r3, r3, #3
 8007408:	f043 0302 	orr.w	r3, r3, #2
 800740c:	81a3      	strh	r3, [r4, #12]
 800740e:	e7e3      	b.n	80073d8 <__smakebuf_r+0xc>
 8007410:	4b0d      	ldr	r3, [pc, #52]	; (8007448 <__smakebuf_r+0x7c>)
 8007412:	63f3      	str	r3, [r6, #60]	; 0x3c
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	6020      	str	r0, [r4, #0]
 8007418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800741c:	81a3      	strh	r3, [r4, #12]
 800741e:	9b00      	ldr	r3, [sp, #0]
 8007420:	6120      	str	r0, [r4, #16]
 8007422:	6163      	str	r3, [r4, #20]
 8007424:	9b01      	ldr	r3, [sp, #4]
 8007426:	b15b      	cbz	r3, 8007440 <__smakebuf_r+0x74>
 8007428:	4630      	mov	r0, r6
 800742a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800742e:	f001 ff09 	bl	8009244 <_isatty_r>
 8007432:	b128      	cbz	r0, 8007440 <__smakebuf_r+0x74>
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	f023 0303 	bic.w	r3, r3, #3
 800743a:	f043 0301 	orr.w	r3, r3, #1
 800743e:	81a3      	strh	r3, [r4, #12]
 8007440:	89a0      	ldrh	r0, [r4, #12]
 8007442:	4305      	orrs	r5, r0
 8007444:	81a5      	strh	r5, [r4, #12]
 8007446:	e7cd      	b.n	80073e4 <__smakebuf_r+0x18>
 8007448:	08006db5 	.word	0x08006db5

0800744c <_malloc_r>:
 800744c:	f101 030b 	add.w	r3, r1, #11
 8007450:	2b16      	cmp	r3, #22
 8007452:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007456:	4605      	mov	r5, r0
 8007458:	d906      	bls.n	8007468 <_malloc_r+0x1c>
 800745a:	f033 0707 	bics.w	r7, r3, #7
 800745e:	d504      	bpl.n	800746a <_malloc_r+0x1e>
 8007460:	230c      	movs	r3, #12
 8007462:	602b      	str	r3, [r5, #0]
 8007464:	2400      	movs	r4, #0
 8007466:	e1ae      	b.n	80077c6 <_malloc_r+0x37a>
 8007468:	2710      	movs	r7, #16
 800746a:	42b9      	cmp	r1, r7
 800746c:	d8f8      	bhi.n	8007460 <_malloc_r+0x14>
 800746e:	4628      	mov	r0, r5
 8007470:	f000 fa56 	bl	8007920 <__malloc_lock>
 8007474:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8007478:	4ec3      	ldr	r6, [pc, #780]	; (8007788 <_malloc_r+0x33c>)
 800747a:	d238      	bcs.n	80074ee <_malloc_r+0xa2>
 800747c:	f107 0208 	add.w	r2, r7, #8
 8007480:	4432      	add	r2, r6
 8007482:	6854      	ldr	r4, [r2, #4]
 8007484:	f1a2 0108 	sub.w	r1, r2, #8
 8007488:	428c      	cmp	r4, r1
 800748a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800748e:	d102      	bne.n	8007496 <_malloc_r+0x4a>
 8007490:	68d4      	ldr	r4, [r2, #12]
 8007492:	42a2      	cmp	r2, r4
 8007494:	d010      	beq.n	80074b8 <_malloc_r+0x6c>
 8007496:	6863      	ldr	r3, [r4, #4]
 8007498:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800749c:	f023 0303 	bic.w	r3, r3, #3
 80074a0:	60ca      	str	r2, [r1, #12]
 80074a2:	4423      	add	r3, r4
 80074a4:	6091      	str	r1, [r2, #8]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	f042 0201 	orr.w	r2, r2, #1
 80074ac:	605a      	str	r2, [r3, #4]
 80074ae:	4628      	mov	r0, r5
 80074b0:	f000 fa3c 	bl	800792c <__malloc_unlock>
 80074b4:	3408      	adds	r4, #8
 80074b6:	e186      	b.n	80077c6 <_malloc_r+0x37a>
 80074b8:	3302      	adds	r3, #2
 80074ba:	4ab4      	ldr	r2, [pc, #720]	; (800778c <_malloc_r+0x340>)
 80074bc:	6934      	ldr	r4, [r6, #16]
 80074be:	4611      	mov	r1, r2
 80074c0:	4294      	cmp	r4, r2
 80074c2:	d077      	beq.n	80075b4 <_malloc_r+0x168>
 80074c4:	6860      	ldr	r0, [r4, #4]
 80074c6:	f020 0c03 	bic.w	ip, r0, #3
 80074ca:	ebac 0007 	sub.w	r0, ip, r7
 80074ce:	280f      	cmp	r0, #15
 80074d0:	dd48      	ble.n	8007564 <_malloc_r+0x118>
 80074d2:	19e1      	adds	r1, r4, r7
 80074d4:	f040 0301 	orr.w	r3, r0, #1
 80074d8:	f047 0701 	orr.w	r7, r7, #1
 80074dc:	6067      	str	r7, [r4, #4]
 80074de:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80074e2:	e9c1 2202 	strd	r2, r2, [r1, #8]
 80074e6:	604b      	str	r3, [r1, #4]
 80074e8:	f844 000c 	str.w	r0, [r4, ip]
 80074ec:	e7df      	b.n	80074ae <_malloc_r+0x62>
 80074ee:	0a7b      	lsrs	r3, r7, #9
 80074f0:	d02a      	beq.n	8007548 <_malloc_r+0xfc>
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d812      	bhi.n	800751c <_malloc_r+0xd0>
 80074f6:	09bb      	lsrs	r3, r7, #6
 80074f8:	3338      	adds	r3, #56	; 0x38
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8007500:	6854      	ldr	r4, [r2, #4]
 8007502:	f1a2 0c08 	sub.w	ip, r2, #8
 8007506:	4564      	cmp	r4, ip
 8007508:	d006      	beq.n	8007518 <_malloc_r+0xcc>
 800750a:	6862      	ldr	r2, [r4, #4]
 800750c:	f022 0203 	bic.w	r2, r2, #3
 8007510:	1bd0      	subs	r0, r2, r7
 8007512:	280f      	cmp	r0, #15
 8007514:	dd1c      	ble.n	8007550 <_malloc_r+0x104>
 8007516:	3b01      	subs	r3, #1
 8007518:	3301      	adds	r3, #1
 800751a:	e7ce      	b.n	80074ba <_malloc_r+0x6e>
 800751c:	2b14      	cmp	r3, #20
 800751e:	d801      	bhi.n	8007524 <_malloc_r+0xd8>
 8007520:	335b      	adds	r3, #91	; 0x5b
 8007522:	e7ea      	b.n	80074fa <_malloc_r+0xae>
 8007524:	2b54      	cmp	r3, #84	; 0x54
 8007526:	d802      	bhi.n	800752e <_malloc_r+0xe2>
 8007528:	0b3b      	lsrs	r3, r7, #12
 800752a:	336e      	adds	r3, #110	; 0x6e
 800752c:	e7e5      	b.n	80074fa <_malloc_r+0xae>
 800752e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007532:	d802      	bhi.n	800753a <_malloc_r+0xee>
 8007534:	0bfb      	lsrs	r3, r7, #15
 8007536:	3377      	adds	r3, #119	; 0x77
 8007538:	e7df      	b.n	80074fa <_malloc_r+0xae>
 800753a:	f240 5254 	movw	r2, #1364	; 0x554
 800753e:	4293      	cmp	r3, r2
 8007540:	d804      	bhi.n	800754c <_malloc_r+0x100>
 8007542:	0cbb      	lsrs	r3, r7, #18
 8007544:	337c      	adds	r3, #124	; 0x7c
 8007546:	e7d8      	b.n	80074fa <_malloc_r+0xae>
 8007548:	233f      	movs	r3, #63	; 0x3f
 800754a:	e7d6      	b.n	80074fa <_malloc_r+0xae>
 800754c:	237e      	movs	r3, #126	; 0x7e
 800754e:	e7d4      	b.n	80074fa <_malloc_r+0xae>
 8007550:	2800      	cmp	r0, #0
 8007552:	68e1      	ldr	r1, [r4, #12]
 8007554:	db04      	blt.n	8007560 <_malloc_r+0x114>
 8007556:	68a3      	ldr	r3, [r4, #8]
 8007558:	60d9      	str	r1, [r3, #12]
 800755a:	608b      	str	r3, [r1, #8]
 800755c:	18a3      	adds	r3, r4, r2
 800755e:	e7a2      	b.n	80074a6 <_malloc_r+0x5a>
 8007560:	460c      	mov	r4, r1
 8007562:	e7d0      	b.n	8007506 <_malloc_r+0xba>
 8007564:	2800      	cmp	r0, #0
 8007566:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800756a:	db07      	blt.n	800757c <_malloc_r+0x130>
 800756c:	44a4      	add	ip, r4
 800756e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007572:	f043 0301 	orr.w	r3, r3, #1
 8007576:	f8cc 3004 	str.w	r3, [ip, #4]
 800757a:	e798      	b.n	80074ae <_malloc_r+0x62>
 800757c:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8007580:	6870      	ldr	r0, [r6, #4]
 8007582:	f080 809e 	bcs.w	80076c2 <_malloc_r+0x276>
 8007586:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800758a:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800758e:	f04f 0c01 	mov.w	ip, #1
 8007592:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007596:	ea4c 0000 	orr.w	r0, ip, r0
 800759a:	3201      	adds	r2, #1
 800759c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80075a0:	6070      	str	r0, [r6, #4]
 80075a2:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80075a6:	3808      	subs	r0, #8
 80075a8:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80075ac:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80075b0:	f8cc 400c 	str.w	r4, [ip, #12]
 80075b4:	2001      	movs	r0, #1
 80075b6:	109a      	asrs	r2, r3, #2
 80075b8:	fa00 f202 	lsl.w	r2, r0, r2
 80075bc:	6870      	ldr	r0, [r6, #4]
 80075be:	4290      	cmp	r0, r2
 80075c0:	d326      	bcc.n	8007610 <_malloc_r+0x1c4>
 80075c2:	4210      	tst	r0, r2
 80075c4:	d106      	bne.n	80075d4 <_malloc_r+0x188>
 80075c6:	f023 0303 	bic.w	r3, r3, #3
 80075ca:	0052      	lsls	r2, r2, #1
 80075cc:	4210      	tst	r0, r2
 80075ce:	f103 0304 	add.w	r3, r3, #4
 80075d2:	d0fa      	beq.n	80075ca <_malloc_r+0x17e>
 80075d4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80075d8:	46c1      	mov	r9, r8
 80075da:	469e      	mov	lr, r3
 80075dc:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80075e0:	454c      	cmp	r4, r9
 80075e2:	f040 80b3 	bne.w	800774c <_malloc_r+0x300>
 80075e6:	f10e 0e01 	add.w	lr, lr, #1
 80075ea:	f01e 0f03 	tst.w	lr, #3
 80075ee:	f109 0908 	add.w	r9, r9, #8
 80075f2:	d1f3      	bne.n	80075dc <_malloc_r+0x190>
 80075f4:	0798      	lsls	r0, r3, #30
 80075f6:	f040 80ec 	bne.w	80077d2 <_malloc_r+0x386>
 80075fa:	6873      	ldr	r3, [r6, #4]
 80075fc:	ea23 0302 	bic.w	r3, r3, r2
 8007600:	6073      	str	r3, [r6, #4]
 8007602:	6870      	ldr	r0, [r6, #4]
 8007604:	0052      	lsls	r2, r2, #1
 8007606:	4290      	cmp	r0, r2
 8007608:	d302      	bcc.n	8007610 <_malloc_r+0x1c4>
 800760a:	2a00      	cmp	r2, #0
 800760c:	f040 80ed 	bne.w	80077ea <_malloc_r+0x39e>
 8007610:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8007614:	f8db 1004 	ldr.w	r1, [fp, #4]
 8007618:	f021 0903 	bic.w	r9, r1, #3
 800761c:	45b9      	cmp	r9, r7
 800761e:	d304      	bcc.n	800762a <_malloc_r+0x1de>
 8007620:	eba9 0207 	sub.w	r2, r9, r7
 8007624:	2a0f      	cmp	r2, #15
 8007626:	f300 8148 	bgt.w	80078ba <_malloc_r+0x46e>
 800762a:	4a59      	ldr	r2, [pc, #356]	; (8007790 <_malloc_r+0x344>)
 800762c:	eb0b 0309 	add.w	r3, fp, r9
 8007630:	6811      	ldr	r1, [r2, #0]
 8007632:	2008      	movs	r0, #8
 8007634:	3110      	adds	r1, #16
 8007636:	4439      	add	r1, r7
 8007638:	9301      	str	r3, [sp, #4]
 800763a:	9100      	str	r1, [sp, #0]
 800763c:	f000 ff6f 	bl	800851e <sysconf>
 8007640:	e9dd 1300 	ldrd	r1, r3, [sp]
 8007644:	4680      	mov	r8, r0
 8007646:	4a53      	ldr	r2, [pc, #332]	; (8007794 <_malloc_r+0x348>)
 8007648:	6810      	ldr	r0, [r2, #0]
 800764a:	3001      	adds	r0, #1
 800764c:	bf1f      	itttt	ne
 800764e:	f101 31ff 	addne.w	r1, r1, #4294967295
 8007652:	4441      	addne	r1, r8
 8007654:	f1c8 0000 	rsbne	r0, r8, #0
 8007658:	4001      	andne	r1, r0
 800765a:	4628      	mov	r0, r5
 800765c:	e9cd 1300 	strd	r1, r3, [sp]
 8007660:	f000 fe7c 	bl	800835c <_sbrk_r>
 8007664:	1c42      	adds	r2, r0, #1
 8007666:	4604      	mov	r4, r0
 8007668:	f000 80fb 	beq.w	8007862 <_malloc_r+0x416>
 800766c:	9b01      	ldr	r3, [sp, #4]
 800766e:	9900      	ldr	r1, [sp, #0]
 8007670:	4283      	cmp	r3, r0
 8007672:	4a48      	ldr	r2, [pc, #288]	; (8007794 <_malloc_r+0x348>)
 8007674:	d902      	bls.n	800767c <_malloc_r+0x230>
 8007676:	45b3      	cmp	fp, r6
 8007678:	f040 80f3 	bne.w	8007862 <_malloc_r+0x416>
 800767c:	f8df a120 	ldr.w	sl, [pc, #288]	; 80077a0 <_malloc_r+0x354>
 8007680:	42a3      	cmp	r3, r4
 8007682:	f8da 0000 	ldr.w	r0, [sl]
 8007686:	f108 3cff 	add.w	ip, r8, #4294967295
 800768a:	eb00 0e01 	add.w	lr, r0, r1
 800768e:	f8ca e000 	str.w	lr, [sl]
 8007692:	f040 80ac 	bne.w	80077ee <_malloc_r+0x3a2>
 8007696:	ea13 0f0c 	tst.w	r3, ip
 800769a:	f040 80a8 	bne.w	80077ee <_malloc_r+0x3a2>
 800769e:	68b3      	ldr	r3, [r6, #8]
 80076a0:	4449      	add	r1, r9
 80076a2:	f041 0101 	orr.w	r1, r1, #1
 80076a6:	6059      	str	r1, [r3, #4]
 80076a8:	4a3b      	ldr	r2, [pc, #236]	; (8007798 <_malloc_r+0x34c>)
 80076aa:	f8da 3000 	ldr.w	r3, [sl]
 80076ae:	6811      	ldr	r1, [r2, #0]
 80076b0:	428b      	cmp	r3, r1
 80076b2:	bf88      	it	hi
 80076b4:	6013      	strhi	r3, [r2, #0]
 80076b6:	4a39      	ldr	r2, [pc, #228]	; (800779c <_malloc_r+0x350>)
 80076b8:	6811      	ldr	r1, [r2, #0]
 80076ba:	428b      	cmp	r3, r1
 80076bc:	bf88      	it	hi
 80076be:	6013      	strhi	r3, [r2, #0]
 80076c0:	e0cf      	b.n	8007862 <_malloc_r+0x416>
 80076c2:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80076c6:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80076ca:	d218      	bcs.n	80076fe <_malloc_r+0x2b2>
 80076cc:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80076d0:	3238      	adds	r2, #56	; 0x38
 80076d2:	f102 0e01 	add.w	lr, r2, #1
 80076d6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80076da:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80076de:	45f0      	cmp	r8, lr
 80076e0:	d12b      	bne.n	800773a <_malloc_r+0x2ee>
 80076e2:	f04f 0c01 	mov.w	ip, #1
 80076e6:	1092      	asrs	r2, r2, #2
 80076e8:	fa0c f202 	lsl.w	r2, ip, r2
 80076ec:	4310      	orrs	r0, r2
 80076ee:	6070      	str	r0, [r6, #4]
 80076f0:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80076f4:	f8c8 4008 	str.w	r4, [r8, #8]
 80076f8:	f8ce 400c 	str.w	r4, [lr, #12]
 80076fc:	e75a      	b.n	80075b4 <_malloc_r+0x168>
 80076fe:	2a14      	cmp	r2, #20
 8007700:	d801      	bhi.n	8007706 <_malloc_r+0x2ba>
 8007702:	325b      	adds	r2, #91	; 0x5b
 8007704:	e7e5      	b.n	80076d2 <_malloc_r+0x286>
 8007706:	2a54      	cmp	r2, #84	; 0x54
 8007708:	d803      	bhi.n	8007712 <_malloc_r+0x2c6>
 800770a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800770e:	326e      	adds	r2, #110	; 0x6e
 8007710:	e7df      	b.n	80076d2 <_malloc_r+0x286>
 8007712:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007716:	d803      	bhi.n	8007720 <_malloc_r+0x2d4>
 8007718:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800771c:	3277      	adds	r2, #119	; 0x77
 800771e:	e7d8      	b.n	80076d2 <_malloc_r+0x286>
 8007720:	f240 5e54 	movw	lr, #1364	; 0x554
 8007724:	4572      	cmp	r2, lr
 8007726:	bf96      	itet	ls
 8007728:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800772c:	227e      	movhi	r2, #126	; 0x7e
 800772e:	327c      	addls	r2, #124	; 0x7c
 8007730:	e7cf      	b.n	80076d2 <_malloc_r+0x286>
 8007732:	f8de e008 	ldr.w	lr, [lr, #8]
 8007736:	45f0      	cmp	r8, lr
 8007738:	d005      	beq.n	8007746 <_malloc_r+0x2fa>
 800773a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800773e:	f022 0203 	bic.w	r2, r2, #3
 8007742:	4562      	cmp	r2, ip
 8007744:	d8f5      	bhi.n	8007732 <_malloc_r+0x2e6>
 8007746:	f8de 800c 	ldr.w	r8, [lr, #12]
 800774a:	e7d1      	b.n	80076f0 <_malloc_r+0x2a4>
 800774c:	6860      	ldr	r0, [r4, #4]
 800774e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007752:	f020 0003 	bic.w	r0, r0, #3
 8007756:	eba0 0a07 	sub.w	sl, r0, r7
 800775a:	f1ba 0f0f 	cmp.w	sl, #15
 800775e:	dd21      	ble.n	80077a4 <_malloc_r+0x358>
 8007760:	68a3      	ldr	r3, [r4, #8]
 8007762:	19e2      	adds	r2, r4, r7
 8007764:	f047 0701 	orr.w	r7, r7, #1
 8007768:	6067      	str	r7, [r4, #4]
 800776a:	f8c3 c00c 	str.w	ip, [r3, #12]
 800776e:	f8cc 3008 	str.w	r3, [ip, #8]
 8007772:	f04a 0301 	orr.w	r3, sl, #1
 8007776:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800777a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800777e:	6053      	str	r3, [r2, #4]
 8007780:	f844 a000 	str.w	sl, [r4, r0]
 8007784:	e693      	b.n	80074ae <_malloc_r+0x62>
 8007786:	bf00      	nop
 8007788:	2000043c 	.word	0x2000043c
 800778c:	20000444 	.word	0x20000444
 8007790:	20000a08 	.word	0x20000a08
 8007794:	20000844 	.word	0x20000844
 8007798:	20000a00 	.word	0x20000a00
 800779c:	20000a04 	.word	0x20000a04
 80077a0:	200009d8 	.word	0x200009d8
 80077a4:	f1ba 0f00 	cmp.w	sl, #0
 80077a8:	db11      	blt.n	80077ce <_malloc_r+0x382>
 80077aa:	4420      	add	r0, r4
 80077ac:	6843      	ldr	r3, [r0, #4]
 80077ae:	f043 0301 	orr.w	r3, r3, #1
 80077b2:	6043      	str	r3, [r0, #4]
 80077b4:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80077b8:	4628      	mov	r0, r5
 80077ba:	f8c3 c00c 	str.w	ip, [r3, #12]
 80077be:	f8cc 3008 	str.w	r3, [ip, #8]
 80077c2:	f000 f8b3 	bl	800792c <__malloc_unlock>
 80077c6:	4620      	mov	r0, r4
 80077c8:	b003      	add	sp, #12
 80077ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ce:	4664      	mov	r4, ip
 80077d0:	e706      	b.n	80075e0 <_malloc_r+0x194>
 80077d2:	f858 0908 	ldr.w	r0, [r8], #-8
 80077d6:	3b01      	subs	r3, #1
 80077d8:	4540      	cmp	r0, r8
 80077da:	f43f af0b 	beq.w	80075f4 <_malloc_r+0x1a8>
 80077de:	e710      	b.n	8007602 <_malloc_r+0x1b6>
 80077e0:	3304      	adds	r3, #4
 80077e2:	0052      	lsls	r2, r2, #1
 80077e4:	4210      	tst	r0, r2
 80077e6:	d0fb      	beq.n	80077e0 <_malloc_r+0x394>
 80077e8:	e6f4      	b.n	80075d4 <_malloc_r+0x188>
 80077ea:	4673      	mov	r3, lr
 80077ec:	e7fa      	b.n	80077e4 <_malloc_r+0x398>
 80077ee:	6810      	ldr	r0, [r2, #0]
 80077f0:	3001      	adds	r0, #1
 80077f2:	bf1b      	ittet	ne
 80077f4:	1ae3      	subne	r3, r4, r3
 80077f6:	4473      	addne	r3, lr
 80077f8:	6014      	streq	r4, [r2, #0]
 80077fa:	f8ca 3000 	strne.w	r3, [sl]
 80077fe:	f014 0307 	ands.w	r3, r4, #7
 8007802:	bf0e      	itee	eq
 8007804:	4618      	moveq	r0, r3
 8007806:	f1c3 0008 	rsbne	r0, r3, #8
 800780a:	1824      	addne	r4, r4, r0
 800780c:	1862      	adds	r2, r4, r1
 800780e:	ea02 010c 	and.w	r1, r2, ip
 8007812:	4480      	add	r8, r0
 8007814:	eba8 0801 	sub.w	r8, r8, r1
 8007818:	ea08 080c 	and.w	r8, r8, ip
 800781c:	4641      	mov	r1, r8
 800781e:	4628      	mov	r0, r5
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	9200      	str	r2, [sp, #0]
 8007824:	f000 fd9a 	bl	800835c <_sbrk_r>
 8007828:	1c43      	adds	r3, r0, #1
 800782a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800782e:	d105      	bne.n	800783c <_malloc_r+0x3f0>
 8007830:	b32b      	cbz	r3, 800787e <_malloc_r+0x432>
 8007832:	f04f 0800 	mov.w	r8, #0
 8007836:	f1a3 0008 	sub.w	r0, r3, #8
 800783a:	4410      	add	r0, r2
 800783c:	f8da 2000 	ldr.w	r2, [sl]
 8007840:	1b00      	subs	r0, r0, r4
 8007842:	4440      	add	r0, r8
 8007844:	4442      	add	r2, r8
 8007846:	f040 0001 	orr.w	r0, r0, #1
 800784a:	45b3      	cmp	fp, r6
 800784c:	60b4      	str	r4, [r6, #8]
 800784e:	f8ca 2000 	str.w	r2, [sl]
 8007852:	6060      	str	r0, [r4, #4]
 8007854:	f43f af28 	beq.w	80076a8 <_malloc_r+0x25c>
 8007858:	f1b9 0f0f 	cmp.w	r9, #15
 800785c:	d812      	bhi.n	8007884 <_malloc_r+0x438>
 800785e:	2301      	movs	r3, #1
 8007860:	6063      	str	r3, [r4, #4]
 8007862:	68b3      	ldr	r3, [r6, #8]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f023 0303 	bic.w	r3, r3, #3
 800786a:	42bb      	cmp	r3, r7
 800786c:	eba3 0207 	sub.w	r2, r3, r7
 8007870:	d301      	bcc.n	8007876 <_malloc_r+0x42a>
 8007872:	2a0f      	cmp	r2, #15
 8007874:	dc21      	bgt.n	80078ba <_malloc_r+0x46e>
 8007876:	4628      	mov	r0, r5
 8007878:	f000 f858 	bl	800792c <__malloc_unlock>
 800787c:	e5f2      	b.n	8007464 <_malloc_r+0x18>
 800787e:	4610      	mov	r0, r2
 8007880:	4698      	mov	r8, r3
 8007882:	e7db      	b.n	800783c <_malloc_r+0x3f0>
 8007884:	2205      	movs	r2, #5
 8007886:	f8db 3004 	ldr.w	r3, [fp, #4]
 800788a:	f1a9 090c 	sub.w	r9, r9, #12
 800788e:	f029 0907 	bic.w	r9, r9, #7
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	ea43 0309 	orr.w	r3, r3, r9
 800789a:	f8cb 3004 	str.w	r3, [fp, #4]
 800789e:	f1b9 0f0f 	cmp.w	r9, #15
 80078a2:	eb0b 0309 	add.w	r3, fp, r9
 80078a6:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80078aa:	f67f aefd 	bls.w	80076a8 <_malloc_r+0x25c>
 80078ae:	4628      	mov	r0, r5
 80078b0:	f10b 0108 	add.w	r1, fp, #8
 80078b4:	f7ff fb2c 	bl	8006f10 <_free_r>
 80078b8:	e6f6      	b.n	80076a8 <_malloc_r+0x25c>
 80078ba:	68b4      	ldr	r4, [r6, #8]
 80078bc:	f047 0301 	orr.w	r3, r7, #1
 80078c0:	f042 0201 	orr.w	r2, r2, #1
 80078c4:	4427      	add	r7, r4
 80078c6:	6063      	str	r3, [r4, #4]
 80078c8:	60b7      	str	r7, [r6, #8]
 80078ca:	607a      	str	r2, [r7, #4]
 80078cc:	e5ef      	b.n	80074ae <_malloc_r+0x62>
 80078ce:	bf00      	nop

080078d0 <memchr>:
 80078d0:	4603      	mov	r3, r0
 80078d2:	b510      	push	{r4, lr}
 80078d4:	b2c9      	uxtb	r1, r1
 80078d6:	4402      	add	r2, r0
 80078d8:	4293      	cmp	r3, r2
 80078da:	4618      	mov	r0, r3
 80078dc:	d101      	bne.n	80078e2 <memchr+0x12>
 80078de:	2000      	movs	r0, #0
 80078e0:	e003      	b.n	80078ea <memchr+0x1a>
 80078e2:	7804      	ldrb	r4, [r0, #0]
 80078e4:	3301      	adds	r3, #1
 80078e6:	428c      	cmp	r4, r1
 80078e8:	d1f6      	bne.n	80078d8 <memchr+0x8>
 80078ea:	bd10      	pop	{r4, pc}

080078ec <memmove>:
 80078ec:	4288      	cmp	r0, r1
 80078ee:	b510      	push	{r4, lr}
 80078f0:	eb01 0402 	add.w	r4, r1, r2
 80078f4:	d902      	bls.n	80078fc <memmove+0x10>
 80078f6:	4284      	cmp	r4, r0
 80078f8:	4623      	mov	r3, r4
 80078fa:	d807      	bhi.n	800790c <memmove+0x20>
 80078fc:	1e43      	subs	r3, r0, #1
 80078fe:	42a1      	cmp	r1, r4
 8007900:	d008      	beq.n	8007914 <memmove+0x28>
 8007902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007906:	f803 2f01 	strb.w	r2, [r3, #1]!
 800790a:	e7f8      	b.n	80078fe <memmove+0x12>
 800790c:	4601      	mov	r1, r0
 800790e:	4402      	add	r2, r0
 8007910:	428a      	cmp	r2, r1
 8007912:	d100      	bne.n	8007916 <memmove+0x2a>
 8007914:	bd10      	pop	{r4, pc}
 8007916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800791a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800791e:	e7f7      	b.n	8007910 <memmove+0x24>

08007920 <__malloc_lock>:
 8007920:	4801      	ldr	r0, [pc, #4]	; (8007928 <__malloc_lock+0x8>)
 8007922:	f7ff bd25 	b.w	8007370 <__retarget_lock_acquire_recursive>
 8007926:	bf00      	nop
 8007928:	20000c54 	.word	0x20000c54

0800792c <__malloc_unlock>:
 800792c:	4801      	ldr	r0, [pc, #4]	; (8007934 <__malloc_unlock+0x8>)
 800792e:	f7ff bd20 	b.w	8007372 <__retarget_lock_release_recursive>
 8007932:	bf00      	nop
 8007934:	20000c54 	.word	0x20000c54

08007938 <_Balloc>:
 8007938:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800793a:	b570      	push	{r4, r5, r6, lr}
 800793c:	4605      	mov	r5, r0
 800793e:	460c      	mov	r4, r1
 8007940:	b17b      	cbz	r3, 8007962 <_Balloc+0x2a>
 8007942:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8007944:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007948:	b9a0      	cbnz	r0, 8007974 <_Balloc+0x3c>
 800794a:	2101      	movs	r1, #1
 800794c:	fa01 f604 	lsl.w	r6, r1, r4
 8007950:	1d72      	adds	r2, r6, #5
 8007952:	4628      	mov	r0, r5
 8007954:	0092      	lsls	r2, r2, #2
 8007956:	f001 fb51 	bl	8008ffc <_calloc_r>
 800795a:	b148      	cbz	r0, 8007970 <_Balloc+0x38>
 800795c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8007960:	e00b      	b.n	800797a <_Balloc+0x42>
 8007962:	2221      	movs	r2, #33	; 0x21
 8007964:	2104      	movs	r1, #4
 8007966:	f001 fb49 	bl	8008ffc <_calloc_r>
 800796a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800796c:	2800      	cmp	r0, #0
 800796e:	d1e8      	bne.n	8007942 <_Balloc+0xa>
 8007970:	2000      	movs	r0, #0
 8007972:	bd70      	pop	{r4, r5, r6, pc}
 8007974:	6802      	ldr	r2, [r0, #0]
 8007976:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800797a:	2300      	movs	r3, #0
 800797c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007980:	e7f7      	b.n	8007972 <_Balloc+0x3a>

08007982 <_Bfree>:
 8007982:	b131      	cbz	r1, 8007992 <_Bfree+0x10>
 8007984:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007986:	684a      	ldr	r2, [r1, #4]
 8007988:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800798c:	6008      	str	r0, [r1, #0]
 800798e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007992:	4770      	bx	lr

08007994 <__multadd>:
 8007994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007998:	4698      	mov	r8, r3
 800799a:	460c      	mov	r4, r1
 800799c:	2300      	movs	r3, #0
 800799e:	690e      	ldr	r6, [r1, #16]
 80079a0:	4607      	mov	r7, r0
 80079a2:	f101 0014 	add.w	r0, r1, #20
 80079a6:	6805      	ldr	r5, [r0, #0]
 80079a8:	3301      	adds	r3, #1
 80079aa:	b2a9      	uxth	r1, r5
 80079ac:	fb02 8101 	mla	r1, r2, r1, r8
 80079b0:	0c2d      	lsrs	r5, r5, #16
 80079b2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80079b6:	fb02 c505 	mla	r5, r2, r5, ip
 80079ba:	b289      	uxth	r1, r1
 80079bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80079c0:	429e      	cmp	r6, r3
 80079c2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80079c6:	f840 1b04 	str.w	r1, [r0], #4
 80079ca:	dcec      	bgt.n	80079a6 <__multadd+0x12>
 80079cc:	f1b8 0f00 	cmp.w	r8, #0
 80079d0:	d022      	beq.n	8007a18 <__multadd+0x84>
 80079d2:	68a3      	ldr	r3, [r4, #8]
 80079d4:	42b3      	cmp	r3, r6
 80079d6:	dc19      	bgt.n	8007a0c <__multadd+0x78>
 80079d8:	6861      	ldr	r1, [r4, #4]
 80079da:	4638      	mov	r0, r7
 80079dc:	3101      	adds	r1, #1
 80079de:	f7ff ffab 	bl	8007938 <_Balloc>
 80079e2:	4605      	mov	r5, r0
 80079e4:	b928      	cbnz	r0, 80079f2 <__multadd+0x5e>
 80079e6:	4602      	mov	r2, r0
 80079e8:	21b5      	movs	r1, #181	; 0xb5
 80079ea:	4b0d      	ldr	r3, [pc, #52]	; (8007a20 <__multadd+0x8c>)
 80079ec:	480d      	ldr	r0, [pc, #52]	; (8007a24 <__multadd+0x90>)
 80079ee:	f001 fae7 	bl	8008fc0 <__assert_func>
 80079f2:	6922      	ldr	r2, [r4, #16]
 80079f4:	f104 010c 	add.w	r1, r4, #12
 80079f8:	3202      	adds	r2, #2
 80079fa:	0092      	lsls	r2, r2, #2
 80079fc:	300c      	adds	r0, #12
 80079fe:	f7fb fd7d 	bl	80034fc <memcpy>
 8007a02:	4621      	mov	r1, r4
 8007a04:	4638      	mov	r0, r7
 8007a06:	f7ff ffbc 	bl	8007982 <_Bfree>
 8007a0a:	462c      	mov	r4, r5
 8007a0c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007a10:	3601      	adds	r6, #1
 8007a12:	f8c3 8014 	str.w	r8, [r3, #20]
 8007a16:	6126      	str	r6, [r4, #16]
 8007a18:	4620      	mov	r0, r4
 8007a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a1e:	bf00      	nop
 8007a20:	0800981d 	.word	0x0800981d
 8007a24:	0800988d 	.word	0x0800988d

08007a28 <__hi0bits>:
 8007a28:	0c02      	lsrs	r2, r0, #16
 8007a2a:	0412      	lsls	r2, r2, #16
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	b9ca      	cbnz	r2, 8007a64 <__hi0bits+0x3c>
 8007a30:	0403      	lsls	r3, r0, #16
 8007a32:	2010      	movs	r0, #16
 8007a34:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007a38:	bf04      	itt	eq
 8007a3a:	021b      	lsleq	r3, r3, #8
 8007a3c:	3008      	addeq	r0, #8
 8007a3e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007a42:	bf04      	itt	eq
 8007a44:	011b      	lsleq	r3, r3, #4
 8007a46:	3004      	addeq	r0, #4
 8007a48:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007a4c:	bf04      	itt	eq
 8007a4e:	009b      	lsleq	r3, r3, #2
 8007a50:	3002      	addeq	r0, #2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	db05      	blt.n	8007a62 <__hi0bits+0x3a>
 8007a56:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007a5a:	f100 0001 	add.w	r0, r0, #1
 8007a5e:	bf08      	it	eq
 8007a60:	2020      	moveq	r0, #32
 8007a62:	4770      	bx	lr
 8007a64:	2000      	movs	r0, #0
 8007a66:	e7e5      	b.n	8007a34 <__hi0bits+0xc>

08007a68 <__lo0bits>:
 8007a68:	6803      	ldr	r3, [r0, #0]
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	f013 0007 	ands.w	r0, r3, #7
 8007a70:	d00b      	beq.n	8007a8a <__lo0bits+0x22>
 8007a72:	07d9      	lsls	r1, r3, #31
 8007a74:	d422      	bmi.n	8007abc <__lo0bits+0x54>
 8007a76:	0798      	lsls	r0, r3, #30
 8007a78:	bf49      	itett	mi
 8007a7a:	085b      	lsrmi	r3, r3, #1
 8007a7c:	089b      	lsrpl	r3, r3, #2
 8007a7e:	2001      	movmi	r0, #1
 8007a80:	6013      	strmi	r3, [r2, #0]
 8007a82:	bf5c      	itt	pl
 8007a84:	2002      	movpl	r0, #2
 8007a86:	6013      	strpl	r3, [r2, #0]
 8007a88:	4770      	bx	lr
 8007a8a:	b299      	uxth	r1, r3
 8007a8c:	b909      	cbnz	r1, 8007a92 <__lo0bits+0x2a>
 8007a8e:	2010      	movs	r0, #16
 8007a90:	0c1b      	lsrs	r3, r3, #16
 8007a92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007a96:	bf04      	itt	eq
 8007a98:	0a1b      	lsreq	r3, r3, #8
 8007a9a:	3008      	addeq	r0, #8
 8007a9c:	0719      	lsls	r1, r3, #28
 8007a9e:	bf04      	itt	eq
 8007aa0:	091b      	lsreq	r3, r3, #4
 8007aa2:	3004      	addeq	r0, #4
 8007aa4:	0799      	lsls	r1, r3, #30
 8007aa6:	bf04      	itt	eq
 8007aa8:	089b      	lsreq	r3, r3, #2
 8007aaa:	3002      	addeq	r0, #2
 8007aac:	07d9      	lsls	r1, r3, #31
 8007aae:	d403      	bmi.n	8007ab8 <__lo0bits+0x50>
 8007ab0:	085b      	lsrs	r3, r3, #1
 8007ab2:	f100 0001 	add.w	r0, r0, #1
 8007ab6:	d003      	beq.n	8007ac0 <__lo0bits+0x58>
 8007ab8:	6013      	str	r3, [r2, #0]
 8007aba:	4770      	bx	lr
 8007abc:	2000      	movs	r0, #0
 8007abe:	4770      	bx	lr
 8007ac0:	2020      	movs	r0, #32
 8007ac2:	4770      	bx	lr

08007ac4 <__i2b>:
 8007ac4:	b510      	push	{r4, lr}
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	2101      	movs	r1, #1
 8007aca:	f7ff ff35 	bl	8007938 <_Balloc>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	b928      	cbnz	r0, 8007ade <__i2b+0x1a>
 8007ad2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007ad6:	4b04      	ldr	r3, [pc, #16]	; (8007ae8 <__i2b+0x24>)
 8007ad8:	4804      	ldr	r0, [pc, #16]	; (8007aec <__i2b+0x28>)
 8007ada:	f001 fa71 	bl	8008fc0 <__assert_func>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	6144      	str	r4, [r0, #20]
 8007ae2:	6103      	str	r3, [r0, #16]
 8007ae4:	bd10      	pop	{r4, pc}
 8007ae6:	bf00      	nop
 8007ae8:	0800981d 	.word	0x0800981d
 8007aec:	0800988d 	.word	0x0800988d

08007af0 <__multiply>:
 8007af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	4614      	mov	r4, r2
 8007af6:	690a      	ldr	r2, [r1, #16]
 8007af8:	6923      	ldr	r3, [r4, #16]
 8007afa:	460d      	mov	r5, r1
 8007afc:	429a      	cmp	r2, r3
 8007afe:	bfbe      	ittt	lt
 8007b00:	460b      	movlt	r3, r1
 8007b02:	4625      	movlt	r5, r4
 8007b04:	461c      	movlt	r4, r3
 8007b06:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007b0a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007b0e:	68ab      	ldr	r3, [r5, #8]
 8007b10:	6869      	ldr	r1, [r5, #4]
 8007b12:	eb0a 0709 	add.w	r7, sl, r9
 8007b16:	42bb      	cmp	r3, r7
 8007b18:	b085      	sub	sp, #20
 8007b1a:	bfb8      	it	lt
 8007b1c:	3101      	addlt	r1, #1
 8007b1e:	f7ff ff0b 	bl	8007938 <_Balloc>
 8007b22:	b930      	cbnz	r0, 8007b32 <__multiply+0x42>
 8007b24:	4602      	mov	r2, r0
 8007b26:	f240 115d 	movw	r1, #349	; 0x15d
 8007b2a:	4b41      	ldr	r3, [pc, #260]	; (8007c30 <__multiply+0x140>)
 8007b2c:	4841      	ldr	r0, [pc, #260]	; (8007c34 <__multiply+0x144>)
 8007b2e:	f001 fa47 	bl	8008fc0 <__assert_func>
 8007b32:	f100 0614 	add.w	r6, r0, #20
 8007b36:	4633      	mov	r3, r6
 8007b38:	2200      	movs	r2, #0
 8007b3a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007b3e:	4543      	cmp	r3, r8
 8007b40:	d31e      	bcc.n	8007b80 <__multiply+0x90>
 8007b42:	f105 0c14 	add.w	ip, r5, #20
 8007b46:	f104 0314 	add.w	r3, r4, #20
 8007b4a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007b4e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007b52:	9202      	str	r2, [sp, #8]
 8007b54:	ebac 0205 	sub.w	r2, ip, r5
 8007b58:	3a15      	subs	r2, #21
 8007b5a:	f022 0203 	bic.w	r2, r2, #3
 8007b5e:	3204      	adds	r2, #4
 8007b60:	f105 0115 	add.w	r1, r5, #21
 8007b64:	458c      	cmp	ip, r1
 8007b66:	bf38      	it	cc
 8007b68:	2204      	movcc	r2, #4
 8007b6a:	9201      	str	r2, [sp, #4]
 8007b6c:	9a02      	ldr	r2, [sp, #8]
 8007b6e:	9303      	str	r3, [sp, #12]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d808      	bhi.n	8007b86 <__multiply+0x96>
 8007b74:	2f00      	cmp	r7, #0
 8007b76:	dc55      	bgt.n	8007c24 <__multiply+0x134>
 8007b78:	6107      	str	r7, [r0, #16]
 8007b7a:	b005      	add	sp, #20
 8007b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b80:	f843 2b04 	str.w	r2, [r3], #4
 8007b84:	e7db      	b.n	8007b3e <__multiply+0x4e>
 8007b86:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b8a:	f1ba 0f00 	cmp.w	sl, #0
 8007b8e:	d020      	beq.n	8007bd2 <__multiply+0xe2>
 8007b90:	46b1      	mov	r9, r6
 8007b92:	2200      	movs	r2, #0
 8007b94:	f105 0e14 	add.w	lr, r5, #20
 8007b98:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007b9c:	f8d9 b000 	ldr.w	fp, [r9]
 8007ba0:	b2a1      	uxth	r1, r4
 8007ba2:	fa1f fb8b 	uxth.w	fp, fp
 8007ba6:	fb0a b101 	mla	r1, sl, r1, fp
 8007baa:	4411      	add	r1, r2
 8007bac:	f8d9 2000 	ldr.w	r2, [r9]
 8007bb0:	0c24      	lsrs	r4, r4, #16
 8007bb2:	0c12      	lsrs	r2, r2, #16
 8007bb4:	fb0a 2404 	mla	r4, sl, r4, r2
 8007bb8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007bbc:	b289      	uxth	r1, r1
 8007bbe:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007bc2:	45f4      	cmp	ip, lr
 8007bc4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007bc8:	f849 1b04 	str.w	r1, [r9], #4
 8007bcc:	d8e4      	bhi.n	8007b98 <__multiply+0xa8>
 8007bce:	9901      	ldr	r1, [sp, #4]
 8007bd0:	5072      	str	r2, [r6, r1]
 8007bd2:	9a03      	ldr	r2, [sp, #12]
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007bda:	f1b9 0f00 	cmp.w	r9, #0
 8007bde:	d01f      	beq.n	8007c20 <__multiply+0x130>
 8007be0:	46b6      	mov	lr, r6
 8007be2:	f04f 0a00 	mov.w	sl, #0
 8007be6:	6834      	ldr	r4, [r6, #0]
 8007be8:	f105 0114 	add.w	r1, r5, #20
 8007bec:	880a      	ldrh	r2, [r1, #0]
 8007bee:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007bf2:	b2a4      	uxth	r4, r4
 8007bf4:	fb09 b202 	mla	r2, r9, r2, fp
 8007bf8:	4492      	add	sl, r2
 8007bfa:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007bfe:	f84e 4b04 	str.w	r4, [lr], #4
 8007c02:	f851 4b04 	ldr.w	r4, [r1], #4
 8007c06:	f8be 2000 	ldrh.w	r2, [lr]
 8007c0a:	0c24      	lsrs	r4, r4, #16
 8007c0c:	fb09 2404 	mla	r4, r9, r4, r2
 8007c10:	458c      	cmp	ip, r1
 8007c12:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007c16:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007c1a:	d8e7      	bhi.n	8007bec <__multiply+0xfc>
 8007c1c:	9a01      	ldr	r2, [sp, #4]
 8007c1e:	50b4      	str	r4, [r6, r2]
 8007c20:	3604      	adds	r6, #4
 8007c22:	e7a3      	b.n	8007b6c <__multiply+0x7c>
 8007c24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1a5      	bne.n	8007b78 <__multiply+0x88>
 8007c2c:	3f01      	subs	r7, #1
 8007c2e:	e7a1      	b.n	8007b74 <__multiply+0x84>
 8007c30:	0800981d 	.word	0x0800981d
 8007c34:	0800988d 	.word	0x0800988d

08007c38 <__pow5mult>:
 8007c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c3c:	4615      	mov	r5, r2
 8007c3e:	f012 0203 	ands.w	r2, r2, #3
 8007c42:	4606      	mov	r6, r0
 8007c44:	460f      	mov	r7, r1
 8007c46:	d007      	beq.n	8007c58 <__pow5mult+0x20>
 8007c48:	4c1a      	ldr	r4, [pc, #104]	; (8007cb4 <__pow5mult+0x7c>)
 8007c4a:	3a01      	subs	r2, #1
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c52:	f7ff fe9f 	bl	8007994 <__multadd>
 8007c56:	4607      	mov	r7, r0
 8007c58:	10ad      	asrs	r5, r5, #2
 8007c5a:	d027      	beq.n	8007cac <__pow5mult+0x74>
 8007c5c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8007c5e:	b944      	cbnz	r4, 8007c72 <__pow5mult+0x3a>
 8007c60:	f240 2171 	movw	r1, #625	; 0x271
 8007c64:	4630      	mov	r0, r6
 8007c66:	f7ff ff2d 	bl	8007ac4 <__i2b>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	64b0      	str	r0, [r6, #72]	; 0x48
 8007c70:	6003      	str	r3, [r0, #0]
 8007c72:	f04f 0900 	mov.w	r9, #0
 8007c76:	07eb      	lsls	r3, r5, #31
 8007c78:	d50a      	bpl.n	8007c90 <__pow5mult+0x58>
 8007c7a:	4639      	mov	r1, r7
 8007c7c:	4622      	mov	r2, r4
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f7ff ff36 	bl	8007af0 <__multiply>
 8007c84:	4680      	mov	r8, r0
 8007c86:	4639      	mov	r1, r7
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f7ff fe7a 	bl	8007982 <_Bfree>
 8007c8e:	4647      	mov	r7, r8
 8007c90:	106d      	asrs	r5, r5, #1
 8007c92:	d00b      	beq.n	8007cac <__pow5mult+0x74>
 8007c94:	6820      	ldr	r0, [r4, #0]
 8007c96:	b938      	cbnz	r0, 8007ca8 <__pow5mult+0x70>
 8007c98:	4622      	mov	r2, r4
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f7ff ff27 	bl	8007af0 <__multiply>
 8007ca2:	6020      	str	r0, [r4, #0]
 8007ca4:	f8c0 9000 	str.w	r9, [r0]
 8007ca8:	4604      	mov	r4, r0
 8007caa:	e7e4      	b.n	8007c76 <__pow5mult+0x3e>
 8007cac:	4638      	mov	r0, r7
 8007cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cb2:	bf00      	nop
 8007cb4:	080099e0 	.word	0x080099e0

08007cb8 <__lshift>:
 8007cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	4691      	mov	r9, r2
 8007cc2:	6923      	ldr	r3, [r4, #16]
 8007cc4:	6849      	ldr	r1, [r1, #4]
 8007cc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cca:	68a3      	ldr	r3, [r4, #8]
 8007ccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cd0:	f108 0601 	add.w	r6, r8, #1
 8007cd4:	42b3      	cmp	r3, r6
 8007cd6:	db0b      	blt.n	8007cf0 <__lshift+0x38>
 8007cd8:	4638      	mov	r0, r7
 8007cda:	f7ff fe2d 	bl	8007938 <_Balloc>
 8007cde:	4605      	mov	r5, r0
 8007ce0:	b948      	cbnz	r0, 8007cf6 <__lshift+0x3e>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ce8:	4b27      	ldr	r3, [pc, #156]	; (8007d88 <__lshift+0xd0>)
 8007cea:	4828      	ldr	r0, [pc, #160]	; (8007d8c <__lshift+0xd4>)
 8007cec:	f001 f968 	bl	8008fc0 <__assert_func>
 8007cf0:	3101      	adds	r1, #1
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	e7ee      	b.n	8007cd4 <__lshift+0x1c>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f100 0114 	add.w	r1, r0, #20
 8007cfc:	f100 0210 	add.w	r2, r0, #16
 8007d00:	4618      	mov	r0, r3
 8007d02:	4553      	cmp	r3, sl
 8007d04:	db33      	blt.n	8007d6e <__lshift+0xb6>
 8007d06:	6920      	ldr	r0, [r4, #16]
 8007d08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d0c:	f104 0314 	add.w	r3, r4, #20
 8007d10:	f019 091f 	ands.w	r9, r9, #31
 8007d14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d1c:	d02b      	beq.n	8007d76 <__lshift+0xbe>
 8007d1e:	468a      	mov	sl, r1
 8007d20:	2200      	movs	r2, #0
 8007d22:	f1c9 0e20 	rsb	lr, r9, #32
 8007d26:	6818      	ldr	r0, [r3, #0]
 8007d28:	fa00 f009 	lsl.w	r0, r0, r9
 8007d2c:	4302      	orrs	r2, r0
 8007d2e:	f84a 2b04 	str.w	r2, [sl], #4
 8007d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d36:	459c      	cmp	ip, r3
 8007d38:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d3c:	d8f3      	bhi.n	8007d26 <__lshift+0x6e>
 8007d3e:	ebac 0304 	sub.w	r3, ip, r4
 8007d42:	3b15      	subs	r3, #21
 8007d44:	f023 0303 	bic.w	r3, r3, #3
 8007d48:	3304      	adds	r3, #4
 8007d4a:	f104 0015 	add.w	r0, r4, #21
 8007d4e:	4584      	cmp	ip, r0
 8007d50:	bf38      	it	cc
 8007d52:	2304      	movcc	r3, #4
 8007d54:	50ca      	str	r2, [r1, r3]
 8007d56:	b10a      	cbz	r2, 8007d5c <__lshift+0xa4>
 8007d58:	f108 0602 	add.w	r6, r8, #2
 8007d5c:	3e01      	subs	r6, #1
 8007d5e:	4638      	mov	r0, r7
 8007d60:	4621      	mov	r1, r4
 8007d62:	612e      	str	r6, [r5, #16]
 8007d64:	f7ff fe0d 	bl	8007982 <_Bfree>
 8007d68:	4628      	mov	r0, r5
 8007d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d72:	3301      	adds	r3, #1
 8007d74:	e7c5      	b.n	8007d02 <__lshift+0x4a>
 8007d76:	3904      	subs	r1, #4
 8007d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d7c:	459c      	cmp	ip, r3
 8007d7e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d82:	d8f9      	bhi.n	8007d78 <__lshift+0xc0>
 8007d84:	e7ea      	b.n	8007d5c <__lshift+0xa4>
 8007d86:	bf00      	nop
 8007d88:	0800981d 	.word	0x0800981d
 8007d8c:	0800988d 	.word	0x0800988d

08007d90 <__mcmp>:
 8007d90:	4603      	mov	r3, r0
 8007d92:	690a      	ldr	r2, [r1, #16]
 8007d94:	6900      	ldr	r0, [r0, #16]
 8007d96:	b530      	push	{r4, r5, lr}
 8007d98:	1a80      	subs	r0, r0, r2
 8007d9a:	d10d      	bne.n	8007db8 <__mcmp+0x28>
 8007d9c:	3314      	adds	r3, #20
 8007d9e:	3114      	adds	r1, #20
 8007da0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007da4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007da8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007dac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007db0:	4295      	cmp	r5, r2
 8007db2:	d002      	beq.n	8007dba <__mcmp+0x2a>
 8007db4:	d304      	bcc.n	8007dc0 <__mcmp+0x30>
 8007db6:	2001      	movs	r0, #1
 8007db8:	bd30      	pop	{r4, r5, pc}
 8007dba:	42a3      	cmp	r3, r4
 8007dbc:	d3f4      	bcc.n	8007da8 <__mcmp+0x18>
 8007dbe:	e7fb      	b.n	8007db8 <__mcmp+0x28>
 8007dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc4:	e7f8      	b.n	8007db8 <__mcmp+0x28>
	...

08007dc8 <__mdiff>:
 8007dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	460c      	mov	r4, r1
 8007dce:	4606      	mov	r6, r0
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	4692      	mov	sl, r2
 8007dd6:	f7ff ffdb 	bl	8007d90 <__mcmp>
 8007dda:	1e05      	subs	r5, r0, #0
 8007ddc:	d111      	bne.n	8007e02 <__mdiff+0x3a>
 8007dde:	4629      	mov	r1, r5
 8007de0:	4630      	mov	r0, r6
 8007de2:	f7ff fda9 	bl	8007938 <_Balloc>
 8007de6:	4602      	mov	r2, r0
 8007de8:	b928      	cbnz	r0, 8007df6 <__mdiff+0x2e>
 8007dea:	f240 2132 	movw	r1, #562	; 0x232
 8007dee:	4b3c      	ldr	r3, [pc, #240]	; (8007ee0 <__mdiff+0x118>)
 8007df0:	483c      	ldr	r0, [pc, #240]	; (8007ee4 <__mdiff+0x11c>)
 8007df2:	f001 f8e5 	bl	8008fc0 <__assert_func>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e02:	bfa4      	itt	ge
 8007e04:	4653      	movge	r3, sl
 8007e06:	46a2      	movge	sl, r4
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007e0e:	bfa6      	itte	ge
 8007e10:	461c      	movge	r4, r3
 8007e12:	2500      	movge	r5, #0
 8007e14:	2501      	movlt	r5, #1
 8007e16:	f7ff fd8f 	bl	8007938 <_Balloc>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	b918      	cbnz	r0, 8007e26 <__mdiff+0x5e>
 8007e1e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e22:	4b2f      	ldr	r3, [pc, #188]	; (8007ee0 <__mdiff+0x118>)
 8007e24:	e7e4      	b.n	8007df0 <__mdiff+0x28>
 8007e26:	f100 0814 	add.w	r8, r0, #20
 8007e2a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007e2e:	60c5      	str	r5, [r0, #12]
 8007e30:	f04f 0c00 	mov.w	ip, #0
 8007e34:	f10a 0514 	add.w	r5, sl, #20
 8007e38:	f10a 0010 	add.w	r0, sl, #16
 8007e3c:	46c2      	mov	sl, r8
 8007e3e:	6926      	ldr	r6, [r4, #16]
 8007e40:	f104 0914 	add.w	r9, r4, #20
 8007e44:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007e48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e4c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007e50:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e54:	fa1f f18b 	uxth.w	r1, fp
 8007e58:	4461      	add	r1, ip
 8007e5a:	fa1f fc83 	uxth.w	ip, r3
 8007e5e:	0c1b      	lsrs	r3, r3, #16
 8007e60:	eba1 010c 	sub.w	r1, r1, ip
 8007e64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e68:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007e6c:	b289      	uxth	r1, r1
 8007e6e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007e72:	454e      	cmp	r6, r9
 8007e74:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007e78:	f84a 3b04 	str.w	r3, [sl], #4
 8007e7c:	d8e6      	bhi.n	8007e4c <__mdiff+0x84>
 8007e7e:	1b33      	subs	r3, r6, r4
 8007e80:	3b15      	subs	r3, #21
 8007e82:	f023 0303 	bic.w	r3, r3, #3
 8007e86:	3415      	adds	r4, #21
 8007e88:	3304      	adds	r3, #4
 8007e8a:	42a6      	cmp	r6, r4
 8007e8c:	bf38      	it	cc
 8007e8e:	2304      	movcc	r3, #4
 8007e90:	441d      	add	r5, r3
 8007e92:	4443      	add	r3, r8
 8007e94:	461e      	mov	r6, r3
 8007e96:	462c      	mov	r4, r5
 8007e98:	4574      	cmp	r4, lr
 8007e9a:	d30e      	bcc.n	8007eba <__mdiff+0xf2>
 8007e9c:	f10e 0103 	add.w	r1, lr, #3
 8007ea0:	1b49      	subs	r1, r1, r5
 8007ea2:	f021 0103 	bic.w	r1, r1, #3
 8007ea6:	3d03      	subs	r5, #3
 8007ea8:	45ae      	cmp	lr, r5
 8007eaa:	bf38      	it	cc
 8007eac:	2100      	movcc	r1, #0
 8007eae:	4419      	add	r1, r3
 8007eb0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007eb4:	b18b      	cbz	r3, 8007eda <__mdiff+0x112>
 8007eb6:	6117      	str	r7, [r2, #16]
 8007eb8:	e7a0      	b.n	8007dfc <__mdiff+0x34>
 8007eba:	f854 8b04 	ldr.w	r8, [r4], #4
 8007ebe:	fa1f f188 	uxth.w	r1, r8
 8007ec2:	4461      	add	r1, ip
 8007ec4:	1408      	asrs	r0, r1, #16
 8007ec6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007eca:	b289      	uxth	r1, r1
 8007ecc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ed0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ed4:	f846 1b04 	str.w	r1, [r6], #4
 8007ed8:	e7de      	b.n	8007e98 <__mdiff+0xd0>
 8007eda:	3f01      	subs	r7, #1
 8007edc:	e7e8      	b.n	8007eb0 <__mdiff+0xe8>
 8007ede:	bf00      	nop
 8007ee0:	0800981d 	.word	0x0800981d
 8007ee4:	0800988d 	.word	0x0800988d

08007ee8 <__d2b>:
 8007ee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007eec:	2101      	movs	r1, #1
 8007eee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007ef2:	4690      	mov	r8, r2
 8007ef4:	461d      	mov	r5, r3
 8007ef6:	f7ff fd1f 	bl	8007938 <_Balloc>
 8007efa:	4604      	mov	r4, r0
 8007efc:	b930      	cbnz	r0, 8007f0c <__d2b+0x24>
 8007efe:	4602      	mov	r2, r0
 8007f00:	f240 310a 	movw	r1, #778	; 0x30a
 8007f04:	4b24      	ldr	r3, [pc, #144]	; (8007f98 <__d2b+0xb0>)
 8007f06:	4825      	ldr	r0, [pc, #148]	; (8007f9c <__d2b+0xb4>)
 8007f08:	f001 f85a 	bl	8008fc0 <__assert_func>
 8007f0c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007f10:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007f14:	bb2d      	cbnz	r5, 8007f62 <__d2b+0x7a>
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	f1b8 0300 	subs.w	r3, r8, #0
 8007f1c:	d026      	beq.n	8007f6c <__d2b+0x84>
 8007f1e:	4668      	mov	r0, sp
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	f7ff fda1 	bl	8007a68 <__lo0bits>
 8007f26:	9900      	ldr	r1, [sp, #0]
 8007f28:	b1f0      	cbz	r0, 8007f68 <__d2b+0x80>
 8007f2a:	9a01      	ldr	r2, [sp, #4]
 8007f2c:	f1c0 0320 	rsb	r3, r0, #32
 8007f30:	fa02 f303 	lsl.w	r3, r2, r3
 8007f34:	430b      	orrs	r3, r1
 8007f36:	40c2      	lsrs	r2, r0
 8007f38:	6163      	str	r3, [r4, #20]
 8007f3a:	9201      	str	r2, [sp, #4]
 8007f3c:	9b01      	ldr	r3, [sp, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	bf14      	ite	ne
 8007f42:	2102      	movne	r1, #2
 8007f44:	2101      	moveq	r1, #1
 8007f46:	61a3      	str	r3, [r4, #24]
 8007f48:	6121      	str	r1, [r4, #16]
 8007f4a:	b1c5      	cbz	r5, 8007f7e <__d2b+0x96>
 8007f4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f50:	4405      	add	r5, r0
 8007f52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f56:	603d      	str	r5, [r7, #0]
 8007f58:	6030      	str	r0, [r6, #0]
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	b002      	add	sp, #8
 8007f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f66:	e7d6      	b.n	8007f16 <__d2b+0x2e>
 8007f68:	6161      	str	r1, [r4, #20]
 8007f6a:	e7e7      	b.n	8007f3c <__d2b+0x54>
 8007f6c:	a801      	add	r0, sp, #4
 8007f6e:	f7ff fd7b 	bl	8007a68 <__lo0bits>
 8007f72:	2101      	movs	r1, #1
 8007f74:	9b01      	ldr	r3, [sp, #4]
 8007f76:	6121      	str	r1, [r4, #16]
 8007f78:	6163      	str	r3, [r4, #20]
 8007f7a:	3020      	adds	r0, #32
 8007f7c:	e7e5      	b.n	8007f4a <__d2b+0x62>
 8007f7e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007f82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f86:	6038      	str	r0, [r7, #0]
 8007f88:	6918      	ldr	r0, [r3, #16]
 8007f8a:	f7ff fd4d 	bl	8007a28 <__hi0bits>
 8007f8e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007f92:	6031      	str	r1, [r6, #0]
 8007f94:	e7e1      	b.n	8007f5a <__d2b+0x72>
 8007f96:	bf00      	nop
 8007f98:	0800981d 	.word	0x0800981d
 8007f9c:	0800988d 	.word	0x0800988d

08007fa0 <_realloc_r>:
 8007fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	4681      	mov	r9, r0
 8007fa8:	4611      	mov	r1, r2
 8007faa:	b924      	cbnz	r4, 8007fb6 <_realloc_r+0x16>
 8007fac:	b003      	add	sp, #12
 8007fae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb2:	f7ff ba4b 	b.w	800744c <_malloc_r>
 8007fb6:	9201      	str	r2, [sp, #4]
 8007fb8:	f7ff fcb2 	bl	8007920 <__malloc_lock>
 8007fbc:	9901      	ldr	r1, [sp, #4]
 8007fbe:	f101 080b 	add.w	r8, r1, #11
 8007fc2:	f1b8 0f16 	cmp.w	r8, #22
 8007fc6:	d90b      	bls.n	8007fe0 <_realloc_r+0x40>
 8007fc8:	f038 0807 	bics.w	r8, r8, #7
 8007fcc:	d50a      	bpl.n	8007fe4 <_realloc_r+0x44>
 8007fce:	230c      	movs	r3, #12
 8007fd0:	f04f 0b00 	mov.w	fp, #0
 8007fd4:	f8c9 3000 	str.w	r3, [r9]
 8007fd8:	4658      	mov	r0, fp
 8007fda:	b003      	add	sp, #12
 8007fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe0:	f04f 0810 	mov.w	r8, #16
 8007fe4:	4588      	cmp	r8, r1
 8007fe6:	d3f2      	bcc.n	8007fce <_realloc_r+0x2e>
 8007fe8:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8007fec:	f1a4 0a08 	sub.w	sl, r4, #8
 8007ff0:	f025 0603 	bic.w	r6, r5, #3
 8007ff4:	45b0      	cmp	r8, r6
 8007ff6:	f340 8173 	ble.w	80082e0 <_realloc_r+0x340>
 8007ffa:	48aa      	ldr	r0, [pc, #680]	; (80082a4 <_realloc_r+0x304>)
 8007ffc:	eb0a 0306 	add.w	r3, sl, r6
 8008000:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	459c      	cmp	ip, r3
 8008008:	9001      	str	r0, [sp, #4]
 800800a:	d005      	beq.n	8008018 <_realloc_r+0x78>
 800800c:	f022 0001 	bic.w	r0, r2, #1
 8008010:	4418      	add	r0, r3
 8008012:	6840      	ldr	r0, [r0, #4]
 8008014:	07c7      	lsls	r7, r0, #31
 8008016:	d427      	bmi.n	8008068 <_realloc_r+0xc8>
 8008018:	f022 0203 	bic.w	r2, r2, #3
 800801c:	459c      	cmp	ip, r3
 800801e:	eb06 0702 	add.w	r7, r6, r2
 8008022:	d119      	bne.n	8008058 <_realloc_r+0xb8>
 8008024:	f108 0010 	add.w	r0, r8, #16
 8008028:	42b8      	cmp	r0, r7
 800802a:	dc1f      	bgt.n	800806c <_realloc_r+0xcc>
 800802c:	9a01      	ldr	r2, [sp, #4]
 800802e:	eba7 0708 	sub.w	r7, r7, r8
 8008032:	eb0a 0308 	add.w	r3, sl, r8
 8008036:	f047 0701 	orr.w	r7, r7, #1
 800803a:	6093      	str	r3, [r2, #8]
 800803c:	605f      	str	r7, [r3, #4]
 800803e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008042:	4648      	mov	r0, r9
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	ea43 0308 	orr.w	r3, r3, r8
 800804c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008050:	f7ff fc6c 	bl	800792c <__malloc_unlock>
 8008054:	46a3      	mov	fp, r4
 8008056:	e7bf      	b.n	8007fd8 <_realloc_r+0x38>
 8008058:	45b8      	cmp	r8, r7
 800805a:	dc07      	bgt.n	800806c <_realloc_r+0xcc>
 800805c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8008060:	60da      	str	r2, [r3, #12]
 8008062:	6093      	str	r3, [r2, #8]
 8008064:	4655      	mov	r5, sl
 8008066:	e080      	b.n	800816a <_realloc_r+0x1ca>
 8008068:	2200      	movs	r2, #0
 800806a:	4613      	mov	r3, r2
 800806c:	07e8      	lsls	r0, r5, #31
 800806e:	f100 80e8 	bmi.w	8008242 <_realloc_r+0x2a2>
 8008072:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8008076:	ebaa 0505 	sub.w	r5, sl, r5
 800807a:	6868      	ldr	r0, [r5, #4]
 800807c:	f020 0003 	bic.w	r0, r0, #3
 8008080:	eb00 0b06 	add.w	fp, r0, r6
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 80a7 	beq.w	80081d8 <_realloc_r+0x238>
 800808a:	459c      	cmp	ip, r3
 800808c:	eb02 070b 	add.w	r7, r2, fp
 8008090:	d14b      	bne.n	800812a <_realloc_r+0x18a>
 8008092:	f108 0310 	add.w	r3, r8, #16
 8008096:	42bb      	cmp	r3, r7
 8008098:	f300 809e 	bgt.w	80081d8 <_realloc_r+0x238>
 800809c:	46ab      	mov	fp, r5
 800809e:	68eb      	ldr	r3, [r5, #12]
 80080a0:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80080a4:	60d3      	str	r3, [r2, #12]
 80080a6:	609a      	str	r2, [r3, #8]
 80080a8:	1f32      	subs	r2, r6, #4
 80080aa:	2a24      	cmp	r2, #36	; 0x24
 80080ac:	d838      	bhi.n	8008120 <_realloc_r+0x180>
 80080ae:	2a13      	cmp	r2, #19
 80080b0:	d934      	bls.n	800811c <_realloc_r+0x17c>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	2a1b      	cmp	r2, #27
 80080b6:	60ab      	str	r3, [r5, #8]
 80080b8:	6863      	ldr	r3, [r4, #4]
 80080ba:	60eb      	str	r3, [r5, #12]
 80080bc:	d81b      	bhi.n	80080f6 <_realloc_r+0x156>
 80080be:	3408      	adds	r4, #8
 80080c0:	f105 0310 	add.w	r3, r5, #16
 80080c4:	6822      	ldr	r2, [r4, #0]
 80080c6:	601a      	str	r2, [r3, #0]
 80080c8:	6862      	ldr	r2, [r4, #4]
 80080ca:	605a      	str	r2, [r3, #4]
 80080cc:	68a2      	ldr	r2, [r4, #8]
 80080ce:	609a      	str	r2, [r3, #8]
 80080d0:	9a01      	ldr	r2, [sp, #4]
 80080d2:	eba7 0708 	sub.w	r7, r7, r8
 80080d6:	eb05 0308 	add.w	r3, r5, r8
 80080da:	f047 0701 	orr.w	r7, r7, #1
 80080de:	6093      	str	r3, [r2, #8]
 80080e0:	605f      	str	r7, [r3, #4]
 80080e2:	686b      	ldr	r3, [r5, #4]
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	ea43 0308 	orr.w	r3, r3, r8
 80080ec:	606b      	str	r3, [r5, #4]
 80080ee:	4648      	mov	r0, r9
 80080f0:	f7ff fc1c 	bl	800792c <__malloc_unlock>
 80080f4:	e770      	b.n	8007fd8 <_realloc_r+0x38>
 80080f6:	68a3      	ldr	r3, [r4, #8]
 80080f8:	2a24      	cmp	r2, #36	; 0x24
 80080fa:	612b      	str	r3, [r5, #16]
 80080fc:	68e3      	ldr	r3, [r4, #12]
 80080fe:	bf18      	it	ne
 8008100:	3410      	addne	r4, #16
 8008102:	616b      	str	r3, [r5, #20]
 8008104:	bf09      	itett	eq
 8008106:	6923      	ldreq	r3, [r4, #16]
 8008108:	f105 0318 	addne.w	r3, r5, #24
 800810c:	61ab      	streq	r3, [r5, #24]
 800810e:	6962      	ldreq	r2, [r4, #20]
 8008110:	bf02      	ittt	eq
 8008112:	f105 0320 	addeq.w	r3, r5, #32
 8008116:	61ea      	streq	r2, [r5, #28]
 8008118:	3418      	addeq	r4, #24
 800811a:	e7d3      	b.n	80080c4 <_realloc_r+0x124>
 800811c:	465b      	mov	r3, fp
 800811e:	e7d1      	b.n	80080c4 <_realloc_r+0x124>
 8008120:	4621      	mov	r1, r4
 8008122:	4658      	mov	r0, fp
 8008124:	f7ff fbe2 	bl	80078ec <memmove>
 8008128:	e7d2      	b.n	80080d0 <_realloc_r+0x130>
 800812a:	45b8      	cmp	r8, r7
 800812c:	dc54      	bgt.n	80081d8 <_realloc_r+0x238>
 800812e:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8008132:	4628      	mov	r0, r5
 8008134:	60da      	str	r2, [r3, #12]
 8008136:	6093      	str	r3, [r2, #8]
 8008138:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800813c:	68eb      	ldr	r3, [r5, #12]
 800813e:	60d3      	str	r3, [r2, #12]
 8008140:	609a      	str	r2, [r3, #8]
 8008142:	1f32      	subs	r2, r6, #4
 8008144:	2a24      	cmp	r2, #36	; 0x24
 8008146:	d843      	bhi.n	80081d0 <_realloc_r+0x230>
 8008148:	2a13      	cmp	r2, #19
 800814a:	d908      	bls.n	800815e <_realloc_r+0x1be>
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	2a1b      	cmp	r2, #27
 8008150:	60ab      	str	r3, [r5, #8]
 8008152:	6863      	ldr	r3, [r4, #4]
 8008154:	60eb      	str	r3, [r5, #12]
 8008156:	d828      	bhi.n	80081aa <_realloc_r+0x20a>
 8008158:	3408      	adds	r4, #8
 800815a:	f105 0010 	add.w	r0, r5, #16
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	6003      	str	r3, [r0, #0]
 8008162:	6863      	ldr	r3, [r4, #4]
 8008164:	6043      	str	r3, [r0, #4]
 8008166:	68a3      	ldr	r3, [r4, #8]
 8008168:	6083      	str	r3, [r0, #8]
 800816a:	686a      	ldr	r2, [r5, #4]
 800816c:	eba7 0008 	sub.w	r0, r7, r8
 8008170:	280f      	cmp	r0, #15
 8008172:	f002 0201 	and.w	r2, r2, #1
 8008176:	eb05 0307 	add.w	r3, r5, r7
 800817a:	f240 80b3 	bls.w	80082e4 <_realloc_r+0x344>
 800817e:	eb05 0108 	add.w	r1, r5, r8
 8008182:	ea48 0202 	orr.w	r2, r8, r2
 8008186:	f040 0001 	orr.w	r0, r0, #1
 800818a:	606a      	str	r2, [r5, #4]
 800818c:	6048      	str	r0, [r1, #4]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	4648      	mov	r0, r9
 8008192:	f042 0201 	orr.w	r2, r2, #1
 8008196:	605a      	str	r2, [r3, #4]
 8008198:	3108      	adds	r1, #8
 800819a:	f7fe feb9 	bl	8006f10 <_free_r>
 800819e:	4648      	mov	r0, r9
 80081a0:	f7ff fbc4 	bl	800792c <__malloc_unlock>
 80081a4:	f105 0b08 	add.w	fp, r5, #8
 80081a8:	e716      	b.n	8007fd8 <_realloc_r+0x38>
 80081aa:	68a3      	ldr	r3, [r4, #8]
 80081ac:	2a24      	cmp	r2, #36	; 0x24
 80081ae:	612b      	str	r3, [r5, #16]
 80081b0:	68e3      	ldr	r3, [r4, #12]
 80081b2:	bf18      	it	ne
 80081b4:	f105 0018 	addne.w	r0, r5, #24
 80081b8:	616b      	str	r3, [r5, #20]
 80081ba:	bf09      	itett	eq
 80081bc:	6923      	ldreq	r3, [r4, #16]
 80081be:	3410      	addne	r4, #16
 80081c0:	61ab      	streq	r3, [r5, #24]
 80081c2:	6963      	ldreq	r3, [r4, #20]
 80081c4:	bf02      	ittt	eq
 80081c6:	f105 0020 	addeq.w	r0, r5, #32
 80081ca:	61eb      	streq	r3, [r5, #28]
 80081cc:	3418      	addeq	r4, #24
 80081ce:	e7c6      	b.n	800815e <_realloc_r+0x1be>
 80081d0:	4621      	mov	r1, r4
 80081d2:	f7ff fb8b 	bl	80078ec <memmove>
 80081d6:	e7c8      	b.n	800816a <_realloc_r+0x1ca>
 80081d8:	45d8      	cmp	r8, fp
 80081da:	dc32      	bgt.n	8008242 <_realloc_r+0x2a2>
 80081dc:	4628      	mov	r0, r5
 80081de:	68eb      	ldr	r3, [r5, #12]
 80081e0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80081e4:	60d3      	str	r3, [r2, #12]
 80081e6:	609a      	str	r2, [r3, #8]
 80081e8:	1f32      	subs	r2, r6, #4
 80081ea:	2a24      	cmp	r2, #36	; 0x24
 80081ec:	d825      	bhi.n	800823a <_realloc_r+0x29a>
 80081ee:	2a13      	cmp	r2, #19
 80081f0:	d908      	bls.n	8008204 <_realloc_r+0x264>
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	2a1b      	cmp	r2, #27
 80081f6:	60ab      	str	r3, [r5, #8]
 80081f8:	6863      	ldr	r3, [r4, #4]
 80081fa:	60eb      	str	r3, [r5, #12]
 80081fc:	d80a      	bhi.n	8008214 <_realloc_r+0x274>
 80081fe:	3408      	adds	r4, #8
 8008200:	f105 0010 	add.w	r0, r5, #16
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	6003      	str	r3, [r0, #0]
 8008208:	6863      	ldr	r3, [r4, #4]
 800820a:	6043      	str	r3, [r0, #4]
 800820c:	68a3      	ldr	r3, [r4, #8]
 800820e:	6083      	str	r3, [r0, #8]
 8008210:	465f      	mov	r7, fp
 8008212:	e7aa      	b.n	800816a <_realloc_r+0x1ca>
 8008214:	68a3      	ldr	r3, [r4, #8]
 8008216:	2a24      	cmp	r2, #36	; 0x24
 8008218:	612b      	str	r3, [r5, #16]
 800821a:	68e3      	ldr	r3, [r4, #12]
 800821c:	bf18      	it	ne
 800821e:	f105 0018 	addne.w	r0, r5, #24
 8008222:	616b      	str	r3, [r5, #20]
 8008224:	bf09      	itett	eq
 8008226:	6923      	ldreq	r3, [r4, #16]
 8008228:	3410      	addne	r4, #16
 800822a:	61ab      	streq	r3, [r5, #24]
 800822c:	6963      	ldreq	r3, [r4, #20]
 800822e:	bf02      	ittt	eq
 8008230:	f105 0020 	addeq.w	r0, r5, #32
 8008234:	61eb      	streq	r3, [r5, #28]
 8008236:	3418      	addeq	r4, #24
 8008238:	e7e4      	b.n	8008204 <_realloc_r+0x264>
 800823a:	4621      	mov	r1, r4
 800823c:	f7ff fb56 	bl	80078ec <memmove>
 8008240:	e7e6      	b.n	8008210 <_realloc_r+0x270>
 8008242:	4648      	mov	r0, r9
 8008244:	f7ff f902 	bl	800744c <_malloc_r>
 8008248:	4683      	mov	fp, r0
 800824a:	2800      	cmp	r0, #0
 800824c:	f43f af4f 	beq.w	80080ee <_realloc_r+0x14e>
 8008250:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008254:	f1a0 0208 	sub.w	r2, r0, #8
 8008258:	f023 0301 	bic.w	r3, r3, #1
 800825c:	4453      	add	r3, sl
 800825e:	4293      	cmp	r3, r2
 8008260:	d105      	bne.n	800826e <_realloc_r+0x2ce>
 8008262:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8008266:	f027 0703 	bic.w	r7, r7, #3
 800826a:	4437      	add	r7, r6
 800826c:	e6fa      	b.n	8008064 <_realloc_r+0xc4>
 800826e:	1f32      	subs	r2, r6, #4
 8008270:	2a24      	cmp	r2, #36	; 0x24
 8008272:	d831      	bhi.n	80082d8 <_realloc_r+0x338>
 8008274:	2a13      	cmp	r2, #19
 8008276:	d92c      	bls.n	80082d2 <_realloc_r+0x332>
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	2a1b      	cmp	r2, #27
 800827c:	6003      	str	r3, [r0, #0]
 800827e:	6863      	ldr	r3, [r4, #4]
 8008280:	6043      	str	r3, [r0, #4]
 8008282:	d811      	bhi.n	80082a8 <_realloc_r+0x308>
 8008284:	f104 0208 	add.w	r2, r4, #8
 8008288:	f100 0308 	add.w	r3, r0, #8
 800828c:	6811      	ldr	r1, [r2, #0]
 800828e:	6019      	str	r1, [r3, #0]
 8008290:	6851      	ldr	r1, [r2, #4]
 8008292:	6059      	str	r1, [r3, #4]
 8008294:	6892      	ldr	r2, [r2, #8]
 8008296:	609a      	str	r2, [r3, #8]
 8008298:	4621      	mov	r1, r4
 800829a:	4648      	mov	r0, r9
 800829c:	f7fe fe38 	bl	8006f10 <_free_r>
 80082a0:	e725      	b.n	80080ee <_realloc_r+0x14e>
 80082a2:	bf00      	nop
 80082a4:	2000043c 	.word	0x2000043c
 80082a8:	68a3      	ldr	r3, [r4, #8]
 80082aa:	2a24      	cmp	r2, #36	; 0x24
 80082ac:	6083      	str	r3, [r0, #8]
 80082ae:	68e3      	ldr	r3, [r4, #12]
 80082b0:	bf18      	it	ne
 80082b2:	f104 0210 	addne.w	r2, r4, #16
 80082b6:	60c3      	str	r3, [r0, #12]
 80082b8:	bf09      	itett	eq
 80082ba:	6923      	ldreq	r3, [r4, #16]
 80082bc:	f100 0310 	addne.w	r3, r0, #16
 80082c0:	6103      	streq	r3, [r0, #16]
 80082c2:	6961      	ldreq	r1, [r4, #20]
 80082c4:	bf02      	ittt	eq
 80082c6:	f104 0218 	addeq.w	r2, r4, #24
 80082ca:	f100 0318 	addeq.w	r3, r0, #24
 80082ce:	6141      	streq	r1, [r0, #20]
 80082d0:	e7dc      	b.n	800828c <_realloc_r+0x2ec>
 80082d2:	4603      	mov	r3, r0
 80082d4:	4622      	mov	r2, r4
 80082d6:	e7d9      	b.n	800828c <_realloc_r+0x2ec>
 80082d8:	4621      	mov	r1, r4
 80082da:	f7ff fb07 	bl	80078ec <memmove>
 80082de:	e7db      	b.n	8008298 <_realloc_r+0x2f8>
 80082e0:	4637      	mov	r7, r6
 80082e2:	e6bf      	b.n	8008064 <_realloc_r+0xc4>
 80082e4:	4317      	orrs	r7, r2
 80082e6:	606f      	str	r7, [r5, #4]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	f042 0201 	orr.w	r2, r2, #1
 80082ee:	605a      	str	r2, [r3, #4]
 80082f0:	e755      	b.n	800819e <_realloc_r+0x1fe>
 80082f2:	bf00      	nop

080082f4 <frexp>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	4617      	mov	r7, r2
 80082f8:	2200      	movs	r2, #0
 80082fa:	603a      	str	r2, [r7, #0]
 80082fc:	4a14      	ldr	r2, [pc, #80]	; (8008350 <frexp+0x5c>)
 80082fe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008302:	4296      	cmp	r6, r2
 8008304:	4604      	mov	r4, r0
 8008306:	460d      	mov	r5, r1
 8008308:	460b      	mov	r3, r1
 800830a:	dc1e      	bgt.n	800834a <frexp+0x56>
 800830c:	4602      	mov	r2, r0
 800830e:	4332      	orrs	r2, r6
 8008310:	d01b      	beq.n	800834a <frexp+0x56>
 8008312:	4a10      	ldr	r2, [pc, #64]	; (8008354 <frexp+0x60>)
 8008314:	400a      	ands	r2, r1
 8008316:	b952      	cbnz	r2, 800832e <frexp+0x3a>
 8008318:	2200      	movs	r2, #0
 800831a:	4b0f      	ldr	r3, [pc, #60]	; (8008358 <frexp+0x64>)
 800831c:	f7f8 f8dc 	bl	80004d8 <__aeabi_dmul>
 8008320:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8008324:	4604      	mov	r4, r0
 8008326:	460b      	mov	r3, r1
 8008328:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800832c:	603a      	str	r2, [r7, #0]
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	1536      	asrs	r6, r6, #20
 8008332:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008336:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 800833a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800833e:	4416      	add	r6, r2
 8008340:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8008344:	603e      	str	r6, [r7, #0]
 8008346:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800834a:	4620      	mov	r0, r4
 800834c:	4629      	mov	r1, r5
 800834e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008350:	7fefffff 	.word	0x7fefffff
 8008354:	7ff00000 	.word	0x7ff00000
 8008358:	43500000 	.word	0x43500000

0800835c <_sbrk_r>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	2300      	movs	r3, #0
 8008360:	4d05      	ldr	r5, [pc, #20]	; (8008378 <_sbrk_r+0x1c>)
 8008362:	4604      	mov	r4, r0
 8008364:	4608      	mov	r0, r1
 8008366:	602b      	str	r3, [r5, #0]
 8008368:	f7f9 fb02 	bl	8001970 <_sbrk>
 800836c:	1c43      	adds	r3, r0, #1
 800836e:	d102      	bne.n	8008376 <_sbrk_r+0x1a>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	b103      	cbz	r3, 8008376 <_sbrk_r+0x1a>
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	bd38      	pop	{r3, r4, r5, pc}
 8008378:	20000c5c 	.word	0x20000c5c

0800837c <__sread>:
 800837c:	b510      	push	{r4, lr}
 800837e:	460c      	mov	r4, r1
 8008380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008384:	f000 ff98 	bl	80092b8 <_read_r>
 8008388:	2800      	cmp	r0, #0
 800838a:	bfab      	itete	ge
 800838c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800838e:	89a3      	ldrhlt	r3, [r4, #12]
 8008390:	181b      	addge	r3, r3, r0
 8008392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008396:	bfac      	ite	ge
 8008398:	6523      	strge	r3, [r4, #80]	; 0x50
 800839a:	81a3      	strhlt	r3, [r4, #12]
 800839c:	bd10      	pop	{r4, pc}

0800839e <__swrite>:
 800839e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a2:	461f      	mov	r7, r3
 80083a4:	898b      	ldrh	r3, [r1, #12]
 80083a6:	4605      	mov	r5, r0
 80083a8:	05db      	lsls	r3, r3, #23
 80083aa:	460c      	mov	r4, r1
 80083ac:	4616      	mov	r6, r2
 80083ae:	d505      	bpl.n	80083bc <__swrite+0x1e>
 80083b0:	2302      	movs	r3, #2
 80083b2:	2200      	movs	r2, #0
 80083b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b8:	f000 ff5a 	bl	8009270 <_lseek_r>
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	4632      	mov	r2, r6
 80083c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083c4:	81a3      	strh	r3, [r4, #12]
 80083c6:	4628      	mov	r0, r5
 80083c8:	463b      	mov	r3, r7
 80083ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083d2:	f000 bda3 	b.w	8008f1c <_write_r>

080083d6 <__sseek>:
 80083d6:	b510      	push	{r4, lr}
 80083d8:	460c      	mov	r4, r1
 80083da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083de:	f000 ff47 	bl	8009270 <_lseek_r>
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	bf15      	itete	ne
 80083e8:	6520      	strne	r0, [r4, #80]	; 0x50
 80083ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083f2:	81a3      	strheq	r3, [r4, #12]
 80083f4:	bf18      	it	ne
 80083f6:	81a3      	strhne	r3, [r4, #12]
 80083f8:	bd10      	pop	{r4, pc}

080083fa <__sclose>:
 80083fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083fe:	f000 be2b 	b.w	8009058 <_close_r>

08008402 <strncpy>:
 8008402:	4603      	mov	r3, r0
 8008404:	b510      	push	{r4, lr}
 8008406:	3901      	subs	r1, #1
 8008408:	b132      	cbz	r2, 8008418 <strncpy+0x16>
 800840a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800840e:	3a01      	subs	r2, #1
 8008410:	f803 4b01 	strb.w	r4, [r3], #1
 8008414:	2c00      	cmp	r4, #0
 8008416:	d1f7      	bne.n	8008408 <strncpy+0x6>
 8008418:	2100      	movs	r1, #0
 800841a:	441a      	add	r2, r3
 800841c:	4293      	cmp	r3, r2
 800841e:	d100      	bne.n	8008422 <strncpy+0x20>
 8008420:	bd10      	pop	{r4, pc}
 8008422:	f803 1b01 	strb.w	r1, [r3], #1
 8008426:	e7f9      	b.n	800841c <strncpy+0x1a>

08008428 <__ssprint_r>:
 8008428:	6893      	ldr	r3, [r2, #8]
 800842a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842e:	4680      	mov	r8, r0
 8008430:	460c      	mov	r4, r1
 8008432:	4617      	mov	r7, r2
 8008434:	2b00      	cmp	r3, #0
 8008436:	d061      	beq.n	80084fc <__ssprint_r+0xd4>
 8008438:	2300      	movs	r3, #0
 800843a:	469b      	mov	fp, r3
 800843c:	f8d2 a000 	ldr.w	sl, [r2]
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	f1bb 0f00 	cmp.w	fp, #0
 8008446:	d02b      	beq.n	80084a0 <__ssprint_r+0x78>
 8008448:	68a6      	ldr	r6, [r4, #8]
 800844a:	45b3      	cmp	fp, r6
 800844c:	d342      	bcc.n	80084d4 <__ssprint_r+0xac>
 800844e:	89a2      	ldrh	r2, [r4, #12]
 8008450:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008454:	d03e      	beq.n	80084d4 <__ssprint_r+0xac>
 8008456:	6825      	ldr	r5, [r4, #0]
 8008458:	6921      	ldr	r1, [r4, #16]
 800845a:	eba5 0901 	sub.w	r9, r5, r1
 800845e:	6965      	ldr	r5, [r4, #20]
 8008460:	f109 0001 	add.w	r0, r9, #1
 8008464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008468:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800846c:	106d      	asrs	r5, r5, #1
 800846e:	4458      	add	r0, fp
 8008470:	4285      	cmp	r5, r0
 8008472:	bf38      	it	cc
 8008474:	4605      	movcc	r5, r0
 8008476:	0553      	lsls	r3, r2, #21
 8008478:	d545      	bpl.n	8008506 <__ssprint_r+0xde>
 800847a:	4629      	mov	r1, r5
 800847c:	4640      	mov	r0, r8
 800847e:	f7fe ffe5 	bl	800744c <_malloc_r>
 8008482:	4606      	mov	r6, r0
 8008484:	b9a0      	cbnz	r0, 80084b0 <__ssprint_r+0x88>
 8008486:	230c      	movs	r3, #12
 8008488:	f8c8 3000 	str.w	r3, [r8]
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	f04f 30ff 	mov.w	r0, #4294967295
 8008492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008496:	81a3      	strh	r3, [r4, #12]
 8008498:	2300      	movs	r3, #0
 800849a:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800849e:	e02f      	b.n	8008500 <__ssprint_r+0xd8>
 80084a0:	f8da 3000 	ldr.w	r3, [sl]
 80084a4:	f8da b004 	ldr.w	fp, [sl, #4]
 80084a8:	9301      	str	r3, [sp, #4]
 80084aa:	f10a 0a08 	add.w	sl, sl, #8
 80084ae:	e7c8      	b.n	8008442 <__ssprint_r+0x1a>
 80084b0:	464a      	mov	r2, r9
 80084b2:	6921      	ldr	r1, [r4, #16]
 80084b4:	f7fb f822 	bl	80034fc <memcpy>
 80084b8:	89a2      	ldrh	r2, [r4, #12]
 80084ba:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80084be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084c2:	81a2      	strh	r2, [r4, #12]
 80084c4:	6126      	str	r6, [r4, #16]
 80084c6:	444e      	add	r6, r9
 80084c8:	6026      	str	r6, [r4, #0]
 80084ca:	465e      	mov	r6, fp
 80084cc:	6165      	str	r5, [r4, #20]
 80084ce:	eba5 0509 	sub.w	r5, r5, r9
 80084d2:	60a5      	str	r5, [r4, #8]
 80084d4:	455e      	cmp	r6, fp
 80084d6:	bf28      	it	cs
 80084d8:	465e      	movcs	r6, fp
 80084da:	9901      	ldr	r1, [sp, #4]
 80084dc:	4632      	mov	r2, r6
 80084de:	6820      	ldr	r0, [r4, #0]
 80084e0:	f7ff fa04 	bl	80078ec <memmove>
 80084e4:	68a2      	ldr	r2, [r4, #8]
 80084e6:	1b92      	subs	r2, r2, r6
 80084e8:	60a2      	str	r2, [r4, #8]
 80084ea:	6822      	ldr	r2, [r4, #0]
 80084ec:	4432      	add	r2, r6
 80084ee:	6022      	str	r2, [r4, #0]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	eba2 030b 	sub.w	r3, r2, fp
 80084f6:	60bb      	str	r3, [r7, #8]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1d1      	bne.n	80084a0 <__ssprint_r+0x78>
 80084fc:	2000      	movs	r0, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	b003      	add	sp, #12
 8008502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008506:	462a      	mov	r2, r5
 8008508:	4640      	mov	r0, r8
 800850a:	f7ff fd49 	bl	8007fa0 <_realloc_r>
 800850e:	4606      	mov	r6, r0
 8008510:	2800      	cmp	r0, #0
 8008512:	d1d7      	bne.n	80084c4 <__ssprint_r+0x9c>
 8008514:	4640      	mov	r0, r8
 8008516:	6921      	ldr	r1, [r4, #16]
 8008518:	f7fe fcfa 	bl	8006f10 <_free_r>
 800851c:	e7b3      	b.n	8008486 <__ssprint_r+0x5e>

0800851e <sysconf>:
 800851e:	2808      	cmp	r0, #8
 8008520:	b508      	push	{r3, lr}
 8008522:	d006      	beq.n	8008532 <sysconf+0x14>
 8008524:	f7fa ffc0 	bl	80034a8 <__errno>
 8008528:	2316      	movs	r3, #22
 800852a:	6003      	str	r3, [r0, #0]
 800852c:	f04f 30ff 	mov.w	r0, #4294967295
 8008530:	bd08      	pop	{r3, pc}
 8008532:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008536:	e7fb      	b.n	8008530 <sysconf+0x12>

08008538 <__sprint_r>:
 8008538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	6893      	ldr	r3, [r2, #8]
 800853e:	4680      	mov	r8, r0
 8008540:	460f      	mov	r7, r1
 8008542:	4614      	mov	r4, r2
 8008544:	b91b      	cbnz	r3, 800854e <__sprint_r+0x16>
 8008546:	4618      	mov	r0, r3
 8008548:	6053      	str	r3, [r2, #4]
 800854a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008550:	049d      	lsls	r5, r3, #18
 8008552:	d520      	bpl.n	8008596 <__sprint_r+0x5e>
 8008554:	6815      	ldr	r5, [r2, #0]
 8008556:	3508      	adds	r5, #8
 8008558:	f04f 0900 	mov.w	r9, #0
 800855c:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8008560:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8008564:	45ca      	cmp	sl, r9
 8008566:	dc0b      	bgt.n	8008580 <__sprint_r+0x48>
 8008568:	68a0      	ldr	r0, [r4, #8]
 800856a:	f026 0603 	bic.w	r6, r6, #3
 800856e:	1b80      	subs	r0, r0, r6
 8008570:	60a0      	str	r0, [r4, #8]
 8008572:	3508      	adds	r5, #8
 8008574:	2800      	cmp	r0, #0
 8008576:	d1ef      	bne.n	8008558 <__sprint_r+0x20>
 8008578:	2300      	movs	r3, #0
 800857a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800857e:	e7e4      	b.n	800854a <__sprint_r+0x12>
 8008580:	463a      	mov	r2, r7
 8008582:	4640      	mov	r0, r8
 8008584:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8008588:	f000 fe21 	bl	80091ce <_fputwc_r>
 800858c:	1c43      	adds	r3, r0, #1
 800858e:	d0f3      	beq.n	8008578 <__sprint_r+0x40>
 8008590:	f109 0901 	add.w	r9, r9, #1
 8008594:	e7e6      	b.n	8008564 <__sprint_r+0x2c>
 8008596:	f7fe fd7b 	bl	8007090 <__sfvwrite_r>
 800859a:	e7ed      	b.n	8008578 <__sprint_r+0x40>

0800859c <_vfiprintf_r>:
 800859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a0:	b0bb      	sub	sp, #236	; 0xec
 80085a2:	460f      	mov	r7, r1
 80085a4:	461d      	mov	r5, r3
 80085a6:	461c      	mov	r4, r3
 80085a8:	4681      	mov	r9, r0
 80085aa:	9202      	str	r2, [sp, #8]
 80085ac:	b118      	cbz	r0, 80085b6 <_vfiprintf_r+0x1a>
 80085ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80085b0:	b90b      	cbnz	r3, 80085b6 <_vfiprintf_r+0x1a>
 80085b2:	f7fe fc1d 	bl	8006df0 <__sinit>
 80085b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085b8:	07d8      	lsls	r0, r3, #31
 80085ba:	d405      	bmi.n	80085c8 <_vfiprintf_r+0x2c>
 80085bc:	89bb      	ldrh	r3, [r7, #12]
 80085be:	0599      	lsls	r1, r3, #22
 80085c0:	d402      	bmi.n	80085c8 <_vfiprintf_r+0x2c>
 80085c2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80085c4:	f7fe fed4 	bl	8007370 <__retarget_lock_acquire_recursive>
 80085c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80085cc:	049a      	lsls	r2, r3, #18
 80085ce:	d406      	bmi.n	80085de <_vfiprintf_r+0x42>
 80085d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80085d4:	81bb      	strh	r3, [r7, #12]
 80085d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085dc:	667b      	str	r3, [r7, #100]	; 0x64
 80085de:	89bb      	ldrh	r3, [r7, #12]
 80085e0:	071e      	lsls	r6, r3, #28
 80085e2:	d501      	bpl.n	80085e8 <_vfiprintf_r+0x4c>
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	b9ab      	cbnz	r3, 8008614 <_vfiprintf_r+0x78>
 80085e8:	4639      	mov	r1, r7
 80085ea:	4648      	mov	r0, r9
 80085ec:	f7fd fc52 	bl	8005e94 <__swsetup_r>
 80085f0:	b180      	cbz	r0, 8008614 <_vfiprintf_r+0x78>
 80085f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085f4:	07d8      	lsls	r0, r3, #31
 80085f6:	d506      	bpl.n	8008606 <_vfiprintf_r+0x6a>
 80085f8:	f04f 33ff 	mov.w	r3, #4294967295
 80085fc:	9303      	str	r3, [sp, #12]
 80085fe:	9803      	ldr	r0, [sp, #12]
 8008600:	b03b      	add	sp, #236	; 0xec
 8008602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008606:	89bb      	ldrh	r3, [r7, #12]
 8008608:	0599      	lsls	r1, r3, #22
 800860a:	d4f5      	bmi.n	80085f8 <_vfiprintf_r+0x5c>
 800860c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800860e:	f7fe feb0 	bl	8007372 <__retarget_lock_release_recursive>
 8008612:	e7f1      	b.n	80085f8 <_vfiprintf_r+0x5c>
 8008614:	89bb      	ldrh	r3, [r7, #12]
 8008616:	f003 021a 	and.w	r2, r3, #26
 800861a:	2a0a      	cmp	r2, #10
 800861c:	d113      	bne.n	8008646 <_vfiprintf_r+0xaa>
 800861e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008622:	2a00      	cmp	r2, #0
 8008624:	db0f      	blt.n	8008646 <_vfiprintf_r+0xaa>
 8008626:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008628:	07d2      	lsls	r2, r2, #31
 800862a:	d404      	bmi.n	8008636 <_vfiprintf_r+0x9a>
 800862c:	059e      	lsls	r6, r3, #22
 800862e:	d402      	bmi.n	8008636 <_vfiprintf_r+0x9a>
 8008630:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008632:	f7fe fe9e 	bl	8007372 <__retarget_lock_release_recursive>
 8008636:	462b      	mov	r3, r5
 8008638:	4639      	mov	r1, r7
 800863a:	4648      	mov	r0, r9
 800863c:	9a02      	ldr	r2, [sp, #8]
 800863e:	f000 fc2d 	bl	8008e9c <__sbprintf>
 8008642:	9003      	str	r0, [sp, #12]
 8008644:	e7db      	b.n	80085fe <_vfiprintf_r+0x62>
 8008646:	2300      	movs	r3, #0
 8008648:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800864c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8008650:	ae11      	add	r6, sp, #68	; 0x44
 8008652:	960e      	str	r6, [sp, #56]	; 0x38
 8008654:	9308      	str	r3, [sp, #32]
 8008656:	930a      	str	r3, [sp, #40]	; 0x28
 8008658:	9303      	str	r3, [sp, #12]
 800865a:	9b02      	ldr	r3, [sp, #8]
 800865c:	461d      	mov	r5, r3
 800865e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008662:	b10a      	cbz	r2, 8008668 <_vfiprintf_r+0xcc>
 8008664:	2a25      	cmp	r2, #37	; 0x25
 8008666:	d1f9      	bne.n	800865c <_vfiprintf_r+0xc0>
 8008668:	9b02      	ldr	r3, [sp, #8]
 800866a:	ebb5 0803 	subs.w	r8, r5, r3
 800866e:	d00d      	beq.n	800868c <_vfiprintf_r+0xf0>
 8008670:	e9c6 3800 	strd	r3, r8, [r6]
 8008674:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008676:	4443      	add	r3, r8
 8008678:	9310      	str	r3, [sp, #64]	; 0x40
 800867a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800867c:	3301      	adds	r3, #1
 800867e:	2b07      	cmp	r3, #7
 8008680:	930f      	str	r3, [sp, #60]	; 0x3c
 8008682:	dc75      	bgt.n	8008770 <_vfiprintf_r+0x1d4>
 8008684:	3608      	adds	r6, #8
 8008686:	9b03      	ldr	r3, [sp, #12]
 8008688:	4443      	add	r3, r8
 800868a:	9303      	str	r3, [sp, #12]
 800868c:	782b      	ldrb	r3, [r5, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 83c6 	beq.w	8008e20 <_vfiprintf_r+0x884>
 8008694:	2300      	movs	r3, #0
 8008696:	f04f 31ff 	mov.w	r1, #4294967295
 800869a:	469a      	mov	sl, r3
 800869c:	1c6a      	adds	r2, r5, #1
 800869e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80086a2:	9101      	str	r1, [sp, #4]
 80086a4:	9304      	str	r3, [sp, #16]
 80086a6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80086aa:	9202      	str	r2, [sp, #8]
 80086ac:	f1a3 0220 	sub.w	r2, r3, #32
 80086b0:	2a5a      	cmp	r2, #90	; 0x5a
 80086b2:	f200 830e 	bhi.w	8008cd2 <_vfiprintf_r+0x736>
 80086b6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80086ba:	0098      	.short	0x0098
 80086bc:	030c030c 	.word	0x030c030c
 80086c0:	030c00a0 	.word	0x030c00a0
 80086c4:	030c030c 	.word	0x030c030c
 80086c8:	030c0080 	.word	0x030c0080
 80086cc:	00a3030c 	.word	0x00a3030c
 80086d0:	030c00ad 	.word	0x030c00ad
 80086d4:	00af00aa 	.word	0x00af00aa
 80086d8:	00ca030c 	.word	0x00ca030c
 80086dc:	00cd00cd 	.word	0x00cd00cd
 80086e0:	00cd00cd 	.word	0x00cd00cd
 80086e4:	00cd00cd 	.word	0x00cd00cd
 80086e8:	00cd00cd 	.word	0x00cd00cd
 80086ec:	030c00cd 	.word	0x030c00cd
 80086f0:	030c030c 	.word	0x030c030c
 80086f4:	030c030c 	.word	0x030c030c
 80086f8:	030c030c 	.word	0x030c030c
 80086fc:	030c030c 	.word	0x030c030c
 8008700:	010500f7 	.word	0x010500f7
 8008704:	030c030c 	.word	0x030c030c
 8008708:	030c030c 	.word	0x030c030c
 800870c:	030c030c 	.word	0x030c030c
 8008710:	030c030c 	.word	0x030c030c
 8008714:	030c030c 	.word	0x030c030c
 8008718:	030c014b 	.word	0x030c014b
 800871c:	030c030c 	.word	0x030c030c
 8008720:	030c0191 	.word	0x030c0191
 8008724:	030c026f 	.word	0x030c026f
 8008728:	028d030c 	.word	0x028d030c
 800872c:	030c030c 	.word	0x030c030c
 8008730:	030c030c 	.word	0x030c030c
 8008734:	030c030c 	.word	0x030c030c
 8008738:	030c030c 	.word	0x030c030c
 800873c:	030c030c 	.word	0x030c030c
 8008740:	010700f7 	.word	0x010700f7
 8008744:	030c030c 	.word	0x030c030c
 8008748:	00dd030c 	.word	0x00dd030c
 800874c:	00f10107 	.word	0x00f10107
 8008750:	00ea030c 	.word	0x00ea030c
 8008754:	012e030c 	.word	0x012e030c
 8008758:	0180014d 	.word	0x0180014d
 800875c:	030c00f1 	.word	0x030c00f1
 8008760:	00960191 	.word	0x00960191
 8008764:	030c0271 	.word	0x030c0271
 8008768:	0065030c 	.word	0x0065030c
 800876c:	0096030c 	.word	0x0096030c
 8008770:	4639      	mov	r1, r7
 8008772:	4648      	mov	r0, r9
 8008774:	aa0e      	add	r2, sp, #56	; 0x38
 8008776:	f7ff fedf 	bl	8008538 <__sprint_r>
 800877a:	2800      	cmp	r0, #0
 800877c:	f040 832f 	bne.w	8008dde <_vfiprintf_r+0x842>
 8008780:	ae11      	add	r6, sp, #68	; 0x44
 8008782:	e780      	b.n	8008686 <_vfiprintf_r+0xea>
 8008784:	4a94      	ldr	r2, [pc, #592]	; (80089d8 <_vfiprintf_r+0x43c>)
 8008786:	f01a 0f20 	tst.w	sl, #32
 800878a:	9206      	str	r2, [sp, #24]
 800878c:	f000 8224 	beq.w	8008bd8 <_vfiprintf_r+0x63c>
 8008790:	3407      	adds	r4, #7
 8008792:	f024 0b07 	bic.w	fp, r4, #7
 8008796:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800879a:	f01a 0f01 	tst.w	sl, #1
 800879e:	d009      	beq.n	80087b4 <_vfiprintf_r+0x218>
 80087a0:	ea54 0205 	orrs.w	r2, r4, r5
 80087a4:	bf1f      	itttt	ne
 80087a6:	2230      	movne	r2, #48	; 0x30
 80087a8:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 80087ac:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 80087b0:	f04a 0a02 	orrne.w	sl, sl, #2
 80087b4:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80087b8:	e10b      	b.n	80089d2 <_vfiprintf_r+0x436>
 80087ba:	4648      	mov	r0, r9
 80087bc:	f7fe fdd2 	bl	8007364 <_localeconv_r>
 80087c0:	6843      	ldr	r3, [r0, #4]
 80087c2:	4618      	mov	r0, r3
 80087c4:	930a      	str	r3, [sp, #40]	; 0x28
 80087c6:	f7f7 fcc3 	bl	8000150 <strlen>
 80087ca:	9008      	str	r0, [sp, #32]
 80087cc:	4648      	mov	r0, r9
 80087ce:	f7fe fdc9 	bl	8007364 <_localeconv_r>
 80087d2:	6883      	ldr	r3, [r0, #8]
 80087d4:	9307      	str	r3, [sp, #28]
 80087d6:	9b08      	ldr	r3, [sp, #32]
 80087d8:	b12b      	cbz	r3, 80087e6 <_vfiprintf_r+0x24a>
 80087da:	9b07      	ldr	r3, [sp, #28]
 80087dc:	b11b      	cbz	r3, 80087e6 <_vfiprintf_r+0x24a>
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	b10b      	cbz	r3, 80087e6 <_vfiprintf_r+0x24a>
 80087e2:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80087e6:	9a02      	ldr	r2, [sp, #8]
 80087e8:	e75d      	b.n	80086a6 <_vfiprintf_r+0x10a>
 80087ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1f9      	bne.n	80087e6 <_vfiprintf_r+0x24a>
 80087f2:	2320      	movs	r3, #32
 80087f4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80087f8:	e7f5      	b.n	80087e6 <_vfiprintf_r+0x24a>
 80087fa:	f04a 0a01 	orr.w	sl, sl, #1
 80087fe:	e7f2      	b.n	80087e6 <_vfiprintf_r+0x24a>
 8008800:	f854 3b04 	ldr.w	r3, [r4], #4
 8008804:	2b00      	cmp	r3, #0
 8008806:	9304      	str	r3, [sp, #16]
 8008808:	daed      	bge.n	80087e6 <_vfiprintf_r+0x24a>
 800880a:	425b      	negs	r3, r3
 800880c:	9304      	str	r3, [sp, #16]
 800880e:	f04a 0a04 	orr.w	sl, sl, #4
 8008812:	e7e8      	b.n	80087e6 <_vfiprintf_r+0x24a>
 8008814:	232b      	movs	r3, #43	; 0x2b
 8008816:	e7ed      	b.n	80087f4 <_vfiprintf_r+0x258>
 8008818:	9a02      	ldr	r2, [sp, #8]
 800881a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800881e:	2b2a      	cmp	r3, #42	; 0x2a
 8008820:	d112      	bne.n	8008848 <_vfiprintf_r+0x2ac>
 8008822:	f854 0b04 	ldr.w	r0, [r4], #4
 8008826:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800882a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800882e:	e7da      	b.n	80087e6 <_vfiprintf_r+0x24a>
 8008830:	200a      	movs	r0, #10
 8008832:	9b01      	ldr	r3, [sp, #4]
 8008834:	fb00 1303 	mla	r3, r0, r3, r1
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800883e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008842:	2909      	cmp	r1, #9
 8008844:	d9f4      	bls.n	8008830 <_vfiprintf_r+0x294>
 8008846:	e730      	b.n	80086aa <_vfiprintf_r+0x10e>
 8008848:	2100      	movs	r1, #0
 800884a:	9101      	str	r1, [sp, #4]
 800884c:	e7f7      	b.n	800883e <_vfiprintf_r+0x2a2>
 800884e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8008852:	e7c8      	b.n	80087e6 <_vfiprintf_r+0x24a>
 8008854:	2100      	movs	r1, #0
 8008856:	9a02      	ldr	r2, [sp, #8]
 8008858:	9104      	str	r1, [sp, #16]
 800885a:	200a      	movs	r0, #10
 800885c:	9904      	ldr	r1, [sp, #16]
 800885e:	3b30      	subs	r3, #48	; 0x30
 8008860:	fb00 3301 	mla	r3, r0, r1, r3
 8008864:	9304      	str	r3, [sp, #16]
 8008866:	f812 3b01 	ldrb.w	r3, [r2], #1
 800886a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800886e:	2909      	cmp	r1, #9
 8008870:	d9f3      	bls.n	800885a <_vfiprintf_r+0x2be>
 8008872:	e71a      	b.n	80086aa <_vfiprintf_r+0x10e>
 8008874:	9b02      	ldr	r3, [sp, #8]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	2b68      	cmp	r3, #104	; 0x68
 800887a:	bf01      	itttt	eq
 800887c:	9b02      	ldreq	r3, [sp, #8]
 800887e:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8008882:	3301      	addeq	r3, #1
 8008884:	9302      	streq	r3, [sp, #8]
 8008886:	bf18      	it	ne
 8008888:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800888c:	e7ab      	b.n	80087e6 <_vfiprintf_r+0x24a>
 800888e:	9b02      	ldr	r3, [sp, #8]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b6c      	cmp	r3, #108	; 0x6c
 8008894:	d105      	bne.n	80088a2 <_vfiprintf_r+0x306>
 8008896:	9b02      	ldr	r3, [sp, #8]
 8008898:	3301      	adds	r3, #1
 800889a:	9302      	str	r3, [sp, #8]
 800889c:	f04a 0a20 	orr.w	sl, sl, #32
 80088a0:	e7a1      	b.n	80087e6 <_vfiprintf_r+0x24a>
 80088a2:	f04a 0a10 	orr.w	sl, sl, #16
 80088a6:	e79e      	b.n	80087e6 <_vfiprintf_r+0x24a>
 80088a8:	46a3      	mov	fp, r4
 80088aa:	2100      	movs	r1, #0
 80088ac:	f85b 3b04 	ldr.w	r3, [fp], #4
 80088b0:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 80088b4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80088b8:	2301      	movs	r3, #1
 80088ba:	460d      	mov	r5, r1
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	f10d 0884 	add.w	r8, sp, #132	; 0x84
 80088c2:	e0a0      	b.n	8008a06 <_vfiprintf_r+0x46a>
 80088c4:	f04a 0a10 	orr.w	sl, sl, #16
 80088c8:	f01a 0f20 	tst.w	sl, #32
 80088cc:	d010      	beq.n	80088f0 <_vfiprintf_r+0x354>
 80088ce:	3407      	adds	r4, #7
 80088d0:	f024 0b07 	bic.w	fp, r4, #7
 80088d4:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 80088d8:	2c00      	cmp	r4, #0
 80088da:	f175 0300 	sbcs.w	r3, r5, #0
 80088de:	da05      	bge.n	80088ec <_vfiprintf_r+0x350>
 80088e0:	232d      	movs	r3, #45	; 0x2d
 80088e2:	4264      	negs	r4, r4
 80088e4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80088e8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80088ec:	2301      	movs	r3, #1
 80088ee:	e03f      	b.n	8008970 <_vfiprintf_r+0x3d4>
 80088f0:	f01a 0f10 	tst.w	sl, #16
 80088f4:	f104 0b04 	add.w	fp, r4, #4
 80088f8:	d002      	beq.n	8008900 <_vfiprintf_r+0x364>
 80088fa:	6824      	ldr	r4, [r4, #0]
 80088fc:	17e5      	asrs	r5, r4, #31
 80088fe:	e7eb      	b.n	80088d8 <_vfiprintf_r+0x33c>
 8008900:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008904:	6824      	ldr	r4, [r4, #0]
 8008906:	d001      	beq.n	800890c <_vfiprintf_r+0x370>
 8008908:	b224      	sxth	r4, r4
 800890a:	e7f7      	b.n	80088fc <_vfiprintf_r+0x360>
 800890c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008910:	bf18      	it	ne
 8008912:	b264      	sxtbne	r4, r4
 8008914:	e7f2      	b.n	80088fc <_vfiprintf_r+0x360>
 8008916:	f01a 0f20 	tst.w	sl, #32
 800891a:	f854 3b04 	ldr.w	r3, [r4], #4
 800891e:	d005      	beq.n	800892c <_vfiprintf_r+0x390>
 8008920:	9a03      	ldr	r2, [sp, #12]
 8008922:	4610      	mov	r0, r2
 8008924:	17d1      	asrs	r1, r2, #31
 8008926:	e9c3 0100 	strd	r0, r1, [r3]
 800892a:	e696      	b.n	800865a <_vfiprintf_r+0xbe>
 800892c:	f01a 0f10 	tst.w	sl, #16
 8008930:	d002      	beq.n	8008938 <_vfiprintf_r+0x39c>
 8008932:	9a03      	ldr	r2, [sp, #12]
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	e690      	b.n	800865a <_vfiprintf_r+0xbe>
 8008938:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800893c:	d002      	beq.n	8008944 <_vfiprintf_r+0x3a8>
 800893e:	9a03      	ldr	r2, [sp, #12]
 8008940:	801a      	strh	r2, [r3, #0]
 8008942:	e68a      	b.n	800865a <_vfiprintf_r+0xbe>
 8008944:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008948:	d0f3      	beq.n	8008932 <_vfiprintf_r+0x396>
 800894a:	9a03      	ldr	r2, [sp, #12]
 800894c:	701a      	strb	r2, [r3, #0]
 800894e:	e684      	b.n	800865a <_vfiprintf_r+0xbe>
 8008950:	f04a 0a10 	orr.w	sl, sl, #16
 8008954:	f01a 0f20 	tst.w	sl, #32
 8008958:	d01d      	beq.n	8008996 <_vfiprintf_r+0x3fa>
 800895a:	3407      	adds	r4, #7
 800895c:	f024 0b07 	bic.w	fp, r4, #7
 8008960:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8008964:	2300      	movs	r3, #0
 8008966:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800896a:	2200      	movs	r2, #0
 800896c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8008970:	9a01      	ldr	r2, [sp, #4]
 8008972:	3201      	adds	r2, #1
 8008974:	f000 8261 	beq.w	8008e3a <_vfiprintf_r+0x89e>
 8008978:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800897c:	9205      	str	r2, [sp, #20]
 800897e:	ea54 0205 	orrs.w	r2, r4, r5
 8008982:	f040 8260 	bne.w	8008e46 <_vfiprintf_r+0x8aa>
 8008986:	9a01      	ldr	r2, [sp, #4]
 8008988:	2a00      	cmp	r2, #0
 800898a:	f000 8197 	beq.w	8008cbc <_vfiprintf_r+0x720>
 800898e:	2b01      	cmp	r3, #1
 8008990:	f040 825c 	bne.w	8008e4c <_vfiprintf_r+0x8b0>
 8008994:	e136      	b.n	8008c04 <_vfiprintf_r+0x668>
 8008996:	f01a 0f10 	tst.w	sl, #16
 800899a:	f104 0b04 	add.w	fp, r4, #4
 800899e:	d001      	beq.n	80089a4 <_vfiprintf_r+0x408>
 80089a0:	6824      	ldr	r4, [r4, #0]
 80089a2:	e003      	b.n	80089ac <_vfiprintf_r+0x410>
 80089a4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80089a8:	d002      	beq.n	80089b0 <_vfiprintf_r+0x414>
 80089aa:	8824      	ldrh	r4, [r4, #0]
 80089ac:	2500      	movs	r5, #0
 80089ae:	e7d9      	b.n	8008964 <_vfiprintf_r+0x3c8>
 80089b0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80089b4:	d0f4      	beq.n	80089a0 <_vfiprintf_r+0x404>
 80089b6:	7824      	ldrb	r4, [r4, #0]
 80089b8:	e7f8      	b.n	80089ac <_vfiprintf_r+0x410>
 80089ba:	f647 0330 	movw	r3, #30768	; 0x7830
 80089be:	46a3      	mov	fp, r4
 80089c0:	2500      	movs	r5, #0
 80089c2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80089c6:	4b04      	ldr	r3, [pc, #16]	; (80089d8 <_vfiprintf_r+0x43c>)
 80089c8:	f85b 4b04 	ldr.w	r4, [fp], #4
 80089cc:	f04a 0a02 	orr.w	sl, sl, #2
 80089d0:	9306      	str	r3, [sp, #24]
 80089d2:	2302      	movs	r3, #2
 80089d4:	e7c9      	b.n	800896a <_vfiprintf_r+0x3ce>
 80089d6:	bf00      	nop
 80089d8:	080097ac 	.word	0x080097ac
 80089dc:	46a3      	mov	fp, r4
 80089de:	2500      	movs	r5, #0
 80089e0:	9b01      	ldr	r3, [sp, #4]
 80089e2:	f85b 8b04 	ldr.w	r8, [fp], #4
 80089e6:	1c5c      	adds	r4, r3, #1
 80089e8:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 80089ec:	f000 80cf 	beq.w	8008b8e <_vfiprintf_r+0x5f2>
 80089f0:	461a      	mov	r2, r3
 80089f2:	4629      	mov	r1, r5
 80089f4:	4640      	mov	r0, r8
 80089f6:	f7fe ff6b 	bl	80078d0 <memchr>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	f000 8173 	beq.w	8008ce6 <_vfiprintf_r+0x74a>
 8008a00:	eba0 0308 	sub.w	r3, r0, r8
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	9b01      	ldr	r3, [sp, #4]
 8008a08:	42ab      	cmp	r3, r5
 8008a0a:	bfb8      	it	lt
 8008a0c:	462b      	movlt	r3, r5
 8008a0e:	9305      	str	r3, [sp, #20]
 8008a10:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008a14:	b113      	cbz	r3, 8008a1c <_vfiprintf_r+0x480>
 8008a16:	9b05      	ldr	r3, [sp, #20]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	9305      	str	r3, [sp, #20]
 8008a1c:	f01a 0302 	ands.w	r3, sl, #2
 8008a20:	9309      	str	r3, [sp, #36]	; 0x24
 8008a22:	bf1e      	ittt	ne
 8008a24:	9b05      	ldrne	r3, [sp, #20]
 8008a26:	3302      	addne	r3, #2
 8008a28:	9305      	strne	r3, [sp, #20]
 8008a2a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8008a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a30:	d11f      	bne.n	8008a72 <_vfiprintf_r+0x4d6>
 8008a32:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008a36:	1a9c      	subs	r4, r3, r2
 8008a38:	2c00      	cmp	r4, #0
 8008a3a:	dd1a      	ble.n	8008a72 <_vfiprintf_r+0x4d6>
 8008a3c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8008a40:	48b4      	ldr	r0, [pc, #720]	; (8008d14 <_vfiprintf_r+0x778>)
 8008a42:	2c10      	cmp	r4, #16
 8008a44:	f103 0301 	add.w	r3, r3, #1
 8008a48:	f106 0108 	add.w	r1, r6, #8
 8008a4c:	6030      	str	r0, [r6, #0]
 8008a4e:	f300 814c 	bgt.w	8008cea <_vfiprintf_r+0x74e>
 8008a52:	6074      	str	r4, [r6, #4]
 8008a54:	2b07      	cmp	r3, #7
 8008a56:	4414      	add	r4, r2
 8008a58:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 8008a5c:	f340 8157 	ble.w	8008d0e <_vfiprintf_r+0x772>
 8008a60:	4639      	mov	r1, r7
 8008a62:	4648      	mov	r0, r9
 8008a64:	aa0e      	add	r2, sp, #56	; 0x38
 8008a66:	f7ff fd67 	bl	8008538 <__sprint_r>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	f040 81b7 	bne.w	8008dde <_vfiprintf_r+0x842>
 8008a70:	ae11      	add	r6, sp, #68	; 0x44
 8008a72:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008a76:	b173      	cbz	r3, 8008a96 <_vfiprintf_r+0x4fa>
 8008a78:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008a7c:	6032      	str	r2, [r6, #0]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a82:	6072      	str	r2, [r6, #4]
 8008a84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a86:	3301      	adds	r3, #1
 8008a88:	3201      	adds	r2, #1
 8008a8a:	2b07      	cmp	r3, #7
 8008a8c:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 8008a90:	f300 8146 	bgt.w	8008d20 <_vfiprintf_r+0x784>
 8008a94:	3608      	adds	r6, #8
 8008a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a98:	b16b      	cbz	r3, 8008ab6 <_vfiprintf_r+0x51a>
 8008a9a:	aa0d      	add	r2, sp, #52	; 0x34
 8008a9c:	6032      	str	r2, [r6, #0]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008aa2:	6072      	str	r2, [r6, #4]
 8008aa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	3202      	adds	r2, #2
 8008aaa:	2b07      	cmp	r3, #7
 8008aac:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 8008ab0:	f300 813f 	bgt.w	8008d32 <_vfiprintf_r+0x796>
 8008ab4:	3608      	adds	r6, #8
 8008ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ab8:	2b80      	cmp	r3, #128	; 0x80
 8008aba:	d11f      	bne.n	8008afc <_vfiprintf_r+0x560>
 8008abc:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008ac0:	1a9c      	subs	r4, r3, r2
 8008ac2:	2c00      	cmp	r4, #0
 8008ac4:	dd1a      	ble.n	8008afc <_vfiprintf_r+0x560>
 8008ac6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8008aca:	4893      	ldr	r0, [pc, #588]	; (8008d18 <_vfiprintf_r+0x77c>)
 8008acc:	2c10      	cmp	r4, #16
 8008ace:	f103 0301 	add.w	r3, r3, #1
 8008ad2:	f106 0108 	add.w	r1, r6, #8
 8008ad6:	6030      	str	r0, [r6, #0]
 8008ad8:	f300 8134 	bgt.w	8008d44 <_vfiprintf_r+0x7a8>
 8008adc:	6074      	str	r4, [r6, #4]
 8008ade:	2b07      	cmp	r3, #7
 8008ae0:	4414      	add	r4, r2
 8008ae2:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 8008ae6:	f340 813f 	ble.w	8008d68 <_vfiprintf_r+0x7cc>
 8008aea:	4639      	mov	r1, r7
 8008aec:	4648      	mov	r0, r9
 8008aee:	aa0e      	add	r2, sp, #56	; 0x38
 8008af0:	f7ff fd22 	bl	8008538 <__sprint_r>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	f040 8172 	bne.w	8008dde <_vfiprintf_r+0x842>
 8008afa:	ae11      	add	r6, sp, #68	; 0x44
 8008afc:	9b01      	ldr	r3, [sp, #4]
 8008afe:	1aec      	subs	r4, r5, r3
 8008b00:	2c00      	cmp	r4, #0
 8008b02:	dd1a      	ble.n	8008b3a <_vfiprintf_r+0x59e>
 8008b04:	4d84      	ldr	r5, [pc, #528]	; (8008d18 <_vfiprintf_r+0x77c>)
 8008b06:	2c10      	cmp	r4, #16
 8008b08:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
 8008b0c:	f106 0208 	add.w	r2, r6, #8
 8008b10:	f103 0301 	add.w	r3, r3, #1
 8008b14:	6035      	str	r5, [r6, #0]
 8008b16:	f300 8129 	bgt.w	8008d6c <_vfiprintf_r+0x7d0>
 8008b1a:	6074      	str	r4, [r6, #4]
 8008b1c:	2b07      	cmp	r3, #7
 8008b1e:	440c      	add	r4, r1
 8008b20:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 8008b24:	f340 8133 	ble.w	8008d8e <_vfiprintf_r+0x7f2>
 8008b28:	4639      	mov	r1, r7
 8008b2a:	4648      	mov	r0, r9
 8008b2c:	aa0e      	add	r2, sp, #56	; 0x38
 8008b2e:	f7ff fd03 	bl	8008538 <__sprint_r>
 8008b32:	2800      	cmp	r0, #0
 8008b34:	f040 8153 	bne.w	8008dde <_vfiprintf_r+0x842>
 8008b38:	ae11      	add	r6, sp, #68	; 0x44
 8008b3a:	9b01      	ldr	r3, [sp, #4]
 8008b3c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008b3e:	6073      	str	r3, [r6, #4]
 8008b40:	4418      	add	r0, r3
 8008b42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b44:	f8c6 8000 	str.w	r8, [r6]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	2b07      	cmp	r3, #7
 8008b4c:	9010      	str	r0, [sp, #64]	; 0x40
 8008b4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b50:	f300 811f 	bgt.w	8008d92 <_vfiprintf_r+0x7f6>
 8008b54:	f106 0308 	add.w	r3, r6, #8
 8008b58:	f01a 0f04 	tst.w	sl, #4
 8008b5c:	f040 8121 	bne.w	8008da2 <_vfiprintf_r+0x806>
 8008b60:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8008b64:	9905      	ldr	r1, [sp, #20]
 8008b66:	428a      	cmp	r2, r1
 8008b68:	bfac      	ite	ge
 8008b6a:	189b      	addge	r3, r3, r2
 8008b6c:	185b      	addlt	r3, r3, r1
 8008b6e:	9303      	str	r3, [sp, #12]
 8008b70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b72:	b13b      	cbz	r3, 8008b84 <_vfiprintf_r+0x5e8>
 8008b74:	4639      	mov	r1, r7
 8008b76:	4648      	mov	r0, r9
 8008b78:	aa0e      	add	r2, sp, #56	; 0x38
 8008b7a:	f7ff fcdd 	bl	8008538 <__sprint_r>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	f040 812d 	bne.w	8008dde <_vfiprintf_r+0x842>
 8008b84:	2300      	movs	r3, #0
 8008b86:	465c      	mov	r4, fp
 8008b88:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b8a:	ae11      	add	r6, sp, #68	; 0x44
 8008b8c:	e565      	b.n	800865a <_vfiprintf_r+0xbe>
 8008b8e:	4640      	mov	r0, r8
 8008b90:	f7f7 fade 	bl	8000150 <strlen>
 8008b94:	9001      	str	r0, [sp, #4]
 8008b96:	e736      	b.n	8008a06 <_vfiprintf_r+0x46a>
 8008b98:	f04a 0a10 	orr.w	sl, sl, #16
 8008b9c:	f01a 0f20 	tst.w	sl, #32
 8008ba0:	d006      	beq.n	8008bb0 <_vfiprintf_r+0x614>
 8008ba2:	3407      	adds	r4, #7
 8008ba4:	f024 0b07 	bic.w	fp, r4, #7
 8008ba8:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8008bac:	2301      	movs	r3, #1
 8008bae:	e6dc      	b.n	800896a <_vfiprintf_r+0x3ce>
 8008bb0:	f01a 0f10 	tst.w	sl, #16
 8008bb4:	f104 0b04 	add.w	fp, r4, #4
 8008bb8:	d001      	beq.n	8008bbe <_vfiprintf_r+0x622>
 8008bba:	6824      	ldr	r4, [r4, #0]
 8008bbc:	e003      	b.n	8008bc6 <_vfiprintf_r+0x62a>
 8008bbe:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008bc2:	d002      	beq.n	8008bca <_vfiprintf_r+0x62e>
 8008bc4:	8824      	ldrh	r4, [r4, #0]
 8008bc6:	2500      	movs	r5, #0
 8008bc8:	e7f0      	b.n	8008bac <_vfiprintf_r+0x610>
 8008bca:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008bce:	d0f4      	beq.n	8008bba <_vfiprintf_r+0x61e>
 8008bd0:	7824      	ldrb	r4, [r4, #0]
 8008bd2:	e7f8      	b.n	8008bc6 <_vfiprintf_r+0x62a>
 8008bd4:	4a51      	ldr	r2, [pc, #324]	; (8008d1c <_vfiprintf_r+0x780>)
 8008bd6:	e5d6      	b.n	8008786 <_vfiprintf_r+0x1ea>
 8008bd8:	f01a 0f10 	tst.w	sl, #16
 8008bdc:	f104 0b04 	add.w	fp, r4, #4
 8008be0:	d001      	beq.n	8008be6 <_vfiprintf_r+0x64a>
 8008be2:	6824      	ldr	r4, [r4, #0]
 8008be4:	e003      	b.n	8008bee <_vfiprintf_r+0x652>
 8008be6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008bea:	d002      	beq.n	8008bf2 <_vfiprintf_r+0x656>
 8008bec:	8824      	ldrh	r4, [r4, #0]
 8008bee:	2500      	movs	r5, #0
 8008bf0:	e5d3      	b.n	800879a <_vfiprintf_r+0x1fe>
 8008bf2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008bf6:	d0f4      	beq.n	8008be2 <_vfiprintf_r+0x646>
 8008bf8:	7824      	ldrb	r4, [r4, #0]
 8008bfa:	e7f8      	b.n	8008bee <_vfiprintf_r+0x652>
 8008bfc:	2d00      	cmp	r5, #0
 8008bfe:	bf08      	it	eq
 8008c00:	2c0a      	cmpeq	r4, #10
 8008c02:	d205      	bcs.n	8008c10 <_vfiprintf_r+0x674>
 8008c04:	3430      	adds	r4, #48	; 0x30
 8008c06:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 8008c0a:	f10d 08e7 	add.w	r8, sp, #231	; 0xe7
 8008c0e:	e13b      	b.n	8008e88 <_vfiprintf_r+0x8ec>
 8008c10:	f04f 0a00 	mov.w	sl, #0
 8008c14:	ab3a      	add	r3, sp, #232	; 0xe8
 8008c16:	9309      	str	r3, [sp, #36]	; 0x24
 8008c18:	9b05      	ldr	r3, [sp, #20]
 8008c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c22:	220a      	movs	r2, #10
 8008c24:	4620      	mov	r0, r4
 8008c26:	4629      	mov	r1, r5
 8008c28:	f103 38ff 	add.w	r8, r3, #4294967295
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f7f7 ff2b 	bl	8000a88 <__aeabi_uldivmod>
 8008c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c34:	3230      	adds	r2, #48	; 0x30
 8008c36:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c3c:	f10a 0a01 	add.w	sl, sl, #1
 8008c40:	b1d3      	cbz	r3, 8008c78 <_vfiprintf_r+0x6dc>
 8008c42:	9b07      	ldr	r3, [sp, #28]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	4553      	cmp	r3, sl
 8008c48:	d116      	bne.n	8008c78 <_vfiprintf_r+0x6dc>
 8008c4a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8008c4e:	d013      	beq.n	8008c78 <_vfiprintf_r+0x6dc>
 8008c50:	2d00      	cmp	r5, #0
 8008c52:	bf08      	it	eq
 8008c54:	2c0a      	cmpeq	r4, #10
 8008c56:	d30f      	bcc.n	8008c78 <_vfiprintf_r+0x6dc>
 8008c58:	9b08      	ldr	r3, [sp, #32]
 8008c5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c5c:	eba8 0803 	sub.w	r8, r8, r3
 8008c60:	461a      	mov	r2, r3
 8008c62:	4640      	mov	r0, r8
 8008c64:	f7ff fbcd 	bl	8008402 <strncpy>
 8008c68:	9b07      	ldr	r3, [sp, #28]
 8008c6a:	785b      	ldrb	r3, [r3, #1]
 8008c6c:	b1a3      	cbz	r3, 8008c98 <_vfiprintf_r+0x6fc>
 8008c6e:	f04f 0a00 	mov.w	sl, #0
 8008c72:	9b07      	ldr	r3, [sp, #28]
 8008c74:	3301      	adds	r3, #1
 8008c76:	9307      	str	r3, [sp, #28]
 8008c78:	220a      	movs	r2, #10
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	4629      	mov	r1, r5
 8008c80:	f7f7 ff02 	bl	8000a88 <__aeabi_uldivmod>
 8008c84:	2d00      	cmp	r5, #0
 8008c86:	bf08      	it	eq
 8008c88:	2c0a      	cmpeq	r4, #10
 8008c8a:	f0c0 80fd 	bcc.w	8008e88 <_vfiprintf_r+0x8ec>
 8008c8e:	4604      	mov	r4, r0
 8008c90:	460d      	mov	r5, r1
 8008c92:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8008c96:	e7c3      	b.n	8008c20 <_vfiprintf_r+0x684>
 8008c98:	469a      	mov	sl, r3
 8008c9a:	e7ed      	b.n	8008c78 <_vfiprintf_r+0x6dc>
 8008c9c:	9a06      	ldr	r2, [sp, #24]
 8008c9e:	f004 030f 	and.w	r3, r4, #15
 8008ca2:	5cd3      	ldrb	r3, [r2, r3]
 8008ca4:	092a      	lsrs	r2, r5, #4
 8008ca6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8008caa:	0923      	lsrs	r3, r4, #4
 8008cac:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8008cb0:	461c      	mov	r4, r3
 8008cb2:	4615      	mov	r5, r2
 8008cb4:	ea54 0305 	orrs.w	r3, r4, r5
 8008cb8:	d1f0      	bne.n	8008c9c <_vfiprintf_r+0x700>
 8008cba:	e0e5      	b.n	8008e88 <_vfiprintf_r+0x8ec>
 8008cbc:	b933      	cbnz	r3, 8008ccc <_vfiprintf_r+0x730>
 8008cbe:	f01a 0f01 	tst.w	sl, #1
 8008cc2:	d003      	beq.n	8008ccc <_vfiprintf_r+0x730>
 8008cc4:	2330      	movs	r3, #48	; 0x30
 8008cc6:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 8008cca:	e79e      	b.n	8008c0a <_vfiprintf_r+0x66e>
 8008ccc:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 8008cd0:	e0da      	b.n	8008e88 <_vfiprintf_r+0x8ec>
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 80a4 	beq.w	8008e20 <_vfiprintf_r+0x884>
 8008cd8:	2100      	movs	r1, #0
 8008cda:	46a3      	mov	fp, r4
 8008cdc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8008ce0:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 8008ce4:	e5e8      	b.n	80088b8 <_vfiprintf_r+0x31c>
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	e68d      	b.n	8008a06 <_vfiprintf_r+0x46a>
 8008cea:	2010      	movs	r0, #16
 8008cec:	2b07      	cmp	r3, #7
 8008cee:	4402      	add	r2, r0
 8008cf0:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 8008cf4:	6070      	str	r0, [r6, #4]
 8008cf6:	dd07      	ble.n	8008d08 <_vfiprintf_r+0x76c>
 8008cf8:	4639      	mov	r1, r7
 8008cfa:	4648      	mov	r0, r9
 8008cfc:	aa0e      	add	r2, sp, #56	; 0x38
 8008cfe:	f7ff fc1b 	bl	8008538 <__sprint_r>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d16b      	bne.n	8008dde <_vfiprintf_r+0x842>
 8008d06:	a911      	add	r1, sp, #68	; 0x44
 8008d08:	460e      	mov	r6, r1
 8008d0a:	3c10      	subs	r4, #16
 8008d0c:	e696      	b.n	8008a3c <_vfiprintf_r+0x4a0>
 8008d0e:	460e      	mov	r6, r1
 8008d10:	e6af      	b.n	8008a72 <_vfiprintf_r+0x4d6>
 8008d12:	bf00      	nop
 8008d14:	080099ec 	.word	0x080099ec
 8008d18:	080099fc 	.word	0x080099fc
 8008d1c:	080097bd 	.word	0x080097bd
 8008d20:	4639      	mov	r1, r7
 8008d22:	4648      	mov	r0, r9
 8008d24:	aa0e      	add	r2, sp, #56	; 0x38
 8008d26:	f7ff fc07 	bl	8008538 <__sprint_r>
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	d157      	bne.n	8008dde <_vfiprintf_r+0x842>
 8008d2e:	ae11      	add	r6, sp, #68	; 0x44
 8008d30:	e6b1      	b.n	8008a96 <_vfiprintf_r+0x4fa>
 8008d32:	4639      	mov	r1, r7
 8008d34:	4648      	mov	r0, r9
 8008d36:	aa0e      	add	r2, sp, #56	; 0x38
 8008d38:	f7ff fbfe 	bl	8008538 <__sprint_r>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d14e      	bne.n	8008dde <_vfiprintf_r+0x842>
 8008d40:	ae11      	add	r6, sp, #68	; 0x44
 8008d42:	e6b8      	b.n	8008ab6 <_vfiprintf_r+0x51a>
 8008d44:	2010      	movs	r0, #16
 8008d46:	2b07      	cmp	r3, #7
 8008d48:	4402      	add	r2, r0
 8008d4a:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 8008d4e:	6070      	str	r0, [r6, #4]
 8008d50:	dd07      	ble.n	8008d62 <_vfiprintf_r+0x7c6>
 8008d52:	4639      	mov	r1, r7
 8008d54:	4648      	mov	r0, r9
 8008d56:	aa0e      	add	r2, sp, #56	; 0x38
 8008d58:	f7ff fbee 	bl	8008538 <__sprint_r>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d13e      	bne.n	8008dde <_vfiprintf_r+0x842>
 8008d60:	a911      	add	r1, sp, #68	; 0x44
 8008d62:	460e      	mov	r6, r1
 8008d64:	3c10      	subs	r4, #16
 8008d66:	e6ae      	b.n	8008ac6 <_vfiprintf_r+0x52a>
 8008d68:	460e      	mov	r6, r1
 8008d6a:	e6c7      	b.n	8008afc <_vfiprintf_r+0x560>
 8008d6c:	2010      	movs	r0, #16
 8008d6e:	2b07      	cmp	r3, #7
 8008d70:	4401      	add	r1, r0
 8008d72:	e9cd 310f 	strd	r3, r1, [sp, #60]	; 0x3c
 8008d76:	6070      	str	r0, [r6, #4]
 8008d78:	dd06      	ble.n	8008d88 <_vfiprintf_r+0x7ec>
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	4648      	mov	r0, r9
 8008d7e:	aa0e      	add	r2, sp, #56	; 0x38
 8008d80:	f7ff fbda 	bl	8008538 <__sprint_r>
 8008d84:	bb58      	cbnz	r0, 8008dde <_vfiprintf_r+0x842>
 8008d86:	aa11      	add	r2, sp, #68	; 0x44
 8008d88:	4616      	mov	r6, r2
 8008d8a:	3c10      	subs	r4, #16
 8008d8c:	e6bb      	b.n	8008b06 <_vfiprintf_r+0x56a>
 8008d8e:	4616      	mov	r6, r2
 8008d90:	e6d3      	b.n	8008b3a <_vfiprintf_r+0x59e>
 8008d92:	4639      	mov	r1, r7
 8008d94:	4648      	mov	r0, r9
 8008d96:	aa0e      	add	r2, sp, #56	; 0x38
 8008d98:	f7ff fbce 	bl	8008538 <__sprint_r>
 8008d9c:	b9f8      	cbnz	r0, 8008dde <_vfiprintf_r+0x842>
 8008d9e:	ab11      	add	r3, sp, #68	; 0x44
 8008da0:	e6da      	b.n	8008b58 <_vfiprintf_r+0x5bc>
 8008da2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8008da6:	1a54      	subs	r4, r2, r1
 8008da8:	2c00      	cmp	r4, #0
 8008daa:	f77f aed9 	ble.w	8008b60 <_vfiprintf_r+0x5c4>
 8008dae:	2610      	movs	r6, #16
 8008db0:	4d39      	ldr	r5, [pc, #228]	; (8008e98 <_vfiprintf_r+0x8fc>)
 8008db2:	2c10      	cmp	r4, #16
 8008db4:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8008db8:	601d      	str	r5, [r3, #0]
 8008dba:	f102 0201 	add.w	r2, r2, #1
 8008dbe:	dc1d      	bgt.n	8008dfc <_vfiprintf_r+0x860>
 8008dc0:	605c      	str	r4, [r3, #4]
 8008dc2:	2a07      	cmp	r2, #7
 8008dc4:	440c      	add	r4, r1
 8008dc6:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8008dca:	f77f aec9 	ble.w	8008b60 <_vfiprintf_r+0x5c4>
 8008dce:	4639      	mov	r1, r7
 8008dd0:	4648      	mov	r0, r9
 8008dd2:	aa0e      	add	r2, sp, #56	; 0x38
 8008dd4:	f7ff fbb0 	bl	8008538 <__sprint_r>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	f43f aec1 	beq.w	8008b60 <_vfiprintf_r+0x5c4>
 8008dde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008de0:	07d9      	lsls	r1, r3, #31
 8008de2:	d405      	bmi.n	8008df0 <_vfiprintf_r+0x854>
 8008de4:	89bb      	ldrh	r3, [r7, #12]
 8008de6:	059a      	lsls	r2, r3, #22
 8008de8:	d402      	bmi.n	8008df0 <_vfiprintf_r+0x854>
 8008dea:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008dec:	f7fe fac1 	bl	8007372 <__retarget_lock_release_recursive>
 8008df0:	89bb      	ldrh	r3, [r7, #12]
 8008df2:	065b      	lsls	r3, r3, #25
 8008df4:	f57f ac03 	bpl.w	80085fe <_vfiprintf_r+0x62>
 8008df8:	f7ff bbfe 	b.w	80085f8 <_vfiprintf_r+0x5c>
 8008dfc:	3110      	adds	r1, #16
 8008dfe:	2a07      	cmp	r2, #7
 8008e00:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8008e04:	605e      	str	r6, [r3, #4]
 8008e06:	dc02      	bgt.n	8008e0e <_vfiprintf_r+0x872>
 8008e08:	3308      	adds	r3, #8
 8008e0a:	3c10      	subs	r4, #16
 8008e0c:	e7d1      	b.n	8008db2 <_vfiprintf_r+0x816>
 8008e0e:	4639      	mov	r1, r7
 8008e10:	4648      	mov	r0, r9
 8008e12:	aa0e      	add	r2, sp, #56	; 0x38
 8008e14:	f7ff fb90 	bl	8008538 <__sprint_r>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	d1e0      	bne.n	8008dde <_vfiprintf_r+0x842>
 8008e1c:	ab11      	add	r3, sp, #68	; 0x44
 8008e1e:	e7f4      	b.n	8008e0a <_vfiprintf_r+0x86e>
 8008e20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e22:	b913      	cbnz	r3, 8008e2a <_vfiprintf_r+0x88e>
 8008e24:	2300      	movs	r3, #0
 8008e26:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e28:	e7d9      	b.n	8008dde <_vfiprintf_r+0x842>
 8008e2a:	4639      	mov	r1, r7
 8008e2c:	4648      	mov	r0, r9
 8008e2e:	aa0e      	add	r2, sp, #56	; 0x38
 8008e30:	f7ff fb82 	bl	8008538 <__sprint_r>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d0f5      	beq.n	8008e24 <_vfiprintf_r+0x888>
 8008e38:	e7d1      	b.n	8008dde <_vfiprintf_r+0x842>
 8008e3a:	ea54 0205 	orrs.w	r2, r4, r5
 8008e3e:	f8cd a014 	str.w	sl, [sp, #20]
 8008e42:	f43f ada4 	beq.w	800898e <_vfiprintf_r+0x3f2>
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	f43f aed8 	beq.w	8008bfc <_vfiprintf_r+0x660>
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 8008e52:	f43f af23 	beq.w	8008c9c <_vfiprintf_r+0x700>
 8008e56:	08e2      	lsrs	r2, r4, #3
 8008e58:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8008e5c:	08e8      	lsrs	r0, r5, #3
 8008e5e:	f004 0307 	and.w	r3, r4, #7
 8008e62:	4605      	mov	r5, r0
 8008e64:	4614      	mov	r4, r2
 8008e66:	3330      	adds	r3, #48	; 0x30
 8008e68:	ea54 0205 	orrs.w	r2, r4, r5
 8008e6c:	4641      	mov	r1, r8
 8008e6e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8008e72:	d1f0      	bne.n	8008e56 <_vfiprintf_r+0x8ba>
 8008e74:	9a05      	ldr	r2, [sp, #20]
 8008e76:	07d0      	lsls	r0, r2, #31
 8008e78:	d506      	bpl.n	8008e88 <_vfiprintf_r+0x8ec>
 8008e7a:	2b30      	cmp	r3, #48	; 0x30
 8008e7c:	d004      	beq.n	8008e88 <_vfiprintf_r+0x8ec>
 8008e7e:	2330      	movs	r3, #48	; 0x30
 8008e80:	f808 3c01 	strb.w	r3, [r8, #-1]
 8008e84:	f1a1 0802 	sub.w	r8, r1, #2
 8008e88:	ab3a      	add	r3, sp, #232	; 0xe8
 8008e8a:	eba3 0308 	sub.w	r3, r3, r8
 8008e8e:	9d01      	ldr	r5, [sp, #4]
 8008e90:	f8dd a014 	ldr.w	sl, [sp, #20]
 8008e94:	9301      	str	r3, [sp, #4]
 8008e96:	e5b6      	b.n	8008a06 <_vfiprintf_r+0x46a>
 8008e98:	080099ec 	.word	0x080099ec

08008e9c <__sbprintf>:
 8008e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e9e:	461f      	mov	r7, r3
 8008ea0:	898b      	ldrh	r3, [r1, #12]
 8008ea2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8008ea6:	f023 0302 	bic.w	r3, r3, #2
 8008eaa:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008eae:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008eb0:	4615      	mov	r5, r2
 8008eb2:	9319      	str	r3, [sp, #100]	; 0x64
 8008eb4:	89cb      	ldrh	r3, [r1, #14]
 8008eb6:	4606      	mov	r6, r0
 8008eb8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008ebc:	69cb      	ldr	r3, [r1, #28]
 8008ebe:	a816      	add	r0, sp, #88	; 0x58
 8008ec0:	9307      	str	r3, [sp, #28]
 8008ec2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec8:	ab1a      	add	r3, sp, #104	; 0x68
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	9304      	str	r3, [sp, #16]
 8008ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ed2:	9302      	str	r3, [sp, #8]
 8008ed4:	9305      	str	r3, [sp, #20]
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	9306      	str	r3, [sp, #24]
 8008eda:	f7fe fa47 	bl	800736c <__retarget_lock_init_recursive>
 8008ede:	462a      	mov	r2, r5
 8008ee0:	463b      	mov	r3, r7
 8008ee2:	4669      	mov	r1, sp
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f7ff fb59 	bl	800859c <_vfiprintf_r>
 8008eea:	1e05      	subs	r5, r0, #0
 8008eec:	db07      	blt.n	8008efe <__sbprintf+0x62>
 8008eee:	4669      	mov	r1, sp
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	f7fd ff11 	bl	8006d18 <_fflush_r>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	bf18      	it	ne
 8008efa:	f04f 35ff 	movne.w	r5, #4294967295
 8008efe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008f02:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008f04:	065b      	lsls	r3, r3, #25
 8008f06:	bf42      	ittt	mi
 8008f08:	89a3      	ldrhmi	r3, [r4, #12]
 8008f0a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8008f0e:	81a3      	strhmi	r3, [r4, #12]
 8008f10:	f7fe fa2d 	bl	800736e <__retarget_lock_close_recursive>
 8008f14:	4628      	mov	r0, r5
 8008f16:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8008f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f1c <_write_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4604      	mov	r4, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	4611      	mov	r1, r2
 8008f24:	2200      	movs	r2, #0
 8008f26:	4d05      	ldr	r5, [pc, #20]	; (8008f3c <_write_r+0x20>)
 8008f28:	602a      	str	r2, [r5, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	f7f8 f8b2 	bl	8001094 <_write>
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	d102      	bne.n	8008f3a <_write_r+0x1e>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	b103      	cbz	r3, 8008f3a <_write_r+0x1e>
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	20000c5c 	.word	0x20000c5c

08008f40 <__register_exitproc>:
 8008f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f44:	4d1c      	ldr	r5, [pc, #112]	; (8008fb8 <__register_exitproc+0x78>)
 8008f46:	4606      	mov	r6, r0
 8008f48:	6828      	ldr	r0, [r5, #0]
 8008f4a:	4698      	mov	r8, r3
 8008f4c:	460f      	mov	r7, r1
 8008f4e:	4691      	mov	r9, r2
 8008f50:	f7fe fa0e 	bl	8007370 <__retarget_lock_acquire_recursive>
 8008f54:	4b19      	ldr	r3, [pc, #100]	; (8008fbc <__register_exitproc+0x7c>)
 8008f56:	4628      	mov	r0, r5
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8008f5e:	b91c      	cbnz	r4, 8008f68 <__register_exitproc+0x28>
 8008f60:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8008f64:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8008f68:	6865      	ldr	r5, [r4, #4]
 8008f6a:	6800      	ldr	r0, [r0, #0]
 8008f6c:	2d1f      	cmp	r5, #31
 8008f6e:	dd05      	ble.n	8008f7c <__register_exitproc+0x3c>
 8008f70:	f7fe f9ff 	bl	8007372 <__retarget_lock_release_recursive>
 8008f74:	f04f 30ff 	mov.w	r0, #4294967295
 8008f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f7c:	b19e      	cbz	r6, 8008fa6 <__register_exitproc+0x66>
 8008f7e:	2201      	movs	r2, #1
 8008f80:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8008f84:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8008f88:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8008f8c:	40aa      	lsls	r2, r5
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	2e02      	cmp	r6, #2
 8008f92:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8008f96:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8008f9a:	bf02      	ittt	eq
 8008f9c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8008fa0:	431a      	orreq	r2, r3
 8008fa2:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8008fa6:	1c6b      	adds	r3, r5, #1
 8008fa8:	3502      	adds	r5, #2
 8008faa:	6063      	str	r3, [r4, #4]
 8008fac:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8008fb0:	f7fe f9df 	bl	8007372 <__retarget_lock_release_recursive>
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	e7df      	b.n	8008f78 <__register_exitproc+0x38>
 8008fb8:	20000438 	.word	0x20000438
 8008fbc:	08009798 	.word	0x08009798

08008fc0 <__assert_func>:
 8008fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fc2:	4614      	mov	r4, r2
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	4b09      	ldr	r3, [pc, #36]	; (8008fec <__assert_func+0x2c>)
 8008fc8:	4605      	mov	r5, r0
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68d8      	ldr	r0, [r3, #12]
 8008fce:	b14c      	cbz	r4, 8008fe4 <__assert_func+0x24>
 8008fd0:	4b07      	ldr	r3, [pc, #28]	; (8008ff0 <__assert_func+0x30>)
 8008fd2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fd6:	9100      	str	r1, [sp, #0]
 8008fd8:	462b      	mov	r3, r5
 8008fda:	4906      	ldr	r1, [pc, #24]	; (8008ff4 <__assert_func+0x34>)
 8008fdc:	f000 f8a4 	bl	8009128 <fiprintf>
 8008fe0:	f000 f9e9 	bl	80093b6 <abort>
 8008fe4:	4b04      	ldr	r3, [pc, #16]	; (8008ff8 <__assert_func+0x38>)
 8008fe6:	461c      	mov	r4, r3
 8008fe8:	e7f3      	b.n	8008fd2 <__assert_func+0x12>
 8008fea:	bf00      	nop
 8008fec:	2000000c 	.word	0x2000000c
 8008ff0:	08009a0c 	.word	0x08009a0c
 8008ff4:	08009a19 	.word	0x08009a19
 8008ff8:	08009a47 	.word	0x08009a47

08008ffc <_calloc_r>:
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	4351      	muls	r1, r2
 8009000:	f7fe fa24 	bl	800744c <_malloc_r>
 8009004:	4604      	mov	r4, r0
 8009006:	b198      	cbz	r0, 8009030 <_calloc_r+0x34>
 8009008:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800900c:	f022 0203 	bic.w	r2, r2, #3
 8009010:	3a04      	subs	r2, #4
 8009012:	2a24      	cmp	r2, #36	; 0x24
 8009014:	d81b      	bhi.n	800904e <_calloc_r+0x52>
 8009016:	2a13      	cmp	r2, #19
 8009018:	d917      	bls.n	800904a <_calloc_r+0x4e>
 800901a:	2100      	movs	r1, #0
 800901c:	2a1b      	cmp	r2, #27
 800901e:	e9c0 1100 	strd	r1, r1, [r0]
 8009022:	d807      	bhi.n	8009034 <_calloc_r+0x38>
 8009024:	f100 0308 	add.w	r3, r0, #8
 8009028:	2200      	movs	r2, #0
 800902a:	e9c3 2200 	strd	r2, r2, [r3]
 800902e:	609a      	str	r2, [r3, #8]
 8009030:	4620      	mov	r0, r4
 8009032:	bd10      	pop	{r4, pc}
 8009034:	2a24      	cmp	r2, #36	; 0x24
 8009036:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800903a:	bf11      	iteee	ne
 800903c:	f100 0310 	addne.w	r3, r0, #16
 8009040:	6101      	streq	r1, [r0, #16]
 8009042:	f100 0318 	addeq.w	r3, r0, #24
 8009046:	6141      	streq	r1, [r0, #20]
 8009048:	e7ee      	b.n	8009028 <_calloc_r+0x2c>
 800904a:	4603      	mov	r3, r0
 800904c:	e7ec      	b.n	8009028 <_calloc_r+0x2c>
 800904e:	2100      	movs	r1, #0
 8009050:	f7fa fa62 	bl	8003518 <memset>
 8009054:	e7ec      	b.n	8009030 <_calloc_r+0x34>
	...

08009058 <_close_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	2300      	movs	r3, #0
 800905c:	4d05      	ldr	r5, [pc, #20]	; (8009074 <_close_r+0x1c>)
 800905e:	4604      	mov	r4, r0
 8009060:	4608      	mov	r0, r1
 8009062:	602b      	str	r3, [r5, #0]
 8009064:	f7f8 fc54 	bl	8001910 <_close>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	d102      	bne.n	8009072 <_close_r+0x1a>
 800906c:	682b      	ldr	r3, [r5, #0]
 800906e:	b103      	cbz	r3, 8009072 <_close_r+0x1a>
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	bd38      	pop	{r3, r4, r5, pc}
 8009074:	20000c5c 	.word	0x20000c5c

08009078 <_fclose_r>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	4606      	mov	r6, r0
 800907c:	460c      	mov	r4, r1
 800907e:	b911      	cbnz	r1, 8009086 <_fclose_r+0xe>
 8009080:	2500      	movs	r5, #0
 8009082:	4628      	mov	r0, r5
 8009084:	bd70      	pop	{r4, r5, r6, pc}
 8009086:	b118      	cbz	r0, 8009090 <_fclose_r+0x18>
 8009088:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800908a:	b90b      	cbnz	r3, 8009090 <_fclose_r+0x18>
 800908c:	f7fd feb0 	bl	8006df0 <__sinit>
 8009090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009092:	07d8      	lsls	r0, r3, #31
 8009094:	d405      	bmi.n	80090a2 <_fclose_r+0x2a>
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	0599      	lsls	r1, r3, #22
 800909a:	d402      	bmi.n	80090a2 <_fclose_r+0x2a>
 800909c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800909e:	f7fe f967 	bl	8007370 <__retarget_lock_acquire_recursive>
 80090a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090a6:	b93b      	cbnz	r3, 80090b8 <_fclose_r+0x40>
 80090a8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80090aa:	f015 0501 	ands.w	r5, r5, #1
 80090ae:	d1e7      	bne.n	8009080 <_fclose_r+0x8>
 80090b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090b2:	f7fe f95e 	bl	8007372 <__retarget_lock_release_recursive>
 80090b6:	e7e4      	b.n	8009082 <_fclose_r+0xa>
 80090b8:	4621      	mov	r1, r4
 80090ba:	4630      	mov	r0, r6
 80090bc:	f7fd fd9e 	bl	8006bfc <__sflush_r>
 80090c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80090c2:	4605      	mov	r5, r0
 80090c4:	b133      	cbz	r3, 80090d4 <_fclose_r+0x5c>
 80090c6:	4630      	mov	r0, r6
 80090c8:	69e1      	ldr	r1, [r4, #28]
 80090ca:	4798      	blx	r3
 80090cc:	2800      	cmp	r0, #0
 80090ce:	bfb8      	it	lt
 80090d0:	f04f 35ff 	movlt.w	r5, #4294967295
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	061a      	lsls	r2, r3, #24
 80090d8:	d503      	bpl.n	80090e2 <_fclose_r+0x6a>
 80090da:	4630      	mov	r0, r6
 80090dc:	6921      	ldr	r1, [r4, #16]
 80090de:	f7fd ff17 	bl	8006f10 <_free_r>
 80090e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80090e4:	b141      	cbz	r1, 80090f8 <_fclose_r+0x80>
 80090e6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80090ea:	4299      	cmp	r1, r3
 80090ec:	d002      	beq.n	80090f4 <_fclose_r+0x7c>
 80090ee:	4630      	mov	r0, r6
 80090f0:	f7fd ff0e 	bl	8006f10 <_free_r>
 80090f4:	2300      	movs	r3, #0
 80090f6:	6323      	str	r3, [r4, #48]	; 0x30
 80090f8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80090fa:	b121      	cbz	r1, 8009106 <_fclose_r+0x8e>
 80090fc:	4630      	mov	r0, r6
 80090fe:	f7fd ff07 	bl	8006f10 <_free_r>
 8009102:	2300      	movs	r3, #0
 8009104:	6463      	str	r3, [r4, #68]	; 0x44
 8009106:	f7fd fe5b 	bl	8006dc0 <__sfp_lock_acquire>
 800910a:	2300      	movs	r3, #0
 800910c:	81a3      	strh	r3, [r4, #12]
 800910e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009110:	07db      	lsls	r3, r3, #31
 8009112:	d402      	bmi.n	800911a <_fclose_r+0xa2>
 8009114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009116:	f7fe f92c 	bl	8007372 <__retarget_lock_release_recursive>
 800911a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800911c:	f7fe f927 	bl	800736e <__retarget_lock_close_recursive>
 8009120:	f7fd fe54 	bl	8006dcc <__sfp_lock_release>
 8009124:	e7ad      	b.n	8009082 <_fclose_r+0xa>
	...

08009128 <fiprintf>:
 8009128:	b40e      	push	{r1, r2, r3}
 800912a:	b503      	push	{r0, r1, lr}
 800912c:	4601      	mov	r1, r0
 800912e:	ab03      	add	r3, sp, #12
 8009130:	4805      	ldr	r0, [pc, #20]	; (8009148 <fiprintf+0x20>)
 8009132:	f853 2b04 	ldr.w	r2, [r3], #4
 8009136:	6800      	ldr	r0, [r0, #0]
 8009138:	9301      	str	r3, [sp, #4]
 800913a:	f7ff fa2f 	bl	800859c <_vfiprintf_r>
 800913e:	b002      	add	sp, #8
 8009140:	f85d eb04 	ldr.w	lr, [sp], #4
 8009144:	b003      	add	sp, #12
 8009146:	4770      	bx	lr
 8009148:	2000000c 	.word	0x2000000c

0800914c <__fputwc>:
 800914c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009150:	4680      	mov	r8, r0
 8009152:	460e      	mov	r6, r1
 8009154:	4615      	mov	r5, r2
 8009156:	f000 f885 	bl	8009264 <__locale_mb_cur_max>
 800915a:	2801      	cmp	r0, #1
 800915c:	4604      	mov	r4, r0
 800915e:	d11b      	bne.n	8009198 <__fputwc+0x4c>
 8009160:	1e73      	subs	r3, r6, #1
 8009162:	2bfe      	cmp	r3, #254	; 0xfe
 8009164:	d818      	bhi.n	8009198 <__fputwc+0x4c>
 8009166:	f88d 6004 	strb.w	r6, [sp, #4]
 800916a:	2700      	movs	r7, #0
 800916c:	f10d 0904 	add.w	r9, sp, #4
 8009170:	42a7      	cmp	r7, r4
 8009172:	d020      	beq.n	80091b6 <__fputwc+0x6a>
 8009174:	68ab      	ldr	r3, [r5, #8]
 8009176:	f817 1009 	ldrb.w	r1, [r7, r9]
 800917a:	3b01      	subs	r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	60ab      	str	r3, [r5, #8]
 8009180:	da04      	bge.n	800918c <__fputwc+0x40>
 8009182:	69aa      	ldr	r2, [r5, #24]
 8009184:	4293      	cmp	r3, r2
 8009186:	db1a      	blt.n	80091be <__fputwc+0x72>
 8009188:	290a      	cmp	r1, #10
 800918a:	d018      	beq.n	80091be <__fputwc+0x72>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	602a      	str	r2, [r5, #0]
 8009192:	7019      	strb	r1, [r3, #0]
 8009194:	3701      	adds	r7, #1
 8009196:	e7eb      	b.n	8009170 <__fputwc+0x24>
 8009198:	4632      	mov	r2, r6
 800919a:	4640      	mov	r0, r8
 800919c:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80091a0:	a901      	add	r1, sp, #4
 80091a2:	f000 f8e5 	bl	8009370 <_wcrtomb_r>
 80091a6:	1c42      	adds	r2, r0, #1
 80091a8:	4604      	mov	r4, r0
 80091aa:	d1de      	bne.n	800916a <__fputwc+0x1e>
 80091ac:	4606      	mov	r6, r0
 80091ae:	89ab      	ldrh	r3, [r5, #12]
 80091b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091b4:	81ab      	strh	r3, [r5, #12]
 80091b6:	4630      	mov	r0, r6
 80091b8:	b003      	add	sp, #12
 80091ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091be:	462a      	mov	r2, r5
 80091c0:	4640      	mov	r0, r8
 80091c2:	f000 f88b 	bl	80092dc <__swbuf_r>
 80091c6:	1c43      	adds	r3, r0, #1
 80091c8:	d1e4      	bne.n	8009194 <__fputwc+0x48>
 80091ca:	4606      	mov	r6, r0
 80091cc:	e7f3      	b.n	80091b6 <__fputwc+0x6a>

080091ce <_fputwc_r>:
 80091ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	07db      	lsls	r3, r3, #31
 80091d4:	4605      	mov	r5, r0
 80091d6:	460e      	mov	r6, r1
 80091d8:	4614      	mov	r4, r2
 80091da:	d405      	bmi.n	80091e8 <_fputwc_r+0x1a>
 80091dc:	8993      	ldrh	r3, [r2, #12]
 80091de:	0598      	lsls	r0, r3, #22
 80091e0:	d402      	bmi.n	80091e8 <_fputwc_r+0x1a>
 80091e2:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80091e4:	f7fe f8c4 	bl	8007370 <__retarget_lock_acquire_recursive>
 80091e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ec:	0499      	lsls	r1, r3, #18
 80091ee:	d406      	bmi.n	80091fe <_fputwc_r+0x30>
 80091f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80091f4:	81a3      	strh	r3, [r4, #12]
 80091f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80091fc:	6663      	str	r3, [r4, #100]	; 0x64
 80091fe:	4622      	mov	r2, r4
 8009200:	4628      	mov	r0, r5
 8009202:	4631      	mov	r1, r6
 8009204:	f7ff ffa2 	bl	800914c <__fputwc>
 8009208:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800920a:	4605      	mov	r5, r0
 800920c:	07da      	lsls	r2, r3, #31
 800920e:	d405      	bmi.n	800921c <_fputwc_r+0x4e>
 8009210:	89a3      	ldrh	r3, [r4, #12]
 8009212:	059b      	lsls	r3, r3, #22
 8009214:	d402      	bmi.n	800921c <_fputwc_r+0x4e>
 8009216:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009218:	f7fe f8ab 	bl	8007372 <__retarget_lock_release_recursive>
 800921c:	4628      	mov	r0, r5
 800921e:	bd70      	pop	{r4, r5, r6, pc}

08009220 <_fstat_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	2300      	movs	r3, #0
 8009224:	4d06      	ldr	r5, [pc, #24]	; (8009240 <_fstat_r+0x20>)
 8009226:	4604      	mov	r4, r0
 8009228:	4608      	mov	r0, r1
 800922a:	4611      	mov	r1, r2
 800922c:	602b      	str	r3, [r5, #0]
 800922e:	f7f8 fb7a 	bl	8001926 <_fstat>
 8009232:	1c43      	adds	r3, r0, #1
 8009234:	d102      	bne.n	800923c <_fstat_r+0x1c>
 8009236:	682b      	ldr	r3, [r5, #0]
 8009238:	b103      	cbz	r3, 800923c <_fstat_r+0x1c>
 800923a:	6023      	str	r3, [r4, #0]
 800923c:	bd38      	pop	{r3, r4, r5, pc}
 800923e:	bf00      	nop
 8009240:	20000c5c 	.word	0x20000c5c

08009244 <_isatty_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	2300      	movs	r3, #0
 8009248:	4d05      	ldr	r5, [pc, #20]	; (8009260 <_isatty_r+0x1c>)
 800924a:	4604      	mov	r4, r0
 800924c:	4608      	mov	r0, r1
 800924e:	602b      	str	r3, [r5, #0]
 8009250:	f7f8 fb78 	bl	8001944 <_isatty>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d102      	bne.n	800925e <_isatty_r+0x1a>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	b103      	cbz	r3, 800925e <_isatty_r+0x1a>
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	20000c5c 	.word	0x20000c5c

08009264 <__locale_mb_cur_max>:
 8009264:	4b01      	ldr	r3, [pc, #4]	; (800926c <__locale_mb_cur_max+0x8>)
 8009266:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800926a:	4770      	bx	lr
 800926c:	2000084c 	.word	0x2000084c

08009270 <_lseek_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	4604      	mov	r4, r0
 8009274:	4608      	mov	r0, r1
 8009276:	4611      	mov	r1, r2
 8009278:	2200      	movs	r2, #0
 800927a:	4d05      	ldr	r5, [pc, #20]	; (8009290 <_lseek_r+0x20>)
 800927c:	602a      	str	r2, [r5, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	f7f8 fb6a 	bl	8001958 <_lseek>
 8009284:	1c43      	adds	r3, r0, #1
 8009286:	d102      	bne.n	800928e <_lseek_r+0x1e>
 8009288:	682b      	ldr	r3, [r5, #0]
 800928a:	b103      	cbz	r3, 800928e <_lseek_r+0x1e>
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	bd38      	pop	{r3, r4, r5, pc}
 8009290:	20000c5c 	.word	0x20000c5c

08009294 <__ascii_mbtowc>:
 8009294:	b082      	sub	sp, #8
 8009296:	b901      	cbnz	r1, 800929a <__ascii_mbtowc+0x6>
 8009298:	a901      	add	r1, sp, #4
 800929a:	b142      	cbz	r2, 80092ae <__ascii_mbtowc+0x1a>
 800929c:	b14b      	cbz	r3, 80092b2 <__ascii_mbtowc+0x1e>
 800929e:	7813      	ldrb	r3, [r2, #0]
 80092a0:	600b      	str	r3, [r1, #0]
 80092a2:	7812      	ldrb	r2, [r2, #0]
 80092a4:	1e10      	subs	r0, r2, #0
 80092a6:	bf18      	it	ne
 80092a8:	2001      	movne	r0, #1
 80092aa:	b002      	add	sp, #8
 80092ac:	4770      	bx	lr
 80092ae:	4610      	mov	r0, r2
 80092b0:	e7fb      	b.n	80092aa <__ascii_mbtowc+0x16>
 80092b2:	f06f 0001 	mvn.w	r0, #1
 80092b6:	e7f8      	b.n	80092aa <__ascii_mbtowc+0x16>

080092b8 <_read_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	4604      	mov	r4, r0
 80092bc:	4608      	mov	r0, r1
 80092be:	4611      	mov	r1, r2
 80092c0:	2200      	movs	r2, #0
 80092c2:	4d05      	ldr	r5, [pc, #20]	; (80092d8 <_read_r+0x20>)
 80092c4:	602a      	str	r2, [r5, #0]
 80092c6:	461a      	mov	r2, r3
 80092c8:	f7f8 fb05 	bl	80018d6 <_read>
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	d102      	bne.n	80092d6 <_read_r+0x1e>
 80092d0:	682b      	ldr	r3, [r5, #0]
 80092d2:	b103      	cbz	r3, 80092d6 <_read_r+0x1e>
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	bd38      	pop	{r3, r4, r5, pc}
 80092d8:	20000c5c 	.word	0x20000c5c

080092dc <__swbuf_r>:
 80092dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092de:	460e      	mov	r6, r1
 80092e0:	4614      	mov	r4, r2
 80092e2:	4605      	mov	r5, r0
 80092e4:	b118      	cbz	r0, 80092ee <__swbuf_r+0x12>
 80092e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80092e8:	b90b      	cbnz	r3, 80092ee <__swbuf_r+0x12>
 80092ea:	f7fd fd81 	bl	8006df0 <__sinit>
 80092ee:	69a3      	ldr	r3, [r4, #24]
 80092f0:	60a3      	str	r3, [r4, #8]
 80092f2:	89a3      	ldrh	r3, [r4, #12]
 80092f4:	0719      	lsls	r1, r3, #28
 80092f6:	d529      	bpl.n	800934c <__swbuf_r+0x70>
 80092f8:	6923      	ldr	r3, [r4, #16]
 80092fa:	b33b      	cbz	r3, 800934c <__swbuf_r+0x70>
 80092fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009300:	b2f6      	uxtb	r6, r6
 8009302:	049a      	lsls	r2, r3, #18
 8009304:	4637      	mov	r7, r6
 8009306:	d52a      	bpl.n	800935e <__swbuf_r+0x82>
 8009308:	6823      	ldr	r3, [r4, #0]
 800930a:	6920      	ldr	r0, [r4, #16]
 800930c:	1a18      	subs	r0, r3, r0
 800930e:	6963      	ldr	r3, [r4, #20]
 8009310:	4283      	cmp	r3, r0
 8009312:	dc04      	bgt.n	800931e <__swbuf_r+0x42>
 8009314:	4621      	mov	r1, r4
 8009316:	4628      	mov	r0, r5
 8009318:	f7fd fcfe 	bl	8006d18 <_fflush_r>
 800931c:	b9e0      	cbnz	r0, 8009358 <__swbuf_r+0x7c>
 800931e:	68a3      	ldr	r3, [r4, #8]
 8009320:	3001      	adds	r0, #1
 8009322:	3b01      	subs	r3, #1
 8009324:	60a3      	str	r3, [r4, #8]
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	6022      	str	r2, [r4, #0]
 800932c:	701e      	strb	r6, [r3, #0]
 800932e:	6963      	ldr	r3, [r4, #20]
 8009330:	4283      	cmp	r3, r0
 8009332:	d004      	beq.n	800933e <__swbuf_r+0x62>
 8009334:	89a3      	ldrh	r3, [r4, #12]
 8009336:	07db      	lsls	r3, r3, #31
 8009338:	d506      	bpl.n	8009348 <__swbuf_r+0x6c>
 800933a:	2e0a      	cmp	r6, #10
 800933c:	d104      	bne.n	8009348 <__swbuf_r+0x6c>
 800933e:	4621      	mov	r1, r4
 8009340:	4628      	mov	r0, r5
 8009342:	f7fd fce9 	bl	8006d18 <_fflush_r>
 8009346:	b938      	cbnz	r0, 8009358 <__swbuf_r+0x7c>
 8009348:	4638      	mov	r0, r7
 800934a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800934c:	4621      	mov	r1, r4
 800934e:	4628      	mov	r0, r5
 8009350:	f7fc fda0 	bl	8005e94 <__swsetup_r>
 8009354:	2800      	cmp	r0, #0
 8009356:	d0d1      	beq.n	80092fc <__swbuf_r+0x20>
 8009358:	f04f 37ff 	mov.w	r7, #4294967295
 800935c:	e7f4      	b.n	8009348 <__swbuf_r+0x6c>
 800935e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009362:	81a3      	strh	r3, [r4, #12]
 8009364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009366:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800936a:	6663      	str	r3, [r4, #100]	; 0x64
 800936c:	e7cc      	b.n	8009308 <__swbuf_r+0x2c>
	...

08009370 <_wcrtomb_r>:
 8009370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009372:	4c09      	ldr	r4, [pc, #36]	; (8009398 <_wcrtomb_r+0x28>)
 8009374:	4605      	mov	r5, r0
 8009376:	461e      	mov	r6, r3
 8009378:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800937c:	b085      	sub	sp, #20
 800937e:	b909      	cbnz	r1, 8009384 <_wcrtomb_r+0x14>
 8009380:	460a      	mov	r2, r1
 8009382:	a901      	add	r1, sp, #4
 8009384:	47b8      	blx	r7
 8009386:	1c43      	adds	r3, r0, #1
 8009388:	bf01      	itttt	eq
 800938a:	2300      	moveq	r3, #0
 800938c:	6033      	streq	r3, [r6, #0]
 800938e:	238a      	moveq	r3, #138	; 0x8a
 8009390:	602b      	streq	r3, [r5, #0]
 8009392:	b005      	add	sp, #20
 8009394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009396:	bf00      	nop
 8009398:	2000084c 	.word	0x2000084c

0800939c <__ascii_wctomb>:
 800939c:	4603      	mov	r3, r0
 800939e:	4608      	mov	r0, r1
 80093a0:	b141      	cbz	r1, 80093b4 <__ascii_wctomb+0x18>
 80093a2:	2aff      	cmp	r2, #255	; 0xff
 80093a4:	d904      	bls.n	80093b0 <__ascii_wctomb+0x14>
 80093a6:	228a      	movs	r2, #138	; 0x8a
 80093a8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	4770      	bx	lr
 80093b0:	2001      	movs	r0, #1
 80093b2:	700a      	strb	r2, [r1, #0]
 80093b4:	4770      	bx	lr

080093b6 <abort>:
 80093b6:	2006      	movs	r0, #6
 80093b8:	b508      	push	{r3, lr}
 80093ba:	f000 f82d 	bl	8009418 <raise>
 80093be:	2001      	movs	r0, #1
 80093c0:	f7f8 fa7f 	bl	80018c2 <_exit>

080093c4 <_raise_r>:
 80093c4:	291f      	cmp	r1, #31
 80093c6:	b538      	push	{r3, r4, r5, lr}
 80093c8:	4604      	mov	r4, r0
 80093ca:	460d      	mov	r5, r1
 80093cc:	d904      	bls.n	80093d8 <_raise_r+0x14>
 80093ce:	2316      	movs	r3, #22
 80093d0:	6003      	str	r3, [r0, #0]
 80093d2:	f04f 30ff 	mov.w	r0, #4294967295
 80093d6:	bd38      	pop	{r3, r4, r5, pc}
 80093d8:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 80093dc:	b112      	cbz	r2, 80093e4 <_raise_r+0x20>
 80093de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093e2:	b94b      	cbnz	r3, 80093f8 <_raise_r+0x34>
 80093e4:	4620      	mov	r0, r4
 80093e6:	f000 f831 	bl	800944c <_getpid_r>
 80093ea:	462a      	mov	r2, r5
 80093ec:	4601      	mov	r1, r0
 80093ee:	4620      	mov	r0, r4
 80093f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093f4:	f000 b818 	b.w	8009428 <_kill_r>
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d00a      	beq.n	8009412 <_raise_r+0x4e>
 80093fc:	1c59      	adds	r1, r3, #1
 80093fe:	d103      	bne.n	8009408 <_raise_r+0x44>
 8009400:	2316      	movs	r3, #22
 8009402:	6003      	str	r3, [r0, #0]
 8009404:	2001      	movs	r0, #1
 8009406:	e7e6      	b.n	80093d6 <_raise_r+0x12>
 8009408:	2400      	movs	r4, #0
 800940a:	4628      	mov	r0, r5
 800940c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009410:	4798      	blx	r3
 8009412:	2000      	movs	r0, #0
 8009414:	e7df      	b.n	80093d6 <_raise_r+0x12>
	...

08009418 <raise>:
 8009418:	4b02      	ldr	r3, [pc, #8]	; (8009424 <raise+0xc>)
 800941a:	4601      	mov	r1, r0
 800941c:	6818      	ldr	r0, [r3, #0]
 800941e:	f7ff bfd1 	b.w	80093c4 <_raise_r>
 8009422:	bf00      	nop
 8009424:	2000000c 	.word	0x2000000c

08009428 <_kill_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	2300      	movs	r3, #0
 800942c:	4d06      	ldr	r5, [pc, #24]	; (8009448 <_kill_r+0x20>)
 800942e:	4604      	mov	r4, r0
 8009430:	4608      	mov	r0, r1
 8009432:	4611      	mov	r1, r2
 8009434:	602b      	str	r3, [r5, #0]
 8009436:	f7f8 fa34 	bl	80018a2 <_kill>
 800943a:	1c43      	adds	r3, r0, #1
 800943c:	d102      	bne.n	8009444 <_kill_r+0x1c>
 800943e:	682b      	ldr	r3, [r5, #0]
 8009440:	b103      	cbz	r3, 8009444 <_kill_r+0x1c>
 8009442:	6023      	str	r3, [r4, #0]
 8009444:	bd38      	pop	{r3, r4, r5, pc}
 8009446:	bf00      	nop
 8009448:	20000c5c 	.word	0x20000c5c

0800944c <_getpid_r>:
 800944c:	f7f8 ba22 	b.w	8001894 <_getpid>

08009450 <_init>:
 8009450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009452:	bf00      	nop
 8009454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009456:	bc08      	pop	{r3}
 8009458:	469e      	mov	lr, r3
 800945a:	4770      	bx	lr

0800945c <_fini>:
 800945c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945e:	bf00      	nop
 8009460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009462:	bc08      	pop	{r3}
 8009464:	469e      	mov	lr, r3
 8009466:	4770      	bx	lr
